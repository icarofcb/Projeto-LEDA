
LEDA-F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800ace0  0800ace0  0001ace0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2dc  0800b2dc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2dc  0800b2dc  0001b2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2e4  0800b2e4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2e4  0800b2e4  0001b2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2e8  0800b2e8  0001b2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b2ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000002dc  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004bc  200004bc  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013b25  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000237f  00000000  00000000  00033d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001210  00000000  00000000  000360b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001150  00000000  00000000  000372c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023bd1  00000000  00000000  00038418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001413d  00000000  00000000  0005bfe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddffb  00000000  00000000  00070126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014e121  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063e8  00000000  00000000  0014e174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800acc8 	.word	0x0800acc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800acc8 	.word	0x0800acc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MPU6050_Init>:
#endif

//==========ACELEROMETRO==========//

void MPU6050_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	2301      	movs	r3, #1
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2301      	movs	r3, #1
 800100e:	2275      	movs	r2, #117	; 0x75
 8001010:	21d0      	movs	r1, #208	; 0xd0
 8001012:	4823      	ldr	r0, [pc, #140]	; (80010a0 <MPU6050_Init+0xa8>)
 8001014:	f003 f936 	bl	8004284 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	2b68      	cmp	r3, #104	; 0x68
 800101c:	d13b      	bne.n	8001096 <MPU6050_Init+0x9e>
	{
		Data = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2301      	movs	r3, #1
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	1dbb      	adds	r3, r7, #6
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	226b      	movs	r2, #107	; 0x6b
 8001034:	21d0      	movs	r1, #208	; 0xd0
 8001036:	481a      	ldr	r0, [pc, #104]	; (80010a0 <MPU6050_Init+0xa8>)
 8001038:	f003 f82a 	bl	8004090 <HAL_I2C_Mem_Write>

		Data = 0x07;
 800103c:	2307      	movs	r3, #7
 800103e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8001040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	2301      	movs	r3, #1
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	1dbb      	adds	r3, r7, #6
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	2219      	movs	r2, #25
 8001052:	21d0      	movs	r1, #208	; 0xd0
 8001054:	4812      	ldr	r0, [pc, #72]	; (80010a0 <MPU6050_Init+0xa8>)
 8001056:	f003 f81b 	bl	8004090 <HAL_I2C_Mem_Write>

		Data = 0x00;
 800105a:	2300      	movs	r3, #0
 800105c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	2301      	movs	r3, #1
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	1dbb      	adds	r3, r7, #6
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	221c      	movs	r2, #28
 8001070:	21d0      	movs	r1, #208	; 0xd0
 8001072:	480b      	ldr	r0, [pc, #44]	; (80010a0 <MPU6050_Init+0xa8>)
 8001074:	f003 f80c 	bl	8004090 <HAL_I2C_Mem_Write>

		Data = 0x00;
 8001078:	2300      	movs	r3, #0
 800107a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 800107c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001080:	9302      	str	r3, [sp, #8]
 8001082:	2301      	movs	r3, #1
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	1dbb      	adds	r3, r7, #6
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	221b      	movs	r2, #27
 800108e:	21d0      	movs	r1, #208	; 0xd0
 8001090:	4803      	ldr	r0, [pc, #12]	; (80010a0 <MPU6050_Init+0xa8>)
 8001092:	f002 fffd 	bl	8004090 <HAL_I2C_Mem_Write>
	}

}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000026c 	.word	0x2000026c

080010a4 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	int16_t Accel_X_RAW = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	81fb      	strh	r3, [r7, #14]
	int16_t Accel_Y_RAW = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	81bb      	strh	r3, [r7, #12]
	int16_t Accel_Z_RAW = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80010b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2306      	movs	r3, #6
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	223b      	movs	r2, #59	; 0x3b
 80010c8:	21d0      	movs	r1, #208	; 0xd0
 80010ca:	4853      	ldr	r0, [pc, #332]	; (8001218 <MPU6050_Read_Accel+0x174>)
 80010cc:	f003 f8da 	bl	8004284 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80010d0:	793b      	ldrb	r3, [r7, #4]
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	797b      	ldrb	r3, [r7, #5]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	4313      	orrs	r3, r2
 80010dc:	81fb      	strh	r3, [r7, #14]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	81bb      	strh	r3, [r7, #12]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80010ec:	7a3b      	ldrb	r3, [r7, #8]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	7a7b      	ldrb	r3, [r7, #9]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	817b      	strh	r3, [r7, #10]

	MPU6050.ax = ((float)Accel_X_RAW/16384.0)*10;
 80010fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001106:	ee17 0a90 	vmov	r0, s15
 800110a:	f7ff fa1d 	bl	8000548 <__aeabi_f2d>
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	4b42      	ldr	r3, [pc, #264]	; (800121c <MPU6050_Read_Accel+0x178>)
 8001114:	f7ff fb9a 	bl	800084c <__aeabi_ddiv>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4610      	mov	r0, r2
 800111e:	4619      	mov	r1, r3
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	4b3e      	ldr	r3, [pc, #248]	; (8001220 <MPU6050_Read_Accel+0x17c>)
 8001126:	f7ff fa67 	bl	80005f8 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f7ff fd59 	bl	8000be8 <__aeabi_d2f>
 8001136:	4603      	mov	r3, r0
 8001138:	4a3a      	ldr	r2, [pc, #232]	; (8001224 <MPU6050_Read_Accel+0x180>)
 800113a:	6013      	str	r3, [r2, #0]
	MPU6050.ay = ((float)Accel_Y_RAW/16384.0)*10;
 800113c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001140:	ee07 3a90 	vmov	s15, r3
 8001144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001148:	ee17 0a90 	vmov	r0, s15
 800114c:	f7ff f9fc 	bl	8000548 <__aeabi_f2d>
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	4b31      	ldr	r3, [pc, #196]	; (800121c <MPU6050_Read_Accel+0x178>)
 8001156:	f7ff fb79 	bl	800084c <__aeabi_ddiv>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	4b2e      	ldr	r3, [pc, #184]	; (8001220 <MPU6050_Read_Accel+0x17c>)
 8001168:	f7ff fa46 	bl	80005f8 <__aeabi_dmul>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fd38 	bl	8000be8 <__aeabi_d2f>
 8001178:	4603      	mov	r3, r0
 800117a:	4a2a      	ldr	r2, [pc, #168]	; (8001224 <MPU6050_Read_Accel+0x180>)
 800117c:	6053      	str	r3, [r2, #4]
	MPU6050.az = ((float)Accel_Z_RAW/16384.0)*10;
 800117e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001182:	ee07 3a90 	vmov	s15, r3
 8001186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800118a:	ee17 0a90 	vmov	r0, s15
 800118e:	f7ff f9db 	bl	8000548 <__aeabi_f2d>
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <MPU6050_Read_Accel+0x178>)
 8001198:	f7ff fb58 	bl	800084c <__aeabi_ddiv>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <MPU6050_Read_Accel+0x17c>)
 80011aa:	f7ff fa25 	bl	80005f8 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	f7ff fd17 	bl	8000be8 <__aeabi_d2f>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a19      	ldr	r2, [pc, #100]	; (8001224 <MPU6050_Read_Accel+0x180>)
 80011be:	6093      	str	r3, [r2, #8]

	average.ax = mvAx(MPU6050.ax, numberOfIterations);
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <MPU6050_Read_Accel+0x180>)
 80011c2:	edd3 7a00 	vldr	s15, [r3]
 80011c6:	200a      	movs	r0, #10
 80011c8:	eeb0 0a67 	vmov.f32	s0, s15
 80011cc:	f000 f9c8 	bl	8001560 <mvAx>
 80011d0:	eef0 7a40 	vmov.f32	s15, s0
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MPU6050_Read_Accel+0x184>)
 80011d6:	edc3 7a00 	vstr	s15, [r3]
	average.ay = mvAy(MPU6050.ay, numberOfIterations);
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MPU6050_Read_Accel+0x180>)
 80011dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80011e0:	200a      	movs	r0, #10
 80011e2:	eeb0 0a67 	vmov.f32	s0, s15
 80011e6:	f000 fa07 	bl	80015f8 <mvAy>
 80011ea:	eef0 7a40 	vmov.f32	s15, s0
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MPU6050_Read_Accel+0x184>)
 80011f0:	edc3 7a01 	vstr	s15, [r3, #4]
	average.az = mvAy(MPU6050.az, numberOfIterations);
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MPU6050_Read_Accel+0x180>)
 80011f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011fa:	200a      	movs	r0, #10
 80011fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001200:	f000 f9fa 	bl	80015f8 <mvAy>
 8001204:	eef0 7a40 	vmov.f32	s15, s0
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <MPU6050_Read_Accel+0x184>)
 800120a:	edc3 7a02 	vstr	s15, [r3, #8]

}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000026c 	.word	0x2000026c
 800121c:	40d00000 	.word	0x40d00000
 8001220:	40240000 	.word	0x40240000
 8001224:	20000424 	.word	0x20000424
 8001228:	2000043c 	.word	0x2000043c

0800122c <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro  (void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	int16_t Gyro_X_RAW = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	81fb      	strh	r3, [r7, #14]
	int16_t Gyro_Y_RAW = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	81bb      	strh	r3, [r7, #12]
	int16_t Gyro_Z_RAW = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	9302      	str	r3, [sp, #8]
 8001244:	2306      	movs	r3, #6
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	2243      	movs	r2, #67	; 0x43
 8001250:	21d0      	movs	r1, #208	; 0xd0
 8001252:	4821      	ldr	r0, [pc, #132]	; (80012d8 <MPU6050_Read_Gyro+0xac>)
 8001254:	f003 f816 	bl	8004284 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001258:	793b      	ldrb	r3, [r7, #4]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b21a      	sxth	r2, r3
 800125e:	797b      	ldrb	r3, [r7, #5]
 8001260:	b21b      	sxth	r3, r3
 8001262:	4313      	orrs	r3, r2
 8001264:	81fb      	strh	r3, [r7, #14]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001266:	79bb      	ldrb	r3, [r7, #6]
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	b21a      	sxth	r2, r3
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	b21b      	sxth	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	81bb      	strh	r3, [r7, #12]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001274:	7a3b      	ldrb	r3, [r7, #8]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21a      	sxth	r2, r3
 800127a:	7a7b      	ldrb	r3, [r7, #9]
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	817b      	strh	r3, [r7, #10]

	MPU6050.gx = (float)Gyro_X_RAW/131.0;
 8001282:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001286:	ee07 3a90 	vmov	s15, r3
 800128a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128e:	eddf 6a13 	vldr	s13, [pc, #76]	; 80012dc <MPU6050_Read_Gyro+0xb0>
 8001292:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MPU6050_Read_Gyro+0xb4>)
 8001298:	edc3 7a03 	vstr	s15, [r3, #12]
	MPU6050.gy = (float)Gyro_Y_RAW/131.0;
 800129c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80012dc <MPU6050_Read_Gyro+0xb0>
 80012ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MPU6050_Read_Gyro+0xb4>)
 80012b2:	edc3 7a04 	vstr	s15, [r3, #16]
	MPU6050.gz = (float)Gyro_Z_RAW/131.0;
 80012b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012ba:	ee07 3a90 	vmov	s15, r3
 80012be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c2:	eddf 6a06 	vldr	s13, [pc, #24]	; 80012dc <MPU6050_Read_Gyro+0xb0>
 80012c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <MPU6050_Read_Gyro+0xb4>)
 80012cc:	edc3 7a05 	vstr	s15, [r3, #20]

	//average.gx = mvGx(MPU6050.gx, numberOfIterations);
	//average.gy = mvGy(MPU6050.gy, numberOfIterations);
	//average.gz = mvGy(MPU6050.gz, numberOfIterations);

}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000026c 	.word	0x2000026c
 80012dc:	43030000 	.word	0x43030000
 80012e0:	20000424 	.word	0x20000424

080012e4 <Nextion_SendString>:


//==========NEXTION==========//

void Nextion_SendString(char *ID,char *string)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b094      	sub	sp, #80	; 0x50
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
	uint8_t Cmd_End[3] = {0xFF, 0xFF, 0xFF};
 80012ee:	4a14      	ldr	r2, [pc, #80]	; (8001340 <Nextion_SendString+0x5c>)
 80012f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	4611      	mov	r1, r2
 80012f8:	8019      	strh	r1, [r3, #0]
 80012fa:	3302      	adds	r3, #2
 80012fc:	0c12      	lsrs	r2, r2, #16
 80012fe:	701a      	strb	r2, [r3, #0]

	char buf[64];

	sprintf(buf,"%s.txt=\"%s\"", ID, string);
 8001300:	f107 000c 	add.w	r0, r7, #12
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	490e      	ldr	r1, [pc, #56]	; (8001344 <Nextion_SendString+0x60>)
 800130a:	f005 feed 	bl	80070e8 <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 100);
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4618      	mov	r0, r3
 8001314:	f7fe ff5c 	bl	80001d0 <strlen>
 8001318:	4603      	mov	r3, r0
 800131a:	b29a      	uxth	r2, r3
 800131c:	f107 010c 	add.w	r1, r7, #12
 8001320:	2364      	movs	r3, #100	; 0x64
 8001322:	4809      	ldr	r0, [pc, #36]	; (8001348 <Nextion_SendString+0x64>)
 8001324:	f004 fcb9 	bl	8005c9a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 10);
 8001328:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800132c:	230a      	movs	r3, #10
 800132e:	2203      	movs	r2, #3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <Nextion_SendString+0x64>)
 8001332:	f004 fcb2 	bl	8005c9a <HAL_UART_Transmit>
}
 8001336:	bf00      	nop
 8001338:	3750      	adds	r7, #80	; 0x50
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	0800ad98 	.word	0x0800ad98
 8001344:	0800ad8c 	.word	0x0800ad8c
 8001348:	20000350 	.word	0x20000350

0800134c <Nextion_Sendfloat>:
	sprintf(buf,"%d",var);
	Nextion_SendString(ID,buf);
}

void Nextion_Sendfloat(char *ID,float var)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b092      	sub	sp, #72	; 0x48
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	ed87 0a00 	vstr	s0, [r7]
	char buf[64];
	sprintf(buf,"%.2f",var);
 8001358:	6838      	ldr	r0, [r7, #0]
 800135a:	f7ff f8f5 	bl	8000548 <__aeabi_f2d>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	f107 0008 	add.w	r0, r7, #8
 8001366:	4906      	ldr	r1, [pc, #24]	; (8001380 <Nextion_Sendfloat+0x34>)
 8001368:	f005 febe 	bl	80070e8 <siprintf>
	Nextion_SendString(ID,buf);
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	4619      	mov	r1, r3
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffb6 	bl	80012e4 <Nextion_SendString>
}
 8001378:	bf00      	nop
 800137a:	3748      	adds	r7, #72	; 0x48
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	0800ada0 	.word	0x0800ada0

08001384 <updateDisplay>:

void updateDisplay(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	Nextion_Sendfloat("ax", average.ax);
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <updateDisplay+0xa4>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	eeb0 0a67 	vmov.f32	s0, s15
 8001392:	4826      	ldr	r0, [pc, #152]	; (800142c <updateDisplay+0xa8>)
 8001394:	f7ff ffda 	bl	800134c <Nextion_Sendfloat>
	Nextion_Sendfloat("ay", average.ay);
 8001398:	4b23      	ldr	r3, [pc, #140]	; (8001428 <updateDisplay+0xa4>)
 800139a:	edd3 7a01 	vldr	s15, [r3, #4]
 800139e:	eeb0 0a67 	vmov.f32	s0, s15
 80013a2:	4823      	ldr	r0, [pc, #140]	; (8001430 <updateDisplay+0xac>)
 80013a4:	f7ff ffd2 	bl	800134c <Nextion_Sendfloat>
	Nextion_Sendfloat("az", average.az);
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <updateDisplay+0xa4>)
 80013aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80013ae:	eeb0 0a67 	vmov.f32	s0, s15
 80013b2:	4820      	ldr	r0, [pc, #128]	; (8001434 <updateDisplay+0xb0>)
 80013b4:	f7ff ffca 	bl	800134c <Nextion_Sendfloat>

	Nextion_Sendfloat("gx", MPU6050.gx/10);
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <updateDisplay+0xb4>)
 80013ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80013be:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80013c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013c6:	eeb0 0a47 	vmov.f32	s0, s14
 80013ca:	481c      	ldr	r0, [pc, #112]	; (800143c <updateDisplay+0xb8>)
 80013cc:	f7ff ffbe 	bl	800134c <Nextion_Sendfloat>
	Nextion_Sendfloat("gy", MPU6050.gy/10);
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <updateDisplay+0xb4>)
 80013d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80013d6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80013da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013de:	eeb0 0a47 	vmov.f32	s0, s14
 80013e2:	4817      	ldr	r0, [pc, #92]	; (8001440 <updateDisplay+0xbc>)
 80013e4:	f7ff ffb2 	bl	800134c <Nextion_Sendfloat>
	Nextion_Sendfloat("gz", MPU6050.gz/10);
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <updateDisplay+0xb4>)
 80013ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80013ee:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80013f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013f6:	eeb0 0a47 	vmov.f32	s0, s14
 80013fa:	4812      	ldr	r0, [pc, #72]	; (8001444 <updateDisplay+0xc0>)
 80013fc:	f7ff ffa6 	bl	800134c <Nextion_Sendfloat>

	//Nextion_Sendfloat("gx", average.gx);
	//Nextion_Sendfloat("gy", average.gy);
	//Nextion_Sendfloat("gz", average.gz);

	Nextion_SendString("lat", "-19,92449");
 8001400:	4911      	ldr	r1, [pc, #68]	; (8001448 <updateDisplay+0xc4>)
 8001402:	4812      	ldr	r0, [pc, #72]	; (800144c <updateDisplay+0xc8>)
 8001404:	f7ff ff6e 	bl	80012e4 <Nextion_SendString>
	Nextion_SendString("long","-43,99313");
 8001408:	4911      	ldr	r1, [pc, #68]	; (8001450 <updateDisplay+0xcc>)
 800140a:	4812      	ldr	r0, [pc, #72]	; (8001454 <updateDisplay+0xd0>)
 800140c:	f7ff ff6a 	bl	80012e4 <Nextion_SendString>

	Nextion_Sendfloat("temp", ADC_Select_CHTemp());
 8001410:	f000 f826 	bl	8001460 <ADC_Select_CHTemp>
 8001414:	eef0 7a40 	vmov.f32	s15, s0
 8001418:	eeb0 0a67 	vmov.f32	s0, s15
 800141c:	480e      	ldr	r0, [pc, #56]	; (8001458 <updateDisplay+0xd4>)
 800141e:	f7ff ff95 	bl	800134c <Nextion_Sendfloat>


}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	2000043c 	.word	0x2000043c
 800142c:	0800ada8 	.word	0x0800ada8
 8001430:	0800adac 	.word	0x0800adac
 8001434:	0800adb0 	.word	0x0800adb0
 8001438:	20000424 	.word	0x20000424
 800143c:	0800adb4 	.word	0x0800adb4
 8001440:	0800adb8 	.word	0x0800adb8
 8001444:	0800adbc 	.word	0x0800adbc
 8001448:	0800adc0 	.word	0x0800adc0
 800144c:	0800adcc 	.word	0x0800adcc
 8001450:	0800add0 	.word	0x0800add0
 8001454:	0800addc 	.word	0x0800addc
 8001458:	0800ade4 	.word	0x0800ade4
 800145c:	00000000 	.word	0x00000000

08001460 <ADC_Select_CHTemp>:

//==========TEMP==========//

float ADC_Select_CHTemp(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0

	float Temp = 0;
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

	uint16_t ADC_READING = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	827b      	strh	r3, [r7, #18]

	ADC_ChannelConfTypeDef sConfig = {0};
 8001470:	463b      	mov	r3, r7
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800147c:	2310      	movs	r3, #16
 800147e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001480:	2301      	movs	r3, #1
 8001482:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001484:	463b      	mov	r3, r7
 8001486:	4619      	mov	r1, r3
 8001488:	4833      	ldr	r0, [pc, #204]	; (8001558 <ADC_Select_CHTemp+0xf8>)
 800148a:	f001 f95b 	bl	8002744 <HAL_ADC_ConfigChannel>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <ADC_Select_CHTemp+0x38>
	{
	  Error_Handler();
 8001494:	f000 fbea 	bl	8001c6c <Error_Handler>
	}

	HAL_ADC_Start(&hadc1);
 8001498:	482f      	ldr	r0, [pc, #188]	; (8001558 <ADC_Select_CHTemp+0xf8>)
 800149a:	f000 ffb5 	bl	8002408 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800149e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014a2:	482d      	ldr	r0, [pc, #180]	; (8001558 <ADC_Select_CHTemp+0xf8>)
 80014a4:	f001 f8b5 	bl	8002612 <HAL_ADC_PollForConversion>
	ADC_READING = HAL_ADC_GetValue(&hadc1);
 80014a8:	482b      	ldr	r0, [pc, #172]	; (8001558 <ADC_Select_CHTemp+0xf8>)
 80014aa:	f001 f93d 	bl	8002728 <HAL_ADC_GetValue>
 80014ae:	4603      	mov	r3, r0
 80014b0:	827b      	strh	r3, [r7, #18]
	HAL_ADC_Stop(&hadc1);
 80014b2:	4829      	ldr	r0, [pc, #164]	; (8001558 <ADC_Select_CHTemp+0xf8>)
 80014b4:	f001 f87a 	bl	80025ac <HAL_ADC_Stop>

	Temp = ((3.3*ADC_READING/4095 - V25)/Avg_Slope)+25;
 80014b8:	8a7b      	ldrh	r3, [r7, #18]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f832 	bl	8000524 <__aeabi_i2d>
 80014c0:	a31d      	add	r3, pc, #116	; (adr r3, 8001538 <ADC_Select_CHTemp+0xd8>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7ff f897 	bl	80005f8 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	a31b      	add	r3, pc, #108	; (adr r3, 8001540 <ADC_Select_CHTemp+0xe0>)
 80014d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d8:	f7ff f9b8 	bl	800084c <__aeabi_ddiv>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	a318      	add	r3, pc, #96	; (adr r3, 8001548 <ADC_Select_CHTemp+0xe8>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	f7fe fecd 	bl	8000288 <__aeabi_dsub>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	a316      	add	r3, pc, #88	; (adr r3, 8001550 <ADC_Select_CHTemp+0xf0>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7ff f9a6 	bl	800084c <__aeabi_ddiv>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <ADC_Select_CHTemp+0xfc>)
 800150e:	f7fe febd 	bl	800028c <__adddf3>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff fb65 	bl	8000be8 <__aeabi_d2f>
 800151e:	4603      	mov	r3, r0
 8001520:	617b      	str	r3, [r7, #20]

	return Temp;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	ee07 3a90 	vmov	s15, r3
}
 8001528:	eeb0 0a67 	vmov.f32	s0, s15
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	f3af 8000 	nop.w
 8001538:	66666666 	.word	0x66666666
 800153c:	400a6666 	.word	0x400a6666
 8001540:	00000000 	.word	0x00000000
 8001544:	40affe00 	.word	0x40affe00
 8001548:	851eb852 	.word	0x851eb852
 800154c:	3fe851eb 	.word	0x3fe851eb
 8001550:	47ae147b 	.word	0x47ae147b
 8001554:	3f647ae1 	.word	0x3f647ae1
 8001558:	200001fc 	.word	0x200001fc
 800155c:	40390000 	.word	0x40390000

08001560 <mvAx>:

//==========MATH==========//

float mvAx(float content, const int n)
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	ed87 0a01 	vstr	s0, [r7, #4]
 800156a:	6038      	str	r0, [r7, #0]
	float acc = 0;
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	617b      	str	r3, [r7, #20]

	static float  numbersAx[numberOfIterations];

	for(int i= n-1; i>0; i--) numbersAx[i] = numbersAx[i-1]; //pay attention to n-1
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	3b01      	subs	r3, #1
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	e00d      	b.n	8001596 <mvAx+0x36>
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	3b01      	subs	r3, #1
 800157e:	4a1d      	ldr	r2, [pc, #116]	; (80015f4 <mvAx+0x94>)
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	491b      	ldr	r1, [pc, #108]	; (80015f4 <mvAx+0x94>)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	3b01      	subs	r3, #1
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	2b00      	cmp	r3, #0
 800159a:	dcee      	bgt.n	800157a <mvAx+0x1a>

	numbersAx[0] = content;
 800159c:	4a15      	ldr	r2, [pc, #84]	; (80015f4 <mvAx+0x94>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6013      	str	r3, [r2, #0]

	for(int i=0; i<n; i++) acc += numbersAx[i];
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	e00e      	b.n	80015c6 <mvAx+0x66>
 80015a8:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <mvAx+0x94>)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80015b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015bc:	edc7 7a05 	vstr	s15, [r7, #20]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3301      	adds	r3, #1
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbec      	blt.n	80015a8 <mvAx+0x48>

	return acc/n;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80015dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015e0:	eef0 7a66 	vmov.f32	s15, s13
}
 80015e4:	eeb0 0a67 	vmov.f32	s0, s15
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000454 	.word	0x20000454

080015f8 <mvAy>:

float mvAy(float content, const int n)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001602:	6038      	str	r0, [r7, #0]
	float acc = 0;
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	617b      	str	r3, [r7, #20]

	static float  numbersAy[numberOfIterations];

	for(int i= n-1; i>0; i--) numbersAy[i] = numbersAy[i-1]; //pay attention to n-1
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	3b01      	subs	r3, #1
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	e00d      	b.n	800162e <mvAy+0x36>
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	3b01      	subs	r3, #1
 8001616:	4a1d      	ldr	r2, [pc, #116]	; (800168c <mvAy+0x94>)
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	491b      	ldr	r1, [pc, #108]	; (800168c <mvAy+0x94>)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	3b01      	subs	r3, #1
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	2b00      	cmp	r3, #0
 8001632:	dcee      	bgt.n	8001612 <mvAy+0x1a>

	numbersAy[0] = content;
 8001634:	4a15      	ldr	r2, [pc, #84]	; (800168c <mvAy+0x94>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]

	for(int i=0; i<n; i++) acc += numbersAy[i];
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	e00e      	b.n	800165e <mvAy+0x66>
 8001640:	4a12      	ldr	r2, [pc, #72]	; (800168c <mvAy+0x94>)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	edd3 7a00 	vldr	s15, [r3]
 800164c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001654:	edc7 7a05 	vstr	s15, [r7, #20]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3301      	adds	r3, #1
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	dbec      	blt.n	8001640 <mvAy+0x48>

	return acc/n;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001670:	ed97 7a05 	vldr	s14, [r7, #20]
 8001674:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001678:	eef0 7a66 	vmov.f32	s15, s13
}
 800167c:	eeb0 0a67 	vmov.f32	s0, s15
 8001680:	371c      	adds	r7, #28
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	2000047c 	.word	0x2000047c

08001690 <invertLed>:
}

//==========MCU==========//

void invertLed(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <invertLed+0x14>)
 800169a:	f002 fb9a 	bl	8003dd2 <HAL_GPIO_TogglePin>
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40021400 	.word	0x40021400

080016a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	if(htim==&htim14)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d107      	bne.n	80016c8 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		MPU6050_Read_Accel();
 80016b8:	f7ff fcf4 	bl	80010a4 <MPU6050_Read_Accel>
		MPU6050_Read_Gyro();
 80016bc:	f7ff fdb6 	bl	800122c <MPU6050_Read_Gyro>

		updateDisplay();
 80016c0:	f7ff fe60 	bl	8001384 <updateDisplay>

		invertLed();
 80016c4:	f7ff ffe4 	bl	8001690 <invertLed>
	}

	if(htim==&htim13)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d101      	bne.n	80016d4 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		sendCan();
 80016d0:	f000 f828 	bl	8001724 <sendCan>
	}
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000308 	.word	0x20000308
 80016e0:	200002c0 	.word	0x200002c0

080016e4 <HAL_CAN_RxFifo0MsgPendingCallback>:
}

//==========CAN==========//

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData);
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80016ee:	4a09      	ldr	r2, [pc, #36]	; (8001714 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80016f0:	2100      	movs	r1, #0
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f001 fd3f 	bl	8003176 <HAL_CAN_GetRxMessage>
	Nextion_SendString("cam", "LED sinc via CAN");
 80016f8:	4907      	ldr	r1, [pc, #28]	; (8001718 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80016fa:	4808      	ldr	r0, [pc, #32]	; (800171c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80016fc:	f7ff fdf2 	bl	80012e4 <Nextion_SendString>
	dataCheck = 1;
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000414 	.word	0x20000414
 8001714:	200003f0 	.word	0x200003f0
 8001718:	0800adec 	.word	0x0800adec
 800171c:	0800ae00 	.word	0x0800ae00
 8001720:	20000420 	.word	0x20000420

08001724 <sendCan>:

void sendCan()
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	txData[0] = 6;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <sendCan+0x2c>)
 800172a:	2206      	movs	r2, #6
 800172c:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800172e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001732:	4808      	ldr	r0, [pc, #32]	; (8001754 <sendCan+0x30>)
 8001734:	f002 fb4d 	bl	8003dd2 <HAL_GPIO_TogglePin>
	HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, &txMailBox);
 8001738:	4b07      	ldr	r3, [pc, #28]	; (8001758 <sendCan+0x34>)
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <sendCan+0x2c>)
 800173c:	4907      	ldr	r1, [pc, #28]	; (800175c <sendCan+0x38>)
 800173e:	4808      	ldr	r0, [pc, #32]	; (8001760 <sendCan+0x3c>)
 8001740:	f001 fc3e 	bl	8002fc0 <HAL_CAN_AddTxMessage>

	Nextion_SendString("cam", "Mensagem enviada CAN");
 8001744:	4907      	ldr	r1, [pc, #28]	; (8001764 <sendCan+0x40>)
 8001746:	4808      	ldr	r0, [pc, #32]	; (8001768 <sendCan+0x44>)
 8001748:	f7ff fdcc 	bl	80012e4 <Nextion_SendString>
	/*
	 * CANTX - PA12
	 * CANRX - PA11
	 */
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	2000040c 	.word	0x2000040c
 8001754:	40021400 	.word	0x40021400
 8001758:	2000041c 	.word	0x2000041c
 800175c:	200003d8 	.word	0x200003d8
 8001760:	20000244 	.word	0x20000244
 8001764:	0800ae04 	.word	0x0800ae04
 8001768:	0800ae00 	.word	0x0800ae00

0800176c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001770:	f000 fd70 	bl	8002254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001774:	f000 f83e 	bl	80017f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001778:	f000 fa18 	bl	8001bac <MX_GPIO_Init>
  MX_I2C1_Init();
 800177c:	f000 f94c 	bl	8001a18 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001780:	f000 f8a2 	bl	80018c8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001784:	f000 f9be 	bl	8001b04 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001788:	f000 f9e6 	bl	8001b58 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 800178c:	f000 f996 	bl	8001abc <MX_TIM14_Init>
  MX_CAN1_Init();
 8001790:	f000 f8ec 	bl	800196c <MX_CAN1_Init>
  MX_TIM13_Init();
 8001794:	f000 f96e 	bl	8001a74 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 8001798:	f7ff fc2e 	bl	8000ff8 <MPU6050_Init>

  //GPS_Init();

  HAL_TIM_Base_Start_IT(&htim14);
 800179c:	4811      	ldr	r0, [pc, #68]	; (80017e4 <main+0x78>)
 800179e:	f003 ffdb 	bl	8005758 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 80017a2:	4811      	ldr	r0, [pc, #68]	; (80017e8 <main+0x7c>)
 80017a4:	f003 ffd8 	bl	8005758 <HAL_TIM_Base_Start_IT>

  HAL_CAN_Start(&hcan1);
 80017a8:	4810      	ldr	r0, [pc, #64]	; (80017ec <main+0x80>)
 80017aa:	f001 fbc5 	bl	8002f38 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80017ae:	2102      	movs	r1, #2
 80017b0:	480e      	ldr	r0, [pc, #56]	; (80017ec <main+0x80>)
 80017b2:	f001 fdf2 	bl	800339a <HAL_CAN_ActivateNotification>

  txHeader.DLC 		= 1;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <main+0x84>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	611a      	str	r2, [r3, #16]
  txHeader.ExtId 	= 0;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <main+0x84>)
 80017be:	2200      	movs	r2, #0
 80017c0:	605a      	str	r2, [r3, #4]
  txHeader.IDE 		= CAN_ID_STD;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <main+0x84>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  txHeader.RTR 		= CAN_RTR_DATA;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <main+0x84>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  txHeader.StdId 	= 0x407; //sender ID
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <main+0x84>)
 80017d0:	f240 4207 	movw	r2, #1031	; 0x407
 80017d4:	601a      	str	r2, [r3, #0]
  txHeader.TransmitGlobalTime = DISABLE;
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <main+0x84>)
 80017d8:	2200      	movs	r2, #0
 80017da:	751a      	strb	r2, [r3, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(1);
 80017dc:	2001      	movs	r0, #1
 80017de:	f000 fdab 	bl	8002338 <HAL_Delay>
 80017e2:	e7fb      	b.n	80017dc <main+0x70>
 80017e4:	20000308 	.word	0x20000308
 80017e8:	200002c0 	.word	0x200002c0
 80017ec:	20000244 	.word	0x20000244
 80017f0:	200003d8 	.word	0x200003d8

080017f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b094      	sub	sp, #80	; 0x50
 80017f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fa:	f107 0320 	add.w	r3, r7, #32
 80017fe:	2230      	movs	r2, #48	; 0x30
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f004 fde8 	bl	80063d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <SystemClock_Config+0xcc>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	4a27      	ldr	r2, [pc, #156]	; (80018c0 <SystemClock_Config+0xcc>)
 8001822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001826:	6413      	str	r3, [r2, #64]	; 0x40
 8001828:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <SystemClock_Config+0xcc>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <SystemClock_Config+0xd0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a21      	ldr	r2, [pc, #132]	; (80018c4 <SystemClock_Config+0xd0>)
 800183e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <SystemClock_Config+0xd0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001850:	2301      	movs	r3, #1
 8001852:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001854:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800185a:	2302      	movs	r3, #2
 800185c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800185e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001862:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001864:	2304      	movs	r3, #4
 8001866:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001868:	23a8      	movs	r3, #168	; 0xa8
 800186a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800186c:	2302      	movs	r3, #2
 800186e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001870:	2306      	movs	r3, #6
 8001872:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001874:	f107 0320 	add.w	r3, r7, #32
 8001878:	4618      	mov	r0, r3
 800187a:	f003 fa85 	bl	8004d88 <HAL_RCC_OscConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001884:	f000 f9f2 	bl	8001c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001888:	230f      	movs	r3, #15
 800188a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800188c:	2302      	movs	r3, #2
 800188e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001894:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001898:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800189a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	2105      	movs	r1, #5
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 fce6 	bl	8005278 <HAL_RCC_ClockConfig>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018b2:	f000 f9db 	bl	8001c6c <Error_Handler>
  }
}
 80018b6:	bf00      	nop
 80018b8:	3750      	adds	r7, #80	; 0x50
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40007000 	.word	0x40007000

080018c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ce:	463b      	mov	r3, r7
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018da:	4b21      	ldr	r3, [pc, #132]	; (8001960 <MX_ADC1_Init+0x98>)
 80018dc:	4a21      	ldr	r2, [pc, #132]	; (8001964 <MX_ADC1_Init+0x9c>)
 80018de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018e0:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <MX_ADC1_Init+0x98>)
 80018e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <MX_ADC1_Init+0x98>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <MX_ADC1_Init+0x98>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <MX_ADC1_Init+0x98>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <MX_ADC1_Init+0x98>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <MX_ADC1_Init+0x98>)
 8001904:	2200      	movs	r2, #0
 8001906:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <MX_ADC1_Init+0x98>)
 800190a:	4a17      	ldr	r2, [pc, #92]	; (8001968 <MX_ADC1_Init+0xa0>)
 800190c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MX_ADC1_Init+0x98>)
 8001910:	2200      	movs	r2, #0
 8001912:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <MX_ADC1_Init+0x98>)
 8001916:	2201      	movs	r2, #1
 8001918:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_ADC1_Init+0x98>)
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <MX_ADC1_Init+0x98>)
 8001924:	2201      	movs	r2, #1
 8001926:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001928:	480d      	ldr	r0, [pc, #52]	; (8001960 <MX_ADC1_Init+0x98>)
 800192a:	f000 fd29 	bl	8002380 <HAL_ADC_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001934:	f000 f99a 	bl	8001c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001938:	2310      	movs	r3, #16
 800193a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800193c:	2301      	movs	r3, #1
 800193e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001944:	463b      	mov	r3, r7
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_ADC1_Init+0x98>)
 800194a:	f000 fefb 	bl	8002744 <HAL_ADC_ConfigChannel>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001954:	f000 f98a 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200001fc 	.word	0x200001fc
 8001964:	40012000 	.word	0x40012000
 8001968:	0f000001 	.word	0x0f000001

0800196c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001972:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <MX_CAN1_Init+0xa4>)
 8001974:	4a27      	ldr	r2, [pc, #156]	; (8001a14 <MX_CAN1_Init+0xa8>)
 8001976:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001978:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <MX_CAN1_Init+0xa4>)
 800197a:	2206      	movs	r2, #6
 800197c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <MX_CAN1_Init+0xa4>)
 8001980:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001984:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <MX_CAN1_Init+0xa4>)
 8001988:	2200      	movs	r2, #0
 800198a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800198c:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <MX_CAN1_Init+0xa4>)
 800198e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001992:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <MX_CAN1_Init+0xa4>)
 8001996:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 800199a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800199c:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <MX_CAN1_Init+0xa4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <MX_CAN1_Init+0xa4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <MX_CAN1_Init+0xa4>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <MX_CAN1_Init+0xa4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <MX_CAN1_Init+0xa4>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <MX_CAN1_Init+0xa4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80019c0:	4813      	ldr	r0, [pc, #76]	; (8001a10 <MX_CAN1_Init+0xa4>)
 80019c2:	f001 f8dd 	bl	8002b80 <HAL_CAN_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 80019cc:	f000 f94e 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation		=	CAN_FILTER_ENABLE;
 80019d0:	2301      	movs	r3, #1
 80019d2:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank			=	18;
 80019d4:	2312      	movs	r3, #18
 80019d6:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment	= 	CAN_FILTER_FIFO0;
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh			=	0x407<<5;//0x407<<5;//address that will be let to pass
 80019dc:	f248 03e0 	movw	r3, #32992	; 0x80e0
 80019e0:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow			=	0x0000;
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh		=	0x407<<5;//0x407<<5;
 80019e6:	f248 03e0 	movw	r3, #32992	; 0x80e0
 80019ea:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow		=	0x0000;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode			=	CAN_FILTERMODE_IDMASK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale			=	CAN_FILTERSCALE_32BIT;
 80019f4:	2301      	movs	r3, #1
 80019f6:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank	=	20;//20;
 80019f8:	2314      	movs	r3, #20
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80019fc:	463b      	mov	r3, r7
 80019fe:	4619      	mov	r1, r3
 8001a00:	4803      	ldr	r0, [pc, #12]	; (8001a10 <MX_CAN1_Init+0xa4>)
 8001a02:	f001 f9b9 	bl	8002d78 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	3728      	adds	r7, #40	; 0x28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000244 	.word	0x20000244
 8001a14:	40006400 	.word	0x40006400

08001a18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a1e:	4a13      	ldr	r2, [pc, #76]	; (8001a6c <MX_I2C1_Init+0x54>)
 8001a20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a24:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <MX_I2C1_Init+0x58>)
 8001a26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a56:	f002 f9d7 	bl	8003e08 <HAL_I2C_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a60:	f000 f904 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	2000026c 	.word	0x2000026c
 8001a6c:	40005400 	.word	0x40005400
 8001a70:	000186a0 	.word	0x000186a0

08001a74 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001a78:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_TIM13_Init+0x40>)
 8001a7a:	4a0f      	ldr	r2, [pc, #60]	; (8001ab8 <MX_TIM13_Init+0x44>)
 8001a7c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 16800-1;
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <MX_TIM13_Init+0x40>)
 8001a80:	f244 129f 	movw	r2, #16799	; 0x419f
 8001a84:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <MX_TIM13_Init+0x40>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_TIM13_Init+0x40>)
 8001a8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a92:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <MX_TIM13_Init+0x40>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_TIM13_Init+0x40>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <MX_TIM13_Init+0x40>)
 8001aa2:	f003 fe09 	bl	80056b8 <HAL_TIM_Base_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001aac:	f000 f8de 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	200002c0 	.word	0x200002c0
 8001ab8:	40001c00 	.word	0x40001c00

08001abc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <MX_TIM14_Init+0x40>)
 8001ac2:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <MX_TIM14_Init+0x44>)
 8001ac4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16800-1;
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <MX_TIM14_Init+0x40>)
 8001ac8:	f244 129f 	movw	r2, #16799	; 0x419f
 8001acc:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <MX_TIM14_Init+0x40>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_TIM14_Init+0x40>)
 8001ad6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ada:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <MX_TIM14_Init+0x40>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_TIM14_Init+0x40>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001ae8:	4804      	ldr	r0, [pc, #16]	; (8001afc <MX_TIM14_Init+0x40>)
 8001aea:	f003 fde5 	bl	80056b8 <HAL_TIM_Base_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001af4:	f000 f8ba 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000308 	.word	0x20000308
 8001b00:	40002000 	.word	0x40002000

08001b04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <MX_USART1_UART_Init+0x4c>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <MX_USART1_UART_Init+0x50>)
 8001b0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <MX_USART1_UART_Init+0x4c>)
 8001b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <MX_USART1_UART_Init+0x4c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <MX_USART1_UART_Init+0x4c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <MX_USART1_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <MX_USART1_UART_Init+0x4c>)
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <MX_USART1_UART_Init+0x4c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <MX_USART1_UART_Init+0x4c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <MX_USART1_UART_Init+0x4c>)
 8001b3c:	f004 f860 	bl	8005c00 <HAL_UART_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b46:	f000 f891 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000350 	.word	0x20000350
 8001b54:	40011000 	.word	0x40011000

08001b58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_USART2_UART_Init+0x4c>)
 8001b5e:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <MX_USART2_UART_Init+0x50>)
 8001b60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <MX_USART2_UART_Init+0x4c>)
 8001b64:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_USART2_UART_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_USART2_UART_Init+0x4c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <MX_USART2_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_USART2_UART_Init+0x4c>)
 8001b7e:	220c      	movs	r2, #12
 8001b80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <MX_USART2_UART_Init+0x4c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <MX_USART2_UART_Init+0x4c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_USART2_UART_Init+0x4c>)
 8001b90:	f004 f836 	bl	8005c00 <HAL_UART_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b9a:	f000 f867 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000394 	.word	0x20000394
 8001ba8:	40004400 	.word	0x40004400

08001bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a26      	ldr	r2, [pc, #152]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001bcc:	f043 0320 	orr.w	r3, r3, #32
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a1f      	ldr	r2, [pc, #124]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a11      	ldr	r2, [pc, #68]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001c20:	f043 0302 	orr.w	r3, r3, #2
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001c38:	480b      	ldr	r0, [pc, #44]	; (8001c68 <MX_GPIO_Init+0xbc>)
 8001c3a:	f002 f8b1 	bl	8003da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001c3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c44:	2301      	movs	r3, #1
 8001c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4619      	mov	r1, r3
 8001c56:	4804      	ldr	r0, [pc, #16]	; (8001c68 <MX_GPIO_Init+0xbc>)
 8001c58:	f001 ff06 	bl	8003a68 <HAL_GPIO_Init>

}
 8001c5c:	bf00      	nop
 8001c5e:	3728      	adds	r7, #40	; 0x28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40021400 	.word	0x40021400

08001c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c70:	b672      	cpsid	i
}
 8001c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <Error_Handler+0x8>
	...

08001c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <HAL_MspInit+0x4c>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <HAL_MspInit+0x4c>)
 8001c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <HAL_MspInit+0x4c>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_MspInit+0x4c>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	4a08      	ldr	r2, [pc, #32]	; (8001cc4 <HAL_MspInit+0x4c>)
 8001ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_MspInit+0x4c>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <HAL_ADC_MspInit+0x3c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d10d      	bne.n	8001cf6 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_ADC_MspInit+0x40>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	4a09      	ldr	r2, [pc, #36]	; (8001d08 <HAL_ADC_MspInit+0x40>)
 8001ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cea:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <HAL_ADC_MspInit+0x40>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40012000 	.word	0x40012000
 8001d08:	40023800 	.word	0x40023800

08001d0c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <HAL_CAN_MspInit+0x94>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d134      	bne.n	8001d98 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <HAL_CAN_MspInit+0x98>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <HAL_CAN_MspInit+0x98>)
 8001d38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3e:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <HAL_CAN_MspInit+0x98>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <HAL_CAN_MspInit+0x98>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <HAL_CAN_MspInit+0x98>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_CAN_MspInit+0x98>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d74:	2303      	movs	r3, #3
 8001d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d78:	2309      	movs	r3, #9
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	4619      	mov	r1, r3
 8001d82:	4809      	ldr	r0, [pc, #36]	; (8001da8 <HAL_CAN_MspInit+0x9c>)
 8001d84:	f001 fe70 	bl	8003a68 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	2014      	movs	r0, #20
 8001d8e:	f001 fe34 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001d92:	2014      	movs	r0, #20
 8001d94:	f001 fe4d 	bl	8003a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001d98:	bf00      	nop
 8001d9a:	3728      	adds	r7, #40	; 0x28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40006400 	.word	0x40006400
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020000 	.word	0x40020000

08001dac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a19      	ldr	r2, [pc, #100]	; (8001e30 <HAL_I2C_MspInit+0x84>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d12b      	bne.n	8001e26 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <HAL_I2C_MspInit+0x88>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a17      	ldr	r2, [pc, #92]	; (8001e34 <HAL_I2C_MspInit+0x88>)
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <HAL_I2C_MspInit+0x88>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dea:	23c0      	movs	r3, #192	; 0xc0
 8001dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dee:	2312      	movs	r3, #18
 8001df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df6:	2303      	movs	r3, #3
 8001df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	480c      	ldr	r0, [pc, #48]	; (8001e38 <HAL_I2C_MspInit+0x8c>)
 8001e06:	f001 fe2f 	bl	8003a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_I2C_MspInit+0x88>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	4a08      	ldr	r2, [pc, #32]	; (8001e34 <HAL_I2C_MspInit+0x88>)
 8001e14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e18:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_I2C_MspInit+0x88>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e26:	bf00      	nop
 8001e28:	3728      	adds	r7, #40	; 0x28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40005400 	.word	0x40005400
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40020400 	.word	0x40020400

08001e3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <HAL_TIM_Base_MspInit+0x80>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d116      	bne.n	8001e7c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_TIM_Base_MspInit+0x84>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	4a1a      	ldr	r2, [pc, #104]	; (8001ec0 <HAL_TIM_Base_MspInit+0x84>)
 8001e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5e:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <HAL_TIM_Base_MspInit+0x84>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	202c      	movs	r0, #44	; 0x2c
 8001e70:	f001 fdc3 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001e74:	202c      	movs	r0, #44	; 0x2c
 8001e76:	f001 fddc 	bl	8003a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001e7a:	e01a      	b.n	8001eb2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM14)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a10      	ldr	r2, [pc, #64]	; (8001ec4 <HAL_TIM_Base_MspInit+0x88>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d115      	bne.n	8001eb2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <HAL_TIM_Base_MspInit+0x84>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <HAL_TIM_Base_MspInit+0x84>)
 8001e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e94:	6413      	str	r3, [r2, #64]	; 0x40
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_TIM_Base_MspInit+0x84>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	202d      	movs	r0, #45	; 0x2d
 8001ea8:	f001 fda7 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001eac:	202d      	movs	r0, #45	; 0x2d
 8001eae:	f001 fdc0 	bl	8003a32 <HAL_NVIC_EnableIRQ>
}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40001c00 	.word	0x40001c00
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40002000 	.word	0x40002000

08001ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08c      	sub	sp, #48	; 0x30
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a32      	ldr	r2, [pc, #200]	; (8001fb0 <HAL_UART_MspInit+0xe8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d12d      	bne.n	8001f46 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	4b31      	ldr	r3, [pc, #196]	; (8001fb4 <HAL_UART_MspInit+0xec>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	4a30      	ldr	r2, [pc, #192]	; (8001fb4 <HAL_UART_MspInit+0xec>)
 8001ef4:	f043 0310 	orr.w	r3, r3, #16
 8001ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8001efa:	4b2e      	ldr	r3, [pc, #184]	; (8001fb4 <HAL_UART_MspInit+0xec>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <HAL_UART_MspInit+0xec>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a29      	ldr	r2, [pc, #164]	; (8001fb4 <HAL_UART_MspInit+0xec>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <HAL_UART_MspInit+0xec>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f34:	2307      	movs	r3, #7
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	481e      	ldr	r0, [pc, #120]	; (8001fb8 <HAL_UART_MspInit+0xf0>)
 8001f40:	f001 fd92 	bl	8003a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f44:	e030      	b.n	8001fa8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1c      	ldr	r2, [pc, #112]	; (8001fbc <HAL_UART_MspInit+0xf4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d12b      	bne.n	8001fa8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <HAL_UART_MspInit+0xec>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	4a16      	ldr	r2, [pc, #88]	; (8001fb4 <HAL_UART_MspInit+0xec>)
 8001f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <HAL_UART_MspInit+0xec>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <HAL_UART_MspInit+0xec>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	4a0f      	ldr	r2, [pc, #60]	; (8001fb4 <HAL_UART_MspInit+0xec>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <HAL_UART_MspInit+0xec>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f88:	230c      	movs	r3, #12
 8001f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f94:	2303      	movs	r3, #3
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f98:	2307      	movs	r3, #7
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	f107 031c 	add.w	r3, r7, #28
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <HAL_UART_MspInit+0xf0>)
 8001fa4:	f001 fd60 	bl	8003a68 <HAL_GPIO_Init>
}
 8001fa8:	bf00      	nop
 8001faa:	3730      	adds	r7, #48	; 0x30
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40011000 	.word	0x40011000
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	40004400 	.word	0x40004400

08001fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <NMI_Handler+0x4>

08001fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <HardFault_Handler+0x4>

08001fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <MemManage_Handler+0x4>

08001fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd6:	e7fe      	b.n	8001fd6 <BusFault_Handler+0x4>

08001fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <UsageFault_Handler+0x4>

08001fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800200c:	f000 f974 	bl	80022f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}

08002014 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <CAN1_RX0_IRQHandler+0x10>)
 800201a:	f001 f9e4 	bl	80033e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000244 	.word	0x20000244

08002028 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800202c:	4802      	ldr	r0, [pc, #8]	; (8002038 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800202e:	f003 fc03 	bl	8005838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200002c0 	.word	0x200002c0

0800203c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002042:	f003 fbf9 	bl	8005838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000308 	.word	0x20000308

08002050 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
	return 1;
 8002054:	2301      	movs	r3, #1
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <_kill>:

int _kill(int pid, int sig)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800206a:	f004 f98b 	bl	8006384 <__errno>
 800206e:	4603      	mov	r3, r0
 8002070:	2216      	movs	r2, #22
 8002072:	601a      	str	r2, [r3, #0]
	return -1;
 8002074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <_exit>:

void _exit (int status)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002088:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ffe7 	bl	8002060 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002092:	e7fe      	b.n	8002092 <_exit+0x12>

08002094 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	e00a      	b.n	80020bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020a6:	f3af 8000 	nop.w
 80020aa:	4601      	mov	r1, r0
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	60ba      	str	r2, [r7, #8]
 80020b2:	b2ca      	uxtb	r2, r1
 80020b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3301      	adds	r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	dbf0      	blt.n	80020a6 <_read+0x12>
	}

return len;
 80020c4:	687b      	ldr	r3, [r7, #4]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	60f8      	str	r0, [r7, #12]
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	e009      	b.n	80020f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	60ba      	str	r2, [r7, #8]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	3301      	adds	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	dbf1      	blt.n	80020e0 <_write+0x12>
	}
	return len;
 80020fc:	687b      	ldr	r3, [r7, #4]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <_close>:

int _close(int file)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
	return -1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800212e:	605a      	str	r2, [r3, #4]
	return 0;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <_isatty>:

int _isatty(int file)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
	return 1;
 8002146:	2301      	movs	r3, #1
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
	return 0;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <_sbrk+0x5c>)
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <_sbrk+0x60>)
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <_sbrk+0x64>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <_sbrk+0x64>)
 800218e:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <_sbrk+0x68>)
 8002190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <_sbrk+0x64>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	429a      	cmp	r2, r3
 800219e:	d207      	bcs.n	80021b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a0:	f004 f8f0 	bl	8006384 <__errno>
 80021a4:	4603      	mov	r3, r0
 80021a6:	220c      	movs	r2, #12
 80021a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021ae:	e009      	b.n	80021c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b6:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <_sbrk+0x64>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <_sbrk+0x64>)
 80021c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021c2:	68fb      	ldr	r3, [r7, #12]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20020000 	.word	0x20020000
 80021d0:	00000400 	.word	0x00000400
 80021d4:	200004a4 	.word	0x200004a4
 80021d8:	200004c0 	.word	0x200004c0

080021dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <SystemInit+0x20>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <SystemInit+0x20>)
 80021e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <Reset_Handler>:
 8002200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002238 <LoopFillZerobss+0x12>
 8002204:	480d      	ldr	r0, [pc, #52]	; (800223c <LoopFillZerobss+0x16>)
 8002206:	490e      	ldr	r1, [pc, #56]	; (8002240 <LoopFillZerobss+0x1a>)
 8002208:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <LoopFillZerobss+0x1e>)
 800220a:	2300      	movs	r3, #0
 800220c:	e002      	b.n	8002214 <LoopCopyDataInit>

0800220e <CopyDataInit>:
 800220e:	58d4      	ldr	r4, [r2, r3]
 8002210:	50c4      	str	r4, [r0, r3]
 8002212:	3304      	adds	r3, #4

08002214 <LoopCopyDataInit>:
 8002214:	18c4      	adds	r4, r0, r3
 8002216:	428c      	cmp	r4, r1
 8002218:	d3f9      	bcc.n	800220e <CopyDataInit>
 800221a:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <LoopFillZerobss+0x22>)
 800221c:	4c0b      	ldr	r4, [pc, #44]	; (800224c <LoopFillZerobss+0x26>)
 800221e:	2300      	movs	r3, #0
 8002220:	e001      	b.n	8002226 <LoopFillZerobss>

08002222 <FillZerobss>:
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	3204      	adds	r2, #4

08002226 <LoopFillZerobss>:
 8002226:	42a2      	cmp	r2, r4
 8002228:	d3fb      	bcc.n	8002222 <FillZerobss>
 800222a:	f7ff ffd7 	bl	80021dc <SystemInit>
 800222e:	f004 f8af 	bl	8006390 <__libc_init_array>
 8002232:	f7ff fa9b 	bl	800176c <main>
 8002236:	4770      	bx	lr
 8002238:	20020000 	.word	0x20020000
 800223c:	20000000 	.word	0x20000000
 8002240:	200001e0 	.word	0x200001e0
 8002244:	0800b2ec 	.word	0x0800b2ec
 8002248:	200001e0 	.word	0x200001e0
 800224c:	200004bc 	.word	0x200004bc

08002250 <ADC_IRQHandler>:
 8002250:	e7fe      	b.n	8002250 <ADC_IRQHandler>
	...

08002254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <HAL_Init+0x40>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0d      	ldr	r2, [pc, #52]	; (8002294 <HAL_Init+0x40>)
 800225e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_Init+0x40>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <HAL_Init+0x40>)
 800226a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800226e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_Init+0x40>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a07      	ldr	r2, [pc, #28]	; (8002294 <HAL_Init+0x40>)
 8002276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800227c:	2003      	movs	r0, #3
 800227e:	f001 fbb1 	bl	80039e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002282:	200f      	movs	r0, #15
 8002284:	f000 f808 	bl	8002298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002288:	f7ff fcf6 	bl	8001c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023c00 	.word	0x40023c00

08002298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a0:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_InitTick+0x54>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_InitTick+0x58>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4619      	mov	r1, r3
 80022aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80022b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b6:	4618      	mov	r0, r3
 80022b8:	f001 fbc9 	bl	8003a4e <HAL_SYSTICK_Config>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00e      	b.n	80022e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b0f      	cmp	r3, #15
 80022ca:	d80a      	bhi.n	80022e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022cc:	2200      	movs	r2, #0
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022d4:	f001 fb91 	bl	80039fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022d8:	4a06      	ldr	r2, [pc, #24]	; (80022f4 <HAL_InitTick+0x5c>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	e000      	b.n	80022e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000000 	.word	0x20000000
 80022f0:	20000008 	.word	0x20000008
 80022f4:	20000004 	.word	0x20000004

080022f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_IncTick+0x20>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_IncTick+0x24>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4413      	add	r3, r2
 8002308:	4a04      	ldr	r2, [pc, #16]	; (800231c <HAL_IncTick+0x24>)
 800230a:	6013      	str	r3, [r2, #0]
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000008 	.word	0x20000008
 800231c:	200004a8 	.word	0x200004a8

08002320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return uwTick;
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <HAL_GetTick+0x14>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	200004a8 	.word	0x200004a8

08002338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002340:	f7ff ffee 	bl	8002320 <HAL_GetTick>
 8002344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002350:	d005      	beq.n	800235e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <HAL_Delay+0x44>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800235e:	bf00      	nop
 8002360:	f7ff ffde 	bl	8002320 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	429a      	cmp	r2, r3
 800236e:	d8f7      	bhi.n	8002360 <HAL_Delay+0x28>
  {
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000008 	.word	0x20000008

08002380 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e033      	b.n	80023fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff fc92 	bl	8001cc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d118      	bne.n	80023f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023c6:	f023 0302 	bic.w	r3, r3, #2
 80023ca:	f043 0202 	orr.w	r2, r3, #2
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fad8 	bl	8002988 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f023 0303 	bic.w	r3, r3, #3
 80023e6:	f043 0201 	orr.w	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40
 80023ee:	e001      	b.n	80023f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_ADC_Start+0x1a>
 800241e:	2302      	movs	r3, #2
 8002420:	e0b2      	b.n	8002588 <HAL_ADC_Start+0x180>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b01      	cmp	r3, #1
 8002436:	d018      	beq.n	800246a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002448:	4b52      	ldr	r3, [pc, #328]	; (8002594 <HAL_ADC_Start+0x18c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a52      	ldr	r2, [pc, #328]	; (8002598 <HAL_ADC_Start+0x190>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	0c9a      	lsrs	r2, r3, #18
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800245c:	e002      	b.n	8002464 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	3b01      	subs	r3, #1
 8002462:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f9      	bne.n	800245e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	d17a      	bne.n	800256e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b6:	d106      	bne.n	80024c6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	f023 0206 	bic.w	r2, r3, #6
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	645a      	str	r2, [r3, #68]	; 0x44
 80024c4:	e002      	b.n	80024cc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024d4:	4b31      	ldr	r3, [pc, #196]	; (800259c <HAL_ADC_Start+0x194>)
 80024d6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024e0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d12a      	bne.n	8002544 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a2b      	ldr	r2, [pc, #172]	; (80025a0 <HAL_ADC_Start+0x198>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d015      	beq.n	8002524 <HAL_ADC_Start+0x11c>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a29      	ldr	r2, [pc, #164]	; (80025a4 <HAL_ADC_Start+0x19c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d105      	bne.n	800250e <HAL_ADC_Start+0x106>
 8002502:	4b26      	ldr	r3, [pc, #152]	; (800259c <HAL_ADC_Start+0x194>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a25      	ldr	r2, [pc, #148]	; (80025a8 <HAL_ADC_Start+0x1a0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d136      	bne.n	8002586 <HAL_ADC_Start+0x17e>
 8002518:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_ADC_Start+0x194>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	d130      	bne.n	8002586 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d129      	bne.n	8002586 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	e020      	b.n	8002586 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a15      	ldr	r2, [pc, #84]	; (80025a0 <HAL_ADC_Start+0x198>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d11b      	bne.n	8002586 <HAL_ADC_Start+0x17e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d114      	bne.n	8002586 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	e00b      	b.n	8002586 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f043 0210 	orr.w	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f043 0201 	orr.w	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	20000000 	.word	0x20000000
 8002598:	431bde83 	.word	0x431bde83
 800259c:	40012300 	.word	0x40012300
 80025a0:	40012000 	.word	0x40012000
 80025a4:	40012100 	.word	0x40012100
 80025a8:	40012200 	.word	0x40012200

080025ac <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_ADC_Stop+0x16>
 80025be:	2302      	movs	r3, #2
 80025c0:	e021      	b.n	8002606 <HAL_ADC_Stop+0x5a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0201 	bic.w	r2, r2, #1
 80025d8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	f043 0201 	orr.w	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800262e:	d113      	bne.n	8002658 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800263a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800263e:	d10b      	bne.n	8002658 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f043 0220 	orr.w	r2, r3, #32
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e063      	b.n	8002720 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002658:	f7ff fe62 	bl	8002320 <HAL_GetTick>
 800265c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800265e:	e021      	b.n	80026a4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002666:	d01d      	beq.n	80026a4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <HAL_ADC_PollForConversion+0x6c>
 800266e:	f7ff fe57 	bl	8002320 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d212      	bcs.n	80026a4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b02      	cmp	r3, #2
 800268a:	d00b      	beq.n	80026a4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f043 0204 	orr.w	r2, r3, #4
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e03d      	b.n	8002720 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d1d6      	bne.n	8002660 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f06f 0212 	mvn.w	r2, #18
 80026ba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d123      	bne.n	800271e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d11f      	bne.n	800271e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d006      	beq.n	80026fa <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d111      	bne.n	800271e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d105      	bne.n	800271e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f043 0201 	orr.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x1c>
 800275c:	2302      	movs	r3, #2
 800275e:	e105      	b.n	800296c <HAL_ADC_ConfigChannel+0x228>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b09      	cmp	r3, #9
 800276e:	d925      	bls.n	80027bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68d9      	ldr	r1, [r3, #12]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	3b1e      	subs	r3, #30
 8002786:	2207      	movs	r2, #7
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43da      	mvns	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	400a      	ands	r2, r1
 8002794:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68d9      	ldr	r1, [r3, #12]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	4618      	mov	r0, r3
 80027a8:	4603      	mov	r3, r0
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4403      	add	r3, r0
 80027ae:	3b1e      	subs	r3, #30
 80027b0:	409a      	lsls	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	e022      	b.n	8002802 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6919      	ldr	r1, [r3, #16]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	2207      	movs	r2, #7
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	400a      	ands	r2, r1
 80027de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6919      	ldr	r1, [r3, #16]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4618      	mov	r0, r3
 80027f2:	4603      	mov	r3, r0
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4403      	add	r3, r0
 80027f8:	409a      	lsls	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b06      	cmp	r3, #6
 8002808:	d824      	bhi.n	8002854 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	3b05      	subs	r3, #5
 800281c:	221f      	movs	r2, #31
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	400a      	ands	r2, r1
 800282a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	4618      	mov	r0, r3
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	3b05      	subs	r3, #5
 8002846:	fa00 f203 	lsl.w	r2, r0, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	635a      	str	r2, [r3, #52]	; 0x34
 8002852:	e04c      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b0c      	cmp	r3, #12
 800285a:	d824      	bhi.n	80028a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	3b23      	subs	r3, #35	; 0x23
 800286e:	221f      	movs	r2, #31
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43da      	mvns	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	400a      	ands	r2, r1
 800287c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	b29b      	uxth	r3, r3
 800288a:	4618      	mov	r0, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	3b23      	subs	r3, #35	; 0x23
 8002898:	fa00 f203 	lsl.w	r2, r0, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	631a      	str	r2, [r3, #48]	; 0x30
 80028a4:	e023      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	3b41      	subs	r3, #65	; 0x41
 80028b8:	221f      	movs	r2, #31
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	400a      	ands	r2, r1
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	4618      	mov	r0, r3
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	3b41      	subs	r3, #65	; 0x41
 80028e2:	fa00 f203 	lsl.w	r2, r0, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028ee:	4b22      	ldr	r3, [pc, #136]	; (8002978 <HAL_ADC_ConfigChannel+0x234>)
 80028f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a21      	ldr	r2, [pc, #132]	; (800297c <HAL_ADC_ConfigChannel+0x238>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d109      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x1cc>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b12      	cmp	r3, #18
 8002902:	d105      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a19      	ldr	r2, [pc, #100]	; (800297c <HAL_ADC_ConfigChannel+0x238>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d123      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x21e>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b10      	cmp	r3, #16
 8002920:	d003      	beq.n	800292a <HAL_ADC_ConfigChannel+0x1e6>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b11      	cmp	r3, #17
 8002928:	d11b      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b10      	cmp	r3, #16
 800293c:	d111      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <HAL_ADC_ConfigChannel+0x23c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a10      	ldr	r2, [pc, #64]	; (8002984 <HAL_ADC_ConfigChannel+0x240>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	0c9a      	lsrs	r2, r3, #18
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002954:	e002      	b.n	800295c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	3b01      	subs	r3, #1
 800295a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f9      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	40012300 	.word	0x40012300
 800297c:	40012000 	.word	0x40012000
 8002980:	20000000 	.word	0x20000000
 8002984:	431bde83 	.word	0x431bde83

08002988 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002990:	4b79      	ldr	r3, [pc, #484]	; (8002b78 <ADC_Init+0x1f0>)
 8002992:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	021a      	lsls	r2, r3, #8
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6859      	ldr	r1, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6899      	ldr	r1, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	4a58      	ldr	r2, [pc, #352]	; (8002b7c <ADC_Init+0x1f4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d022      	beq.n	8002a66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6899      	ldr	r1, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6899      	ldr	r1, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	e00f      	b.n	8002a86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0202 	bic.w	r2, r2, #2
 8002a94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6899      	ldr	r1, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	7e1b      	ldrb	r3, [r3, #24]
 8002aa0:	005a      	lsls	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01b      	beq.n	8002aec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ad2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	035a      	lsls	r2, r3, #13
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	e007      	b.n	8002afc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002afa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	051a      	lsls	r2, r3, #20
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6899      	ldr	r1, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b3e:	025a      	lsls	r2, r3, #9
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6899      	ldr	r1, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	029a      	lsls	r2, r3, #10
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	609a      	str	r2, [r3, #8]
}
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	40012300 	.word	0x40012300
 8002b7c:	0f000001 	.word	0x0f000001

08002b80 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0ed      	b.n	8002d6e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d102      	bne.n	8002ba4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff f8b4 	bl	8001d0c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bb4:	f7ff fbb4 	bl	8002320 <HAL_GetTick>
 8002bb8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bba:	e012      	b.n	8002be2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bbc:	f7ff fbb0 	bl	8002320 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b0a      	cmp	r3, #10
 8002bc8:	d90b      	bls.n	8002be2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2205      	movs	r2, #5
 8002bda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e0c5      	b.n	8002d6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0e5      	beq.n	8002bbc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0202 	bic.w	r2, r2, #2
 8002bfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c00:	f7ff fb8e 	bl	8002320 <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c06:	e012      	b.n	8002c2e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c08:	f7ff fb8a 	bl	8002320 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b0a      	cmp	r3, #10
 8002c14:	d90b      	bls.n	8002c2e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2205      	movs	r2, #5
 8002c26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e09f      	b.n	8002d6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1e5      	bne.n	8002c08 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7e1b      	ldrb	r3, [r3, #24]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d108      	bne.n	8002c56 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e007      	b.n	8002c66 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7e5b      	ldrb	r3, [r3, #25]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d108      	bne.n	8002c80 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	e007      	b.n	8002c90 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7e9b      	ldrb	r3, [r3, #26]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d108      	bne.n	8002caa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0220 	orr.w	r2, r2, #32
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e007      	b.n	8002cba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0220 	bic.w	r2, r2, #32
 8002cb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	7edb      	ldrb	r3, [r3, #27]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d108      	bne.n	8002cd4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0210 	bic.w	r2, r2, #16
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	e007      	b.n	8002ce4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0210 	orr.w	r2, r2, #16
 8002ce2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	7f1b      	ldrb	r3, [r3, #28]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d108      	bne.n	8002cfe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0208 	orr.w	r2, r2, #8
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	e007      	b.n	8002d0e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0208 	bic.w	r2, r2, #8
 8002d0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	7f5b      	ldrb	r3, [r3, #29]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d108      	bne.n	8002d28 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0204 	orr.w	r2, r2, #4
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	e007      	b.n	8002d38 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0204 	bic.w	r2, r2, #4
 8002d36:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	ea42 0103 	orr.w	r1, r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	1e5a      	subs	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d8e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d90:	7cfb      	ldrb	r3, [r7, #19]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d003      	beq.n	8002d9e <HAL_CAN_ConfigFilter+0x26>
 8002d96:	7cfb      	ldrb	r3, [r7, #19]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	f040 80be 	bne.w	8002f1a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002d9e:	4b65      	ldr	r3, [pc, #404]	; (8002f34 <HAL_CAN_ConfigFilter+0x1bc>)
 8002da0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002da8:	f043 0201 	orr.w	r2, r3, #1
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002db8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	2201      	movs	r2, #1
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	401a      	ands	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d123      	bne.n	8002e48 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e22:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	3248      	adds	r2, #72	; 0x48
 8002e28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e3e:	6979      	ldr	r1, [r7, #20]
 8002e40:	3348      	adds	r3, #72	; 0x48
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	440b      	add	r3, r1
 8002e46:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d122      	bne.n	8002e96 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	3248      	adds	r2, #72	; 0x48
 8002e76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e8c:	6979      	ldr	r1, [r7, #20]
 8002e8e:	3348      	adds	r3, #72	; 0x48
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	440b      	add	r3, r1
 8002e94:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	401a      	ands	r2, r3
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002eb0:	e007      	b.n	8002ec2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d109      	bne.n	8002ede <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	401a      	ands	r2, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002edc:	e007      	b.n	8002eee <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d107      	bne.n	8002f06 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f0c:	f023 0201 	bic.w	r2, r3, #1
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e006      	b.n	8002f28 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
  }
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	371c      	adds	r7, #28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	40006400 	.word	0x40006400

08002f38 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d12e      	bne.n	8002faa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f64:	f7ff f9dc 	bl	8002320 <HAL_GetTick>
 8002f68:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f6a:	e012      	b.n	8002f92 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f6c:	f7ff f9d8 	bl	8002320 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b0a      	cmp	r3, #10
 8002f78:	d90b      	bls.n	8002f92 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2205      	movs	r2, #5
 8002f8a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e012      	b.n	8002fb8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1e5      	bne.n	8002f6c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e006      	b.n	8002fb8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
  }
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b089      	sub	sp, #36	; 0x24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fd4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fde:	7ffb      	ldrb	r3, [r7, #31]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d003      	beq.n	8002fec <HAL_CAN_AddTxMessage+0x2c>
 8002fe4:	7ffb      	ldrb	r3, [r7, #31]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	f040 80b8 	bne.w	800315c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10a      	bne.n	800300c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d105      	bne.n	800300c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80a0 	beq.w	800314c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	0e1b      	lsrs	r3, r3, #24
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d907      	bls.n	800302c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e09e      	b.n	800316a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800302c:	2201      	movs	r2, #1
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	409a      	lsls	r2, r3
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10d      	bne.n	800305a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003048:	68f9      	ldr	r1, [r7, #12]
 800304a:	6809      	ldr	r1, [r1, #0]
 800304c:	431a      	orrs	r2, r3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	3318      	adds	r3, #24
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	440b      	add	r3, r1
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	e00f      	b.n	800307a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003064:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800306a:	68f9      	ldr	r1, [r7, #12]
 800306c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800306e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	3318      	adds	r3, #24
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	440b      	add	r3, r1
 8003078:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6819      	ldr	r1, [r3, #0]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	691a      	ldr	r2, [r3, #16]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	3318      	adds	r3, #24
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	440b      	add	r3, r1
 800308a:	3304      	adds	r3, #4
 800308c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	7d1b      	ldrb	r3, [r3, #20]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d111      	bne.n	80030ba <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	3318      	adds	r3, #24
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	4413      	add	r3, r2
 80030a2:	3304      	adds	r3, #4
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	6811      	ldr	r1, [r2, #0]
 80030aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	3318      	adds	r3, #24
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	440b      	add	r3, r1
 80030b6:	3304      	adds	r3, #4
 80030b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3307      	adds	r3, #7
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	061a      	lsls	r2, r3, #24
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3306      	adds	r3, #6
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3305      	adds	r3, #5
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	021b      	lsls	r3, r3, #8
 80030d4:	4313      	orrs	r3, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	3204      	adds	r2, #4
 80030da:	7812      	ldrb	r2, [r2, #0]
 80030dc:	4610      	mov	r0, r2
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	6811      	ldr	r1, [r2, #0]
 80030e2:	ea43 0200 	orr.w	r2, r3, r0
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	440b      	add	r3, r1
 80030ec:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80030f0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3303      	adds	r3, #3
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	061a      	lsls	r2, r3, #24
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3302      	adds	r3, #2
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3301      	adds	r3, #1
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	4313      	orrs	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	7812      	ldrb	r2, [r2, #0]
 8003112:	4610      	mov	r0, r2
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	6811      	ldr	r1, [r2, #0]
 8003118:	ea43 0200 	orr.w	r2, r3, r0
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	440b      	add	r3, r1
 8003122:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003126:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	3318      	adds	r3, #24
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	4413      	add	r3, r2
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	6811      	ldr	r1, [r2, #0]
 800313a:	f043 0201 	orr.w	r2, r3, #1
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	3318      	adds	r3, #24
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	440b      	add	r3, r1
 8003146:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	e00e      	b.n	800316a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e006      	b.n	800316a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
  }
}
 800316a:	4618      	mov	r0, r3
 800316c:	3724      	adds	r7, #36	; 0x24
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003176:	b480      	push	{r7}
 8003178:	b087      	sub	sp, #28
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 3020 	ldrb.w	r3, [r3, #32]
 800318a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800318c:	7dfb      	ldrb	r3, [r7, #23]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d003      	beq.n	800319a <HAL_CAN_GetRxMessage+0x24>
 8003192:	7dfb      	ldrb	r3, [r7, #23]
 8003194:	2b02      	cmp	r3, #2
 8003196:	f040 80f3 	bne.w	8003380 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10e      	bne.n	80031be <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d116      	bne.n	80031dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e0e7      	b.n	800338e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d107      	bne.n	80031dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0d8      	b.n	800338e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	331b      	adds	r3, #27
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	4413      	add	r3, r2
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0204 	and.w	r2, r3, #4
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10c      	bne.n	8003214 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	331b      	adds	r3, #27
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	4413      	add	r3, r2
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	0d5b      	lsrs	r3, r3, #21
 800320a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	e00b      	b.n	800322c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	331b      	adds	r3, #27
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	4413      	add	r3, r2
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	08db      	lsrs	r3, r3, #3
 8003224:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	331b      	adds	r3, #27
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	4413      	add	r3, r2
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0202 	and.w	r2, r3, #2
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	331b      	adds	r3, #27
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	4413      	add	r3, r2
 800324e:	3304      	adds	r3, #4
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 020f 	and.w	r2, r3, #15
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	331b      	adds	r3, #27
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	4413      	add	r3, r2
 8003266:	3304      	adds	r3, #4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	0a1b      	lsrs	r3, r3, #8
 800326c:	b2da      	uxtb	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	331b      	adds	r3, #27
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	4413      	add	r3, r2
 800327e:	3304      	adds	r3, #4
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	0c1b      	lsrs	r3, r3, #16
 8003284:	b29a      	uxth	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	4413      	add	r3, r2
 8003294:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	b2da      	uxtb	r2, r3
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	0a1a      	lsrs	r2, r3, #8
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	3301      	adds	r3, #1
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	0c1a      	lsrs	r2, r3, #16
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	3302      	adds	r3, #2
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	4413      	add	r3, r2
 80032de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	0e1a      	lsrs	r2, r3, #24
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	3303      	adds	r3, #3
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	3304      	adds	r3, #4
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	4413      	add	r3, r2
 8003310:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	0a1a      	lsrs	r2, r3, #8
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	3305      	adds	r3, #5
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	4413      	add	r3, r2
 800332a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0c1a      	lsrs	r2, r3, #16
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	3306      	adds	r3, #6
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	4413      	add	r3, r2
 8003344:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	0e1a      	lsrs	r2, r3, #24
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	3307      	adds	r3, #7
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d108      	bne.n	800336c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0220 	orr.w	r2, r2, #32
 8003368:	60da      	str	r2, [r3, #12]
 800336a:	e007      	b.n	800337c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691a      	ldr	r2, [r3, #16]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0220 	orr.w	r2, r2, #32
 800337a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	e006      	b.n	800338e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
  }
}
 800338e:	4618      	mov	r0, r3
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800339a:	b480      	push	{r7}
 800339c:	b085      	sub	sp, #20
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033aa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d002      	beq.n	80033b8 <HAL_CAN_ActivateNotification+0x1e>
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d109      	bne.n	80033cc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6959      	ldr	r1, [r3, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e006      	b.n	80033da <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
  }
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b08a      	sub	sp, #40	; 0x28
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d07c      	beq.n	8003526 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d023      	beq.n	800347e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2201      	movs	r2, #1
 800343c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f983 	bl	8003754 <HAL_CAN_TxMailbox0CompleteCallback>
 800344e:	e016      	b.n	800347e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	d004      	beq.n	8003464 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
 8003462:	e00c      	b.n	800347e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d004      	beq.n	8003478 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
 8003476:	e002      	b.n	800347e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f989 	bl	8003790 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d024      	beq.n	80034d2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003490:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f963 	bl	8003768 <HAL_CAN_TxMailbox1CompleteCallback>
 80034a2:	e016      	b.n	80034d2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d004      	beq.n	80034b8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
 80034b6:	e00c      	b.n	80034d2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d004      	beq.n	80034cc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	e002      	b.n	80034d2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f969 	bl	80037a4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d024      	beq.n	8003526 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80034e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f943 	bl	800377c <HAL_CAN_TxMailbox2CompleteCallback>
 80034f6:	e016      	b.n	8003526 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d004      	beq.n	800350c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
 800350a:	e00c      	b.n	8003526 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d004      	beq.n	8003520 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
 800351e:	e002      	b.n	8003526 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f949 	bl	80037b8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00c      	beq.n	800354a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b00      	cmp	r3, #0
 8003538:	d007      	beq.n	800354a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003540:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2210      	movs	r2, #16
 8003548:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00b      	beq.n	800356c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d006      	beq.n	800356c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2208      	movs	r2, #8
 8003564:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f930 	bl	80037cc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7fe f8ad 	bl	80016e4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00c      	beq.n	80035ae <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	d007      	beq.n	80035ae <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2210      	movs	r2, #16
 80035ac:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00b      	beq.n	80035d0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d006      	beq.n	80035d0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2208      	movs	r2, #8
 80035c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f912 	bl	80037f4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f8f9 	bl	80037e0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00b      	beq.n	8003610 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d006      	beq.n	8003610 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2210      	movs	r2, #16
 8003608:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f8fc 	bl	8003808 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00b      	beq.n	8003632 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d006      	beq.n	8003632 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2208      	movs	r2, #8
 800362a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f8f5 	bl	800381c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d07b      	beq.n	8003734 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d072      	beq.n	800372c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	f043 0302 	orr.w	r3, r3, #2
 800367c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	f043 0304 	orr.w	r3, r3, #4
 8003698:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d043      	beq.n	800372c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d03e      	beq.n	800372c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036b4:	2b60      	cmp	r3, #96	; 0x60
 80036b6:	d02b      	beq.n	8003710 <HAL_CAN_IRQHandler+0x32a>
 80036b8:	2b60      	cmp	r3, #96	; 0x60
 80036ba:	d82e      	bhi.n	800371a <HAL_CAN_IRQHandler+0x334>
 80036bc:	2b50      	cmp	r3, #80	; 0x50
 80036be:	d022      	beq.n	8003706 <HAL_CAN_IRQHandler+0x320>
 80036c0:	2b50      	cmp	r3, #80	; 0x50
 80036c2:	d82a      	bhi.n	800371a <HAL_CAN_IRQHandler+0x334>
 80036c4:	2b40      	cmp	r3, #64	; 0x40
 80036c6:	d019      	beq.n	80036fc <HAL_CAN_IRQHandler+0x316>
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	d826      	bhi.n	800371a <HAL_CAN_IRQHandler+0x334>
 80036cc:	2b30      	cmp	r3, #48	; 0x30
 80036ce:	d010      	beq.n	80036f2 <HAL_CAN_IRQHandler+0x30c>
 80036d0:	2b30      	cmp	r3, #48	; 0x30
 80036d2:	d822      	bhi.n	800371a <HAL_CAN_IRQHandler+0x334>
 80036d4:	2b10      	cmp	r3, #16
 80036d6:	d002      	beq.n	80036de <HAL_CAN_IRQHandler+0x2f8>
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d005      	beq.n	80036e8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80036dc:	e01d      	b.n	800371a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	f043 0308 	orr.w	r3, r3, #8
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036e6:	e019      	b.n	800371c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	f043 0310 	orr.w	r3, r3, #16
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036f0:	e014      	b.n	800371c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	f043 0320 	orr.w	r3, r3, #32
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036fa:	e00f      	b.n	800371c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003704:	e00a      	b.n	800371c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800370e:	e005      	b.n	800371c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003718:	e000      	b.n	800371c <HAL_CAN_IRQHandler+0x336>
            break;
 800371a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800372a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2204      	movs	r2, #4
 8003732:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f872 	bl	8003830 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800374c:	bf00      	nop
 800374e:	3728      	adds	r7, #40	; 0x28
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <__NVIC_SetPriorityGrouping+0x44>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003860:	4013      	ands	r3, r2
 8003862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800386c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003876:	4a04      	ldr	r2, [pc, #16]	; (8003888 <__NVIC_SetPriorityGrouping+0x44>)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	60d3      	str	r3, [r2, #12]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	0a1b      	lsrs	r3, r3, #8
 8003896:	f003 0307 	and.w	r3, r3, #7
}
 800389a:	4618      	mov	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	db0b      	blt.n	80038d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	f003 021f 	and.w	r2, r3, #31
 80038c0:	4907      	ldr	r1, [pc, #28]	; (80038e0 <__NVIC_EnableIRQ+0x38>)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2001      	movs	r0, #1
 80038ca:	fa00 f202 	lsl.w	r2, r0, r2
 80038ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	e000e100 	.word	0xe000e100

080038e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	6039      	str	r1, [r7, #0]
 80038ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	db0a      	blt.n	800390e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	490c      	ldr	r1, [pc, #48]	; (8003930 <__NVIC_SetPriority+0x4c>)
 80038fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003902:	0112      	lsls	r2, r2, #4
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	440b      	add	r3, r1
 8003908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800390c:	e00a      	b.n	8003924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	b2da      	uxtb	r2, r3
 8003912:	4908      	ldr	r1, [pc, #32]	; (8003934 <__NVIC_SetPriority+0x50>)
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	3b04      	subs	r3, #4
 800391c:	0112      	lsls	r2, r2, #4
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	440b      	add	r3, r1
 8003922:	761a      	strb	r2, [r3, #24]
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	e000e100 	.word	0xe000e100
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003938:	b480      	push	{r7}
 800393a:	b089      	sub	sp, #36	; 0x24
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f1c3 0307 	rsb	r3, r3, #7
 8003952:	2b04      	cmp	r3, #4
 8003954:	bf28      	it	cs
 8003956:	2304      	movcs	r3, #4
 8003958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3304      	adds	r3, #4
 800395e:	2b06      	cmp	r3, #6
 8003960:	d902      	bls.n	8003968 <NVIC_EncodePriority+0x30>
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3b03      	subs	r3, #3
 8003966:	e000      	b.n	800396a <NVIC_EncodePriority+0x32>
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800396c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43da      	mvns	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	401a      	ands	r2, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003980:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	fa01 f303 	lsl.w	r3, r1, r3
 800398a:	43d9      	mvns	r1, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003990:	4313      	orrs	r3, r2
         );
}
 8003992:	4618      	mov	r0, r3
 8003994:	3724      	adds	r7, #36	; 0x24
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039b0:	d301      	bcc.n	80039b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039b2:	2301      	movs	r3, #1
 80039b4:	e00f      	b.n	80039d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <SysTick_Config+0x40>)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039be:	210f      	movs	r1, #15
 80039c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039c4:	f7ff ff8e 	bl	80038e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <SysTick_Config+0x40>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ce:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <SysTick_Config+0x40>)
 80039d0:	2207      	movs	r2, #7
 80039d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	e000e010 	.word	0xe000e010

080039e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff ff29 	bl	8003844 <__NVIC_SetPriorityGrouping>
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b086      	sub	sp, #24
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	4603      	mov	r3, r0
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a0c:	f7ff ff3e 	bl	800388c <__NVIC_GetPriorityGrouping>
 8003a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	6978      	ldr	r0, [r7, #20]
 8003a18:	f7ff ff8e 	bl	8003938 <NVIC_EncodePriority>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff ff5d 	bl	80038e4 <__NVIC_SetPriority>
}
 8003a2a:	bf00      	nop
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	4603      	mov	r3, r0
 8003a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff ff31 	bl	80038a8 <__NVIC_EnableIRQ>
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff ffa2 	bl	80039a0 <SysTick_Config>
 8003a5c:	4603      	mov	r3, r0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b089      	sub	sp, #36	; 0x24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61fb      	str	r3, [r7, #28]
 8003a82:	e16b      	b.n	8003d5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a84:	2201      	movs	r2, #1
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4013      	ands	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	f040 815a 	bne.w	8003d56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d005      	beq.n	8003aba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d130      	bne.n	8003b1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43db      	mvns	r3, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003af0:	2201      	movs	r2, #1
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4013      	ands	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 0201 	and.w	r2, r3, #1
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d017      	beq.n	8003b58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	2203      	movs	r2, #3
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d123      	bne.n	8003bac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	08da      	lsrs	r2, r3, #3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3208      	adds	r2, #8
 8003b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	220f      	movs	r2, #15
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	08da      	lsrs	r2, r3, #3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3208      	adds	r2, #8
 8003ba6:	69b9      	ldr	r1, [r7, #24]
 8003ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0203 	and.w	r2, r3, #3
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80b4 	beq.w	8003d56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	4b60      	ldr	r3, [pc, #384]	; (8003d74 <HAL_GPIO_Init+0x30c>)
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	4a5f      	ldr	r2, [pc, #380]	; (8003d74 <HAL_GPIO_Init+0x30c>)
 8003bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bfe:	4b5d      	ldr	r3, [pc, #372]	; (8003d74 <HAL_GPIO_Init+0x30c>)
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c0a:	4a5b      	ldr	r2, [pc, #364]	; (8003d78 <HAL_GPIO_Init+0x310>)
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	089b      	lsrs	r3, r3, #2
 8003c10:	3302      	adds	r3, #2
 8003c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	220f      	movs	r2, #15
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43db      	mvns	r3, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a52      	ldr	r2, [pc, #328]	; (8003d7c <HAL_GPIO_Init+0x314>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d02b      	beq.n	8003c8e <HAL_GPIO_Init+0x226>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a51      	ldr	r2, [pc, #324]	; (8003d80 <HAL_GPIO_Init+0x318>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d025      	beq.n	8003c8a <HAL_GPIO_Init+0x222>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a50      	ldr	r2, [pc, #320]	; (8003d84 <HAL_GPIO_Init+0x31c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d01f      	beq.n	8003c86 <HAL_GPIO_Init+0x21e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a4f      	ldr	r2, [pc, #316]	; (8003d88 <HAL_GPIO_Init+0x320>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d019      	beq.n	8003c82 <HAL_GPIO_Init+0x21a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a4e      	ldr	r2, [pc, #312]	; (8003d8c <HAL_GPIO_Init+0x324>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <HAL_GPIO_Init+0x216>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a4d      	ldr	r2, [pc, #308]	; (8003d90 <HAL_GPIO_Init+0x328>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00d      	beq.n	8003c7a <HAL_GPIO_Init+0x212>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a4c      	ldr	r2, [pc, #304]	; (8003d94 <HAL_GPIO_Init+0x32c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d007      	beq.n	8003c76 <HAL_GPIO_Init+0x20e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a4b      	ldr	r2, [pc, #300]	; (8003d98 <HAL_GPIO_Init+0x330>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d101      	bne.n	8003c72 <HAL_GPIO_Init+0x20a>
 8003c6e:	2307      	movs	r3, #7
 8003c70:	e00e      	b.n	8003c90 <HAL_GPIO_Init+0x228>
 8003c72:	2308      	movs	r3, #8
 8003c74:	e00c      	b.n	8003c90 <HAL_GPIO_Init+0x228>
 8003c76:	2306      	movs	r3, #6
 8003c78:	e00a      	b.n	8003c90 <HAL_GPIO_Init+0x228>
 8003c7a:	2305      	movs	r3, #5
 8003c7c:	e008      	b.n	8003c90 <HAL_GPIO_Init+0x228>
 8003c7e:	2304      	movs	r3, #4
 8003c80:	e006      	b.n	8003c90 <HAL_GPIO_Init+0x228>
 8003c82:	2303      	movs	r3, #3
 8003c84:	e004      	b.n	8003c90 <HAL_GPIO_Init+0x228>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e002      	b.n	8003c90 <HAL_GPIO_Init+0x228>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <HAL_GPIO_Init+0x228>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	f002 0203 	and.w	r2, r2, #3
 8003c96:	0092      	lsls	r2, r2, #2
 8003c98:	4093      	lsls	r3, r2
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ca0:	4935      	ldr	r1, [pc, #212]	; (8003d78 <HAL_GPIO_Init+0x310>)
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cae:	4b3b      	ldr	r3, [pc, #236]	; (8003d9c <HAL_GPIO_Init+0x334>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cd2:	4a32      	ldr	r2, [pc, #200]	; (8003d9c <HAL_GPIO_Init+0x334>)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cd8:	4b30      	ldr	r3, [pc, #192]	; (8003d9c <HAL_GPIO_Init+0x334>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cfc:	4a27      	ldr	r2, [pc, #156]	; (8003d9c <HAL_GPIO_Init+0x334>)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d02:	4b26      	ldr	r3, [pc, #152]	; (8003d9c <HAL_GPIO_Init+0x334>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d26:	4a1d      	ldr	r2, [pc, #116]	; (8003d9c <HAL_GPIO_Init+0x334>)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <HAL_GPIO_Init+0x334>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d50:	4a12      	ldr	r2, [pc, #72]	; (8003d9c <HAL_GPIO_Init+0x334>)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	61fb      	str	r3, [r7, #28]
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	2b0f      	cmp	r3, #15
 8003d60:	f67f ae90 	bls.w	8003a84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	3724      	adds	r7, #36	; 0x24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40013800 	.word	0x40013800
 8003d7c:	40020000 	.word	0x40020000
 8003d80:	40020400 	.word	0x40020400
 8003d84:	40020800 	.word	0x40020800
 8003d88:	40020c00 	.word	0x40020c00
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40021400 	.word	0x40021400
 8003d94:	40021800 	.word	0x40021800
 8003d98:	40021c00 	.word	0x40021c00
 8003d9c:	40013c00 	.word	0x40013c00

08003da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	807b      	strh	r3, [r7, #2]
 8003dac:	4613      	mov	r3, r2
 8003dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003db0:	787b      	ldrb	r3, [r7, #1]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003db6:	887a      	ldrh	r2, [r7, #2]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dbc:	e003      	b.n	8003dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dbe:	887b      	ldrh	r3, [r7, #2]
 8003dc0:	041a      	lsls	r2, r3, #16
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	619a      	str	r2, [r3, #24]
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b085      	sub	sp, #20
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003de4:	887a      	ldrh	r2, [r7, #2]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4013      	ands	r3, r2
 8003dea:	041a      	lsls	r2, r3, #16
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	43d9      	mvns	r1, r3
 8003df0:	887b      	ldrh	r3, [r7, #2]
 8003df2:	400b      	ands	r3, r1
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	619a      	str	r2, [r3, #24]
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
	...

08003e08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e12b      	b.n	8004072 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fd ffbc 	bl	8001dac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2224      	movs	r2, #36	; 0x24
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0201 	bic.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e6c:	f001 fbfc 	bl	8005668 <HAL_RCC_GetPCLK1Freq>
 8003e70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	4a81      	ldr	r2, [pc, #516]	; (800407c <HAL_I2C_Init+0x274>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d807      	bhi.n	8003e8c <HAL_I2C_Init+0x84>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4a80      	ldr	r2, [pc, #512]	; (8004080 <HAL_I2C_Init+0x278>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	bf94      	ite	ls
 8003e84:	2301      	movls	r3, #1
 8003e86:	2300      	movhi	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	e006      	b.n	8003e9a <HAL_I2C_Init+0x92>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4a7d      	ldr	r2, [pc, #500]	; (8004084 <HAL_I2C_Init+0x27c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	bf94      	ite	ls
 8003e94:	2301      	movls	r3, #1
 8003e96:	2300      	movhi	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e0e7      	b.n	8004072 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4a78      	ldr	r2, [pc, #480]	; (8004088 <HAL_I2C_Init+0x280>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	0c9b      	lsrs	r3, r3, #18
 8003eac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	4a6a      	ldr	r2, [pc, #424]	; (800407c <HAL_I2C_Init+0x274>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d802      	bhi.n	8003edc <HAL_I2C_Init+0xd4>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	e009      	b.n	8003ef0 <HAL_I2C_Init+0xe8>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ee2:	fb02 f303 	mul.w	r3, r2, r3
 8003ee6:	4a69      	ldr	r2, [pc, #420]	; (800408c <HAL_I2C_Init+0x284>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	099b      	lsrs	r3, r3, #6
 8003eee:	3301      	adds	r3, #1
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6812      	ldr	r2, [r2, #0]
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	495c      	ldr	r1, [pc, #368]	; (800407c <HAL_I2C_Init+0x274>)
 8003f0c:	428b      	cmp	r3, r1
 8003f0e:	d819      	bhi.n	8003f44 <HAL_I2C_Init+0x13c>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	1e59      	subs	r1, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f1e:	1c59      	adds	r1, r3, #1
 8003f20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f24:	400b      	ands	r3, r1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <HAL_I2C_Init+0x138>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1e59      	subs	r1, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f38:	3301      	adds	r3, #1
 8003f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f3e:	e051      	b.n	8003fe4 <HAL_I2C_Init+0x1dc>
 8003f40:	2304      	movs	r3, #4
 8003f42:	e04f      	b.n	8003fe4 <HAL_I2C_Init+0x1dc>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d111      	bne.n	8003f70 <HAL_I2C_Init+0x168>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	1e58      	subs	r0, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	440b      	add	r3, r1
 8003f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f5e:	3301      	adds	r3, #1
 8003f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	e012      	b.n	8003f96 <HAL_I2C_Init+0x18e>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1e58      	subs	r0, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6859      	ldr	r1, [r3, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	0099      	lsls	r1, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f86:	3301      	adds	r3, #1
 8003f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_I2C_Init+0x196>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e022      	b.n	8003fe4 <HAL_I2C_Init+0x1dc>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10e      	bne.n	8003fc4 <HAL_I2C_Init+0x1bc>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1e58      	subs	r0, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6859      	ldr	r1, [r3, #4]
 8003fae:	460b      	mov	r3, r1
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	440b      	add	r3, r1
 8003fb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fb8:	3301      	adds	r3, #1
 8003fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fc2:	e00f      	b.n	8003fe4 <HAL_I2C_Init+0x1dc>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1e58      	subs	r0, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6859      	ldr	r1, [r3, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	0099      	lsls	r1, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fda:	3301      	adds	r3, #1
 8003fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	6809      	ldr	r1, [r1, #0]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69da      	ldr	r2, [r3, #28]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004012:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6911      	ldr	r1, [r2, #16]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	68d2      	ldr	r2, [r2, #12]
 800401e:	4311      	orrs	r1, r2
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6812      	ldr	r2, [r2, #0]
 8004024:	430b      	orrs	r3, r1
 8004026:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695a      	ldr	r2, [r3, #20]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	000186a0 	.word	0x000186a0
 8004080:	001e847f 	.word	0x001e847f
 8004084:	003d08ff 	.word	0x003d08ff
 8004088:	431bde83 	.word	0x431bde83
 800408c:	10624dd3 	.word	0x10624dd3

08004090 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	4608      	mov	r0, r1
 800409a:	4611      	mov	r1, r2
 800409c:	461a      	mov	r2, r3
 800409e:	4603      	mov	r3, r0
 80040a0:	817b      	strh	r3, [r7, #10]
 80040a2:	460b      	mov	r3, r1
 80040a4:	813b      	strh	r3, [r7, #8]
 80040a6:	4613      	mov	r3, r2
 80040a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040aa:	f7fe f939 	bl	8002320 <HAL_GetTick>
 80040ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	f040 80d9 	bne.w	8004270 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	2319      	movs	r3, #25
 80040c4:	2201      	movs	r2, #1
 80040c6:	496d      	ldr	r1, [pc, #436]	; (800427c <HAL_I2C_Mem_Write+0x1ec>)
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 fc7f 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040d4:	2302      	movs	r3, #2
 80040d6:	e0cc      	b.n	8004272 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_I2C_Mem_Write+0x56>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e0c5      	b.n	8004272 <HAL_I2C_Mem_Write+0x1e2>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d007      	beq.n	800410c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800411a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2221      	movs	r2, #33	; 0x21
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2240      	movs	r2, #64	; 0x40
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a3a      	ldr	r2, [r7, #32]
 8004136:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800413c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4a4d      	ldr	r2, [pc, #308]	; (8004280 <HAL_I2C_Mem_Write+0x1f0>)
 800414c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800414e:	88f8      	ldrh	r0, [r7, #6]
 8004150:	893a      	ldrh	r2, [r7, #8]
 8004152:	8979      	ldrh	r1, [r7, #10]
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	4603      	mov	r3, r0
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 fab6 	bl	80046d0 <I2C_RequestMemoryWrite>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d052      	beq.n	8004210 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e081      	b.n	8004272 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 fd00 	bl	8004b78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00d      	beq.n	800419a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	2b04      	cmp	r3, #4
 8004184:	d107      	bne.n	8004196 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004194:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e06b      	b.n	8004272 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	781a      	ldrb	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d11b      	bne.n	8004210 <HAL_I2C_Mem_Write+0x180>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d017      	beq.n	8004210 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	781a      	ldrb	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1aa      	bne.n	800416e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 fcec 	bl	8004bfa <I2C_WaitOnBTFFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00d      	beq.n	8004244 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	2b04      	cmp	r3, #4
 800422e:	d107      	bne.n	8004240 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800423e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e016      	b.n	8004272 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	e000      	b.n	8004272 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004270:	2302      	movs	r3, #2
  }
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	00100002 	.word	0x00100002
 8004280:	ffff0000 	.word	0xffff0000

08004284 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08c      	sub	sp, #48	; 0x30
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	4608      	mov	r0, r1
 800428e:	4611      	mov	r1, r2
 8004290:	461a      	mov	r2, r3
 8004292:	4603      	mov	r3, r0
 8004294:	817b      	strh	r3, [r7, #10]
 8004296:	460b      	mov	r3, r1
 8004298:	813b      	strh	r3, [r7, #8]
 800429a:	4613      	mov	r3, r2
 800429c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800429e:	f7fe f83f 	bl	8002320 <HAL_GetTick>
 80042a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b20      	cmp	r3, #32
 80042ae:	f040 8208 	bne.w	80046c2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	2319      	movs	r3, #25
 80042b8:	2201      	movs	r2, #1
 80042ba:	497b      	ldr	r1, [pc, #492]	; (80044a8 <HAL_I2C_Mem_Read+0x224>)
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 fb85 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80042c8:	2302      	movs	r3, #2
 80042ca:	e1fb      	b.n	80046c4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_I2C_Mem_Read+0x56>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e1f4      	b.n	80046c4 <HAL_I2C_Mem_Read+0x440>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d007      	beq.n	8004300 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800430e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2222      	movs	r2, #34	; 0x22
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2240      	movs	r2, #64	; 0x40
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800432a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004330:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4a5b      	ldr	r2, [pc, #364]	; (80044ac <HAL_I2C_Mem_Read+0x228>)
 8004340:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004342:	88f8      	ldrh	r0, [r7, #6]
 8004344:	893a      	ldrh	r2, [r7, #8]
 8004346:	8979      	ldrh	r1, [r7, #10]
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	9301      	str	r3, [sp, #4]
 800434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	4603      	mov	r3, r0
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 fa52 	bl	80047fc <I2C_RequestMemoryRead>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e1b0      	b.n	80046c4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004366:	2b00      	cmp	r3, #0
 8004368:	d113      	bne.n	8004392 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800436a:	2300      	movs	r3, #0
 800436c:	623b      	str	r3, [r7, #32]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	623b      	str	r3, [r7, #32]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	623b      	str	r3, [r7, #32]
 800437e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	e184      	b.n	800469c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004396:	2b01      	cmp	r3, #1
 8004398:	d11b      	bne.n	80043d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	61fb      	str	r3, [r7, #28]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	e164      	b.n	800469c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d11b      	bne.n	8004412 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fa:	2300      	movs	r3, #0
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	61bb      	str	r3, [r7, #24]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	e144      	b.n	800469c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004428:	e138      	b.n	800469c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442e:	2b03      	cmp	r3, #3
 8004430:	f200 80f1 	bhi.w	8004616 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004438:	2b01      	cmp	r3, #1
 800443a:	d123      	bne.n	8004484 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800443c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 fc1b 	bl	8004c7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e139      	b.n	80046c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004482:	e10b      	b.n	800469c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004488:	2b02      	cmp	r3, #2
 800448a:	d14e      	bne.n	800452a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004492:	2200      	movs	r2, #0
 8004494:	4906      	ldr	r1, [pc, #24]	; (80044b0 <HAL_I2C_Mem_Read+0x22c>)
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 fa98 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d008      	beq.n	80044b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e10e      	b.n	80046c4 <HAL_I2C_Mem_Read+0x440>
 80044a6:	bf00      	nop
 80044a8:	00100002 	.word	0x00100002
 80044ac:	ffff0000 	.word	0xffff0000
 80044b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691a      	ldr	r2, [r3, #16]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004512:	3b01      	subs	r3, #1
 8004514:	b29a      	uxth	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004528:	e0b8      	b.n	800469c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004530:	2200      	movs	r2, #0
 8004532:	4966      	ldr	r1, [pc, #408]	; (80046cc <HAL_I2C_Mem_Read+0x448>)
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 fa49 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0bf      	b.n	80046c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691a      	ldr	r2, [r3, #16]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458c:	2200      	movs	r2, #0
 800458e:	494f      	ldr	r1, [pc, #316]	; (80046cc <HAL_I2C_Mem_Read+0x448>)
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 fa1b 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e091      	b.n	80046c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691a      	ldr	r2, [r3, #16]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460a:	b29b      	uxth	r3, r3
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004614:	e042      	b.n	800469c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004618:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 fb2e 	bl	8004c7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e04c      	b.n	80046c4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b04      	cmp	r3, #4
 8004668:	d118      	bne.n	800469c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f47f aec2 	bne.w	800442a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	e000      	b.n	80046c4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
  }
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3728      	adds	r7, #40	; 0x28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	00010004 	.word	0x00010004

080046d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	4608      	mov	r0, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	461a      	mov	r2, r3
 80046de:	4603      	mov	r3, r0
 80046e0:	817b      	strh	r3, [r7, #10]
 80046e2:	460b      	mov	r3, r1
 80046e4:	813b      	strh	r3, [r7, #8]
 80046e6:	4613      	mov	r3, r2
 80046e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	2200      	movs	r2, #0
 8004702:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f960 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004720:	d103      	bne.n	800472a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004728:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e05f      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800472e:	897b      	ldrh	r3, [r7, #10]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	461a      	mov	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800473c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	6a3a      	ldr	r2, [r7, #32]
 8004742:	492d      	ldr	r1, [pc, #180]	; (80047f8 <I2C_RequestMemoryWrite+0x128>)
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f998 	bl	8004a7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e04c      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800476a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476c:	6a39      	ldr	r1, [r7, #32]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fa02 	bl	8004b78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00d      	beq.n	8004796 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	2b04      	cmp	r3, #4
 8004780:	d107      	bne.n	8004792 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004790:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e02b      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d105      	bne.n	80047a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800479c:	893b      	ldrh	r3, [r7, #8]
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	611a      	str	r2, [r3, #16]
 80047a6:	e021      	b.n	80047ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047a8:	893b      	ldrh	r3, [r7, #8]
 80047aa:	0a1b      	lsrs	r3, r3, #8
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b8:	6a39      	ldr	r1, [r7, #32]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f9dc 	bl	8004b78 <I2C_WaitOnTXEFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00d      	beq.n	80047e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d107      	bne.n	80047de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e005      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047e2:	893b      	ldrh	r3, [r7, #8]
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	00010002 	.word	0x00010002

080047fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	4608      	mov	r0, r1
 8004806:	4611      	mov	r1, r2
 8004808:	461a      	mov	r2, r3
 800480a:	4603      	mov	r3, r0
 800480c:	817b      	strh	r3, [r7, #10]
 800480e:	460b      	mov	r3, r1
 8004810:	813b      	strh	r3, [r7, #8]
 8004812:	4613      	mov	r3, r2
 8004814:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004824:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004834:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	2200      	movs	r2, #0
 800483e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f8c2 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00d      	beq.n	800486a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800485c:	d103      	bne.n	8004866 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004864:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e0aa      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800486a:	897b      	ldrh	r3, [r7, #10]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	461a      	mov	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004878:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	6a3a      	ldr	r2, [r7, #32]
 800487e:	4952      	ldr	r1, [pc, #328]	; (80049c8 <I2C_RequestMemoryRead+0x1cc>)
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f8fa 	bl	8004a7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e097      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a8:	6a39      	ldr	r1, [r7, #32]
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f964 	bl	8004b78 <I2C_WaitOnTXEFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00d      	beq.n	80048d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d107      	bne.n	80048ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e076      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d105      	bne.n	80048e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048d8:	893b      	ldrh	r3, [r7, #8]
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	611a      	str	r2, [r3, #16]
 80048e2:	e021      	b.n	8004928 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048e4:	893b      	ldrh	r3, [r7, #8]
 80048e6:	0a1b      	lsrs	r3, r3, #8
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f4:	6a39      	ldr	r1, [r7, #32]
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f93e 	bl	8004b78 <I2C_WaitOnTXEFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00d      	beq.n	800491e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	2b04      	cmp	r3, #4
 8004908:	d107      	bne.n	800491a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004918:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e050      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800491e:	893b      	ldrh	r3, [r7, #8]
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492a:	6a39      	ldr	r1, [r7, #32]
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f923 	bl	8004b78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00d      	beq.n	8004954 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	2b04      	cmp	r3, #4
 800493e:	d107      	bne.n	8004950 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800494e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e035      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004962:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	2200      	movs	r2, #0
 800496c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f82b 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00d      	beq.n	8004998 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800498a:	d103      	bne.n	8004994 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004992:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e013      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004998:	897b      	ldrh	r3, [r7, #10]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	6a3a      	ldr	r2, [r7, #32]
 80049ac:	4906      	ldr	r1, [pc, #24]	; (80049c8 <I2C_RequestMemoryRead+0x1cc>)
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f863 	bl	8004a7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	00010002 	.word	0x00010002

080049cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049dc:	e025      	b.n	8004a2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049e4:	d021      	beq.n	8004a2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e6:	f7fd fc9b 	bl	8002320 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d302      	bcc.n	80049fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d116      	bne.n	8004a2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f043 0220 	orr.w	r2, r3, #32
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e023      	b.n	8004a72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	0c1b      	lsrs	r3, r3, #16
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d10d      	bne.n	8004a50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	43da      	mvns	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bf0c      	ite	eq
 8004a46:	2301      	moveq	r3, #1
 8004a48:	2300      	movne	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	e00c      	b.n	8004a6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	43da      	mvns	r2, r3
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	bf0c      	ite	eq
 8004a62:	2301      	moveq	r3, #1
 8004a64:	2300      	movne	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d0b6      	beq.n	80049de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	607a      	str	r2, [r7, #4]
 8004a86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a88:	e051      	b.n	8004b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a98:	d123      	bne.n	8004ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ab2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f043 0204 	orr.w	r2, r3, #4
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e046      	b.n	8004b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ae8:	d021      	beq.n	8004b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aea:	f7fd fc19 	bl	8002320 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d302      	bcc.n	8004b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d116      	bne.n	8004b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f043 0220 	orr.w	r2, r3, #32
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e020      	b.n	8004b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	0c1b      	lsrs	r3, r3, #16
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d10c      	bne.n	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	43da      	mvns	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4013      	ands	r3, r2
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bf14      	ite	ne
 8004b4a:	2301      	movne	r3, #1
 8004b4c:	2300      	moveq	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	e00b      	b.n	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	43da      	mvns	r2, r3
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	bf14      	ite	ne
 8004b64:	2301      	movne	r3, #1
 8004b66:	2300      	moveq	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d18d      	bne.n	8004a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b84:	e02d      	b.n	8004be2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f8ce 	bl	8004d28 <I2C_IsAcknowledgeFailed>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e02d      	b.n	8004bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b9c:	d021      	beq.n	8004be2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9e:	f7fd fbbf 	bl	8002320 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d302      	bcc.n	8004bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d116      	bne.n	8004be2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	f043 0220 	orr.w	r2, r3, #32
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e007      	b.n	8004bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bec:	2b80      	cmp	r3, #128	; 0x80
 8004bee:	d1ca      	bne.n	8004b86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b084      	sub	sp, #16
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	60f8      	str	r0, [r7, #12]
 8004c02:	60b9      	str	r1, [r7, #8]
 8004c04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c06:	e02d      	b.n	8004c64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f88d 	bl	8004d28 <I2C_IsAcknowledgeFailed>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e02d      	b.n	8004c74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c1e:	d021      	beq.n	8004c64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c20:	f7fd fb7e 	bl	8002320 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d302      	bcc.n	8004c36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d116      	bne.n	8004c64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	f043 0220 	orr.w	r2, r3, #32
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e007      	b.n	8004c74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d1ca      	bne.n	8004c08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c88:	e042      	b.n	8004d10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d119      	bne.n	8004ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0210 	mvn.w	r2, #16
 8004ca0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e029      	b.n	8004d20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ccc:	f7fd fb28 	bl	8002320 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d302      	bcc.n	8004ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d116      	bne.n	8004d10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	f043 0220 	orr.w	r2, r3, #32
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e007      	b.n	8004d20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1a:	2b40      	cmp	r3, #64	; 0x40
 8004d1c:	d1b5      	bne.n	8004c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3e:	d11b      	bne.n	8004d78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	f043 0204 	orr.w	r2, r3, #4
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e267      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d075      	beq.n	8004e92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004da6:	4b88      	ldr	r3, [pc, #544]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 030c 	and.w	r3, r3, #12
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d00c      	beq.n	8004dcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004db2:	4b85      	ldr	r3, [pc, #532]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d112      	bne.n	8004de4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dbe:	4b82      	ldr	r3, [pc, #520]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dca:	d10b      	bne.n	8004de4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dcc:	4b7e      	ldr	r3, [pc, #504]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d05b      	beq.n	8004e90 <HAL_RCC_OscConfig+0x108>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d157      	bne.n	8004e90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e242      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dec:	d106      	bne.n	8004dfc <HAL_RCC_OscConfig+0x74>
 8004dee:	4b76      	ldr	r3, [pc, #472]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a75      	ldr	r2, [pc, #468]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	e01d      	b.n	8004e38 <HAL_RCC_OscConfig+0xb0>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e04:	d10c      	bne.n	8004e20 <HAL_RCC_OscConfig+0x98>
 8004e06:	4b70      	ldr	r3, [pc, #448]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a6f      	ldr	r2, [pc, #444]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	4b6d      	ldr	r3, [pc, #436]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a6c      	ldr	r2, [pc, #432]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	e00b      	b.n	8004e38 <HAL_RCC_OscConfig+0xb0>
 8004e20:	4b69      	ldr	r3, [pc, #420]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a68      	ldr	r2, [pc, #416]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	4b66      	ldr	r3, [pc, #408]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a65      	ldr	r2, [pc, #404]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d013      	beq.n	8004e68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e40:	f7fd fa6e 	bl	8002320 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e48:	f7fd fa6a 	bl	8002320 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b64      	cmp	r3, #100	; 0x64
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e207      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5a:	4b5b      	ldr	r3, [pc, #364]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0f0      	beq.n	8004e48 <HAL_RCC_OscConfig+0xc0>
 8004e66:	e014      	b.n	8004e92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e68:	f7fd fa5a 	bl	8002320 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e70:	f7fd fa56 	bl	8002320 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b64      	cmp	r3, #100	; 0x64
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e1f3      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e82:	4b51      	ldr	r3, [pc, #324]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0xe8>
 8004e8e:	e000      	b.n	8004e92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d063      	beq.n	8004f66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e9e:	4b4a      	ldr	r3, [pc, #296]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00b      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eaa:	4b47      	ldr	r3, [pc, #284]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d11c      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eb6:	4b44      	ldr	r3, [pc, #272]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d116      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ec2:	4b41      	ldr	r3, [pc, #260]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d005      	beq.n	8004eda <HAL_RCC_OscConfig+0x152>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d001      	beq.n	8004eda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e1c7      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eda:	4b3b      	ldr	r3, [pc, #236]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	4937      	ldr	r1, [pc, #220]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eee:	e03a      	b.n	8004f66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d020      	beq.n	8004f3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ef8:	4b34      	ldr	r3, [pc, #208]	; (8004fcc <HAL_RCC_OscConfig+0x244>)
 8004efa:	2201      	movs	r2, #1
 8004efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efe:	f7fd fa0f 	bl	8002320 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f06:	f7fd fa0b 	bl	8002320 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e1a8      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f18:	4b2b      	ldr	r3, [pc, #172]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0f0      	beq.n	8004f06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f24:	4b28      	ldr	r3, [pc, #160]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	4925      	ldr	r1, [pc, #148]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	600b      	str	r3, [r1, #0]
 8004f38:	e015      	b.n	8004f66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f3a:	4b24      	ldr	r3, [pc, #144]	; (8004fcc <HAL_RCC_OscConfig+0x244>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fd f9ee 	bl	8002320 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f48:	f7fd f9ea 	bl	8002320 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e187      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f5a:	4b1b      	ldr	r3, [pc, #108]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d036      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d016      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f7a:	4b15      	ldr	r3, [pc, #84]	; (8004fd0 <HAL_RCC_OscConfig+0x248>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f80:	f7fd f9ce 	bl	8002320 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f88:	f7fd f9ca 	bl	8002320 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e167      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f9a:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0f0      	beq.n	8004f88 <HAL_RCC_OscConfig+0x200>
 8004fa6:	e01b      	b.n	8004fe0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fa8:	4b09      	ldr	r3, [pc, #36]	; (8004fd0 <HAL_RCC_OscConfig+0x248>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fae:	f7fd f9b7 	bl	8002320 <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb4:	e00e      	b.n	8004fd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fb6:	f7fd f9b3 	bl	8002320 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d907      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e150      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	42470000 	.word	0x42470000
 8004fd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fd4:	4b88      	ldr	r3, [pc, #544]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 8004fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1ea      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 8097 	beq.w	800511c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ff2:	4b81      	ldr	r3, [pc, #516]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10f      	bne.n	800501e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ffe:	2300      	movs	r3, #0
 8005000:	60bb      	str	r3, [r7, #8]
 8005002:	4b7d      	ldr	r3, [pc, #500]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	4a7c      	ldr	r2, [pc, #496]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800500c:	6413      	str	r3, [r2, #64]	; 0x40
 800500e:	4b7a      	ldr	r3, [pc, #488]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800501a:	2301      	movs	r3, #1
 800501c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800501e:	4b77      	ldr	r3, [pc, #476]	; (80051fc <HAL_RCC_OscConfig+0x474>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005026:	2b00      	cmp	r3, #0
 8005028:	d118      	bne.n	800505c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800502a:	4b74      	ldr	r3, [pc, #464]	; (80051fc <HAL_RCC_OscConfig+0x474>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a73      	ldr	r2, [pc, #460]	; (80051fc <HAL_RCC_OscConfig+0x474>)
 8005030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005036:	f7fd f973 	bl	8002320 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503c:	e008      	b.n	8005050 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800503e:	f7fd f96f 	bl	8002320 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e10c      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005050:	4b6a      	ldr	r3, [pc, #424]	; (80051fc <HAL_RCC_OscConfig+0x474>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0f0      	beq.n	800503e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d106      	bne.n	8005072 <HAL_RCC_OscConfig+0x2ea>
 8005064:	4b64      	ldr	r3, [pc, #400]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005068:	4a63      	ldr	r2, [pc, #396]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 800506a:	f043 0301 	orr.w	r3, r3, #1
 800506e:	6713      	str	r3, [r2, #112]	; 0x70
 8005070:	e01c      	b.n	80050ac <HAL_RCC_OscConfig+0x324>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b05      	cmp	r3, #5
 8005078:	d10c      	bne.n	8005094 <HAL_RCC_OscConfig+0x30c>
 800507a:	4b5f      	ldr	r3, [pc, #380]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 800507c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507e:	4a5e      	ldr	r2, [pc, #376]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005080:	f043 0304 	orr.w	r3, r3, #4
 8005084:	6713      	str	r3, [r2, #112]	; 0x70
 8005086:	4b5c      	ldr	r3, [pc, #368]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508a:	4a5b      	ldr	r2, [pc, #364]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	6713      	str	r3, [r2, #112]	; 0x70
 8005092:	e00b      	b.n	80050ac <HAL_RCC_OscConfig+0x324>
 8005094:	4b58      	ldr	r3, [pc, #352]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005098:	4a57      	ldr	r2, [pc, #348]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 800509a:	f023 0301 	bic.w	r3, r3, #1
 800509e:	6713      	str	r3, [r2, #112]	; 0x70
 80050a0:	4b55      	ldr	r3, [pc, #340]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 80050a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a4:	4a54      	ldr	r2, [pc, #336]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 80050a6:	f023 0304 	bic.w	r3, r3, #4
 80050aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d015      	beq.n	80050e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b4:	f7fd f934 	bl	8002320 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ba:	e00a      	b.n	80050d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050bc:	f7fd f930 	bl	8002320 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e0cb      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d2:	4b49      	ldr	r3, [pc, #292]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0ee      	beq.n	80050bc <HAL_RCC_OscConfig+0x334>
 80050de:	e014      	b.n	800510a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050e0:	f7fd f91e 	bl	8002320 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050e6:	e00a      	b.n	80050fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050e8:	f7fd f91a 	bl	8002320 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e0b5      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050fe:	4b3e      	ldr	r3, [pc, #248]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1ee      	bne.n	80050e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800510a:	7dfb      	ldrb	r3, [r7, #23]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d105      	bne.n	800511c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005110:	4b39      	ldr	r3, [pc, #228]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	4a38      	ldr	r2, [pc, #224]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800511a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 80a1 	beq.w	8005268 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005126:	4b34      	ldr	r3, [pc, #208]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 030c 	and.w	r3, r3, #12
 800512e:	2b08      	cmp	r3, #8
 8005130:	d05c      	beq.n	80051ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	2b02      	cmp	r3, #2
 8005138:	d141      	bne.n	80051be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800513a:	4b31      	ldr	r3, [pc, #196]	; (8005200 <HAL_RCC_OscConfig+0x478>)
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005140:	f7fd f8ee 	bl	8002320 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005148:	f7fd f8ea 	bl	8002320 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e087      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800515a:	4b27      	ldr	r3, [pc, #156]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f0      	bne.n	8005148 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69da      	ldr	r2, [r3, #28]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	019b      	lsls	r3, r3, #6
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517c:	085b      	lsrs	r3, r3, #1
 800517e:	3b01      	subs	r3, #1
 8005180:	041b      	lsls	r3, r3, #16
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	061b      	lsls	r3, r3, #24
 800518a:	491b      	ldr	r1, [pc, #108]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 800518c:	4313      	orrs	r3, r2
 800518e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005190:	4b1b      	ldr	r3, [pc, #108]	; (8005200 <HAL_RCC_OscConfig+0x478>)
 8005192:	2201      	movs	r2, #1
 8005194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005196:	f7fd f8c3 	bl	8002320 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800519e:	f7fd f8bf 	bl	8002320 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e05c      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b0:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0f0      	beq.n	800519e <HAL_RCC_OscConfig+0x416>
 80051bc:	e054      	b.n	8005268 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051be:	4b10      	ldr	r3, [pc, #64]	; (8005200 <HAL_RCC_OscConfig+0x478>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c4:	f7fd f8ac 	bl	8002320 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051cc:	f7fd f8a8 	bl	8002320 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e045      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051de:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <HAL_RCC_OscConfig+0x470>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f0      	bne.n	80051cc <HAL_RCC_OscConfig+0x444>
 80051ea:	e03d      	b.n	8005268 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d107      	bne.n	8005204 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e038      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
 80051f8:	40023800 	.word	0x40023800
 80051fc:	40007000 	.word	0x40007000
 8005200:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005204:	4b1b      	ldr	r3, [pc, #108]	; (8005274 <HAL_RCC_OscConfig+0x4ec>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d028      	beq.n	8005264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800521c:	429a      	cmp	r2, r3
 800521e:	d121      	bne.n	8005264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800522a:	429a      	cmp	r2, r3
 800522c:	d11a      	bne.n	8005264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005234:	4013      	ands	r3, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800523a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800523c:	4293      	cmp	r3, r2
 800523e:	d111      	bne.n	8005264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524a:	085b      	lsrs	r3, r3, #1
 800524c:	3b01      	subs	r3, #1
 800524e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005250:	429a      	cmp	r2, r3
 8005252:	d107      	bne.n	8005264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005260:	429a      	cmp	r2, r3
 8005262:	d001      	beq.n	8005268 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	40023800 	.word	0x40023800

08005278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e0cc      	b.n	8005426 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800528c:	4b68      	ldr	r3, [pc, #416]	; (8005430 <HAL_RCC_ClockConfig+0x1b8>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	429a      	cmp	r2, r3
 8005298:	d90c      	bls.n	80052b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800529a:	4b65      	ldr	r3, [pc, #404]	; (8005430 <HAL_RCC_ClockConfig+0x1b8>)
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052a2:	4b63      	ldr	r3, [pc, #396]	; (8005430 <HAL_RCC_ClockConfig+0x1b8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d001      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e0b8      	b.n	8005426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d020      	beq.n	8005302 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052cc:	4b59      	ldr	r3, [pc, #356]	; (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	4a58      	ldr	r2, [pc, #352]	; (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052e4:	4b53      	ldr	r3, [pc, #332]	; (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	4a52      	ldr	r2, [pc, #328]	; (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80052ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052f0:	4b50      	ldr	r3, [pc, #320]	; (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	494d      	ldr	r1, [pc, #308]	; (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d044      	beq.n	8005398 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d107      	bne.n	8005326 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005316:	4b47      	ldr	r3, [pc, #284]	; (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d119      	bne.n	8005356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e07f      	b.n	8005426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b02      	cmp	r3, #2
 800532c:	d003      	beq.n	8005336 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005332:	2b03      	cmp	r3, #3
 8005334:	d107      	bne.n	8005346 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005336:	4b3f      	ldr	r3, [pc, #252]	; (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d109      	bne.n	8005356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e06f      	b.n	8005426 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005346:	4b3b      	ldr	r3, [pc, #236]	; (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e067      	b.n	8005426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005356:	4b37      	ldr	r3, [pc, #220]	; (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f023 0203 	bic.w	r2, r3, #3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	4934      	ldr	r1, [pc, #208]	; (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 8005364:	4313      	orrs	r3, r2
 8005366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005368:	f7fc ffda 	bl	8002320 <HAL_GetTick>
 800536c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800536e:	e00a      	b.n	8005386 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005370:	f7fc ffd6 	bl	8002320 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	f241 3288 	movw	r2, #5000	; 0x1388
 800537e:	4293      	cmp	r3, r2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e04f      	b.n	8005426 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005386:	4b2b      	ldr	r3, [pc, #172]	; (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 020c 	and.w	r2, r3, #12
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	429a      	cmp	r2, r3
 8005396:	d1eb      	bne.n	8005370 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005398:	4b25      	ldr	r3, [pc, #148]	; (8005430 <HAL_RCC_ClockConfig+0x1b8>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d20c      	bcs.n	80053c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a6:	4b22      	ldr	r3, [pc, #136]	; (8005430 <HAL_RCC_ClockConfig+0x1b8>)
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ae:	4b20      	ldr	r3, [pc, #128]	; (8005430 <HAL_RCC_ClockConfig+0x1b8>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d001      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e032      	b.n	8005426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d008      	beq.n	80053de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053cc:	4b19      	ldr	r3, [pc, #100]	; (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	4916      	ldr	r1, [pc, #88]	; (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d009      	beq.n	80053fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ea:	4b12      	ldr	r3, [pc, #72]	; (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	490e      	ldr	r1, [pc, #56]	; (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053fe:	f000 f821 	bl	8005444 <HAL_RCC_GetSysClockFreq>
 8005402:	4602      	mov	r2, r0
 8005404:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	091b      	lsrs	r3, r3, #4
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	490a      	ldr	r1, [pc, #40]	; (8005438 <HAL_RCC_ClockConfig+0x1c0>)
 8005410:	5ccb      	ldrb	r3, [r1, r3]
 8005412:	fa22 f303 	lsr.w	r3, r2, r3
 8005416:	4a09      	ldr	r2, [pc, #36]	; (800543c <HAL_RCC_ClockConfig+0x1c4>)
 8005418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800541a:	4b09      	ldr	r3, [pc, #36]	; (8005440 <HAL_RCC_ClockConfig+0x1c8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f7fc ff3a 	bl	8002298 <HAL_InitTick>

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40023c00 	.word	0x40023c00
 8005434:	40023800 	.word	0x40023800
 8005438:	0800ae1c 	.word	0x0800ae1c
 800543c:	20000000 	.word	0x20000000
 8005440:	20000004 	.word	0x20000004

08005444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005448:	b094      	sub	sp, #80	; 0x50
 800544a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	647b      	str	r3, [r7, #68]	; 0x44
 8005450:	2300      	movs	r3, #0
 8005452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005454:	2300      	movs	r3, #0
 8005456:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800545c:	4b79      	ldr	r3, [pc, #484]	; (8005644 <HAL_RCC_GetSysClockFreq+0x200>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 030c 	and.w	r3, r3, #12
 8005464:	2b08      	cmp	r3, #8
 8005466:	d00d      	beq.n	8005484 <HAL_RCC_GetSysClockFreq+0x40>
 8005468:	2b08      	cmp	r3, #8
 800546a:	f200 80e1 	bhi.w	8005630 <HAL_RCC_GetSysClockFreq+0x1ec>
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_RCC_GetSysClockFreq+0x34>
 8005472:	2b04      	cmp	r3, #4
 8005474:	d003      	beq.n	800547e <HAL_RCC_GetSysClockFreq+0x3a>
 8005476:	e0db      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005478:	4b73      	ldr	r3, [pc, #460]	; (8005648 <HAL_RCC_GetSysClockFreq+0x204>)
 800547a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800547c:	e0db      	b.n	8005636 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800547e:	4b73      	ldr	r3, [pc, #460]	; (800564c <HAL_RCC_GetSysClockFreq+0x208>)
 8005480:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005482:	e0d8      	b.n	8005636 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005484:	4b6f      	ldr	r3, [pc, #444]	; (8005644 <HAL_RCC_GetSysClockFreq+0x200>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800548c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800548e:	4b6d      	ldr	r3, [pc, #436]	; (8005644 <HAL_RCC_GetSysClockFreq+0x200>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d063      	beq.n	8005562 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800549a:	4b6a      	ldr	r3, [pc, #424]	; (8005644 <HAL_RCC_GetSysClockFreq+0x200>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	099b      	lsrs	r3, r3, #6
 80054a0:	2200      	movs	r2, #0
 80054a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80054a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ac:	633b      	str	r3, [r7, #48]	; 0x30
 80054ae:	2300      	movs	r3, #0
 80054b0:	637b      	str	r3, [r7, #52]	; 0x34
 80054b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80054b6:	4622      	mov	r2, r4
 80054b8:	462b      	mov	r3, r5
 80054ba:	f04f 0000 	mov.w	r0, #0
 80054be:	f04f 0100 	mov.w	r1, #0
 80054c2:	0159      	lsls	r1, r3, #5
 80054c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054c8:	0150      	lsls	r0, r2, #5
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4621      	mov	r1, r4
 80054d0:	1a51      	subs	r1, r2, r1
 80054d2:	6139      	str	r1, [r7, #16]
 80054d4:	4629      	mov	r1, r5
 80054d6:	eb63 0301 	sbc.w	r3, r3, r1
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	f04f 0200 	mov.w	r2, #0
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054e8:	4659      	mov	r1, fp
 80054ea:	018b      	lsls	r3, r1, #6
 80054ec:	4651      	mov	r1, sl
 80054ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054f2:	4651      	mov	r1, sl
 80054f4:	018a      	lsls	r2, r1, #6
 80054f6:	4651      	mov	r1, sl
 80054f8:	ebb2 0801 	subs.w	r8, r2, r1
 80054fc:	4659      	mov	r1, fp
 80054fe:	eb63 0901 	sbc.w	r9, r3, r1
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800550e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005516:	4690      	mov	r8, r2
 8005518:	4699      	mov	r9, r3
 800551a:	4623      	mov	r3, r4
 800551c:	eb18 0303 	adds.w	r3, r8, r3
 8005520:	60bb      	str	r3, [r7, #8]
 8005522:	462b      	mov	r3, r5
 8005524:	eb49 0303 	adc.w	r3, r9, r3
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	f04f 0200 	mov.w	r2, #0
 800552e:	f04f 0300 	mov.w	r3, #0
 8005532:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005536:	4629      	mov	r1, r5
 8005538:	024b      	lsls	r3, r1, #9
 800553a:	4621      	mov	r1, r4
 800553c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005540:	4621      	mov	r1, r4
 8005542:	024a      	lsls	r2, r1, #9
 8005544:	4610      	mov	r0, r2
 8005546:	4619      	mov	r1, r3
 8005548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800554a:	2200      	movs	r2, #0
 800554c:	62bb      	str	r3, [r7, #40]	; 0x28
 800554e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005550:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005554:	f7fb fb98 	bl	8000c88 <__aeabi_uldivmod>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4613      	mov	r3, r2
 800555e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005560:	e058      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005562:	4b38      	ldr	r3, [pc, #224]	; (8005644 <HAL_RCC_GetSysClockFreq+0x200>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	099b      	lsrs	r3, r3, #6
 8005568:	2200      	movs	r2, #0
 800556a:	4618      	mov	r0, r3
 800556c:	4611      	mov	r1, r2
 800556e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005572:	623b      	str	r3, [r7, #32]
 8005574:	2300      	movs	r3, #0
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
 8005578:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800557c:	4642      	mov	r2, r8
 800557e:	464b      	mov	r3, r9
 8005580:	f04f 0000 	mov.w	r0, #0
 8005584:	f04f 0100 	mov.w	r1, #0
 8005588:	0159      	lsls	r1, r3, #5
 800558a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800558e:	0150      	lsls	r0, r2, #5
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4641      	mov	r1, r8
 8005596:	ebb2 0a01 	subs.w	sl, r2, r1
 800559a:	4649      	mov	r1, r9
 800559c:	eb63 0b01 	sbc.w	fp, r3, r1
 80055a0:	f04f 0200 	mov.w	r2, #0
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055b4:	ebb2 040a 	subs.w	r4, r2, sl
 80055b8:	eb63 050b 	sbc.w	r5, r3, fp
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	00eb      	lsls	r3, r5, #3
 80055c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055ca:	00e2      	lsls	r2, r4, #3
 80055cc:	4614      	mov	r4, r2
 80055ce:	461d      	mov	r5, r3
 80055d0:	4643      	mov	r3, r8
 80055d2:	18e3      	adds	r3, r4, r3
 80055d4:	603b      	str	r3, [r7, #0]
 80055d6:	464b      	mov	r3, r9
 80055d8:	eb45 0303 	adc.w	r3, r5, r3
 80055dc:	607b      	str	r3, [r7, #4]
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055ea:	4629      	mov	r1, r5
 80055ec:	028b      	lsls	r3, r1, #10
 80055ee:	4621      	mov	r1, r4
 80055f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055f4:	4621      	mov	r1, r4
 80055f6:	028a      	lsls	r2, r1, #10
 80055f8:	4610      	mov	r0, r2
 80055fa:	4619      	mov	r1, r3
 80055fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055fe:	2200      	movs	r2, #0
 8005600:	61bb      	str	r3, [r7, #24]
 8005602:	61fa      	str	r2, [r7, #28]
 8005604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005608:	f7fb fb3e 	bl	8000c88 <__aeabi_uldivmod>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4613      	mov	r3, r2
 8005612:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005614:	4b0b      	ldr	r3, [pc, #44]	; (8005644 <HAL_RCC_GetSysClockFreq+0x200>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	0c1b      	lsrs	r3, r3, #16
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	3301      	adds	r3, #1
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005624:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005628:	fbb2 f3f3 	udiv	r3, r2, r3
 800562c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800562e:	e002      	b.n	8005636 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005630:	4b05      	ldr	r3, [pc, #20]	; (8005648 <HAL_RCC_GetSysClockFreq+0x204>)
 8005632:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005638:	4618      	mov	r0, r3
 800563a:	3750      	adds	r7, #80	; 0x50
 800563c:	46bd      	mov	sp, r7
 800563e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005642:	bf00      	nop
 8005644:	40023800 	.word	0x40023800
 8005648:	00f42400 	.word	0x00f42400
 800564c:	007a1200 	.word	0x007a1200

08005650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005654:	4b03      	ldr	r3, [pc, #12]	; (8005664 <HAL_RCC_GetHCLKFreq+0x14>)
 8005656:	681b      	ldr	r3, [r3, #0]
}
 8005658:	4618      	mov	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	20000000 	.word	0x20000000

08005668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800566c:	f7ff fff0 	bl	8005650 <HAL_RCC_GetHCLKFreq>
 8005670:	4602      	mov	r2, r0
 8005672:	4b05      	ldr	r3, [pc, #20]	; (8005688 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	0a9b      	lsrs	r3, r3, #10
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	4903      	ldr	r1, [pc, #12]	; (800568c <HAL_RCC_GetPCLK1Freq+0x24>)
 800567e:	5ccb      	ldrb	r3, [r1, r3]
 8005680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005684:	4618      	mov	r0, r3
 8005686:	bd80      	pop	{r7, pc}
 8005688:	40023800 	.word	0x40023800
 800568c:	0800ae2c 	.word	0x0800ae2c

08005690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005694:	f7ff ffdc 	bl	8005650 <HAL_RCC_GetHCLKFreq>
 8005698:	4602      	mov	r2, r0
 800569a:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	0b5b      	lsrs	r3, r3, #13
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	4903      	ldr	r1, [pc, #12]	; (80056b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056a6:	5ccb      	ldrb	r3, [r1, r3]
 80056a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40023800 	.word	0x40023800
 80056b4:	0800ae2c 	.word	0x0800ae2c

080056b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e041      	b.n	800574e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fc fbac 	bl	8001e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3304      	adds	r3, #4
 80056f4:	4619      	mov	r1, r3
 80056f6:	4610      	mov	r0, r2
 80056f8:	f000 f9ce 	bl	8005a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b01      	cmp	r3, #1
 800576a:	d001      	beq.n	8005770 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e04e      	b.n	800580e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0201 	orr.w	r2, r2, #1
 8005786:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a23      	ldr	r2, [pc, #140]	; (800581c <HAL_TIM_Base_Start_IT+0xc4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d022      	beq.n	80057d8 <HAL_TIM_Base_Start_IT+0x80>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579a:	d01d      	beq.n	80057d8 <HAL_TIM_Base_Start_IT+0x80>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1f      	ldr	r2, [pc, #124]	; (8005820 <HAL_TIM_Base_Start_IT+0xc8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d018      	beq.n	80057d8 <HAL_TIM_Base_Start_IT+0x80>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1e      	ldr	r2, [pc, #120]	; (8005824 <HAL_TIM_Base_Start_IT+0xcc>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d013      	beq.n	80057d8 <HAL_TIM_Base_Start_IT+0x80>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1c      	ldr	r2, [pc, #112]	; (8005828 <HAL_TIM_Base_Start_IT+0xd0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00e      	beq.n	80057d8 <HAL_TIM_Base_Start_IT+0x80>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1b      	ldr	r2, [pc, #108]	; (800582c <HAL_TIM_Base_Start_IT+0xd4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d009      	beq.n	80057d8 <HAL_TIM_Base_Start_IT+0x80>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a19      	ldr	r2, [pc, #100]	; (8005830 <HAL_TIM_Base_Start_IT+0xd8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <HAL_TIM_Base_Start_IT+0x80>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a18      	ldr	r2, [pc, #96]	; (8005834 <HAL_TIM_Base_Start_IT+0xdc>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d111      	bne.n	80057fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b06      	cmp	r3, #6
 80057e8:	d010      	beq.n	800580c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0201 	orr.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fa:	e007      	b.n	800580c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0201 	orr.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	40010000 	.word	0x40010000
 8005820:	40000400 	.word	0x40000400
 8005824:	40000800 	.word	0x40000800
 8005828:	40000c00 	.word	0x40000c00
 800582c:	40010400 	.word	0x40010400
 8005830:	40014000 	.word	0x40014000
 8005834:	40001800 	.word	0x40001800

08005838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b02      	cmp	r3, #2
 800584c:	d122      	bne.n	8005894 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b02      	cmp	r3, #2
 800585a:	d11b      	bne.n	8005894 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0202 	mvn.w	r2, #2
 8005864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f8ee 	bl	8005a5c <HAL_TIM_IC_CaptureCallback>
 8005880:	e005      	b.n	800588e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f8e0 	bl	8005a48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f8f1 	bl	8005a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0304 	and.w	r3, r3, #4
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d122      	bne.n	80058e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d11b      	bne.n	80058e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0204 	mvn.w	r2, #4
 80058b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2202      	movs	r2, #2
 80058be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f8c4 	bl	8005a5c <HAL_TIM_IC_CaptureCallback>
 80058d4:	e005      	b.n	80058e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f8b6 	bl	8005a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f8c7 	bl	8005a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d122      	bne.n	800593c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b08      	cmp	r3, #8
 8005902:	d11b      	bne.n	800593c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0208 	mvn.w	r2, #8
 800590c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2204      	movs	r2, #4
 8005912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f89a 	bl	8005a5c <HAL_TIM_IC_CaptureCallback>
 8005928:	e005      	b.n	8005936 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f88c 	bl	8005a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f89d 	bl	8005a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0310 	and.w	r3, r3, #16
 8005946:	2b10      	cmp	r3, #16
 8005948:	d122      	bne.n	8005990 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	2b10      	cmp	r3, #16
 8005956:	d11b      	bne.n	8005990 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0210 	mvn.w	r2, #16
 8005960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2208      	movs	r2, #8
 8005966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f870 	bl	8005a5c <HAL_TIM_IC_CaptureCallback>
 800597c:	e005      	b.n	800598a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f862 	bl	8005a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f873 	bl	8005a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b01      	cmp	r3, #1
 800599c:	d10e      	bne.n	80059bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d107      	bne.n	80059bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0201 	mvn.w	r2, #1
 80059b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fb fe76 	bl	80016a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c6:	2b80      	cmp	r3, #128	; 0x80
 80059c8:	d10e      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d4:	2b80      	cmp	r3, #128	; 0x80
 80059d6:	d107      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f902 	bl	8005bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d10e      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d107      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f838 	bl	8005a84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f003 0320 	and.w	r3, r3, #32
 8005a1e:	2b20      	cmp	r3, #32
 8005a20:	d10e      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d107      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0220 	mvn.w	r2, #32
 8005a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f8cc 	bl	8005bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a40:	bf00      	nop
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a40      	ldr	r2, [pc, #256]	; (8005bac <TIM_Base_SetConfig+0x114>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d013      	beq.n	8005ad8 <TIM_Base_SetConfig+0x40>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab6:	d00f      	beq.n	8005ad8 <TIM_Base_SetConfig+0x40>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a3d      	ldr	r2, [pc, #244]	; (8005bb0 <TIM_Base_SetConfig+0x118>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00b      	beq.n	8005ad8 <TIM_Base_SetConfig+0x40>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a3c      	ldr	r2, [pc, #240]	; (8005bb4 <TIM_Base_SetConfig+0x11c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d007      	beq.n	8005ad8 <TIM_Base_SetConfig+0x40>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a3b      	ldr	r2, [pc, #236]	; (8005bb8 <TIM_Base_SetConfig+0x120>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d003      	beq.n	8005ad8 <TIM_Base_SetConfig+0x40>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a3a      	ldr	r2, [pc, #232]	; (8005bbc <TIM_Base_SetConfig+0x124>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d108      	bne.n	8005aea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a2f      	ldr	r2, [pc, #188]	; (8005bac <TIM_Base_SetConfig+0x114>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d02b      	beq.n	8005b4a <TIM_Base_SetConfig+0xb2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af8:	d027      	beq.n	8005b4a <TIM_Base_SetConfig+0xb2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a2c      	ldr	r2, [pc, #176]	; (8005bb0 <TIM_Base_SetConfig+0x118>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d023      	beq.n	8005b4a <TIM_Base_SetConfig+0xb2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a2b      	ldr	r2, [pc, #172]	; (8005bb4 <TIM_Base_SetConfig+0x11c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d01f      	beq.n	8005b4a <TIM_Base_SetConfig+0xb2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a2a      	ldr	r2, [pc, #168]	; (8005bb8 <TIM_Base_SetConfig+0x120>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d01b      	beq.n	8005b4a <TIM_Base_SetConfig+0xb2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a29      	ldr	r2, [pc, #164]	; (8005bbc <TIM_Base_SetConfig+0x124>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d017      	beq.n	8005b4a <TIM_Base_SetConfig+0xb2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a28      	ldr	r2, [pc, #160]	; (8005bc0 <TIM_Base_SetConfig+0x128>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d013      	beq.n	8005b4a <TIM_Base_SetConfig+0xb2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a27      	ldr	r2, [pc, #156]	; (8005bc4 <TIM_Base_SetConfig+0x12c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00f      	beq.n	8005b4a <TIM_Base_SetConfig+0xb2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a26      	ldr	r2, [pc, #152]	; (8005bc8 <TIM_Base_SetConfig+0x130>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00b      	beq.n	8005b4a <TIM_Base_SetConfig+0xb2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a25      	ldr	r2, [pc, #148]	; (8005bcc <TIM_Base_SetConfig+0x134>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d007      	beq.n	8005b4a <TIM_Base_SetConfig+0xb2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a24      	ldr	r2, [pc, #144]	; (8005bd0 <TIM_Base_SetConfig+0x138>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d003      	beq.n	8005b4a <TIM_Base_SetConfig+0xb2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a23      	ldr	r2, [pc, #140]	; (8005bd4 <TIM_Base_SetConfig+0x13c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d108      	bne.n	8005b5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a0a      	ldr	r2, [pc, #40]	; (8005bac <TIM_Base_SetConfig+0x114>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d003      	beq.n	8005b90 <TIM_Base_SetConfig+0xf8>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a0c      	ldr	r2, [pc, #48]	; (8005bbc <TIM_Base_SetConfig+0x124>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d103      	bne.n	8005b98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	615a      	str	r2, [r3, #20]
}
 8005b9e:	bf00      	nop
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40010000 	.word	0x40010000
 8005bb0:	40000400 	.word	0x40000400
 8005bb4:	40000800 	.word	0x40000800
 8005bb8:	40000c00 	.word	0x40000c00
 8005bbc:	40010400 	.word	0x40010400
 8005bc0:	40014000 	.word	0x40014000
 8005bc4:	40014400 	.word	0x40014400
 8005bc8:	40014800 	.word	0x40014800
 8005bcc:	40001800 	.word	0x40001800
 8005bd0:	40001c00 	.word	0x40001c00
 8005bd4:	40002000 	.word	0x40002000

08005bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e03f      	b.n	8005c92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d106      	bne.n	8005c2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fc f94e 	bl	8001ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2224      	movs	r2, #36	; 0x24
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f929 	bl	8005e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695a      	ldr	r2, [r3, #20]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b08a      	sub	sp, #40	; 0x28
 8005c9e:	af02      	add	r7, sp, #8
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	603b      	str	r3, [r7, #0]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b20      	cmp	r3, #32
 8005cb8:	d17c      	bne.n	8005db4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <HAL_UART_Transmit+0x2c>
 8005cc0:	88fb      	ldrh	r3, [r7, #6]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e075      	b.n	8005db6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d101      	bne.n	8005cd8 <HAL_UART_Transmit+0x3e>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e06e      	b.n	8005db6 <HAL_UART_Transmit+0x11c>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2221      	movs	r2, #33	; 0x21
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cee:	f7fc fb17 	bl	8002320 <HAL_GetTick>
 8005cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	88fa      	ldrh	r2, [r7, #6]
 8005cf8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	88fa      	ldrh	r2, [r7, #6]
 8005cfe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d08:	d108      	bne.n	8005d1c <HAL_UART_Transmit+0x82>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d104      	bne.n	8005d1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	61bb      	str	r3, [r7, #24]
 8005d1a:	e003      	b.n	8005d24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d20:	2300      	movs	r3, #0
 8005d22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d2c:	e02a      	b.n	8005d84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2200      	movs	r2, #0
 8005d36:	2180      	movs	r1, #128	; 0x80
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f840 	bl	8005dbe <UART_WaitOnFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e036      	b.n	8005db6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10b      	bne.n	8005d66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	3302      	adds	r3, #2
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	e007      	b.n	8005d76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	781a      	ldrb	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	3301      	adds	r3, #1
 8005d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1cf      	bne.n	8005d2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2200      	movs	r2, #0
 8005d96:	2140      	movs	r1, #64	; 0x40
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 f810 	bl	8005dbe <UART_WaitOnFlagUntilTimeout>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e006      	b.n	8005db6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	e000      	b.n	8005db6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005db4:	2302      	movs	r3, #2
  }
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3720      	adds	r7, #32
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b090      	sub	sp, #64	; 0x40
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	603b      	str	r3, [r7, #0]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dce:	e050      	b.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dd6:	d04c      	beq.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d007      	beq.n	8005dee <UART_WaitOnFlagUntilTimeout+0x30>
 8005dde:	f7fc fa9f 	bl	8002320 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d241      	bcs.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	330c      	adds	r3, #12
 8005df4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	330c      	adds	r3, #12
 8005e0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e0e:	637a      	str	r2, [r7, #52]	; 0x34
 8005e10:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e5      	bne.n	8005dee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3314      	adds	r3, #20
 8005e28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	e853 3f00 	ldrex	r3, [r3]
 8005e30:	613b      	str	r3, [r7, #16]
   return(result);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f023 0301 	bic.w	r3, r3, #1
 8005e38:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3314      	adds	r3, #20
 8005e40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e42:	623a      	str	r2, [r7, #32]
 8005e44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	69f9      	ldr	r1, [r7, #28]
 8005e48:	6a3a      	ldr	r2, [r7, #32]
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1e5      	bne.n	8005e22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e00f      	b.n	8005e92 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	bf0c      	ite	eq
 8005e82:	2301      	moveq	r3, #1
 8005e84:	2300      	movne	r3, #0
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d09f      	beq.n	8005dd0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3740      	adds	r7, #64	; 0x40
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ea0:	b0c0      	sub	sp, #256	; 0x100
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb8:	68d9      	ldr	r1, [r3, #12]
 8005eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	ea40 0301 	orr.w	r3, r0, r1
 8005ec4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	431a      	orrs	r2, r3
 8005edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ef4:	f021 010c 	bic.w	r1, r1, #12
 8005ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f02:	430b      	orrs	r3, r1
 8005f04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f16:	6999      	ldr	r1, [r3, #24]
 8005f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	ea40 0301 	orr.w	r3, r0, r1
 8005f22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	4b8f      	ldr	r3, [pc, #572]	; (8006168 <UART_SetConfig+0x2cc>)
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d005      	beq.n	8005f3c <UART_SetConfig+0xa0>
 8005f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	4b8d      	ldr	r3, [pc, #564]	; (800616c <UART_SetConfig+0x2d0>)
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d104      	bne.n	8005f46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f3c:	f7ff fba8 	bl	8005690 <HAL_RCC_GetPCLK2Freq>
 8005f40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f44:	e003      	b.n	8005f4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f46:	f7ff fb8f 	bl	8005668 <HAL_RCC_GetPCLK1Freq>
 8005f4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f58:	f040 810c 	bne.w	8006174 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f60:	2200      	movs	r2, #0
 8005f62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f6e:	4622      	mov	r2, r4
 8005f70:	462b      	mov	r3, r5
 8005f72:	1891      	adds	r1, r2, r2
 8005f74:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f76:	415b      	adcs	r3, r3
 8005f78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f7e:	4621      	mov	r1, r4
 8005f80:	eb12 0801 	adds.w	r8, r2, r1
 8005f84:	4629      	mov	r1, r5
 8005f86:	eb43 0901 	adc.w	r9, r3, r1
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	f04f 0300 	mov.w	r3, #0
 8005f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f9e:	4690      	mov	r8, r2
 8005fa0:	4699      	mov	r9, r3
 8005fa2:	4623      	mov	r3, r4
 8005fa4:	eb18 0303 	adds.w	r3, r8, r3
 8005fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fac:	462b      	mov	r3, r5
 8005fae:	eb49 0303 	adc.w	r3, r9, r3
 8005fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005fc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005fca:	460b      	mov	r3, r1
 8005fcc:	18db      	adds	r3, r3, r3
 8005fce:	653b      	str	r3, [r7, #80]	; 0x50
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	eb42 0303 	adc.w	r3, r2, r3
 8005fd6:	657b      	str	r3, [r7, #84]	; 0x54
 8005fd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005fdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005fe0:	f7fa fe52 	bl	8000c88 <__aeabi_uldivmod>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4b61      	ldr	r3, [pc, #388]	; (8006170 <UART_SetConfig+0x2d4>)
 8005fea:	fba3 2302 	umull	r2, r3, r3, r2
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	011c      	lsls	r4, r3, #4
 8005ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ffc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006000:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006004:	4642      	mov	r2, r8
 8006006:	464b      	mov	r3, r9
 8006008:	1891      	adds	r1, r2, r2
 800600a:	64b9      	str	r1, [r7, #72]	; 0x48
 800600c:	415b      	adcs	r3, r3
 800600e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006010:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006014:	4641      	mov	r1, r8
 8006016:	eb12 0a01 	adds.w	sl, r2, r1
 800601a:	4649      	mov	r1, r9
 800601c:	eb43 0b01 	adc.w	fp, r3, r1
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800602c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006034:	4692      	mov	sl, r2
 8006036:	469b      	mov	fp, r3
 8006038:	4643      	mov	r3, r8
 800603a:	eb1a 0303 	adds.w	r3, sl, r3
 800603e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006042:	464b      	mov	r3, r9
 8006044:	eb4b 0303 	adc.w	r3, fp, r3
 8006048:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800604c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006058:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800605c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006060:	460b      	mov	r3, r1
 8006062:	18db      	adds	r3, r3, r3
 8006064:	643b      	str	r3, [r7, #64]	; 0x40
 8006066:	4613      	mov	r3, r2
 8006068:	eb42 0303 	adc.w	r3, r2, r3
 800606c:	647b      	str	r3, [r7, #68]	; 0x44
 800606e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006072:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006076:	f7fa fe07 	bl	8000c88 <__aeabi_uldivmod>
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	4611      	mov	r1, r2
 8006080:	4b3b      	ldr	r3, [pc, #236]	; (8006170 <UART_SetConfig+0x2d4>)
 8006082:	fba3 2301 	umull	r2, r3, r3, r1
 8006086:	095b      	lsrs	r3, r3, #5
 8006088:	2264      	movs	r2, #100	; 0x64
 800608a:	fb02 f303 	mul.w	r3, r2, r3
 800608e:	1acb      	subs	r3, r1, r3
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006096:	4b36      	ldr	r3, [pc, #216]	; (8006170 <UART_SetConfig+0x2d4>)
 8006098:	fba3 2302 	umull	r2, r3, r3, r2
 800609c:	095b      	lsrs	r3, r3, #5
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060a4:	441c      	add	r4, r3
 80060a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80060b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80060b8:	4642      	mov	r2, r8
 80060ba:	464b      	mov	r3, r9
 80060bc:	1891      	adds	r1, r2, r2
 80060be:	63b9      	str	r1, [r7, #56]	; 0x38
 80060c0:	415b      	adcs	r3, r3
 80060c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060c8:	4641      	mov	r1, r8
 80060ca:	1851      	adds	r1, r2, r1
 80060cc:	6339      	str	r1, [r7, #48]	; 0x30
 80060ce:	4649      	mov	r1, r9
 80060d0:	414b      	adcs	r3, r1
 80060d2:	637b      	str	r3, [r7, #52]	; 0x34
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	f04f 0300 	mov.w	r3, #0
 80060dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80060e0:	4659      	mov	r1, fp
 80060e2:	00cb      	lsls	r3, r1, #3
 80060e4:	4651      	mov	r1, sl
 80060e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060ea:	4651      	mov	r1, sl
 80060ec:	00ca      	lsls	r2, r1, #3
 80060ee:	4610      	mov	r0, r2
 80060f0:	4619      	mov	r1, r3
 80060f2:	4603      	mov	r3, r0
 80060f4:	4642      	mov	r2, r8
 80060f6:	189b      	adds	r3, r3, r2
 80060f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060fc:	464b      	mov	r3, r9
 80060fe:	460a      	mov	r2, r1
 8006100:	eb42 0303 	adc.w	r3, r2, r3
 8006104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006114:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006118:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800611c:	460b      	mov	r3, r1
 800611e:	18db      	adds	r3, r3, r3
 8006120:	62bb      	str	r3, [r7, #40]	; 0x28
 8006122:	4613      	mov	r3, r2
 8006124:	eb42 0303 	adc.w	r3, r2, r3
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800612a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800612e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006132:	f7fa fda9 	bl	8000c88 <__aeabi_uldivmod>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4b0d      	ldr	r3, [pc, #52]	; (8006170 <UART_SetConfig+0x2d4>)
 800613c:	fba3 1302 	umull	r1, r3, r3, r2
 8006140:	095b      	lsrs	r3, r3, #5
 8006142:	2164      	movs	r1, #100	; 0x64
 8006144:	fb01 f303 	mul.w	r3, r1, r3
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	3332      	adds	r3, #50	; 0x32
 800614e:	4a08      	ldr	r2, [pc, #32]	; (8006170 <UART_SetConfig+0x2d4>)
 8006150:	fba2 2303 	umull	r2, r3, r2, r3
 8006154:	095b      	lsrs	r3, r3, #5
 8006156:	f003 0207 	and.w	r2, r3, #7
 800615a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4422      	add	r2, r4
 8006162:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006164:	e105      	b.n	8006372 <UART_SetConfig+0x4d6>
 8006166:	bf00      	nop
 8006168:	40011000 	.word	0x40011000
 800616c:	40011400 	.word	0x40011400
 8006170:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006178:	2200      	movs	r2, #0
 800617a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800617e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006182:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006186:	4642      	mov	r2, r8
 8006188:	464b      	mov	r3, r9
 800618a:	1891      	adds	r1, r2, r2
 800618c:	6239      	str	r1, [r7, #32]
 800618e:	415b      	adcs	r3, r3
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
 8006192:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006196:	4641      	mov	r1, r8
 8006198:	1854      	adds	r4, r2, r1
 800619a:	4649      	mov	r1, r9
 800619c:	eb43 0501 	adc.w	r5, r3, r1
 80061a0:	f04f 0200 	mov.w	r2, #0
 80061a4:	f04f 0300 	mov.w	r3, #0
 80061a8:	00eb      	lsls	r3, r5, #3
 80061aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061ae:	00e2      	lsls	r2, r4, #3
 80061b0:	4614      	mov	r4, r2
 80061b2:	461d      	mov	r5, r3
 80061b4:	4643      	mov	r3, r8
 80061b6:	18e3      	adds	r3, r4, r3
 80061b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061bc:	464b      	mov	r3, r9
 80061be:	eb45 0303 	adc.w	r3, r5, r3
 80061c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061d6:	f04f 0200 	mov.w	r2, #0
 80061da:	f04f 0300 	mov.w	r3, #0
 80061de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80061e2:	4629      	mov	r1, r5
 80061e4:	008b      	lsls	r3, r1, #2
 80061e6:	4621      	mov	r1, r4
 80061e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ec:	4621      	mov	r1, r4
 80061ee:	008a      	lsls	r2, r1, #2
 80061f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061f4:	f7fa fd48 	bl	8000c88 <__aeabi_uldivmod>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4b60      	ldr	r3, [pc, #384]	; (8006380 <UART_SetConfig+0x4e4>)
 80061fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006202:	095b      	lsrs	r3, r3, #5
 8006204:	011c      	lsls	r4, r3, #4
 8006206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800620a:	2200      	movs	r2, #0
 800620c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006210:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006214:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006218:	4642      	mov	r2, r8
 800621a:	464b      	mov	r3, r9
 800621c:	1891      	adds	r1, r2, r2
 800621e:	61b9      	str	r1, [r7, #24]
 8006220:	415b      	adcs	r3, r3
 8006222:	61fb      	str	r3, [r7, #28]
 8006224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006228:	4641      	mov	r1, r8
 800622a:	1851      	adds	r1, r2, r1
 800622c:	6139      	str	r1, [r7, #16]
 800622e:	4649      	mov	r1, r9
 8006230:	414b      	adcs	r3, r1
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006240:	4659      	mov	r1, fp
 8006242:	00cb      	lsls	r3, r1, #3
 8006244:	4651      	mov	r1, sl
 8006246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800624a:	4651      	mov	r1, sl
 800624c:	00ca      	lsls	r2, r1, #3
 800624e:	4610      	mov	r0, r2
 8006250:	4619      	mov	r1, r3
 8006252:	4603      	mov	r3, r0
 8006254:	4642      	mov	r2, r8
 8006256:	189b      	adds	r3, r3, r2
 8006258:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800625c:	464b      	mov	r3, r9
 800625e:	460a      	mov	r2, r1
 8006260:	eb42 0303 	adc.w	r3, r2, r3
 8006264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	67bb      	str	r3, [r7, #120]	; 0x78
 8006272:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	f04f 0300 	mov.w	r3, #0
 800627c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006280:	4649      	mov	r1, r9
 8006282:	008b      	lsls	r3, r1, #2
 8006284:	4641      	mov	r1, r8
 8006286:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800628a:	4641      	mov	r1, r8
 800628c:	008a      	lsls	r2, r1, #2
 800628e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006292:	f7fa fcf9 	bl	8000c88 <__aeabi_uldivmod>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4b39      	ldr	r3, [pc, #228]	; (8006380 <UART_SetConfig+0x4e4>)
 800629c:	fba3 1302 	umull	r1, r3, r3, r2
 80062a0:	095b      	lsrs	r3, r3, #5
 80062a2:	2164      	movs	r1, #100	; 0x64
 80062a4:	fb01 f303 	mul.w	r3, r1, r3
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	3332      	adds	r3, #50	; 0x32
 80062ae:	4a34      	ldr	r2, [pc, #208]	; (8006380 <UART_SetConfig+0x4e4>)
 80062b0:	fba2 2303 	umull	r2, r3, r2, r3
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062ba:	441c      	add	r4, r3
 80062bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062c0:	2200      	movs	r2, #0
 80062c2:	673b      	str	r3, [r7, #112]	; 0x70
 80062c4:	677a      	str	r2, [r7, #116]	; 0x74
 80062c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80062ca:	4642      	mov	r2, r8
 80062cc:	464b      	mov	r3, r9
 80062ce:	1891      	adds	r1, r2, r2
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	415b      	adcs	r3, r3
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062da:	4641      	mov	r1, r8
 80062dc:	1851      	adds	r1, r2, r1
 80062de:	6039      	str	r1, [r7, #0]
 80062e0:	4649      	mov	r1, r9
 80062e2:	414b      	adcs	r3, r1
 80062e4:	607b      	str	r3, [r7, #4]
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	f04f 0300 	mov.w	r3, #0
 80062ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062f2:	4659      	mov	r1, fp
 80062f4:	00cb      	lsls	r3, r1, #3
 80062f6:	4651      	mov	r1, sl
 80062f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062fc:	4651      	mov	r1, sl
 80062fe:	00ca      	lsls	r2, r1, #3
 8006300:	4610      	mov	r0, r2
 8006302:	4619      	mov	r1, r3
 8006304:	4603      	mov	r3, r0
 8006306:	4642      	mov	r2, r8
 8006308:	189b      	adds	r3, r3, r2
 800630a:	66bb      	str	r3, [r7, #104]	; 0x68
 800630c:	464b      	mov	r3, r9
 800630e:	460a      	mov	r2, r1
 8006310:	eb42 0303 	adc.w	r3, r2, r3
 8006314:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	663b      	str	r3, [r7, #96]	; 0x60
 8006320:	667a      	str	r2, [r7, #100]	; 0x64
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	f04f 0300 	mov.w	r3, #0
 800632a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800632e:	4649      	mov	r1, r9
 8006330:	008b      	lsls	r3, r1, #2
 8006332:	4641      	mov	r1, r8
 8006334:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006338:	4641      	mov	r1, r8
 800633a:	008a      	lsls	r2, r1, #2
 800633c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006340:	f7fa fca2 	bl	8000c88 <__aeabi_uldivmod>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <UART_SetConfig+0x4e4>)
 800634a:	fba3 1302 	umull	r1, r3, r3, r2
 800634e:	095b      	lsrs	r3, r3, #5
 8006350:	2164      	movs	r1, #100	; 0x64
 8006352:	fb01 f303 	mul.w	r3, r1, r3
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	3332      	adds	r3, #50	; 0x32
 800635c:	4a08      	ldr	r2, [pc, #32]	; (8006380 <UART_SetConfig+0x4e4>)
 800635e:	fba2 2303 	umull	r2, r3, r2, r3
 8006362:	095b      	lsrs	r3, r3, #5
 8006364:	f003 020f 	and.w	r2, r3, #15
 8006368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4422      	add	r2, r4
 8006370:	609a      	str	r2, [r3, #8]
}
 8006372:	bf00      	nop
 8006374:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006378:	46bd      	mov	sp, r7
 800637a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800637e:	bf00      	nop
 8006380:	51eb851f 	.word	0x51eb851f

08006384 <__errno>:
 8006384:	4b01      	ldr	r3, [pc, #4]	; (800638c <__errno+0x8>)
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	2000000c 	.word	0x2000000c

08006390 <__libc_init_array>:
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	4d0d      	ldr	r5, [pc, #52]	; (80063c8 <__libc_init_array+0x38>)
 8006394:	4c0d      	ldr	r4, [pc, #52]	; (80063cc <__libc_init_array+0x3c>)
 8006396:	1b64      	subs	r4, r4, r5
 8006398:	10a4      	asrs	r4, r4, #2
 800639a:	2600      	movs	r6, #0
 800639c:	42a6      	cmp	r6, r4
 800639e:	d109      	bne.n	80063b4 <__libc_init_array+0x24>
 80063a0:	4d0b      	ldr	r5, [pc, #44]	; (80063d0 <__libc_init_array+0x40>)
 80063a2:	4c0c      	ldr	r4, [pc, #48]	; (80063d4 <__libc_init_array+0x44>)
 80063a4:	f004 fc90 	bl	800acc8 <_init>
 80063a8:	1b64      	subs	r4, r4, r5
 80063aa:	10a4      	asrs	r4, r4, #2
 80063ac:	2600      	movs	r6, #0
 80063ae:	42a6      	cmp	r6, r4
 80063b0:	d105      	bne.n	80063be <__libc_init_array+0x2e>
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
 80063b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b8:	4798      	blx	r3
 80063ba:	3601      	adds	r6, #1
 80063bc:	e7ee      	b.n	800639c <__libc_init_array+0xc>
 80063be:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c2:	4798      	blx	r3
 80063c4:	3601      	adds	r6, #1
 80063c6:	e7f2      	b.n	80063ae <__libc_init_array+0x1e>
 80063c8:	0800b2e4 	.word	0x0800b2e4
 80063cc:	0800b2e4 	.word	0x0800b2e4
 80063d0:	0800b2e4 	.word	0x0800b2e4
 80063d4:	0800b2e8 	.word	0x0800b2e8

080063d8 <memset>:
 80063d8:	4402      	add	r2, r0
 80063da:	4603      	mov	r3, r0
 80063dc:	4293      	cmp	r3, r2
 80063de:	d100      	bne.n	80063e2 <memset+0xa>
 80063e0:	4770      	bx	lr
 80063e2:	f803 1b01 	strb.w	r1, [r3], #1
 80063e6:	e7f9      	b.n	80063dc <memset+0x4>

080063e8 <__cvt>:
 80063e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063ec:	ec55 4b10 	vmov	r4, r5, d0
 80063f0:	2d00      	cmp	r5, #0
 80063f2:	460e      	mov	r6, r1
 80063f4:	4619      	mov	r1, r3
 80063f6:	462b      	mov	r3, r5
 80063f8:	bfbb      	ittet	lt
 80063fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80063fe:	461d      	movlt	r5, r3
 8006400:	2300      	movge	r3, #0
 8006402:	232d      	movlt	r3, #45	; 0x2d
 8006404:	700b      	strb	r3, [r1, #0]
 8006406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006408:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800640c:	4691      	mov	r9, r2
 800640e:	f023 0820 	bic.w	r8, r3, #32
 8006412:	bfbc      	itt	lt
 8006414:	4622      	movlt	r2, r4
 8006416:	4614      	movlt	r4, r2
 8006418:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800641c:	d005      	beq.n	800642a <__cvt+0x42>
 800641e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006422:	d100      	bne.n	8006426 <__cvt+0x3e>
 8006424:	3601      	adds	r6, #1
 8006426:	2102      	movs	r1, #2
 8006428:	e000      	b.n	800642c <__cvt+0x44>
 800642a:	2103      	movs	r1, #3
 800642c:	ab03      	add	r3, sp, #12
 800642e:	9301      	str	r3, [sp, #4]
 8006430:	ab02      	add	r3, sp, #8
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	ec45 4b10 	vmov	d0, r4, r5
 8006438:	4653      	mov	r3, sl
 800643a:	4632      	mov	r2, r6
 800643c:	f001 fe28 	bl	8008090 <_dtoa_r>
 8006440:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006444:	4607      	mov	r7, r0
 8006446:	d102      	bne.n	800644e <__cvt+0x66>
 8006448:	f019 0f01 	tst.w	r9, #1
 800644c:	d022      	beq.n	8006494 <__cvt+0xac>
 800644e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006452:	eb07 0906 	add.w	r9, r7, r6
 8006456:	d110      	bne.n	800647a <__cvt+0x92>
 8006458:	783b      	ldrb	r3, [r7, #0]
 800645a:	2b30      	cmp	r3, #48	; 0x30
 800645c:	d10a      	bne.n	8006474 <__cvt+0x8c>
 800645e:	2200      	movs	r2, #0
 8006460:	2300      	movs	r3, #0
 8006462:	4620      	mov	r0, r4
 8006464:	4629      	mov	r1, r5
 8006466:	f7fa fb2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800646a:	b918      	cbnz	r0, 8006474 <__cvt+0x8c>
 800646c:	f1c6 0601 	rsb	r6, r6, #1
 8006470:	f8ca 6000 	str.w	r6, [sl]
 8006474:	f8da 3000 	ldr.w	r3, [sl]
 8006478:	4499      	add	r9, r3
 800647a:	2200      	movs	r2, #0
 800647c:	2300      	movs	r3, #0
 800647e:	4620      	mov	r0, r4
 8006480:	4629      	mov	r1, r5
 8006482:	f7fa fb21 	bl	8000ac8 <__aeabi_dcmpeq>
 8006486:	b108      	cbz	r0, 800648c <__cvt+0xa4>
 8006488:	f8cd 900c 	str.w	r9, [sp, #12]
 800648c:	2230      	movs	r2, #48	; 0x30
 800648e:	9b03      	ldr	r3, [sp, #12]
 8006490:	454b      	cmp	r3, r9
 8006492:	d307      	bcc.n	80064a4 <__cvt+0xbc>
 8006494:	9b03      	ldr	r3, [sp, #12]
 8006496:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006498:	1bdb      	subs	r3, r3, r7
 800649a:	4638      	mov	r0, r7
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	b004      	add	sp, #16
 80064a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a4:	1c59      	adds	r1, r3, #1
 80064a6:	9103      	str	r1, [sp, #12]
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	e7f0      	b.n	800648e <__cvt+0xa6>

080064ac <__exponent>:
 80064ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064ae:	4603      	mov	r3, r0
 80064b0:	2900      	cmp	r1, #0
 80064b2:	bfb8      	it	lt
 80064b4:	4249      	neglt	r1, r1
 80064b6:	f803 2b02 	strb.w	r2, [r3], #2
 80064ba:	bfb4      	ite	lt
 80064bc:	222d      	movlt	r2, #45	; 0x2d
 80064be:	222b      	movge	r2, #43	; 0x2b
 80064c0:	2909      	cmp	r1, #9
 80064c2:	7042      	strb	r2, [r0, #1]
 80064c4:	dd2a      	ble.n	800651c <__exponent+0x70>
 80064c6:	f10d 0407 	add.w	r4, sp, #7
 80064ca:	46a4      	mov	ip, r4
 80064cc:	270a      	movs	r7, #10
 80064ce:	46a6      	mov	lr, r4
 80064d0:	460a      	mov	r2, r1
 80064d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80064d6:	fb07 1516 	mls	r5, r7, r6, r1
 80064da:	3530      	adds	r5, #48	; 0x30
 80064dc:	2a63      	cmp	r2, #99	; 0x63
 80064de:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80064e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80064e6:	4631      	mov	r1, r6
 80064e8:	dcf1      	bgt.n	80064ce <__exponent+0x22>
 80064ea:	3130      	adds	r1, #48	; 0x30
 80064ec:	f1ae 0502 	sub.w	r5, lr, #2
 80064f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80064f4:	1c44      	adds	r4, r0, #1
 80064f6:	4629      	mov	r1, r5
 80064f8:	4561      	cmp	r1, ip
 80064fa:	d30a      	bcc.n	8006512 <__exponent+0x66>
 80064fc:	f10d 0209 	add.w	r2, sp, #9
 8006500:	eba2 020e 	sub.w	r2, r2, lr
 8006504:	4565      	cmp	r5, ip
 8006506:	bf88      	it	hi
 8006508:	2200      	movhi	r2, #0
 800650a:	4413      	add	r3, r2
 800650c:	1a18      	subs	r0, r3, r0
 800650e:	b003      	add	sp, #12
 8006510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006512:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006516:	f804 2f01 	strb.w	r2, [r4, #1]!
 800651a:	e7ed      	b.n	80064f8 <__exponent+0x4c>
 800651c:	2330      	movs	r3, #48	; 0x30
 800651e:	3130      	adds	r1, #48	; 0x30
 8006520:	7083      	strb	r3, [r0, #2]
 8006522:	70c1      	strb	r1, [r0, #3]
 8006524:	1d03      	adds	r3, r0, #4
 8006526:	e7f1      	b.n	800650c <__exponent+0x60>

08006528 <_printf_float>:
 8006528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652c:	ed2d 8b02 	vpush	{d8}
 8006530:	b08d      	sub	sp, #52	; 0x34
 8006532:	460c      	mov	r4, r1
 8006534:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006538:	4616      	mov	r6, r2
 800653a:	461f      	mov	r7, r3
 800653c:	4605      	mov	r5, r0
 800653e:	f002 ff05 	bl	800934c <_localeconv_r>
 8006542:	f8d0 a000 	ldr.w	sl, [r0]
 8006546:	4650      	mov	r0, sl
 8006548:	f7f9 fe42 	bl	80001d0 <strlen>
 800654c:	2300      	movs	r3, #0
 800654e:	930a      	str	r3, [sp, #40]	; 0x28
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	9305      	str	r3, [sp, #20]
 8006554:	f8d8 3000 	ldr.w	r3, [r8]
 8006558:	f894 b018 	ldrb.w	fp, [r4, #24]
 800655c:	3307      	adds	r3, #7
 800655e:	f023 0307 	bic.w	r3, r3, #7
 8006562:	f103 0208 	add.w	r2, r3, #8
 8006566:	f8c8 2000 	str.w	r2, [r8]
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006572:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006576:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800657a:	9307      	str	r3, [sp, #28]
 800657c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006580:	ee08 0a10 	vmov	s16, r0
 8006584:	4b9f      	ldr	r3, [pc, #636]	; (8006804 <_printf_float+0x2dc>)
 8006586:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800658a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800658e:	f7fa facd 	bl	8000b2c <__aeabi_dcmpun>
 8006592:	bb88      	cbnz	r0, 80065f8 <_printf_float+0xd0>
 8006594:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006598:	4b9a      	ldr	r3, [pc, #616]	; (8006804 <_printf_float+0x2dc>)
 800659a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800659e:	f7fa faa7 	bl	8000af0 <__aeabi_dcmple>
 80065a2:	bb48      	cbnz	r0, 80065f8 <_printf_float+0xd0>
 80065a4:	2200      	movs	r2, #0
 80065a6:	2300      	movs	r3, #0
 80065a8:	4640      	mov	r0, r8
 80065aa:	4649      	mov	r1, r9
 80065ac:	f7fa fa96 	bl	8000adc <__aeabi_dcmplt>
 80065b0:	b110      	cbz	r0, 80065b8 <_printf_float+0x90>
 80065b2:	232d      	movs	r3, #45	; 0x2d
 80065b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065b8:	4b93      	ldr	r3, [pc, #588]	; (8006808 <_printf_float+0x2e0>)
 80065ba:	4894      	ldr	r0, [pc, #592]	; (800680c <_printf_float+0x2e4>)
 80065bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80065c0:	bf94      	ite	ls
 80065c2:	4698      	movls	r8, r3
 80065c4:	4680      	movhi	r8, r0
 80065c6:	2303      	movs	r3, #3
 80065c8:	6123      	str	r3, [r4, #16]
 80065ca:	9b05      	ldr	r3, [sp, #20]
 80065cc:	f023 0204 	bic.w	r2, r3, #4
 80065d0:	6022      	str	r2, [r4, #0]
 80065d2:	f04f 0900 	mov.w	r9, #0
 80065d6:	9700      	str	r7, [sp, #0]
 80065d8:	4633      	mov	r3, r6
 80065da:	aa0b      	add	r2, sp, #44	; 0x2c
 80065dc:	4621      	mov	r1, r4
 80065de:	4628      	mov	r0, r5
 80065e0:	f000 f9d8 	bl	8006994 <_printf_common>
 80065e4:	3001      	adds	r0, #1
 80065e6:	f040 8090 	bne.w	800670a <_printf_float+0x1e2>
 80065ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065ee:	b00d      	add	sp, #52	; 0x34
 80065f0:	ecbd 8b02 	vpop	{d8}
 80065f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f8:	4642      	mov	r2, r8
 80065fa:	464b      	mov	r3, r9
 80065fc:	4640      	mov	r0, r8
 80065fe:	4649      	mov	r1, r9
 8006600:	f7fa fa94 	bl	8000b2c <__aeabi_dcmpun>
 8006604:	b140      	cbz	r0, 8006618 <_printf_float+0xf0>
 8006606:	464b      	mov	r3, r9
 8006608:	2b00      	cmp	r3, #0
 800660a:	bfbc      	itt	lt
 800660c:	232d      	movlt	r3, #45	; 0x2d
 800660e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006612:	487f      	ldr	r0, [pc, #508]	; (8006810 <_printf_float+0x2e8>)
 8006614:	4b7f      	ldr	r3, [pc, #508]	; (8006814 <_printf_float+0x2ec>)
 8006616:	e7d1      	b.n	80065bc <_printf_float+0x94>
 8006618:	6863      	ldr	r3, [r4, #4]
 800661a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800661e:	9206      	str	r2, [sp, #24]
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	d13f      	bne.n	80066a4 <_printf_float+0x17c>
 8006624:	2306      	movs	r3, #6
 8006626:	6063      	str	r3, [r4, #4]
 8006628:	9b05      	ldr	r3, [sp, #20]
 800662a:	6861      	ldr	r1, [r4, #4]
 800662c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006630:	2300      	movs	r3, #0
 8006632:	9303      	str	r3, [sp, #12]
 8006634:	ab0a      	add	r3, sp, #40	; 0x28
 8006636:	e9cd b301 	strd	fp, r3, [sp, #4]
 800663a:	ab09      	add	r3, sp, #36	; 0x24
 800663c:	ec49 8b10 	vmov	d0, r8, r9
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	6022      	str	r2, [r4, #0]
 8006644:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006648:	4628      	mov	r0, r5
 800664a:	f7ff fecd 	bl	80063e8 <__cvt>
 800664e:	9b06      	ldr	r3, [sp, #24]
 8006650:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006652:	2b47      	cmp	r3, #71	; 0x47
 8006654:	4680      	mov	r8, r0
 8006656:	d108      	bne.n	800666a <_printf_float+0x142>
 8006658:	1cc8      	adds	r0, r1, #3
 800665a:	db02      	blt.n	8006662 <_printf_float+0x13a>
 800665c:	6863      	ldr	r3, [r4, #4]
 800665e:	4299      	cmp	r1, r3
 8006660:	dd41      	ble.n	80066e6 <_printf_float+0x1be>
 8006662:	f1ab 0b02 	sub.w	fp, fp, #2
 8006666:	fa5f fb8b 	uxtb.w	fp, fp
 800666a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800666e:	d820      	bhi.n	80066b2 <_printf_float+0x18a>
 8006670:	3901      	subs	r1, #1
 8006672:	465a      	mov	r2, fp
 8006674:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006678:	9109      	str	r1, [sp, #36]	; 0x24
 800667a:	f7ff ff17 	bl	80064ac <__exponent>
 800667e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006680:	1813      	adds	r3, r2, r0
 8006682:	2a01      	cmp	r2, #1
 8006684:	4681      	mov	r9, r0
 8006686:	6123      	str	r3, [r4, #16]
 8006688:	dc02      	bgt.n	8006690 <_printf_float+0x168>
 800668a:	6822      	ldr	r2, [r4, #0]
 800668c:	07d2      	lsls	r2, r2, #31
 800668e:	d501      	bpl.n	8006694 <_printf_float+0x16c>
 8006690:	3301      	adds	r3, #1
 8006692:	6123      	str	r3, [r4, #16]
 8006694:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006698:	2b00      	cmp	r3, #0
 800669a:	d09c      	beq.n	80065d6 <_printf_float+0xae>
 800669c:	232d      	movs	r3, #45	; 0x2d
 800669e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066a2:	e798      	b.n	80065d6 <_printf_float+0xae>
 80066a4:	9a06      	ldr	r2, [sp, #24]
 80066a6:	2a47      	cmp	r2, #71	; 0x47
 80066a8:	d1be      	bne.n	8006628 <_printf_float+0x100>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1bc      	bne.n	8006628 <_printf_float+0x100>
 80066ae:	2301      	movs	r3, #1
 80066b0:	e7b9      	b.n	8006626 <_printf_float+0xfe>
 80066b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80066b6:	d118      	bne.n	80066ea <_printf_float+0x1c2>
 80066b8:	2900      	cmp	r1, #0
 80066ba:	6863      	ldr	r3, [r4, #4]
 80066bc:	dd0b      	ble.n	80066d6 <_printf_float+0x1ae>
 80066be:	6121      	str	r1, [r4, #16]
 80066c0:	b913      	cbnz	r3, 80066c8 <_printf_float+0x1a0>
 80066c2:	6822      	ldr	r2, [r4, #0]
 80066c4:	07d0      	lsls	r0, r2, #31
 80066c6:	d502      	bpl.n	80066ce <_printf_float+0x1a6>
 80066c8:	3301      	adds	r3, #1
 80066ca:	440b      	add	r3, r1
 80066cc:	6123      	str	r3, [r4, #16]
 80066ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80066d0:	f04f 0900 	mov.w	r9, #0
 80066d4:	e7de      	b.n	8006694 <_printf_float+0x16c>
 80066d6:	b913      	cbnz	r3, 80066de <_printf_float+0x1b6>
 80066d8:	6822      	ldr	r2, [r4, #0]
 80066da:	07d2      	lsls	r2, r2, #31
 80066dc:	d501      	bpl.n	80066e2 <_printf_float+0x1ba>
 80066de:	3302      	adds	r3, #2
 80066e0:	e7f4      	b.n	80066cc <_printf_float+0x1a4>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e7f2      	b.n	80066cc <_printf_float+0x1a4>
 80066e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80066ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ec:	4299      	cmp	r1, r3
 80066ee:	db05      	blt.n	80066fc <_printf_float+0x1d4>
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	6121      	str	r1, [r4, #16]
 80066f4:	07d8      	lsls	r0, r3, #31
 80066f6:	d5ea      	bpl.n	80066ce <_printf_float+0x1a6>
 80066f8:	1c4b      	adds	r3, r1, #1
 80066fa:	e7e7      	b.n	80066cc <_printf_float+0x1a4>
 80066fc:	2900      	cmp	r1, #0
 80066fe:	bfd4      	ite	le
 8006700:	f1c1 0202 	rsble	r2, r1, #2
 8006704:	2201      	movgt	r2, #1
 8006706:	4413      	add	r3, r2
 8006708:	e7e0      	b.n	80066cc <_printf_float+0x1a4>
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	055a      	lsls	r2, r3, #21
 800670e:	d407      	bmi.n	8006720 <_printf_float+0x1f8>
 8006710:	6923      	ldr	r3, [r4, #16]
 8006712:	4642      	mov	r2, r8
 8006714:	4631      	mov	r1, r6
 8006716:	4628      	mov	r0, r5
 8006718:	47b8      	blx	r7
 800671a:	3001      	adds	r0, #1
 800671c:	d12c      	bne.n	8006778 <_printf_float+0x250>
 800671e:	e764      	b.n	80065ea <_printf_float+0xc2>
 8006720:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006724:	f240 80e0 	bls.w	80068e8 <_printf_float+0x3c0>
 8006728:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800672c:	2200      	movs	r2, #0
 800672e:	2300      	movs	r3, #0
 8006730:	f7fa f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8006734:	2800      	cmp	r0, #0
 8006736:	d034      	beq.n	80067a2 <_printf_float+0x27a>
 8006738:	4a37      	ldr	r2, [pc, #220]	; (8006818 <_printf_float+0x2f0>)
 800673a:	2301      	movs	r3, #1
 800673c:	4631      	mov	r1, r6
 800673e:	4628      	mov	r0, r5
 8006740:	47b8      	blx	r7
 8006742:	3001      	adds	r0, #1
 8006744:	f43f af51 	beq.w	80065ea <_printf_float+0xc2>
 8006748:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800674c:	429a      	cmp	r2, r3
 800674e:	db02      	blt.n	8006756 <_printf_float+0x22e>
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	07d8      	lsls	r0, r3, #31
 8006754:	d510      	bpl.n	8006778 <_printf_float+0x250>
 8006756:	ee18 3a10 	vmov	r3, s16
 800675a:	4652      	mov	r2, sl
 800675c:	4631      	mov	r1, r6
 800675e:	4628      	mov	r0, r5
 8006760:	47b8      	blx	r7
 8006762:	3001      	adds	r0, #1
 8006764:	f43f af41 	beq.w	80065ea <_printf_float+0xc2>
 8006768:	f04f 0800 	mov.w	r8, #0
 800676c:	f104 091a 	add.w	r9, r4, #26
 8006770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006772:	3b01      	subs	r3, #1
 8006774:	4543      	cmp	r3, r8
 8006776:	dc09      	bgt.n	800678c <_printf_float+0x264>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	079b      	lsls	r3, r3, #30
 800677c:	f100 8105 	bmi.w	800698a <_printf_float+0x462>
 8006780:	68e0      	ldr	r0, [r4, #12]
 8006782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006784:	4298      	cmp	r0, r3
 8006786:	bfb8      	it	lt
 8006788:	4618      	movlt	r0, r3
 800678a:	e730      	b.n	80065ee <_printf_float+0xc6>
 800678c:	2301      	movs	r3, #1
 800678e:	464a      	mov	r2, r9
 8006790:	4631      	mov	r1, r6
 8006792:	4628      	mov	r0, r5
 8006794:	47b8      	blx	r7
 8006796:	3001      	adds	r0, #1
 8006798:	f43f af27 	beq.w	80065ea <_printf_float+0xc2>
 800679c:	f108 0801 	add.w	r8, r8, #1
 80067a0:	e7e6      	b.n	8006770 <_printf_float+0x248>
 80067a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	dc39      	bgt.n	800681c <_printf_float+0x2f4>
 80067a8:	4a1b      	ldr	r2, [pc, #108]	; (8006818 <_printf_float+0x2f0>)
 80067aa:	2301      	movs	r3, #1
 80067ac:	4631      	mov	r1, r6
 80067ae:	4628      	mov	r0, r5
 80067b0:	47b8      	blx	r7
 80067b2:	3001      	adds	r0, #1
 80067b4:	f43f af19 	beq.w	80065ea <_printf_float+0xc2>
 80067b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067bc:	4313      	orrs	r3, r2
 80067be:	d102      	bne.n	80067c6 <_printf_float+0x29e>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	07d9      	lsls	r1, r3, #31
 80067c4:	d5d8      	bpl.n	8006778 <_printf_float+0x250>
 80067c6:	ee18 3a10 	vmov	r3, s16
 80067ca:	4652      	mov	r2, sl
 80067cc:	4631      	mov	r1, r6
 80067ce:	4628      	mov	r0, r5
 80067d0:	47b8      	blx	r7
 80067d2:	3001      	adds	r0, #1
 80067d4:	f43f af09 	beq.w	80065ea <_printf_float+0xc2>
 80067d8:	f04f 0900 	mov.w	r9, #0
 80067dc:	f104 0a1a 	add.w	sl, r4, #26
 80067e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e2:	425b      	negs	r3, r3
 80067e4:	454b      	cmp	r3, r9
 80067e6:	dc01      	bgt.n	80067ec <_printf_float+0x2c4>
 80067e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ea:	e792      	b.n	8006712 <_printf_float+0x1ea>
 80067ec:	2301      	movs	r3, #1
 80067ee:	4652      	mov	r2, sl
 80067f0:	4631      	mov	r1, r6
 80067f2:	4628      	mov	r0, r5
 80067f4:	47b8      	blx	r7
 80067f6:	3001      	adds	r0, #1
 80067f8:	f43f aef7 	beq.w	80065ea <_printf_float+0xc2>
 80067fc:	f109 0901 	add.w	r9, r9, #1
 8006800:	e7ee      	b.n	80067e0 <_printf_float+0x2b8>
 8006802:	bf00      	nop
 8006804:	7fefffff 	.word	0x7fefffff
 8006808:	0800ae38 	.word	0x0800ae38
 800680c:	0800ae3c 	.word	0x0800ae3c
 8006810:	0800ae44 	.word	0x0800ae44
 8006814:	0800ae40 	.word	0x0800ae40
 8006818:	0800ae48 	.word	0x0800ae48
 800681c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800681e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006820:	429a      	cmp	r2, r3
 8006822:	bfa8      	it	ge
 8006824:	461a      	movge	r2, r3
 8006826:	2a00      	cmp	r2, #0
 8006828:	4691      	mov	r9, r2
 800682a:	dc37      	bgt.n	800689c <_printf_float+0x374>
 800682c:	f04f 0b00 	mov.w	fp, #0
 8006830:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006834:	f104 021a 	add.w	r2, r4, #26
 8006838:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800683a:	9305      	str	r3, [sp, #20]
 800683c:	eba3 0309 	sub.w	r3, r3, r9
 8006840:	455b      	cmp	r3, fp
 8006842:	dc33      	bgt.n	80068ac <_printf_float+0x384>
 8006844:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006848:	429a      	cmp	r2, r3
 800684a:	db3b      	blt.n	80068c4 <_printf_float+0x39c>
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	07da      	lsls	r2, r3, #31
 8006850:	d438      	bmi.n	80068c4 <_printf_float+0x39c>
 8006852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006854:	9a05      	ldr	r2, [sp, #20]
 8006856:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006858:	1a9a      	subs	r2, r3, r2
 800685a:	eba3 0901 	sub.w	r9, r3, r1
 800685e:	4591      	cmp	r9, r2
 8006860:	bfa8      	it	ge
 8006862:	4691      	movge	r9, r2
 8006864:	f1b9 0f00 	cmp.w	r9, #0
 8006868:	dc35      	bgt.n	80068d6 <_printf_float+0x3ae>
 800686a:	f04f 0800 	mov.w	r8, #0
 800686e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006872:	f104 0a1a 	add.w	sl, r4, #26
 8006876:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800687a:	1a9b      	subs	r3, r3, r2
 800687c:	eba3 0309 	sub.w	r3, r3, r9
 8006880:	4543      	cmp	r3, r8
 8006882:	f77f af79 	ble.w	8006778 <_printf_float+0x250>
 8006886:	2301      	movs	r3, #1
 8006888:	4652      	mov	r2, sl
 800688a:	4631      	mov	r1, r6
 800688c:	4628      	mov	r0, r5
 800688e:	47b8      	blx	r7
 8006890:	3001      	adds	r0, #1
 8006892:	f43f aeaa 	beq.w	80065ea <_printf_float+0xc2>
 8006896:	f108 0801 	add.w	r8, r8, #1
 800689a:	e7ec      	b.n	8006876 <_printf_float+0x34e>
 800689c:	4613      	mov	r3, r2
 800689e:	4631      	mov	r1, r6
 80068a0:	4642      	mov	r2, r8
 80068a2:	4628      	mov	r0, r5
 80068a4:	47b8      	blx	r7
 80068a6:	3001      	adds	r0, #1
 80068a8:	d1c0      	bne.n	800682c <_printf_float+0x304>
 80068aa:	e69e      	b.n	80065ea <_printf_float+0xc2>
 80068ac:	2301      	movs	r3, #1
 80068ae:	4631      	mov	r1, r6
 80068b0:	4628      	mov	r0, r5
 80068b2:	9205      	str	r2, [sp, #20]
 80068b4:	47b8      	blx	r7
 80068b6:	3001      	adds	r0, #1
 80068b8:	f43f ae97 	beq.w	80065ea <_printf_float+0xc2>
 80068bc:	9a05      	ldr	r2, [sp, #20]
 80068be:	f10b 0b01 	add.w	fp, fp, #1
 80068c2:	e7b9      	b.n	8006838 <_printf_float+0x310>
 80068c4:	ee18 3a10 	vmov	r3, s16
 80068c8:	4652      	mov	r2, sl
 80068ca:	4631      	mov	r1, r6
 80068cc:	4628      	mov	r0, r5
 80068ce:	47b8      	blx	r7
 80068d0:	3001      	adds	r0, #1
 80068d2:	d1be      	bne.n	8006852 <_printf_float+0x32a>
 80068d4:	e689      	b.n	80065ea <_printf_float+0xc2>
 80068d6:	9a05      	ldr	r2, [sp, #20]
 80068d8:	464b      	mov	r3, r9
 80068da:	4442      	add	r2, r8
 80068dc:	4631      	mov	r1, r6
 80068de:	4628      	mov	r0, r5
 80068e0:	47b8      	blx	r7
 80068e2:	3001      	adds	r0, #1
 80068e4:	d1c1      	bne.n	800686a <_printf_float+0x342>
 80068e6:	e680      	b.n	80065ea <_printf_float+0xc2>
 80068e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068ea:	2a01      	cmp	r2, #1
 80068ec:	dc01      	bgt.n	80068f2 <_printf_float+0x3ca>
 80068ee:	07db      	lsls	r3, r3, #31
 80068f0:	d538      	bpl.n	8006964 <_printf_float+0x43c>
 80068f2:	2301      	movs	r3, #1
 80068f4:	4642      	mov	r2, r8
 80068f6:	4631      	mov	r1, r6
 80068f8:	4628      	mov	r0, r5
 80068fa:	47b8      	blx	r7
 80068fc:	3001      	adds	r0, #1
 80068fe:	f43f ae74 	beq.w	80065ea <_printf_float+0xc2>
 8006902:	ee18 3a10 	vmov	r3, s16
 8006906:	4652      	mov	r2, sl
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	47b8      	blx	r7
 800690e:	3001      	adds	r0, #1
 8006910:	f43f ae6b 	beq.w	80065ea <_printf_float+0xc2>
 8006914:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006918:	2200      	movs	r2, #0
 800691a:	2300      	movs	r3, #0
 800691c:	f7fa f8d4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006920:	b9d8      	cbnz	r0, 800695a <_printf_float+0x432>
 8006922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006924:	f108 0201 	add.w	r2, r8, #1
 8006928:	3b01      	subs	r3, #1
 800692a:	4631      	mov	r1, r6
 800692c:	4628      	mov	r0, r5
 800692e:	47b8      	blx	r7
 8006930:	3001      	adds	r0, #1
 8006932:	d10e      	bne.n	8006952 <_printf_float+0x42a>
 8006934:	e659      	b.n	80065ea <_printf_float+0xc2>
 8006936:	2301      	movs	r3, #1
 8006938:	4652      	mov	r2, sl
 800693a:	4631      	mov	r1, r6
 800693c:	4628      	mov	r0, r5
 800693e:	47b8      	blx	r7
 8006940:	3001      	adds	r0, #1
 8006942:	f43f ae52 	beq.w	80065ea <_printf_float+0xc2>
 8006946:	f108 0801 	add.w	r8, r8, #1
 800694a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800694c:	3b01      	subs	r3, #1
 800694e:	4543      	cmp	r3, r8
 8006950:	dcf1      	bgt.n	8006936 <_printf_float+0x40e>
 8006952:	464b      	mov	r3, r9
 8006954:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006958:	e6dc      	b.n	8006714 <_printf_float+0x1ec>
 800695a:	f04f 0800 	mov.w	r8, #0
 800695e:	f104 0a1a 	add.w	sl, r4, #26
 8006962:	e7f2      	b.n	800694a <_printf_float+0x422>
 8006964:	2301      	movs	r3, #1
 8006966:	4642      	mov	r2, r8
 8006968:	e7df      	b.n	800692a <_printf_float+0x402>
 800696a:	2301      	movs	r3, #1
 800696c:	464a      	mov	r2, r9
 800696e:	4631      	mov	r1, r6
 8006970:	4628      	mov	r0, r5
 8006972:	47b8      	blx	r7
 8006974:	3001      	adds	r0, #1
 8006976:	f43f ae38 	beq.w	80065ea <_printf_float+0xc2>
 800697a:	f108 0801 	add.w	r8, r8, #1
 800697e:	68e3      	ldr	r3, [r4, #12]
 8006980:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006982:	1a5b      	subs	r3, r3, r1
 8006984:	4543      	cmp	r3, r8
 8006986:	dcf0      	bgt.n	800696a <_printf_float+0x442>
 8006988:	e6fa      	b.n	8006780 <_printf_float+0x258>
 800698a:	f04f 0800 	mov.w	r8, #0
 800698e:	f104 0919 	add.w	r9, r4, #25
 8006992:	e7f4      	b.n	800697e <_printf_float+0x456>

08006994 <_printf_common>:
 8006994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006998:	4616      	mov	r6, r2
 800699a:	4699      	mov	r9, r3
 800699c:	688a      	ldr	r2, [r1, #8]
 800699e:	690b      	ldr	r3, [r1, #16]
 80069a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069a4:	4293      	cmp	r3, r2
 80069a6:	bfb8      	it	lt
 80069a8:	4613      	movlt	r3, r2
 80069aa:	6033      	str	r3, [r6, #0]
 80069ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069b0:	4607      	mov	r7, r0
 80069b2:	460c      	mov	r4, r1
 80069b4:	b10a      	cbz	r2, 80069ba <_printf_common+0x26>
 80069b6:	3301      	adds	r3, #1
 80069b8:	6033      	str	r3, [r6, #0]
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	0699      	lsls	r1, r3, #26
 80069be:	bf42      	ittt	mi
 80069c0:	6833      	ldrmi	r3, [r6, #0]
 80069c2:	3302      	addmi	r3, #2
 80069c4:	6033      	strmi	r3, [r6, #0]
 80069c6:	6825      	ldr	r5, [r4, #0]
 80069c8:	f015 0506 	ands.w	r5, r5, #6
 80069cc:	d106      	bne.n	80069dc <_printf_common+0x48>
 80069ce:	f104 0a19 	add.w	sl, r4, #25
 80069d2:	68e3      	ldr	r3, [r4, #12]
 80069d4:	6832      	ldr	r2, [r6, #0]
 80069d6:	1a9b      	subs	r3, r3, r2
 80069d8:	42ab      	cmp	r3, r5
 80069da:	dc26      	bgt.n	8006a2a <_printf_common+0x96>
 80069dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069e0:	1e13      	subs	r3, r2, #0
 80069e2:	6822      	ldr	r2, [r4, #0]
 80069e4:	bf18      	it	ne
 80069e6:	2301      	movne	r3, #1
 80069e8:	0692      	lsls	r2, r2, #26
 80069ea:	d42b      	bmi.n	8006a44 <_printf_common+0xb0>
 80069ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069f0:	4649      	mov	r1, r9
 80069f2:	4638      	mov	r0, r7
 80069f4:	47c0      	blx	r8
 80069f6:	3001      	adds	r0, #1
 80069f8:	d01e      	beq.n	8006a38 <_printf_common+0xa4>
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	68e5      	ldr	r5, [r4, #12]
 80069fe:	6832      	ldr	r2, [r6, #0]
 8006a00:	f003 0306 	and.w	r3, r3, #6
 8006a04:	2b04      	cmp	r3, #4
 8006a06:	bf08      	it	eq
 8006a08:	1aad      	subeq	r5, r5, r2
 8006a0a:	68a3      	ldr	r3, [r4, #8]
 8006a0c:	6922      	ldr	r2, [r4, #16]
 8006a0e:	bf0c      	ite	eq
 8006a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a14:	2500      	movne	r5, #0
 8006a16:	4293      	cmp	r3, r2
 8006a18:	bfc4      	itt	gt
 8006a1a:	1a9b      	subgt	r3, r3, r2
 8006a1c:	18ed      	addgt	r5, r5, r3
 8006a1e:	2600      	movs	r6, #0
 8006a20:	341a      	adds	r4, #26
 8006a22:	42b5      	cmp	r5, r6
 8006a24:	d11a      	bne.n	8006a5c <_printf_common+0xc8>
 8006a26:	2000      	movs	r0, #0
 8006a28:	e008      	b.n	8006a3c <_printf_common+0xa8>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	4652      	mov	r2, sl
 8006a2e:	4649      	mov	r1, r9
 8006a30:	4638      	mov	r0, r7
 8006a32:	47c0      	blx	r8
 8006a34:	3001      	adds	r0, #1
 8006a36:	d103      	bne.n	8006a40 <_printf_common+0xac>
 8006a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a40:	3501      	adds	r5, #1
 8006a42:	e7c6      	b.n	80069d2 <_printf_common+0x3e>
 8006a44:	18e1      	adds	r1, r4, r3
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	2030      	movs	r0, #48	; 0x30
 8006a4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a4e:	4422      	add	r2, r4
 8006a50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a58:	3302      	adds	r3, #2
 8006a5a:	e7c7      	b.n	80069ec <_printf_common+0x58>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	4622      	mov	r2, r4
 8006a60:	4649      	mov	r1, r9
 8006a62:	4638      	mov	r0, r7
 8006a64:	47c0      	blx	r8
 8006a66:	3001      	adds	r0, #1
 8006a68:	d0e6      	beq.n	8006a38 <_printf_common+0xa4>
 8006a6a:	3601      	adds	r6, #1
 8006a6c:	e7d9      	b.n	8006a22 <_printf_common+0x8e>
	...

08006a70 <_printf_i>:
 8006a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a74:	7e0f      	ldrb	r7, [r1, #24]
 8006a76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a78:	2f78      	cmp	r7, #120	; 0x78
 8006a7a:	4691      	mov	r9, r2
 8006a7c:	4680      	mov	r8, r0
 8006a7e:	460c      	mov	r4, r1
 8006a80:	469a      	mov	sl, r3
 8006a82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a86:	d807      	bhi.n	8006a98 <_printf_i+0x28>
 8006a88:	2f62      	cmp	r7, #98	; 0x62
 8006a8a:	d80a      	bhi.n	8006aa2 <_printf_i+0x32>
 8006a8c:	2f00      	cmp	r7, #0
 8006a8e:	f000 80d8 	beq.w	8006c42 <_printf_i+0x1d2>
 8006a92:	2f58      	cmp	r7, #88	; 0x58
 8006a94:	f000 80a3 	beq.w	8006bde <_printf_i+0x16e>
 8006a98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006aa0:	e03a      	b.n	8006b18 <_printf_i+0xa8>
 8006aa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006aa6:	2b15      	cmp	r3, #21
 8006aa8:	d8f6      	bhi.n	8006a98 <_printf_i+0x28>
 8006aaa:	a101      	add	r1, pc, #4	; (adr r1, 8006ab0 <_printf_i+0x40>)
 8006aac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ab0:	08006b09 	.word	0x08006b09
 8006ab4:	08006b1d 	.word	0x08006b1d
 8006ab8:	08006a99 	.word	0x08006a99
 8006abc:	08006a99 	.word	0x08006a99
 8006ac0:	08006a99 	.word	0x08006a99
 8006ac4:	08006a99 	.word	0x08006a99
 8006ac8:	08006b1d 	.word	0x08006b1d
 8006acc:	08006a99 	.word	0x08006a99
 8006ad0:	08006a99 	.word	0x08006a99
 8006ad4:	08006a99 	.word	0x08006a99
 8006ad8:	08006a99 	.word	0x08006a99
 8006adc:	08006c29 	.word	0x08006c29
 8006ae0:	08006b4d 	.word	0x08006b4d
 8006ae4:	08006c0b 	.word	0x08006c0b
 8006ae8:	08006a99 	.word	0x08006a99
 8006aec:	08006a99 	.word	0x08006a99
 8006af0:	08006c4b 	.word	0x08006c4b
 8006af4:	08006a99 	.word	0x08006a99
 8006af8:	08006b4d 	.word	0x08006b4d
 8006afc:	08006a99 	.word	0x08006a99
 8006b00:	08006a99 	.word	0x08006a99
 8006b04:	08006c13 	.word	0x08006c13
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	1d1a      	adds	r2, r3, #4
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	602a      	str	r2, [r5, #0]
 8006b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e0a3      	b.n	8006c64 <_printf_i+0x1f4>
 8006b1c:	6820      	ldr	r0, [r4, #0]
 8006b1e:	6829      	ldr	r1, [r5, #0]
 8006b20:	0606      	lsls	r6, r0, #24
 8006b22:	f101 0304 	add.w	r3, r1, #4
 8006b26:	d50a      	bpl.n	8006b3e <_printf_i+0xce>
 8006b28:	680e      	ldr	r6, [r1, #0]
 8006b2a:	602b      	str	r3, [r5, #0]
 8006b2c:	2e00      	cmp	r6, #0
 8006b2e:	da03      	bge.n	8006b38 <_printf_i+0xc8>
 8006b30:	232d      	movs	r3, #45	; 0x2d
 8006b32:	4276      	negs	r6, r6
 8006b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b38:	485e      	ldr	r0, [pc, #376]	; (8006cb4 <_printf_i+0x244>)
 8006b3a:	230a      	movs	r3, #10
 8006b3c:	e019      	b.n	8006b72 <_printf_i+0x102>
 8006b3e:	680e      	ldr	r6, [r1, #0]
 8006b40:	602b      	str	r3, [r5, #0]
 8006b42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b46:	bf18      	it	ne
 8006b48:	b236      	sxthne	r6, r6
 8006b4a:	e7ef      	b.n	8006b2c <_printf_i+0xbc>
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	6820      	ldr	r0, [r4, #0]
 8006b50:	1d19      	adds	r1, r3, #4
 8006b52:	6029      	str	r1, [r5, #0]
 8006b54:	0601      	lsls	r1, r0, #24
 8006b56:	d501      	bpl.n	8006b5c <_printf_i+0xec>
 8006b58:	681e      	ldr	r6, [r3, #0]
 8006b5a:	e002      	b.n	8006b62 <_printf_i+0xf2>
 8006b5c:	0646      	lsls	r6, r0, #25
 8006b5e:	d5fb      	bpl.n	8006b58 <_printf_i+0xe8>
 8006b60:	881e      	ldrh	r6, [r3, #0]
 8006b62:	4854      	ldr	r0, [pc, #336]	; (8006cb4 <_printf_i+0x244>)
 8006b64:	2f6f      	cmp	r7, #111	; 0x6f
 8006b66:	bf0c      	ite	eq
 8006b68:	2308      	moveq	r3, #8
 8006b6a:	230a      	movne	r3, #10
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b72:	6865      	ldr	r5, [r4, #4]
 8006b74:	60a5      	str	r5, [r4, #8]
 8006b76:	2d00      	cmp	r5, #0
 8006b78:	bfa2      	ittt	ge
 8006b7a:	6821      	ldrge	r1, [r4, #0]
 8006b7c:	f021 0104 	bicge.w	r1, r1, #4
 8006b80:	6021      	strge	r1, [r4, #0]
 8006b82:	b90e      	cbnz	r6, 8006b88 <_printf_i+0x118>
 8006b84:	2d00      	cmp	r5, #0
 8006b86:	d04d      	beq.n	8006c24 <_printf_i+0x1b4>
 8006b88:	4615      	mov	r5, r2
 8006b8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b8e:	fb03 6711 	mls	r7, r3, r1, r6
 8006b92:	5dc7      	ldrb	r7, [r0, r7]
 8006b94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b98:	4637      	mov	r7, r6
 8006b9a:	42bb      	cmp	r3, r7
 8006b9c:	460e      	mov	r6, r1
 8006b9e:	d9f4      	bls.n	8006b8a <_printf_i+0x11a>
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d10b      	bne.n	8006bbc <_printf_i+0x14c>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	07de      	lsls	r6, r3, #31
 8006ba8:	d508      	bpl.n	8006bbc <_printf_i+0x14c>
 8006baa:	6923      	ldr	r3, [r4, #16]
 8006bac:	6861      	ldr	r1, [r4, #4]
 8006bae:	4299      	cmp	r1, r3
 8006bb0:	bfde      	ittt	le
 8006bb2:	2330      	movle	r3, #48	; 0x30
 8006bb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bb8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006bbc:	1b52      	subs	r2, r2, r5
 8006bbe:	6122      	str	r2, [r4, #16]
 8006bc0:	f8cd a000 	str.w	sl, [sp]
 8006bc4:	464b      	mov	r3, r9
 8006bc6:	aa03      	add	r2, sp, #12
 8006bc8:	4621      	mov	r1, r4
 8006bca:	4640      	mov	r0, r8
 8006bcc:	f7ff fee2 	bl	8006994 <_printf_common>
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	d14c      	bne.n	8006c6e <_printf_i+0x1fe>
 8006bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bd8:	b004      	add	sp, #16
 8006bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bde:	4835      	ldr	r0, [pc, #212]	; (8006cb4 <_printf_i+0x244>)
 8006be0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006be4:	6829      	ldr	r1, [r5, #0]
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006bec:	6029      	str	r1, [r5, #0]
 8006bee:	061d      	lsls	r5, r3, #24
 8006bf0:	d514      	bpl.n	8006c1c <_printf_i+0x1ac>
 8006bf2:	07df      	lsls	r7, r3, #31
 8006bf4:	bf44      	itt	mi
 8006bf6:	f043 0320 	orrmi.w	r3, r3, #32
 8006bfa:	6023      	strmi	r3, [r4, #0]
 8006bfc:	b91e      	cbnz	r6, 8006c06 <_printf_i+0x196>
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	f023 0320 	bic.w	r3, r3, #32
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	2310      	movs	r3, #16
 8006c08:	e7b0      	b.n	8006b6c <_printf_i+0xfc>
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	f043 0320 	orr.w	r3, r3, #32
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	2378      	movs	r3, #120	; 0x78
 8006c14:	4828      	ldr	r0, [pc, #160]	; (8006cb8 <_printf_i+0x248>)
 8006c16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c1a:	e7e3      	b.n	8006be4 <_printf_i+0x174>
 8006c1c:	0659      	lsls	r1, r3, #25
 8006c1e:	bf48      	it	mi
 8006c20:	b2b6      	uxthmi	r6, r6
 8006c22:	e7e6      	b.n	8006bf2 <_printf_i+0x182>
 8006c24:	4615      	mov	r5, r2
 8006c26:	e7bb      	b.n	8006ba0 <_printf_i+0x130>
 8006c28:	682b      	ldr	r3, [r5, #0]
 8006c2a:	6826      	ldr	r6, [r4, #0]
 8006c2c:	6961      	ldr	r1, [r4, #20]
 8006c2e:	1d18      	adds	r0, r3, #4
 8006c30:	6028      	str	r0, [r5, #0]
 8006c32:	0635      	lsls	r5, r6, #24
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	d501      	bpl.n	8006c3c <_printf_i+0x1cc>
 8006c38:	6019      	str	r1, [r3, #0]
 8006c3a:	e002      	b.n	8006c42 <_printf_i+0x1d2>
 8006c3c:	0670      	lsls	r0, r6, #25
 8006c3e:	d5fb      	bpl.n	8006c38 <_printf_i+0x1c8>
 8006c40:	8019      	strh	r1, [r3, #0]
 8006c42:	2300      	movs	r3, #0
 8006c44:	6123      	str	r3, [r4, #16]
 8006c46:	4615      	mov	r5, r2
 8006c48:	e7ba      	b.n	8006bc0 <_printf_i+0x150>
 8006c4a:	682b      	ldr	r3, [r5, #0]
 8006c4c:	1d1a      	adds	r2, r3, #4
 8006c4e:	602a      	str	r2, [r5, #0]
 8006c50:	681d      	ldr	r5, [r3, #0]
 8006c52:	6862      	ldr	r2, [r4, #4]
 8006c54:	2100      	movs	r1, #0
 8006c56:	4628      	mov	r0, r5
 8006c58:	f7f9 fac2 	bl	80001e0 <memchr>
 8006c5c:	b108      	cbz	r0, 8006c62 <_printf_i+0x1f2>
 8006c5e:	1b40      	subs	r0, r0, r5
 8006c60:	6060      	str	r0, [r4, #4]
 8006c62:	6863      	ldr	r3, [r4, #4]
 8006c64:	6123      	str	r3, [r4, #16]
 8006c66:	2300      	movs	r3, #0
 8006c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c6c:	e7a8      	b.n	8006bc0 <_printf_i+0x150>
 8006c6e:	6923      	ldr	r3, [r4, #16]
 8006c70:	462a      	mov	r2, r5
 8006c72:	4649      	mov	r1, r9
 8006c74:	4640      	mov	r0, r8
 8006c76:	47d0      	blx	sl
 8006c78:	3001      	adds	r0, #1
 8006c7a:	d0ab      	beq.n	8006bd4 <_printf_i+0x164>
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	079b      	lsls	r3, r3, #30
 8006c80:	d413      	bmi.n	8006caa <_printf_i+0x23a>
 8006c82:	68e0      	ldr	r0, [r4, #12]
 8006c84:	9b03      	ldr	r3, [sp, #12]
 8006c86:	4298      	cmp	r0, r3
 8006c88:	bfb8      	it	lt
 8006c8a:	4618      	movlt	r0, r3
 8006c8c:	e7a4      	b.n	8006bd8 <_printf_i+0x168>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	4632      	mov	r2, r6
 8006c92:	4649      	mov	r1, r9
 8006c94:	4640      	mov	r0, r8
 8006c96:	47d0      	blx	sl
 8006c98:	3001      	adds	r0, #1
 8006c9a:	d09b      	beq.n	8006bd4 <_printf_i+0x164>
 8006c9c:	3501      	adds	r5, #1
 8006c9e:	68e3      	ldr	r3, [r4, #12]
 8006ca0:	9903      	ldr	r1, [sp, #12]
 8006ca2:	1a5b      	subs	r3, r3, r1
 8006ca4:	42ab      	cmp	r3, r5
 8006ca6:	dcf2      	bgt.n	8006c8e <_printf_i+0x21e>
 8006ca8:	e7eb      	b.n	8006c82 <_printf_i+0x212>
 8006caa:	2500      	movs	r5, #0
 8006cac:	f104 0619 	add.w	r6, r4, #25
 8006cb0:	e7f5      	b.n	8006c9e <_printf_i+0x22e>
 8006cb2:	bf00      	nop
 8006cb4:	0800ae4a 	.word	0x0800ae4a
 8006cb8:	0800ae5b 	.word	0x0800ae5b

08006cbc <_scanf_float>:
 8006cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc0:	b087      	sub	sp, #28
 8006cc2:	4617      	mov	r7, r2
 8006cc4:	9303      	str	r3, [sp, #12]
 8006cc6:	688b      	ldr	r3, [r1, #8]
 8006cc8:	1e5a      	subs	r2, r3, #1
 8006cca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006cce:	bf83      	ittte	hi
 8006cd0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006cd4:	195b      	addhi	r3, r3, r5
 8006cd6:	9302      	strhi	r3, [sp, #8]
 8006cd8:	2300      	movls	r3, #0
 8006cda:	bf86      	itte	hi
 8006cdc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006ce0:	608b      	strhi	r3, [r1, #8]
 8006ce2:	9302      	strls	r3, [sp, #8]
 8006ce4:	680b      	ldr	r3, [r1, #0]
 8006ce6:	468b      	mov	fp, r1
 8006ce8:	2500      	movs	r5, #0
 8006cea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006cee:	f84b 3b1c 	str.w	r3, [fp], #28
 8006cf2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006cf6:	4680      	mov	r8, r0
 8006cf8:	460c      	mov	r4, r1
 8006cfa:	465e      	mov	r6, fp
 8006cfc:	46aa      	mov	sl, r5
 8006cfe:	46a9      	mov	r9, r5
 8006d00:	9501      	str	r5, [sp, #4]
 8006d02:	68a2      	ldr	r2, [r4, #8]
 8006d04:	b152      	cbz	r2, 8006d1c <_scanf_float+0x60>
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	2b4e      	cmp	r3, #78	; 0x4e
 8006d0c:	d864      	bhi.n	8006dd8 <_scanf_float+0x11c>
 8006d0e:	2b40      	cmp	r3, #64	; 0x40
 8006d10:	d83c      	bhi.n	8006d8c <_scanf_float+0xd0>
 8006d12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006d16:	b2c8      	uxtb	r0, r1
 8006d18:	280e      	cmp	r0, #14
 8006d1a:	d93a      	bls.n	8006d92 <_scanf_float+0xd6>
 8006d1c:	f1b9 0f00 	cmp.w	r9, #0
 8006d20:	d003      	beq.n	8006d2a <_scanf_float+0x6e>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006d2e:	f1ba 0f01 	cmp.w	sl, #1
 8006d32:	f200 8113 	bhi.w	8006f5c <_scanf_float+0x2a0>
 8006d36:	455e      	cmp	r6, fp
 8006d38:	f200 8105 	bhi.w	8006f46 <_scanf_float+0x28a>
 8006d3c:	2501      	movs	r5, #1
 8006d3e:	4628      	mov	r0, r5
 8006d40:	b007      	add	sp, #28
 8006d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006d4a:	2a0d      	cmp	r2, #13
 8006d4c:	d8e6      	bhi.n	8006d1c <_scanf_float+0x60>
 8006d4e:	a101      	add	r1, pc, #4	; (adr r1, 8006d54 <_scanf_float+0x98>)
 8006d50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d54:	08006e93 	.word	0x08006e93
 8006d58:	08006d1d 	.word	0x08006d1d
 8006d5c:	08006d1d 	.word	0x08006d1d
 8006d60:	08006d1d 	.word	0x08006d1d
 8006d64:	08006ef3 	.word	0x08006ef3
 8006d68:	08006ecb 	.word	0x08006ecb
 8006d6c:	08006d1d 	.word	0x08006d1d
 8006d70:	08006d1d 	.word	0x08006d1d
 8006d74:	08006ea1 	.word	0x08006ea1
 8006d78:	08006d1d 	.word	0x08006d1d
 8006d7c:	08006d1d 	.word	0x08006d1d
 8006d80:	08006d1d 	.word	0x08006d1d
 8006d84:	08006d1d 	.word	0x08006d1d
 8006d88:	08006e59 	.word	0x08006e59
 8006d8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006d90:	e7db      	b.n	8006d4a <_scanf_float+0x8e>
 8006d92:	290e      	cmp	r1, #14
 8006d94:	d8c2      	bhi.n	8006d1c <_scanf_float+0x60>
 8006d96:	a001      	add	r0, pc, #4	; (adr r0, 8006d9c <_scanf_float+0xe0>)
 8006d98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d9c:	08006e4b 	.word	0x08006e4b
 8006da0:	08006d1d 	.word	0x08006d1d
 8006da4:	08006e4b 	.word	0x08006e4b
 8006da8:	08006edf 	.word	0x08006edf
 8006dac:	08006d1d 	.word	0x08006d1d
 8006db0:	08006df9 	.word	0x08006df9
 8006db4:	08006e35 	.word	0x08006e35
 8006db8:	08006e35 	.word	0x08006e35
 8006dbc:	08006e35 	.word	0x08006e35
 8006dc0:	08006e35 	.word	0x08006e35
 8006dc4:	08006e35 	.word	0x08006e35
 8006dc8:	08006e35 	.word	0x08006e35
 8006dcc:	08006e35 	.word	0x08006e35
 8006dd0:	08006e35 	.word	0x08006e35
 8006dd4:	08006e35 	.word	0x08006e35
 8006dd8:	2b6e      	cmp	r3, #110	; 0x6e
 8006dda:	d809      	bhi.n	8006df0 <_scanf_float+0x134>
 8006ddc:	2b60      	cmp	r3, #96	; 0x60
 8006dde:	d8b2      	bhi.n	8006d46 <_scanf_float+0x8a>
 8006de0:	2b54      	cmp	r3, #84	; 0x54
 8006de2:	d077      	beq.n	8006ed4 <_scanf_float+0x218>
 8006de4:	2b59      	cmp	r3, #89	; 0x59
 8006de6:	d199      	bne.n	8006d1c <_scanf_float+0x60>
 8006de8:	2d07      	cmp	r5, #7
 8006dea:	d197      	bne.n	8006d1c <_scanf_float+0x60>
 8006dec:	2508      	movs	r5, #8
 8006dee:	e029      	b.n	8006e44 <_scanf_float+0x188>
 8006df0:	2b74      	cmp	r3, #116	; 0x74
 8006df2:	d06f      	beq.n	8006ed4 <_scanf_float+0x218>
 8006df4:	2b79      	cmp	r3, #121	; 0x79
 8006df6:	e7f6      	b.n	8006de6 <_scanf_float+0x12a>
 8006df8:	6821      	ldr	r1, [r4, #0]
 8006dfa:	05c8      	lsls	r0, r1, #23
 8006dfc:	d51a      	bpl.n	8006e34 <_scanf_float+0x178>
 8006dfe:	9b02      	ldr	r3, [sp, #8]
 8006e00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006e04:	6021      	str	r1, [r4, #0]
 8006e06:	f109 0901 	add.w	r9, r9, #1
 8006e0a:	b11b      	cbz	r3, 8006e14 <_scanf_float+0x158>
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	3201      	adds	r2, #1
 8006e10:	9302      	str	r3, [sp, #8]
 8006e12:	60a2      	str	r2, [r4, #8]
 8006e14:	68a3      	ldr	r3, [r4, #8]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	60a3      	str	r3, [r4, #8]
 8006e1a:	6923      	ldr	r3, [r4, #16]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	6123      	str	r3, [r4, #16]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	607b      	str	r3, [r7, #4]
 8006e28:	f340 8084 	ble.w	8006f34 <_scanf_float+0x278>
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	603b      	str	r3, [r7, #0]
 8006e32:	e766      	b.n	8006d02 <_scanf_float+0x46>
 8006e34:	eb1a 0f05 	cmn.w	sl, r5
 8006e38:	f47f af70 	bne.w	8006d1c <_scanf_float+0x60>
 8006e3c:	6822      	ldr	r2, [r4, #0]
 8006e3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006e42:	6022      	str	r2, [r4, #0]
 8006e44:	f806 3b01 	strb.w	r3, [r6], #1
 8006e48:	e7e4      	b.n	8006e14 <_scanf_float+0x158>
 8006e4a:	6822      	ldr	r2, [r4, #0]
 8006e4c:	0610      	lsls	r0, r2, #24
 8006e4e:	f57f af65 	bpl.w	8006d1c <_scanf_float+0x60>
 8006e52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e56:	e7f4      	b.n	8006e42 <_scanf_float+0x186>
 8006e58:	f1ba 0f00 	cmp.w	sl, #0
 8006e5c:	d10e      	bne.n	8006e7c <_scanf_float+0x1c0>
 8006e5e:	f1b9 0f00 	cmp.w	r9, #0
 8006e62:	d10e      	bne.n	8006e82 <_scanf_float+0x1c6>
 8006e64:	6822      	ldr	r2, [r4, #0]
 8006e66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e6e:	d108      	bne.n	8006e82 <_scanf_float+0x1c6>
 8006e70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e74:	6022      	str	r2, [r4, #0]
 8006e76:	f04f 0a01 	mov.w	sl, #1
 8006e7a:	e7e3      	b.n	8006e44 <_scanf_float+0x188>
 8006e7c:	f1ba 0f02 	cmp.w	sl, #2
 8006e80:	d055      	beq.n	8006f2e <_scanf_float+0x272>
 8006e82:	2d01      	cmp	r5, #1
 8006e84:	d002      	beq.n	8006e8c <_scanf_float+0x1d0>
 8006e86:	2d04      	cmp	r5, #4
 8006e88:	f47f af48 	bne.w	8006d1c <_scanf_float+0x60>
 8006e8c:	3501      	adds	r5, #1
 8006e8e:	b2ed      	uxtb	r5, r5
 8006e90:	e7d8      	b.n	8006e44 <_scanf_float+0x188>
 8006e92:	f1ba 0f01 	cmp.w	sl, #1
 8006e96:	f47f af41 	bne.w	8006d1c <_scanf_float+0x60>
 8006e9a:	f04f 0a02 	mov.w	sl, #2
 8006e9e:	e7d1      	b.n	8006e44 <_scanf_float+0x188>
 8006ea0:	b97d      	cbnz	r5, 8006ec2 <_scanf_float+0x206>
 8006ea2:	f1b9 0f00 	cmp.w	r9, #0
 8006ea6:	f47f af3c 	bne.w	8006d22 <_scanf_float+0x66>
 8006eaa:	6822      	ldr	r2, [r4, #0]
 8006eac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006eb0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006eb4:	f47f af39 	bne.w	8006d2a <_scanf_float+0x6e>
 8006eb8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ebc:	6022      	str	r2, [r4, #0]
 8006ebe:	2501      	movs	r5, #1
 8006ec0:	e7c0      	b.n	8006e44 <_scanf_float+0x188>
 8006ec2:	2d03      	cmp	r5, #3
 8006ec4:	d0e2      	beq.n	8006e8c <_scanf_float+0x1d0>
 8006ec6:	2d05      	cmp	r5, #5
 8006ec8:	e7de      	b.n	8006e88 <_scanf_float+0x1cc>
 8006eca:	2d02      	cmp	r5, #2
 8006ecc:	f47f af26 	bne.w	8006d1c <_scanf_float+0x60>
 8006ed0:	2503      	movs	r5, #3
 8006ed2:	e7b7      	b.n	8006e44 <_scanf_float+0x188>
 8006ed4:	2d06      	cmp	r5, #6
 8006ed6:	f47f af21 	bne.w	8006d1c <_scanf_float+0x60>
 8006eda:	2507      	movs	r5, #7
 8006edc:	e7b2      	b.n	8006e44 <_scanf_float+0x188>
 8006ede:	6822      	ldr	r2, [r4, #0]
 8006ee0:	0591      	lsls	r1, r2, #22
 8006ee2:	f57f af1b 	bpl.w	8006d1c <_scanf_float+0x60>
 8006ee6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006eea:	6022      	str	r2, [r4, #0]
 8006eec:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ef0:	e7a8      	b.n	8006e44 <_scanf_float+0x188>
 8006ef2:	6822      	ldr	r2, [r4, #0]
 8006ef4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006ef8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006efc:	d006      	beq.n	8006f0c <_scanf_float+0x250>
 8006efe:	0550      	lsls	r0, r2, #21
 8006f00:	f57f af0c 	bpl.w	8006d1c <_scanf_float+0x60>
 8006f04:	f1b9 0f00 	cmp.w	r9, #0
 8006f08:	f43f af0f 	beq.w	8006d2a <_scanf_float+0x6e>
 8006f0c:	0591      	lsls	r1, r2, #22
 8006f0e:	bf58      	it	pl
 8006f10:	9901      	ldrpl	r1, [sp, #4]
 8006f12:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f16:	bf58      	it	pl
 8006f18:	eba9 0101 	subpl.w	r1, r9, r1
 8006f1c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006f20:	bf58      	it	pl
 8006f22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006f26:	6022      	str	r2, [r4, #0]
 8006f28:	f04f 0900 	mov.w	r9, #0
 8006f2c:	e78a      	b.n	8006e44 <_scanf_float+0x188>
 8006f2e:	f04f 0a03 	mov.w	sl, #3
 8006f32:	e787      	b.n	8006e44 <_scanf_float+0x188>
 8006f34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006f38:	4639      	mov	r1, r7
 8006f3a:	4640      	mov	r0, r8
 8006f3c:	4798      	blx	r3
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	f43f aedf 	beq.w	8006d02 <_scanf_float+0x46>
 8006f44:	e6ea      	b.n	8006d1c <_scanf_float+0x60>
 8006f46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f4e:	463a      	mov	r2, r7
 8006f50:	4640      	mov	r0, r8
 8006f52:	4798      	blx	r3
 8006f54:	6923      	ldr	r3, [r4, #16]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	6123      	str	r3, [r4, #16]
 8006f5a:	e6ec      	b.n	8006d36 <_scanf_float+0x7a>
 8006f5c:	1e6b      	subs	r3, r5, #1
 8006f5e:	2b06      	cmp	r3, #6
 8006f60:	d825      	bhi.n	8006fae <_scanf_float+0x2f2>
 8006f62:	2d02      	cmp	r5, #2
 8006f64:	d836      	bhi.n	8006fd4 <_scanf_float+0x318>
 8006f66:	455e      	cmp	r6, fp
 8006f68:	f67f aee8 	bls.w	8006d3c <_scanf_float+0x80>
 8006f6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f74:	463a      	mov	r2, r7
 8006f76:	4640      	mov	r0, r8
 8006f78:	4798      	blx	r3
 8006f7a:	6923      	ldr	r3, [r4, #16]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	6123      	str	r3, [r4, #16]
 8006f80:	e7f1      	b.n	8006f66 <_scanf_float+0x2aa>
 8006f82:	9802      	ldr	r0, [sp, #8]
 8006f84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f88:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006f8c:	9002      	str	r0, [sp, #8]
 8006f8e:	463a      	mov	r2, r7
 8006f90:	4640      	mov	r0, r8
 8006f92:	4798      	blx	r3
 8006f94:	6923      	ldr	r3, [r4, #16]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	6123      	str	r3, [r4, #16]
 8006f9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006f9e:	fa5f fa8a 	uxtb.w	sl, sl
 8006fa2:	f1ba 0f02 	cmp.w	sl, #2
 8006fa6:	d1ec      	bne.n	8006f82 <_scanf_float+0x2c6>
 8006fa8:	3d03      	subs	r5, #3
 8006faa:	b2ed      	uxtb	r5, r5
 8006fac:	1b76      	subs	r6, r6, r5
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	05da      	lsls	r2, r3, #23
 8006fb2:	d52f      	bpl.n	8007014 <_scanf_float+0x358>
 8006fb4:	055b      	lsls	r3, r3, #21
 8006fb6:	d510      	bpl.n	8006fda <_scanf_float+0x31e>
 8006fb8:	455e      	cmp	r6, fp
 8006fba:	f67f aebf 	bls.w	8006d3c <_scanf_float+0x80>
 8006fbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fc6:	463a      	mov	r2, r7
 8006fc8:	4640      	mov	r0, r8
 8006fca:	4798      	blx	r3
 8006fcc:	6923      	ldr	r3, [r4, #16]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	6123      	str	r3, [r4, #16]
 8006fd2:	e7f1      	b.n	8006fb8 <_scanf_float+0x2fc>
 8006fd4:	46aa      	mov	sl, r5
 8006fd6:	9602      	str	r6, [sp, #8]
 8006fd8:	e7df      	b.n	8006f9a <_scanf_float+0x2de>
 8006fda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006fde:	6923      	ldr	r3, [r4, #16]
 8006fe0:	2965      	cmp	r1, #101	; 0x65
 8006fe2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006fe6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8006fea:	6123      	str	r3, [r4, #16]
 8006fec:	d00c      	beq.n	8007008 <_scanf_float+0x34c>
 8006fee:	2945      	cmp	r1, #69	; 0x45
 8006ff0:	d00a      	beq.n	8007008 <_scanf_float+0x34c>
 8006ff2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ff6:	463a      	mov	r2, r7
 8006ff8:	4640      	mov	r0, r8
 8006ffa:	4798      	blx	r3
 8006ffc:	6923      	ldr	r3, [r4, #16]
 8006ffe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007002:	3b01      	subs	r3, #1
 8007004:	1eb5      	subs	r5, r6, #2
 8007006:	6123      	str	r3, [r4, #16]
 8007008:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800700c:	463a      	mov	r2, r7
 800700e:	4640      	mov	r0, r8
 8007010:	4798      	blx	r3
 8007012:	462e      	mov	r6, r5
 8007014:	6825      	ldr	r5, [r4, #0]
 8007016:	f015 0510 	ands.w	r5, r5, #16
 800701a:	d159      	bne.n	80070d0 <_scanf_float+0x414>
 800701c:	7035      	strb	r5, [r6, #0]
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007028:	d11b      	bne.n	8007062 <_scanf_float+0x3a6>
 800702a:	9b01      	ldr	r3, [sp, #4]
 800702c:	454b      	cmp	r3, r9
 800702e:	eba3 0209 	sub.w	r2, r3, r9
 8007032:	d123      	bne.n	800707c <_scanf_float+0x3c0>
 8007034:	2200      	movs	r2, #0
 8007036:	4659      	mov	r1, fp
 8007038:	4640      	mov	r0, r8
 800703a:	f000 feef 	bl	8007e1c <_strtod_r>
 800703e:	6822      	ldr	r2, [r4, #0]
 8007040:	9b03      	ldr	r3, [sp, #12]
 8007042:	f012 0f02 	tst.w	r2, #2
 8007046:	ec57 6b10 	vmov	r6, r7, d0
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	d021      	beq.n	8007092 <_scanf_float+0x3d6>
 800704e:	9903      	ldr	r1, [sp, #12]
 8007050:	1d1a      	adds	r2, r3, #4
 8007052:	600a      	str	r2, [r1, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	e9c3 6700 	strd	r6, r7, [r3]
 800705a:	68e3      	ldr	r3, [r4, #12]
 800705c:	3301      	adds	r3, #1
 800705e:	60e3      	str	r3, [r4, #12]
 8007060:	e66d      	b.n	8006d3e <_scanf_float+0x82>
 8007062:	9b04      	ldr	r3, [sp, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d0e5      	beq.n	8007034 <_scanf_float+0x378>
 8007068:	9905      	ldr	r1, [sp, #20]
 800706a:	230a      	movs	r3, #10
 800706c:	462a      	mov	r2, r5
 800706e:	3101      	adds	r1, #1
 8007070:	4640      	mov	r0, r8
 8007072:	f000 ff5b 	bl	8007f2c <_strtol_r>
 8007076:	9b04      	ldr	r3, [sp, #16]
 8007078:	9e05      	ldr	r6, [sp, #20]
 800707a:	1ac2      	subs	r2, r0, r3
 800707c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007080:	429e      	cmp	r6, r3
 8007082:	bf28      	it	cs
 8007084:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007088:	4912      	ldr	r1, [pc, #72]	; (80070d4 <_scanf_float+0x418>)
 800708a:	4630      	mov	r0, r6
 800708c:	f000 f82c 	bl	80070e8 <siprintf>
 8007090:	e7d0      	b.n	8007034 <_scanf_float+0x378>
 8007092:	9903      	ldr	r1, [sp, #12]
 8007094:	f012 0f04 	tst.w	r2, #4
 8007098:	f103 0204 	add.w	r2, r3, #4
 800709c:	600a      	str	r2, [r1, #0]
 800709e:	d1d9      	bne.n	8007054 <_scanf_float+0x398>
 80070a0:	f8d3 8000 	ldr.w	r8, [r3]
 80070a4:	ee10 2a10 	vmov	r2, s0
 80070a8:	ee10 0a10 	vmov	r0, s0
 80070ac:	463b      	mov	r3, r7
 80070ae:	4639      	mov	r1, r7
 80070b0:	f7f9 fd3c 	bl	8000b2c <__aeabi_dcmpun>
 80070b4:	b128      	cbz	r0, 80070c2 <_scanf_float+0x406>
 80070b6:	4808      	ldr	r0, [pc, #32]	; (80070d8 <_scanf_float+0x41c>)
 80070b8:	f000 f810 	bl	80070dc <nanf>
 80070bc:	ed88 0a00 	vstr	s0, [r8]
 80070c0:	e7cb      	b.n	800705a <_scanf_float+0x39e>
 80070c2:	4630      	mov	r0, r6
 80070c4:	4639      	mov	r1, r7
 80070c6:	f7f9 fd8f 	bl	8000be8 <__aeabi_d2f>
 80070ca:	f8c8 0000 	str.w	r0, [r8]
 80070ce:	e7c4      	b.n	800705a <_scanf_float+0x39e>
 80070d0:	2500      	movs	r5, #0
 80070d2:	e634      	b.n	8006d3e <_scanf_float+0x82>
 80070d4:	0800ae6c 	.word	0x0800ae6c
 80070d8:	0800b278 	.word	0x0800b278

080070dc <nanf>:
 80070dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80070e4 <nanf+0x8>
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	7fc00000 	.word	0x7fc00000

080070e8 <siprintf>:
 80070e8:	b40e      	push	{r1, r2, r3}
 80070ea:	b500      	push	{lr}
 80070ec:	b09c      	sub	sp, #112	; 0x70
 80070ee:	ab1d      	add	r3, sp, #116	; 0x74
 80070f0:	9002      	str	r0, [sp, #8]
 80070f2:	9006      	str	r0, [sp, #24]
 80070f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070f8:	4809      	ldr	r0, [pc, #36]	; (8007120 <siprintf+0x38>)
 80070fa:	9107      	str	r1, [sp, #28]
 80070fc:	9104      	str	r1, [sp, #16]
 80070fe:	4909      	ldr	r1, [pc, #36]	; (8007124 <siprintf+0x3c>)
 8007100:	f853 2b04 	ldr.w	r2, [r3], #4
 8007104:	9105      	str	r1, [sp, #20]
 8007106:	6800      	ldr	r0, [r0, #0]
 8007108:	9301      	str	r3, [sp, #4]
 800710a:	a902      	add	r1, sp, #8
 800710c:	f002 ff70 	bl	8009ff0 <_svfiprintf_r>
 8007110:	9b02      	ldr	r3, [sp, #8]
 8007112:	2200      	movs	r2, #0
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	b01c      	add	sp, #112	; 0x70
 8007118:	f85d eb04 	ldr.w	lr, [sp], #4
 800711c:	b003      	add	sp, #12
 800711e:	4770      	bx	lr
 8007120:	2000000c 	.word	0x2000000c
 8007124:	ffff0208 	.word	0xffff0208

08007128 <__sread>:
 8007128:	b510      	push	{r4, lr}
 800712a:	460c      	mov	r4, r1
 800712c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007130:	f003 f85e 	bl	800a1f0 <_read_r>
 8007134:	2800      	cmp	r0, #0
 8007136:	bfab      	itete	ge
 8007138:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800713a:	89a3      	ldrhlt	r3, [r4, #12]
 800713c:	181b      	addge	r3, r3, r0
 800713e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007142:	bfac      	ite	ge
 8007144:	6563      	strge	r3, [r4, #84]	; 0x54
 8007146:	81a3      	strhlt	r3, [r4, #12]
 8007148:	bd10      	pop	{r4, pc}

0800714a <__swrite>:
 800714a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800714e:	461f      	mov	r7, r3
 8007150:	898b      	ldrh	r3, [r1, #12]
 8007152:	05db      	lsls	r3, r3, #23
 8007154:	4605      	mov	r5, r0
 8007156:	460c      	mov	r4, r1
 8007158:	4616      	mov	r6, r2
 800715a:	d505      	bpl.n	8007168 <__swrite+0x1e>
 800715c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007160:	2302      	movs	r3, #2
 8007162:	2200      	movs	r2, #0
 8007164:	f002 f8f6 	bl	8009354 <_lseek_r>
 8007168:	89a3      	ldrh	r3, [r4, #12]
 800716a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800716e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007172:	81a3      	strh	r3, [r4, #12]
 8007174:	4632      	mov	r2, r6
 8007176:	463b      	mov	r3, r7
 8007178:	4628      	mov	r0, r5
 800717a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800717e:	f000 bed7 	b.w	8007f30 <_write_r>

08007182 <__sseek>:
 8007182:	b510      	push	{r4, lr}
 8007184:	460c      	mov	r4, r1
 8007186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800718a:	f002 f8e3 	bl	8009354 <_lseek_r>
 800718e:	1c43      	adds	r3, r0, #1
 8007190:	89a3      	ldrh	r3, [r4, #12]
 8007192:	bf15      	itete	ne
 8007194:	6560      	strne	r0, [r4, #84]	; 0x54
 8007196:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800719a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800719e:	81a3      	strheq	r3, [r4, #12]
 80071a0:	bf18      	it	ne
 80071a2:	81a3      	strhne	r3, [r4, #12]
 80071a4:	bd10      	pop	{r4, pc}

080071a6 <__sclose>:
 80071a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071aa:	f000 bed3 	b.w	8007f54 <_close_r>

080071ae <strncmp>:
 80071ae:	b510      	push	{r4, lr}
 80071b0:	b17a      	cbz	r2, 80071d2 <strncmp+0x24>
 80071b2:	4603      	mov	r3, r0
 80071b4:	3901      	subs	r1, #1
 80071b6:	1884      	adds	r4, r0, r2
 80071b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80071bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80071c0:	4290      	cmp	r0, r2
 80071c2:	d101      	bne.n	80071c8 <strncmp+0x1a>
 80071c4:	42a3      	cmp	r3, r4
 80071c6:	d101      	bne.n	80071cc <strncmp+0x1e>
 80071c8:	1a80      	subs	r0, r0, r2
 80071ca:	bd10      	pop	{r4, pc}
 80071cc:	2800      	cmp	r0, #0
 80071ce:	d1f3      	bne.n	80071b8 <strncmp+0xa>
 80071d0:	e7fa      	b.n	80071c8 <strncmp+0x1a>
 80071d2:	4610      	mov	r0, r2
 80071d4:	e7f9      	b.n	80071ca <strncmp+0x1c>

080071d6 <sulp>:
 80071d6:	b570      	push	{r4, r5, r6, lr}
 80071d8:	4604      	mov	r4, r0
 80071da:	460d      	mov	r5, r1
 80071dc:	ec45 4b10 	vmov	d0, r4, r5
 80071e0:	4616      	mov	r6, r2
 80071e2:	f002 fc63 	bl	8009aac <__ulp>
 80071e6:	ec51 0b10 	vmov	r0, r1, d0
 80071ea:	b17e      	cbz	r6, 800720c <sulp+0x36>
 80071ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80071f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	dd09      	ble.n	800720c <sulp+0x36>
 80071f8:	051b      	lsls	r3, r3, #20
 80071fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80071fe:	2400      	movs	r4, #0
 8007200:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007204:	4622      	mov	r2, r4
 8007206:	462b      	mov	r3, r5
 8007208:	f7f9 f9f6 	bl	80005f8 <__aeabi_dmul>
 800720c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007210 <_strtod_l>:
 8007210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007214:	ed2d 8b02 	vpush	{d8}
 8007218:	b09d      	sub	sp, #116	; 0x74
 800721a:	461f      	mov	r7, r3
 800721c:	2300      	movs	r3, #0
 800721e:	9318      	str	r3, [sp, #96]	; 0x60
 8007220:	4ba2      	ldr	r3, [pc, #648]	; (80074ac <_strtod_l+0x29c>)
 8007222:	9213      	str	r2, [sp, #76]	; 0x4c
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	9305      	str	r3, [sp, #20]
 8007228:	4604      	mov	r4, r0
 800722a:	4618      	mov	r0, r3
 800722c:	4688      	mov	r8, r1
 800722e:	f7f8 ffcf 	bl	80001d0 <strlen>
 8007232:	f04f 0a00 	mov.w	sl, #0
 8007236:	4605      	mov	r5, r0
 8007238:	f04f 0b00 	mov.w	fp, #0
 800723c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007240:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007242:	781a      	ldrb	r2, [r3, #0]
 8007244:	2a2b      	cmp	r2, #43	; 0x2b
 8007246:	d04e      	beq.n	80072e6 <_strtod_l+0xd6>
 8007248:	d83b      	bhi.n	80072c2 <_strtod_l+0xb2>
 800724a:	2a0d      	cmp	r2, #13
 800724c:	d834      	bhi.n	80072b8 <_strtod_l+0xa8>
 800724e:	2a08      	cmp	r2, #8
 8007250:	d834      	bhi.n	80072bc <_strtod_l+0xac>
 8007252:	2a00      	cmp	r2, #0
 8007254:	d03e      	beq.n	80072d4 <_strtod_l+0xc4>
 8007256:	2300      	movs	r3, #0
 8007258:	930a      	str	r3, [sp, #40]	; 0x28
 800725a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800725c:	7833      	ldrb	r3, [r6, #0]
 800725e:	2b30      	cmp	r3, #48	; 0x30
 8007260:	f040 80b0 	bne.w	80073c4 <_strtod_l+0x1b4>
 8007264:	7873      	ldrb	r3, [r6, #1]
 8007266:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800726a:	2b58      	cmp	r3, #88	; 0x58
 800726c:	d168      	bne.n	8007340 <_strtod_l+0x130>
 800726e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007270:	9301      	str	r3, [sp, #4]
 8007272:	ab18      	add	r3, sp, #96	; 0x60
 8007274:	9702      	str	r7, [sp, #8]
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	4a8d      	ldr	r2, [pc, #564]	; (80074b0 <_strtod_l+0x2a0>)
 800727a:	ab19      	add	r3, sp, #100	; 0x64
 800727c:	a917      	add	r1, sp, #92	; 0x5c
 800727e:	4620      	mov	r0, r4
 8007280:	f001 fd5c 	bl	8008d3c <__gethex>
 8007284:	f010 0707 	ands.w	r7, r0, #7
 8007288:	4605      	mov	r5, r0
 800728a:	d005      	beq.n	8007298 <_strtod_l+0x88>
 800728c:	2f06      	cmp	r7, #6
 800728e:	d12c      	bne.n	80072ea <_strtod_l+0xda>
 8007290:	3601      	adds	r6, #1
 8007292:	2300      	movs	r3, #0
 8007294:	9617      	str	r6, [sp, #92]	; 0x5c
 8007296:	930a      	str	r3, [sp, #40]	; 0x28
 8007298:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800729a:	2b00      	cmp	r3, #0
 800729c:	f040 8590 	bne.w	8007dc0 <_strtod_l+0xbb0>
 80072a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072a2:	b1eb      	cbz	r3, 80072e0 <_strtod_l+0xd0>
 80072a4:	4652      	mov	r2, sl
 80072a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80072aa:	ec43 2b10 	vmov	d0, r2, r3
 80072ae:	b01d      	add	sp, #116	; 0x74
 80072b0:	ecbd 8b02 	vpop	{d8}
 80072b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b8:	2a20      	cmp	r2, #32
 80072ba:	d1cc      	bne.n	8007256 <_strtod_l+0x46>
 80072bc:	3301      	adds	r3, #1
 80072be:	9317      	str	r3, [sp, #92]	; 0x5c
 80072c0:	e7be      	b.n	8007240 <_strtod_l+0x30>
 80072c2:	2a2d      	cmp	r2, #45	; 0x2d
 80072c4:	d1c7      	bne.n	8007256 <_strtod_l+0x46>
 80072c6:	2201      	movs	r2, #1
 80072c8:	920a      	str	r2, [sp, #40]	; 0x28
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80072ce:	785b      	ldrb	r3, [r3, #1]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1c2      	bne.n	800725a <_strtod_l+0x4a>
 80072d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f040 856e 	bne.w	8007dbc <_strtod_l+0xbac>
 80072e0:	4652      	mov	r2, sl
 80072e2:	465b      	mov	r3, fp
 80072e4:	e7e1      	b.n	80072aa <_strtod_l+0x9a>
 80072e6:	2200      	movs	r2, #0
 80072e8:	e7ee      	b.n	80072c8 <_strtod_l+0xb8>
 80072ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80072ec:	b13a      	cbz	r2, 80072fe <_strtod_l+0xee>
 80072ee:	2135      	movs	r1, #53	; 0x35
 80072f0:	a81a      	add	r0, sp, #104	; 0x68
 80072f2:	f002 fce6 	bl	8009cc2 <__copybits>
 80072f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80072f8:	4620      	mov	r0, r4
 80072fa:	f002 f8a5 	bl	8009448 <_Bfree>
 80072fe:	3f01      	subs	r7, #1
 8007300:	2f04      	cmp	r7, #4
 8007302:	d806      	bhi.n	8007312 <_strtod_l+0x102>
 8007304:	e8df f007 	tbb	[pc, r7]
 8007308:	1714030a 	.word	0x1714030a
 800730c:	0a          	.byte	0x0a
 800730d:	00          	.byte	0x00
 800730e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007312:	0728      	lsls	r0, r5, #28
 8007314:	d5c0      	bpl.n	8007298 <_strtod_l+0x88>
 8007316:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800731a:	e7bd      	b.n	8007298 <_strtod_l+0x88>
 800731c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007320:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007322:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007326:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800732a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800732e:	e7f0      	b.n	8007312 <_strtod_l+0x102>
 8007330:	f8df b180 	ldr.w	fp, [pc, #384]	; 80074b4 <_strtod_l+0x2a4>
 8007334:	e7ed      	b.n	8007312 <_strtod_l+0x102>
 8007336:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800733a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800733e:	e7e8      	b.n	8007312 <_strtod_l+0x102>
 8007340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	9217      	str	r2, [sp, #92]	; 0x5c
 8007346:	785b      	ldrb	r3, [r3, #1]
 8007348:	2b30      	cmp	r3, #48	; 0x30
 800734a:	d0f9      	beq.n	8007340 <_strtod_l+0x130>
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0a3      	beq.n	8007298 <_strtod_l+0x88>
 8007350:	2301      	movs	r3, #1
 8007352:	f04f 0900 	mov.w	r9, #0
 8007356:	9304      	str	r3, [sp, #16]
 8007358:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800735a:	9308      	str	r3, [sp, #32]
 800735c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007360:	464f      	mov	r7, r9
 8007362:	220a      	movs	r2, #10
 8007364:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007366:	7806      	ldrb	r6, [r0, #0]
 8007368:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800736c:	b2d9      	uxtb	r1, r3
 800736e:	2909      	cmp	r1, #9
 8007370:	d92a      	bls.n	80073c8 <_strtod_l+0x1b8>
 8007372:	9905      	ldr	r1, [sp, #20]
 8007374:	462a      	mov	r2, r5
 8007376:	f7ff ff1a 	bl	80071ae <strncmp>
 800737a:	b398      	cbz	r0, 80073e4 <_strtod_l+0x1d4>
 800737c:	2000      	movs	r0, #0
 800737e:	4632      	mov	r2, r6
 8007380:	463d      	mov	r5, r7
 8007382:	9005      	str	r0, [sp, #20]
 8007384:	4603      	mov	r3, r0
 8007386:	2a65      	cmp	r2, #101	; 0x65
 8007388:	d001      	beq.n	800738e <_strtod_l+0x17e>
 800738a:	2a45      	cmp	r2, #69	; 0x45
 800738c:	d118      	bne.n	80073c0 <_strtod_l+0x1b0>
 800738e:	b91d      	cbnz	r5, 8007398 <_strtod_l+0x188>
 8007390:	9a04      	ldr	r2, [sp, #16]
 8007392:	4302      	orrs	r2, r0
 8007394:	d09e      	beq.n	80072d4 <_strtod_l+0xc4>
 8007396:	2500      	movs	r5, #0
 8007398:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800739c:	f108 0201 	add.w	r2, r8, #1
 80073a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80073a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80073a6:	2a2b      	cmp	r2, #43	; 0x2b
 80073a8:	d075      	beq.n	8007496 <_strtod_l+0x286>
 80073aa:	2a2d      	cmp	r2, #45	; 0x2d
 80073ac:	d07b      	beq.n	80074a6 <_strtod_l+0x296>
 80073ae:	f04f 0c00 	mov.w	ip, #0
 80073b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80073b6:	2909      	cmp	r1, #9
 80073b8:	f240 8082 	bls.w	80074c0 <_strtod_l+0x2b0>
 80073bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80073c0:	2600      	movs	r6, #0
 80073c2:	e09d      	b.n	8007500 <_strtod_l+0x2f0>
 80073c4:	2300      	movs	r3, #0
 80073c6:	e7c4      	b.n	8007352 <_strtod_l+0x142>
 80073c8:	2f08      	cmp	r7, #8
 80073ca:	bfd8      	it	le
 80073cc:	9907      	ldrle	r1, [sp, #28]
 80073ce:	f100 0001 	add.w	r0, r0, #1
 80073d2:	bfda      	itte	le
 80073d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80073d8:	9307      	strle	r3, [sp, #28]
 80073da:	fb02 3909 	mlagt	r9, r2, r9, r3
 80073de:	3701      	adds	r7, #1
 80073e0:	9017      	str	r0, [sp, #92]	; 0x5c
 80073e2:	e7bf      	b.n	8007364 <_strtod_l+0x154>
 80073e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073e6:	195a      	adds	r2, r3, r5
 80073e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80073ea:	5d5a      	ldrb	r2, [r3, r5]
 80073ec:	2f00      	cmp	r7, #0
 80073ee:	d037      	beq.n	8007460 <_strtod_l+0x250>
 80073f0:	9005      	str	r0, [sp, #20]
 80073f2:	463d      	mov	r5, r7
 80073f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80073f8:	2b09      	cmp	r3, #9
 80073fa:	d912      	bls.n	8007422 <_strtod_l+0x212>
 80073fc:	2301      	movs	r3, #1
 80073fe:	e7c2      	b.n	8007386 <_strtod_l+0x176>
 8007400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	9217      	str	r2, [sp, #92]	; 0x5c
 8007406:	785a      	ldrb	r2, [r3, #1]
 8007408:	3001      	adds	r0, #1
 800740a:	2a30      	cmp	r2, #48	; 0x30
 800740c:	d0f8      	beq.n	8007400 <_strtod_l+0x1f0>
 800740e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007412:	2b08      	cmp	r3, #8
 8007414:	f200 84d9 	bhi.w	8007dca <_strtod_l+0xbba>
 8007418:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800741a:	9005      	str	r0, [sp, #20]
 800741c:	2000      	movs	r0, #0
 800741e:	9308      	str	r3, [sp, #32]
 8007420:	4605      	mov	r5, r0
 8007422:	3a30      	subs	r2, #48	; 0x30
 8007424:	f100 0301 	add.w	r3, r0, #1
 8007428:	d014      	beq.n	8007454 <_strtod_l+0x244>
 800742a:	9905      	ldr	r1, [sp, #20]
 800742c:	4419      	add	r1, r3
 800742e:	9105      	str	r1, [sp, #20]
 8007430:	462b      	mov	r3, r5
 8007432:	eb00 0e05 	add.w	lr, r0, r5
 8007436:	210a      	movs	r1, #10
 8007438:	4573      	cmp	r3, lr
 800743a:	d113      	bne.n	8007464 <_strtod_l+0x254>
 800743c:	182b      	adds	r3, r5, r0
 800743e:	2b08      	cmp	r3, #8
 8007440:	f105 0501 	add.w	r5, r5, #1
 8007444:	4405      	add	r5, r0
 8007446:	dc1c      	bgt.n	8007482 <_strtod_l+0x272>
 8007448:	9907      	ldr	r1, [sp, #28]
 800744a:	230a      	movs	r3, #10
 800744c:	fb03 2301 	mla	r3, r3, r1, r2
 8007450:	9307      	str	r3, [sp, #28]
 8007452:	2300      	movs	r3, #0
 8007454:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007456:	1c51      	adds	r1, r2, #1
 8007458:	9117      	str	r1, [sp, #92]	; 0x5c
 800745a:	7852      	ldrb	r2, [r2, #1]
 800745c:	4618      	mov	r0, r3
 800745e:	e7c9      	b.n	80073f4 <_strtod_l+0x1e4>
 8007460:	4638      	mov	r0, r7
 8007462:	e7d2      	b.n	800740a <_strtod_l+0x1fa>
 8007464:	2b08      	cmp	r3, #8
 8007466:	dc04      	bgt.n	8007472 <_strtod_l+0x262>
 8007468:	9e07      	ldr	r6, [sp, #28]
 800746a:	434e      	muls	r6, r1
 800746c:	9607      	str	r6, [sp, #28]
 800746e:	3301      	adds	r3, #1
 8007470:	e7e2      	b.n	8007438 <_strtod_l+0x228>
 8007472:	f103 0c01 	add.w	ip, r3, #1
 8007476:	f1bc 0f10 	cmp.w	ip, #16
 800747a:	bfd8      	it	le
 800747c:	fb01 f909 	mulle.w	r9, r1, r9
 8007480:	e7f5      	b.n	800746e <_strtod_l+0x25e>
 8007482:	2d10      	cmp	r5, #16
 8007484:	bfdc      	itt	le
 8007486:	230a      	movle	r3, #10
 8007488:	fb03 2909 	mlale	r9, r3, r9, r2
 800748c:	e7e1      	b.n	8007452 <_strtod_l+0x242>
 800748e:	2300      	movs	r3, #0
 8007490:	9305      	str	r3, [sp, #20]
 8007492:	2301      	movs	r3, #1
 8007494:	e77c      	b.n	8007390 <_strtod_l+0x180>
 8007496:	f04f 0c00 	mov.w	ip, #0
 800749a:	f108 0202 	add.w	r2, r8, #2
 800749e:	9217      	str	r2, [sp, #92]	; 0x5c
 80074a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80074a4:	e785      	b.n	80073b2 <_strtod_l+0x1a2>
 80074a6:	f04f 0c01 	mov.w	ip, #1
 80074aa:	e7f6      	b.n	800749a <_strtod_l+0x28a>
 80074ac:	0800b0c0 	.word	0x0800b0c0
 80074b0:	0800ae74 	.word	0x0800ae74
 80074b4:	7ff00000 	.word	0x7ff00000
 80074b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074ba:	1c51      	adds	r1, r2, #1
 80074bc:	9117      	str	r1, [sp, #92]	; 0x5c
 80074be:	7852      	ldrb	r2, [r2, #1]
 80074c0:	2a30      	cmp	r2, #48	; 0x30
 80074c2:	d0f9      	beq.n	80074b8 <_strtod_l+0x2a8>
 80074c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80074c8:	2908      	cmp	r1, #8
 80074ca:	f63f af79 	bhi.w	80073c0 <_strtod_l+0x1b0>
 80074ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80074d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074d4:	9206      	str	r2, [sp, #24]
 80074d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074d8:	1c51      	adds	r1, r2, #1
 80074da:	9117      	str	r1, [sp, #92]	; 0x5c
 80074dc:	7852      	ldrb	r2, [r2, #1]
 80074de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80074e2:	2e09      	cmp	r6, #9
 80074e4:	d937      	bls.n	8007556 <_strtod_l+0x346>
 80074e6:	9e06      	ldr	r6, [sp, #24]
 80074e8:	1b89      	subs	r1, r1, r6
 80074ea:	2908      	cmp	r1, #8
 80074ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80074f0:	dc02      	bgt.n	80074f8 <_strtod_l+0x2e8>
 80074f2:	4576      	cmp	r6, lr
 80074f4:	bfa8      	it	ge
 80074f6:	4676      	movge	r6, lr
 80074f8:	f1bc 0f00 	cmp.w	ip, #0
 80074fc:	d000      	beq.n	8007500 <_strtod_l+0x2f0>
 80074fe:	4276      	negs	r6, r6
 8007500:	2d00      	cmp	r5, #0
 8007502:	d14d      	bne.n	80075a0 <_strtod_l+0x390>
 8007504:	9904      	ldr	r1, [sp, #16]
 8007506:	4301      	orrs	r1, r0
 8007508:	f47f aec6 	bne.w	8007298 <_strtod_l+0x88>
 800750c:	2b00      	cmp	r3, #0
 800750e:	f47f aee1 	bne.w	80072d4 <_strtod_l+0xc4>
 8007512:	2a69      	cmp	r2, #105	; 0x69
 8007514:	d027      	beq.n	8007566 <_strtod_l+0x356>
 8007516:	dc24      	bgt.n	8007562 <_strtod_l+0x352>
 8007518:	2a49      	cmp	r2, #73	; 0x49
 800751a:	d024      	beq.n	8007566 <_strtod_l+0x356>
 800751c:	2a4e      	cmp	r2, #78	; 0x4e
 800751e:	f47f aed9 	bne.w	80072d4 <_strtod_l+0xc4>
 8007522:	499f      	ldr	r1, [pc, #636]	; (80077a0 <_strtod_l+0x590>)
 8007524:	a817      	add	r0, sp, #92	; 0x5c
 8007526:	f001 fe61 	bl	80091ec <__match>
 800752a:	2800      	cmp	r0, #0
 800752c:	f43f aed2 	beq.w	80072d4 <_strtod_l+0xc4>
 8007530:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2b28      	cmp	r3, #40	; 0x28
 8007536:	d12d      	bne.n	8007594 <_strtod_l+0x384>
 8007538:	499a      	ldr	r1, [pc, #616]	; (80077a4 <_strtod_l+0x594>)
 800753a:	aa1a      	add	r2, sp, #104	; 0x68
 800753c:	a817      	add	r0, sp, #92	; 0x5c
 800753e:	f001 fe69 	bl	8009214 <__hexnan>
 8007542:	2805      	cmp	r0, #5
 8007544:	d126      	bne.n	8007594 <_strtod_l+0x384>
 8007546:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007548:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800754c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007550:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007554:	e6a0      	b.n	8007298 <_strtod_l+0x88>
 8007556:	210a      	movs	r1, #10
 8007558:	fb01 2e0e 	mla	lr, r1, lr, r2
 800755c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007560:	e7b9      	b.n	80074d6 <_strtod_l+0x2c6>
 8007562:	2a6e      	cmp	r2, #110	; 0x6e
 8007564:	e7db      	b.n	800751e <_strtod_l+0x30e>
 8007566:	4990      	ldr	r1, [pc, #576]	; (80077a8 <_strtod_l+0x598>)
 8007568:	a817      	add	r0, sp, #92	; 0x5c
 800756a:	f001 fe3f 	bl	80091ec <__match>
 800756e:	2800      	cmp	r0, #0
 8007570:	f43f aeb0 	beq.w	80072d4 <_strtod_l+0xc4>
 8007574:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007576:	498d      	ldr	r1, [pc, #564]	; (80077ac <_strtod_l+0x59c>)
 8007578:	3b01      	subs	r3, #1
 800757a:	a817      	add	r0, sp, #92	; 0x5c
 800757c:	9317      	str	r3, [sp, #92]	; 0x5c
 800757e:	f001 fe35 	bl	80091ec <__match>
 8007582:	b910      	cbnz	r0, 800758a <_strtod_l+0x37a>
 8007584:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007586:	3301      	adds	r3, #1
 8007588:	9317      	str	r3, [sp, #92]	; 0x5c
 800758a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80077bc <_strtod_l+0x5ac>
 800758e:	f04f 0a00 	mov.w	sl, #0
 8007592:	e681      	b.n	8007298 <_strtod_l+0x88>
 8007594:	4886      	ldr	r0, [pc, #536]	; (80077b0 <_strtod_l+0x5a0>)
 8007596:	f002 fe3f 	bl	800a218 <nan>
 800759a:	ec5b ab10 	vmov	sl, fp, d0
 800759e:	e67b      	b.n	8007298 <_strtod_l+0x88>
 80075a0:	9b05      	ldr	r3, [sp, #20]
 80075a2:	9807      	ldr	r0, [sp, #28]
 80075a4:	1af3      	subs	r3, r6, r3
 80075a6:	2f00      	cmp	r7, #0
 80075a8:	bf08      	it	eq
 80075aa:	462f      	moveq	r7, r5
 80075ac:	2d10      	cmp	r5, #16
 80075ae:	9306      	str	r3, [sp, #24]
 80075b0:	46a8      	mov	r8, r5
 80075b2:	bfa8      	it	ge
 80075b4:	f04f 0810 	movge.w	r8, #16
 80075b8:	f7f8 ffa4 	bl	8000504 <__aeabi_ui2d>
 80075bc:	2d09      	cmp	r5, #9
 80075be:	4682      	mov	sl, r0
 80075c0:	468b      	mov	fp, r1
 80075c2:	dd13      	ble.n	80075ec <_strtod_l+0x3dc>
 80075c4:	4b7b      	ldr	r3, [pc, #492]	; (80077b4 <_strtod_l+0x5a4>)
 80075c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80075ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80075ce:	f7f9 f813 	bl	80005f8 <__aeabi_dmul>
 80075d2:	4682      	mov	sl, r0
 80075d4:	4648      	mov	r0, r9
 80075d6:	468b      	mov	fp, r1
 80075d8:	f7f8 ff94 	bl	8000504 <__aeabi_ui2d>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4650      	mov	r0, sl
 80075e2:	4659      	mov	r1, fp
 80075e4:	f7f8 fe52 	bl	800028c <__adddf3>
 80075e8:	4682      	mov	sl, r0
 80075ea:	468b      	mov	fp, r1
 80075ec:	2d0f      	cmp	r5, #15
 80075ee:	dc38      	bgt.n	8007662 <_strtod_l+0x452>
 80075f0:	9b06      	ldr	r3, [sp, #24]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f43f ae50 	beq.w	8007298 <_strtod_l+0x88>
 80075f8:	dd24      	ble.n	8007644 <_strtod_l+0x434>
 80075fa:	2b16      	cmp	r3, #22
 80075fc:	dc0b      	bgt.n	8007616 <_strtod_l+0x406>
 80075fe:	496d      	ldr	r1, [pc, #436]	; (80077b4 <_strtod_l+0x5a4>)
 8007600:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007608:	4652      	mov	r2, sl
 800760a:	465b      	mov	r3, fp
 800760c:	f7f8 fff4 	bl	80005f8 <__aeabi_dmul>
 8007610:	4682      	mov	sl, r0
 8007612:	468b      	mov	fp, r1
 8007614:	e640      	b.n	8007298 <_strtod_l+0x88>
 8007616:	9a06      	ldr	r2, [sp, #24]
 8007618:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800761c:	4293      	cmp	r3, r2
 800761e:	db20      	blt.n	8007662 <_strtod_l+0x452>
 8007620:	4c64      	ldr	r4, [pc, #400]	; (80077b4 <_strtod_l+0x5a4>)
 8007622:	f1c5 050f 	rsb	r5, r5, #15
 8007626:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800762a:	4652      	mov	r2, sl
 800762c:	465b      	mov	r3, fp
 800762e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007632:	f7f8 ffe1 	bl	80005f8 <__aeabi_dmul>
 8007636:	9b06      	ldr	r3, [sp, #24]
 8007638:	1b5d      	subs	r5, r3, r5
 800763a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800763e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007642:	e7e3      	b.n	800760c <_strtod_l+0x3fc>
 8007644:	9b06      	ldr	r3, [sp, #24]
 8007646:	3316      	adds	r3, #22
 8007648:	db0b      	blt.n	8007662 <_strtod_l+0x452>
 800764a:	9b05      	ldr	r3, [sp, #20]
 800764c:	1b9e      	subs	r6, r3, r6
 800764e:	4b59      	ldr	r3, [pc, #356]	; (80077b4 <_strtod_l+0x5a4>)
 8007650:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007654:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007658:	4650      	mov	r0, sl
 800765a:	4659      	mov	r1, fp
 800765c:	f7f9 f8f6 	bl	800084c <__aeabi_ddiv>
 8007660:	e7d6      	b.n	8007610 <_strtod_l+0x400>
 8007662:	9b06      	ldr	r3, [sp, #24]
 8007664:	eba5 0808 	sub.w	r8, r5, r8
 8007668:	4498      	add	r8, r3
 800766a:	f1b8 0f00 	cmp.w	r8, #0
 800766e:	dd74      	ble.n	800775a <_strtod_l+0x54a>
 8007670:	f018 030f 	ands.w	r3, r8, #15
 8007674:	d00a      	beq.n	800768c <_strtod_l+0x47c>
 8007676:	494f      	ldr	r1, [pc, #316]	; (80077b4 <_strtod_l+0x5a4>)
 8007678:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800767c:	4652      	mov	r2, sl
 800767e:	465b      	mov	r3, fp
 8007680:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007684:	f7f8 ffb8 	bl	80005f8 <__aeabi_dmul>
 8007688:	4682      	mov	sl, r0
 800768a:	468b      	mov	fp, r1
 800768c:	f038 080f 	bics.w	r8, r8, #15
 8007690:	d04f      	beq.n	8007732 <_strtod_l+0x522>
 8007692:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007696:	dd22      	ble.n	80076de <_strtod_l+0x4ce>
 8007698:	2500      	movs	r5, #0
 800769a:	462e      	mov	r6, r5
 800769c:	9507      	str	r5, [sp, #28]
 800769e:	9505      	str	r5, [sp, #20]
 80076a0:	2322      	movs	r3, #34	; 0x22
 80076a2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80077bc <_strtod_l+0x5ac>
 80076a6:	6023      	str	r3, [r4, #0]
 80076a8:	f04f 0a00 	mov.w	sl, #0
 80076ac:	9b07      	ldr	r3, [sp, #28]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f43f adf2 	beq.w	8007298 <_strtod_l+0x88>
 80076b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076b6:	4620      	mov	r0, r4
 80076b8:	f001 fec6 	bl	8009448 <_Bfree>
 80076bc:	9905      	ldr	r1, [sp, #20]
 80076be:	4620      	mov	r0, r4
 80076c0:	f001 fec2 	bl	8009448 <_Bfree>
 80076c4:	4631      	mov	r1, r6
 80076c6:	4620      	mov	r0, r4
 80076c8:	f001 febe 	bl	8009448 <_Bfree>
 80076cc:	9907      	ldr	r1, [sp, #28]
 80076ce:	4620      	mov	r0, r4
 80076d0:	f001 feba 	bl	8009448 <_Bfree>
 80076d4:	4629      	mov	r1, r5
 80076d6:	4620      	mov	r0, r4
 80076d8:	f001 feb6 	bl	8009448 <_Bfree>
 80076dc:	e5dc      	b.n	8007298 <_strtod_l+0x88>
 80076de:	4b36      	ldr	r3, [pc, #216]	; (80077b8 <_strtod_l+0x5a8>)
 80076e0:	9304      	str	r3, [sp, #16]
 80076e2:	2300      	movs	r3, #0
 80076e4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80076e8:	4650      	mov	r0, sl
 80076ea:	4659      	mov	r1, fp
 80076ec:	4699      	mov	r9, r3
 80076ee:	f1b8 0f01 	cmp.w	r8, #1
 80076f2:	dc21      	bgt.n	8007738 <_strtod_l+0x528>
 80076f4:	b10b      	cbz	r3, 80076fa <_strtod_l+0x4ea>
 80076f6:	4682      	mov	sl, r0
 80076f8:	468b      	mov	fp, r1
 80076fa:	4b2f      	ldr	r3, [pc, #188]	; (80077b8 <_strtod_l+0x5a8>)
 80076fc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007700:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007704:	4652      	mov	r2, sl
 8007706:	465b      	mov	r3, fp
 8007708:	e9d9 0100 	ldrd	r0, r1, [r9]
 800770c:	f7f8 ff74 	bl	80005f8 <__aeabi_dmul>
 8007710:	4b2a      	ldr	r3, [pc, #168]	; (80077bc <_strtod_l+0x5ac>)
 8007712:	460a      	mov	r2, r1
 8007714:	400b      	ands	r3, r1
 8007716:	492a      	ldr	r1, [pc, #168]	; (80077c0 <_strtod_l+0x5b0>)
 8007718:	428b      	cmp	r3, r1
 800771a:	4682      	mov	sl, r0
 800771c:	d8bc      	bhi.n	8007698 <_strtod_l+0x488>
 800771e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007722:	428b      	cmp	r3, r1
 8007724:	bf86      	itte	hi
 8007726:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80077c4 <_strtod_l+0x5b4>
 800772a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800772e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007732:	2300      	movs	r3, #0
 8007734:	9304      	str	r3, [sp, #16]
 8007736:	e084      	b.n	8007842 <_strtod_l+0x632>
 8007738:	f018 0f01 	tst.w	r8, #1
 800773c:	d005      	beq.n	800774a <_strtod_l+0x53a>
 800773e:	9b04      	ldr	r3, [sp, #16]
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	f7f8 ff58 	bl	80005f8 <__aeabi_dmul>
 8007748:	2301      	movs	r3, #1
 800774a:	9a04      	ldr	r2, [sp, #16]
 800774c:	3208      	adds	r2, #8
 800774e:	f109 0901 	add.w	r9, r9, #1
 8007752:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007756:	9204      	str	r2, [sp, #16]
 8007758:	e7c9      	b.n	80076ee <_strtod_l+0x4de>
 800775a:	d0ea      	beq.n	8007732 <_strtod_l+0x522>
 800775c:	f1c8 0800 	rsb	r8, r8, #0
 8007760:	f018 020f 	ands.w	r2, r8, #15
 8007764:	d00a      	beq.n	800777c <_strtod_l+0x56c>
 8007766:	4b13      	ldr	r3, [pc, #76]	; (80077b4 <_strtod_l+0x5a4>)
 8007768:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800776c:	4650      	mov	r0, sl
 800776e:	4659      	mov	r1, fp
 8007770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007774:	f7f9 f86a 	bl	800084c <__aeabi_ddiv>
 8007778:	4682      	mov	sl, r0
 800777a:	468b      	mov	fp, r1
 800777c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007780:	d0d7      	beq.n	8007732 <_strtod_l+0x522>
 8007782:	f1b8 0f1f 	cmp.w	r8, #31
 8007786:	dd1f      	ble.n	80077c8 <_strtod_l+0x5b8>
 8007788:	2500      	movs	r5, #0
 800778a:	462e      	mov	r6, r5
 800778c:	9507      	str	r5, [sp, #28]
 800778e:	9505      	str	r5, [sp, #20]
 8007790:	2322      	movs	r3, #34	; 0x22
 8007792:	f04f 0a00 	mov.w	sl, #0
 8007796:	f04f 0b00 	mov.w	fp, #0
 800779a:	6023      	str	r3, [r4, #0]
 800779c:	e786      	b.n	80076ac <_strtod_l+0x49c>
 800779e:	bf00      	nop
 80077a0:	0800ae45 	.word	0x0800ae45
 80077a4:	0800ae88 	.word	0x0800ae88
 80077a8:	0800ae3d 	.word	0x0800ae3d
 80077ac:	0800afcc 	.word	0x0800afcc
 80077b0:	0800b278 	.word	0x0800b278
 80077b4:	0800b158 	.word	0x0800b158
 80077b8:	0800b130 	.word	0x0800b130
 80077bc:	7ff00000 	.word	0x7ff00000
 80077c0:	7ca00000 	.word	0x7ca00000
 80077c4:	7fefffff 	.word	0x7fefffff
 80077c8:	f018 0310 	ands.w	r3, r8, #16
 80077cc:	bf18      	it	ne
 80077ce:	236a      	movne	r3, #106	; 0x6a
 80077d0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007b80 <_strtod_l+0x970>
 80077d4:	9304      	str	r3, [sp, #16]
 80077d6:	4650      	mov	r0, sl
 80077d8:	4659      	mov	r1, fp
 80077da:	2300      	movs	r3, #0
 80077dc:	f018 0f01 	tst.w	r8, #1
 80077e0:	d004      	beq.n	80077ec <_strtod_l+0x5dc>
 80077e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80077e6:	f7f8 ff07 	bl	80005f8 <__aeabi_dmul>
 80077ea:	2301      	movs	r3, #1
 80077ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 80077f0:	f109 0908 	add.w	r9, r9, #8
 80077f4:	d1f2      	bne.n	80077dc <_strtod_l+0x5cc>
 80077f6:	b10b      	cbz	r3, 80077fc <_strtod_l+0x5ec>
 80077f8:	4682      	mov	sl, r0
 80077fa:	468b      	mov	fp, r1
 80077fc:	9b04      	ldr	r3, [sp, #16]
 80077fe:	b1c3      	cbz	r3, 8007832 <_strtod_l+0x622>
 8007800:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007804:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007808:	2b00      	cmp	r3, #0
 800780a:	4659      	mov	r1, fp
 800780c:	dd11      	ble.n	8007832 <_strtod_l+0x622>
 800780e:	2b1f      	cmp	r3, #31
 8007810:	f340 8124 	ble.w	8007a5c <_strtod_l+0x84c>
 8007814:	2b34      	cmp	r3, #52	; 0x34
 8007816:	bfde      	ittt	le
 8007818:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800781c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007820:	fa03 f202 	lslle.w	r2, r3, r2
 8007824:	f04f 0a00 	mov.w	sl, #0
 8007828:	bfcc      	ite	gt
 800782a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800782e:	ea02 0b01 	andle.w	fp, r2, r1
 8007832:	2200      	movs	r2, #0
 8007834:	2300      	movs	r3, #0
 8007836:	4650      	mov	r0, sl
 8007838:	4659      	mov	r1, fp
 800783a:	f7f9 f945 	bl	8000ac8 <__aeabi_dcmpeq>
 800783e:	2800      	cmp	r0, #0
 8007840:	d1a2      	bne.n	8007788 <_strtod_l+0x578>
 8007842:	9b07      	ldr	r3, [sp, #28]
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	9908      	ldr	r1, [sp, #32]
 8007848:	462b      	mov	r3, r5
 800784a:	463a      	mov	r2, r7
 800784c:	4620      	mov	r0, r4
 800784e:	f001 fe63 	bl	8009518 <__s2b>
 8007852:	9007      	str	r0, [sp, #28]
 8007854:	2800      	cmp	r0, #0
 8007856:	f43f af1f 	beq.w	8007698 <_strtod_l+0x488>
 800785a:	9b05      	ldr	r3, [sp, #20]
 800785c:	1b9e      	subs	r6, r3, r6
 800785e:	9b06      	ldr	r3, [sp, #24]
 8007860:	2b00      	cmp	r3, #0
 8007862:	bfb4      	ite	lt
 8007864:	4633      	movlt	r3, r6
 8007866:	2300      	movge	r3, #0
 8007868:	930c      	str	r3, [sp, #48]	; 0x30
 800786a:	9b06      	ldr	r3, [sp, #24]
 800786c:	2500      	movs	r5, #0
 800786e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007872:	9312      	str	r3, [sp, #72]	; 0x48
 8007874:	462e      	mov	r6, r5
 8007876:	9b07      	ldr	r3, [sp, #28]
 8007878:	4620      	mov	r0, r4
 800787a:	6859      	ldr	r1, [r3, #4]
 800787c:	f001 fda4 	bl	80093c8 <_Balloc>
 8007880:	9005      	str	r0, [sp, #20]
 8007882:	2800      	cmp	r0, #0
 8007884:	f43f af0c 	beq.w	80076a0 <_strtod_l+0x490>
 8007888:	9b07      	ldr	r3, [sp, #28]
 800788a:	691a      	ldr	r2, [r3, #16]
 800788c:	3202      	adds	r2, #2
 800788e:	f103 010c 	add.w	r1, r3, #12
 8007892:	0092      	lsls	r2, r2, #2
 8007894:	300c      	adds	r0, #12
 8007896:	f001 fd89 	bl	80093ac <memcpy>
 800789a:	ec4b ab10 	vmov	d0, sl, fp
 800789e:	aa1a      	add	r2, sp, #104	; 0x68
 80078a0:	a919      	add	r1, sp, #100	; 0x64
 80078a2:	4620      	mov	r0, r4
 80078a4:	f002 f97e 	bl	8009ba4 <__d2b>
 80078a8:	ec4b ab18 	vmov	d8, sl, fp
 80078ac:	9018      	str	r0, [sp, #96]	; 0x60
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f43f aef6 	beq.w	80076a0 <_strtod_l+0x490>
 80078b4:	2101      	movs	r1, #1
 80078b6:	4620      	mov	r0, r4
 80078b8:	f001 fec8 	bl	800964c <__i2b>
 80078bc:	4606      	mov	r6, r0
 80078be:	2800      	cmp	r0, #0
 80078c0:	f43f aeee 	beq.w	80076a0 <_strtod_l+0x490>
 80078c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078c6:	9904      	ldr	r1, [sp, #16]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	bfab      	itete	ge
 80078cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80078ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80078d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80078d2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80078d6:	bfac      	ite	ge
 80078d8:	eb03 0902 	addge.w	r9, r3, r2
 80078dc:	1ad7      	sublt	r7, r2, r3
 80078de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80078e0:	eba3 0801 	sub.w	r8, r3, r1
 80078e4:	4490      	add	r8, r2
 80078e6:	4ba1      	ldr	r3, [pc, #644]	; (8007b6c <_strtod_l+0x95c>)
 80078e8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80078ec:	4598      	cmp	r8, r3
 80078ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80078f2:	f280 80c7 	bge.w	8007a84 <_strtod_l+0x874>
 80078f6:	eba3 0308 	sub.w	r3, r3, r8
 80078fa:	2b1f      	cmp	r3, #31
 80078fc:	eba2 0203 	sub.w	r2, r2, r3
 8007900:	f04f 0101 	mov.w	r1, #1
 8007904:	f300 80b1 	bgt.w	8007a6a <_strtod_l+0x85a>
 8007908:	fa01 f303 	lsl.w	r3, r1, r3
 800790c:	930d      	str	r3, [sp, #52]	; 0x34
 800790e:	2300      	movs	r3, #0
 8007910:	9308      	str	r3, [sp, #32]
 8007912:	eb09 0802 	add.w	r8, r9, r2
 8007916:	9b04      	ldr	r3, [sp, #16]
 8007918:	45c1      	cmp	r9, r8
 800791a:	4417      	add	r7, r2
 800791c:	441f      	add	r7, r3
 800791e:	464b      	mov	r3, r9
 8007920:	bfa8      	it	ge
 8007922:	4643      	movge	r3, r8
 8007924:	42bb      	cmp	r3, r7
 8007926:	bfa8      	it	ge
 8007928:	463b      	movge	r3, r7
 800792a:	2b00      	cmp	r3, #0
 800792c:	bfc2      	ittt	gt
 800792e:	eba8 0803 	subgt.w	r8, r8, r3
 8007932:	1aff      	subgt	r7, r7, r3
 8007934:	eba9 0903 	subgt.w	r9, r9, r3
 8007938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800793a:	2b00      	cmp	r3, #0
 800793c:	dd17      	ble.n	800796e <_strtod_l+0x75e>
 800793e:	4631      	mov	r1, r6
 8007940:	461a      	mov	r2, r3
 8007942:	4620      	mov	r0, r4
 8007944:	f001 ff42 	bl	80097cc <__pow5mult>
 8007948:	4606      	mov	r6, r0
 800794a:	2800      	cmp	r0, #0
 800794c:	f43f aea8 	beq.w	80076a0 <_strtod_l+0x490>
 8007950:	4601      	mov	r1, r0
 8007952:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007954:	4620      	mov	r0, r4
 8007956:	f001 fe8f 	bl	8009678 <__multiply>
 800795a:	900b      	str	r0, [sp, #44]	; 0x2c
 800795c:	2800      	cmp	r0, #0
 800795e:	f43f ae9f 	beq.w	80076a0 <_strtod_l+0x490>
 8007962:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007964:	4620      	mov	r0, r4
 8007966:	f001 fd6f 	bl	8009448 <_Bfree>
 800796a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800796c:	9318      	str	r3, [sp, #96]	; 0x60
 800796e:	f1b8 0f00 	cmp.w	r8, #0
 8007972:	f300 808c 	bgt.w	8007a8e <_strtod_l+0x87e>
 8007976:	9b06      	ldr	r3, [sp, #24]
 8007978:	2b00      	cmp	r3, #0
 800797a:	dd08      	ble.n	800798e <_strtod_l+0x77e>
 800797c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800797e:	9905      	ldr	r1, [sp, #20]
 8007980:	4620      	mov	r0, r4
 8007982:	f001 ff23 	bl	80097cc <__pow5mult>
 8007986:	9005      	str	r0, [sp, #20]
 8007988:	2800      	cmp	r0, #0
 800798a:	f43f ae89 	beq.w	80076a0 <_strtod_l+0x490>
 800798e:	2f00      	cmp	r7, #0
 8007990:	dd08      	ble.n	80079a4 <_strtod_l+0x794>
 8007992:	9905      	ldr	r1, [sp, #20]
 8007994:	463a      	mov	r2, r7
 8007996:	4620      	mov	r0, r4
 8007998:	f001 ff72 	bl	8009880 <__lshift>
 800799c:	9005      	str	r0, [sp, #20]
 800799e:	2800      	cmp	r0, #0
 80079a0:	f43f ae7e 	beq.w	80076a0 <_strtod_l+0x490>
 80079a4:	f1b9 0f00 	cmp.w	r9, #0
 80079a8:	dd08      	ble.n	80079bc <_strtod_l+0x7ac>
 80079aa:	4631      	mov	r1, r6
 80079ac:	464a      	mov	r2, r9
 80079ae:	4620      	mov	r0, r4
 80079b0:	f001 ff66 	bl	8009880 <__lshift>
 80079b4:	4606      	mov	r6, r0
 80079b6:	2800      	cmp	r0, #0
 80079b8:	f43f ae72 	beq.w	80076a0 <_strtod_l+0x490>
 80079bc:	9a05      	ldr	r2, [sp, #20]
 80079be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80079c0:	4620      	mov	r0, r4
 80079c2:	f001 ffe9 	bl	8009998 <__mdiff>
 80079c6:	4605      	mov	r5, r0
 80079c8:	2800      	cmp	r0, #0
 80079ca:	f43f ae69 	beq.w	80076a0 <_strtod_l+0x490>
 80079ce:	68c3      	ldr	r3, [r0, #12]
 80079d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80079d2:	2300      	movs	r3, #0
 80079d4:	60c3      	str	r3, [r0, #12]
 80079d6:	4631      	mov	r1, r6
 80079d8:	f001 ffc2 	bl	8009960 <__mcmp>
 80079dc:	2800      	cmp	r0, #0
 80079de:	da60      	bge.n	8007aa2 <_strtod_l+0x892>
 80079e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079e2:	ea53 030a 	orrs.w	r3, r3, sl
 80079e6:	f040 8082 	bne.w	8007aee <_strtod_l+0x8de>
 80079ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d17d      	bne.n	8007aee <_strtod_l+0x8de>
 80079f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80079f6:	0d1b      	lsrs	r3, r3, #20
 80079f8:	051b      	lsls	r3, r3, #20
 80079fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80079fe:	d976      	bls.n	8007aee <_strtod_l+0x8de>
 8007a00:	696b      	ldr	r3, [r5, #20]
 8007a02:	b913      	cbnz	r3, 8007a0a <_strtod_l+0x7fa>
 8007a04:	692b      	ldr	r3, [r5, #16]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	dd71      	ble.n	8007aee <_strtod_l+0x8de>
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f001 ff36 	bl	8009880 <__lshift>
 8007a14:	4631      	mov	r1, r6
 8007a16:	4605      	mov	r5, r0
 8007a18:	f001 ffa2 	bl	8009960 <__mcmp>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	dd66      	ble.n	8007aee <_strtod_l+0x8de>
 8007a20:	9904      	ldr	r1, [sp, #16]
 8007a22:	4a53      	ldr	r2, [pc, #332]	; (8007b70 <_strtod_l+0x960>)
 8007a24:	465b      	mov	r3, fp
 8007a26:	2900      	cmp	r1, #0
 8007a28:	f000 8081 	beq.w	8007b2e <_strtod_l+0x91e>
 8007a2c:	ea02 010b 	and.w	r1, r2, fp
 8007a30:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007a34:	dc7b      	bgt.n	8007b2e <_strtod_l+0x91e>
 8007a36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007a3a:	f77f aea9 	ble.w	8007790 <_strtod_l+0x580>
 8007a3e:	4b4d      	ldr	r3, [pc, #308]	; (8007b74 <_strtod_l+0x964>)
 8007a40:	4650      	mov	r0, sl
 8007a42:	4659      	mov	r1, fp
 8007a44:	2200      	movs	r2, #0
 8007a46:	f7f8 fdd7 	bl	80005f8 <__aeabi_dmul>
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	4303      	orrs	r3, r0
 8007a4e:	bf08      	it	eq
 8007a50:	2322      	moveq	r3, #34	; 0x22
 8007a52:	4682      	mov	sl, r0
 8007a54:	468b      	mov	fp, r1
 8007a56:	bf08      	it	eq
 8007a58:	6023      	streq	r3, [r4, #0]
 8007a5a:	e62b      	b.n	80076b4 <_strtod_l+0x4a4>
 8007a5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a60:	fa02 f303 	lsl.w	r3, r2, r3
 8007a64:	ea03 0a0a 	and.w	sl, r3, sl
 8007a68:	e6e3      	b.n	8007832 <_strtod_l+0x622>
 8007a6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007a6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007a72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007a76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007a7a:	fa01 f308 	lsl.w	r3, r1, r8
 8007a7e:	9308      	str	r3, [sp, #32]
 8007a80:	910d      	str	r1, [sp, #52]	; 0x34
 8007a82:	e746      	b.n	8007912 <_strtod_l+0x702>
 8007a84:	2300      	movs	r3, #0
 8007a86:	9308      	str	r3, [sp, #32]
 8007a88:	2301      	movs	r3, #1
 8007a8a:	930d      	str	r3, [sp, #52]	; 0x34
 8007a8c:	e741      	b.n	8007912 <_strtod_l+0x702>
 8007a8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a90:	4642      	mov	r2, r8
 8007a92:	4620      	mov	r0, r4
 8007a94:	f001 fef4 	bl	8009880 <__lshift>
 8007a98:	9018      	str	r0, [sp, #96]	; 0x60
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	f47f af6b 	bne.w	8007976 <_strtod_l+0x766>
 8007aa0:	e5fe      	b.n	80076a0 <_strtod_l+0x490>
 8007aa2:	465f      	mov	r7, fp
 8007aa4:	d16e      	bne.n	8007b84 <_strtod_l+0x974>
 8007aa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007aa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007aac:	b342      	cbz	r2, 8007b00 <_strtod_l+0x8f0>
 8007aae:	4a32      	ldr	r2, [pc, #200]	; (8007b78 <_strtod_l+0x968>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d128      	bne.n	8007b06 <_strtod_l+0x8f6>
 8007ab4:	9b04      	ldr	r3, [sp, #16]
 8007ab6:	4651      	mov	r1, sl
 8007ab8:	b1eb      	cbz	r3, 8007af6 <_strtod_l+0x8e6>
 8007aba:	4b2d      	ldr	r3, [pc, #180]	; (8007b70 <_strtod_l+0x960>)
 8007abc:	403b      	ands	r3, r7
 8007abe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ac2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ac6:	d819      	bhi.n	8007afc <_strtod_l+0x8ec>
 8007ac8:	0d1b      	lsrs	r3, r3, #20
 8007aca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ace:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad2:	4299      	cmp	r1, r3
 8007ad4:	d117      	bne.n	8007b06 <_strtod_l+0x8f6>
 8007ad6:	4b29      	ldr	r3, [pc, #164]	; (8007b7c <_strtod_l+0x96c>)
 8007ad8:	429f      	cmp	r7, r3
 8007ada:	d102      	bne.n	8007ae2 <_strtod_l+0x8d2>
 8007adc:	3101      	adds	r1, #1
 8007ade:	f43f addf 	beq.w	80076a0 <_strtod_l+0x490>
 8007ae2:	4b23      	ldr	r3, [pc, #140]	; (8007b70 <_strtod_l+0x960>)
 8007ae4:	403b      	ands	r3, r7
 8007ae6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007aea:	f04f 0a00 	mov.w	sl, #0
 8007aee:	9b04      	ldr	r3, [sp, #16]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1a4      	bne.n	8007a3e <_strtod_l+0x82e>
 8007af4:	e5de      	b.n	80076b4 <_strtod_l+0x4a4>
 8007af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007afa:	e7ea      	b.n	8007ad2 <_strtod_l+0x8c2>
 8007afc:	4613      	mov	r3, r2
 8007afe:	e7e8      	b.n	8007ad2 <_strtod_l+0x8c2>
 8007b00:	ea53 030a 	orrs.w	r3, r3, sl
 8007b04:	d08c      	beq.n	8007a20 <_strtod_l+0x810>
 8007b06:	9b08      	ldr	r3, [sp, #32]
 8007b08:	b1db      	cbz	r3, 8007b42 <_strtod_l+0x932>
 8007b0a:	423b      	tst	r3, r7
 8007b0c:	d0ef      	beq.n	8007aee <_strtod_l+0x8de>
 8007b0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b10:	9a04      	ldr	r2, [sp, #16]
 8007b12:	4650      	mov	r0, sl
 8007b14:	4659      	mov	r1, fp
 8007b16:	b1c3      	cbz	r3, 8007b4a <_strtod_l+0x93a>
 8007b18:	f7ff fb5d 	bl	80071d6 <sulp>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	ec51 0b18 	vmov	r0, r1, d8
 8007b24:	f7f8 fbb2 	bl	800028c <__adddf3>
 8007b28:	4682      	mov	sl, r0
 8007b2a:	468b      	mov	fp, r1
 8007b2c:	e7df      	b.n	8007aee <_strtod_l+0x8de>
 8007b2e:	4013      	ands	r3, r2
 8007b30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007b34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007b38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007b3c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007b40:	e7d5      	b.n	8007aee <_strtod_l+0x8de>
 8007b42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b44:	ea13 0f0a 	tst.w	r3, sl
 8007b48:	e7e0      	b.n	8007b0c <_strtod_l+0x8fc>
 8007b4a:	f7ff fb44 	bl	80071d6 <sulp>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	ec51 0b18 	vmov	r0, r1, d8
 8007b56:	f7f8 fb97 	bl	8000288 <__aeabi_dsub>
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	4682      	mov	sl, r0
 8007b60:	468b      	mov	fp, r1
 8007b62:	f7f8 ffb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d0c1      	beq.n	8007aee <_strtod_l+0x8de>
 8007b6a:	e611      	b.n	8007790 <_strtod_l+0x580>
 8007b6c:	fffffc02 	.word	0xfffffc02
 8007b70:	7ff00000 	.word	0x7ff00000
 8007b74:	39500000 	.word	0x39500000
 8007b78:	000fffff 	.word	0x000fffff
 8007b7c:	7fefffff 	.word	0x7fefffff
 8007b80:	0800aea0 	.word	0x0800aea0
 8007b84:	4631      	mov	r1, r6
 8007b86:	4628      	mov	r0, r5
 8007b88:	f002 f868 	bl	8009c5c <__ratio>
 8007b8c:	ec59 8b10 	vmov	r8, r9, d0
 8007b90:	ee10 0a10 	vmov	r0, s0
 8007b94:	2200      	movs	r2, #0
 8007b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	f7f8 ffa8 	bl	8000af0 <__aeabi_dcmple>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d07a      	beq.n	8007c9a <_strtod_l+0xa8a>
 8007ba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d04a      	beq.n	8007c40 <_strtod_l+0xa30>
 8007baa:	4b95      	ldr	r3, [pc, #596]	; (8007e00 <_strtod_l+0xbf0>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007bb2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007e00 <_strtod_l+0xbf0>
 8007bb6:	f04f 0800 	mov.w	r8, #0
 8007bba:	4b92      	ldr	r3, [pc, #584]	; (8007e04 <_strtod_l+0xbf4>)
 8007bbc:	403b      	ands	r3, r7
 8007bbe:	930d      	str	r3, [sp, #52]	; 0x34
 8007bc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bc2:	4b91      	ldr	r3, [pc, #580]	; (8007e08 <_strtod_l+0xbf8>)
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	f040 80b0 	bne.w	8007d2a <_strtod_l+0xb1a>
 8007bca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007bce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007bd2:	ec4b ab10 	vmov	d0, sl, fp
 8007bd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007bda:	f001 ff67 	bl	8009aac <__ulp>
 8007bde:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007be2:	ec53 2b10 	vmov	r2, r3, d0
 8007be6:	f7f8 fd07 	bl	80005f8 <__aeabi_dmul>
 8007bea:	4652      	mov	r2, sl
 8007bec:	465b      	mov	r3, fp
 8007bee:	f7f8 fb4d 	bl	800028c <__adddf3>
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4983      	ldr	r1, [pc, #524]	; (8007e04 <_strtod_l+0xbf4>)
 8007bf6:	4a85      	ldr	r2, [pc, #532]	; (8007e0c <_strtod_l+0xbfc>)
 8007bf8:	4019      	ands	r1, r3
 8007bfa:	4291      	cmp	r1, r2
 8007bfc:	4682      	mov	sl, r0
 8007bfe:	d960      	bls.n	8007cc2 <_strtod_l+0xab2>
 8007c00:	ee18 3a90 	vmov	r3, s17
 8007c04:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d104      	bne.n	8007c16 <_strtod_l+0xa06>
 8007c0c:	ee18 3a10 	vmov	r3, s16
 8007c10:	3301      	adds	r3, #1
 8007c12:	f43f ad45 	beq.w	80076a0 <_strtod_l+0x490>
 8007c16:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007e18 <_strtod_l+0xc08>
 8007c1a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007c1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c20:	4620      	mov	r0, r4
 8007c22:	f001 fc11 	bl	8009448 <_Bfree>
 8007c26:	9905      	ldr	r1, [sp, #20]
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f001 fc0d 	bl	8009448 <_Bfree>
 8007c2e:	4631      	mov	r1, r6
 8007c30:	4620      	mov	r0, r4
 8007c32:	f001 fc09 	bl	8009448 <_Bfree>
 8007c36:	4629      	mov	r1, r5
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f001 fc05 	bl	8009448 <_Bfree>
 8007c3e:	e61a      	b.n	8007876 <_strtod_l+0x666>
 8007c40:	f1ba 0f00 	cmp.w	sl, #0
 8007c44:	d11b      	bne.n	8007c7e <_strtod_l+0xa6e>
 8007c46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c4a:	b9f3      	cbnz	r3, 8007c8a <_strtod_l+0xa7a>
 8007c4c:	4b6c      	ldr	r3, [pc, #432]	; (8007e00 <_strtod_l+0xbf0>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	4640      	mov	r0, r8
 8007c52:	4649      	mov	r1, r9
 8007c54:	f7f8 ff42 	bl	8000adc <__aeabi_dcmplt>
 8007c58:	b9d0      	cbnz	r0, 8007c90 <_strtod_l+0xa80>
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	4649      	mov	r1, r9
 8007c5e:	4b6c      	ldr	r3, [pc, #432]	; (8007e10 <_strtod_l+0xc00>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	f7f8 fcc9 	bl	80005f8 <__aeabi_dmul>
 8007c66:	4680      	mov	r8, r0
 8007c68:	4689      	mov	r9, r1
 8007c6a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007c6e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007c72:	9315      	str	r3, [sp, #84]	; 0x54
 8007c74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007c78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c7c:	e79d      	b.n	8007bba <_strtod_l+0x9aa>
 8007c7e:	f1ba 0f01 	cmp.w	sl, #1
 8007c82:	d102      	bne.n	8007c8a <_strtod_l+0xa7a>
 8007c84:	2f00      	cmp	r7, #0
 8007c86:	f43f ad83 	beq.w	8007790 <_strtod_l+0x580>
 8007c8a:	4b62      	ldr	r3, [pc, #392]	; (8007e14 <_strtod_l+0xc04>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	e78e      	b.n	8007bae <_strtod_l+0x99e>
 8007c90:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007e10 <_strtod_l+0xc00>
 8007c94:	f04f 0800 	mov.w	r8, #0
 8007c98:	e7e7      	b.n	8007c6a <_strtod_l+0xa5a>
 8007c9a:	4b5d      	ldr	r3, [pc, #372]	; (8007e10 <_strtod_l+0xc00>)
 8007c9c:	4640      	mov	r0, r8
 8007c9e:	4649      	mov	r1, r9
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f7f8 fca9 	bl	80005f8 <__aeabi_dmul>
 8007ca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ca8:	4680      	mov	r8, r0
 8007caa:	4689      	mov	r9, r1
 8007cac:	b933      	cbnz	r3, 8007cbc <_strtod_l+0xaac>
 8007cae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cb2:	900e      	str	r0, [sp, #56]	; 0x38
 8007cb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cb6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007cba:	e7dd      	b.n	8007c78 <_strtod_l+0xa68>
 8007cbc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007cc0:	e7f9      	b.n	8007cb6 <_strtod_l+0xaa6>
 8007cc2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007cc6:	9b04      	ldr	r3, [sp, #16]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1a8      	bne.n	8007c1e <_strtod_l+0xa0e>
 8007ccc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007cd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cd2:	0d1b      	lsrs	r3, r3, #20
 8007cd4:	051b      	lsls	r3, r3, #20
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d1a1      	bne.n	8007c1e <_strtod_l+0xa0e>
 8007cda:	4640      	mov	r0, r8
 8007cdc:	4649      	mov	r1, r9
 8007cde:	f7f8 ffeb 	bl	8000cb8 <__aeabi_d2lz>
 8007ce2:	f7f8 fc5b 	bl	800059c <__aeabi_l2d>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4640      	mov	r0, r8
 8007cec:	4649      	mov	r1, r9
 8007cee:	f7f8 facb 	bl	8000288 <__aeabi_dsub>
 8007cf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007cf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cf8:	ea43 030a 	orr.w	r3, r3, sl
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	4680      	mov	r8, r0
 8007d00:	4689      	mov	r9, r1
 8007d02:	d055      	beq.n	8007db0 <_strtod_l+0xba0>
 8007d04:	a336      	add	r3, pc, #216	; (adr r3, 8007de0 <_strtod_l+0xbd0>)
 8007d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0a:	f7f8 fee7 	bl	8000adc <__aeabi_dcmplt>
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	f47f acd0 	bne.w	80076b4 <_strtod_l+0x4a4>
 8007d14:	a334      	add	r3, pc, #208	; (adr r3, 8007de8 <_strtod_l+0xbd8>)
 8007d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1a:	4640      	mov	r0, r8
 8007d1c:	4649      	mov	r1, r9
 8007d1e:	f7f8 fefb 	bl	8000b18 <__aeabi_dcmpgt>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	f43f af7b 	beq.w	8007c1e <_strtod_l+0xa0e>
 8007d28:	e4c4      	b.n	80076b4 <_strtod_l+0x4a4>
 8007d2a:	9b04      	ldr	r3, [sp, #16]
 8007d2c:	b333      	cbz	r3, 8007d7c <_strtod_l+0xb6c>
 8007d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d30:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d34:	d822      	bhi.n	8007d7c <_strtod_l+0xb6c>
 8007d36:	a32e      	add	r3, pc, #184	; (adr r3, 8007df0 <_strtod_l+0xbe0>)
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	4640      	mov	r0, r8
 8007d3e:	4649      	mov	r1, r9
 8007d40:	f7f8 fed6 	bl	8000af0 <__aeabi_dcmple>
 8007d44:	b1a0      	cbz	r0, 8007d70 <_strtod_l+0xb60>
 8007d46:	4649      	mov	r1, r9
 8007d48:	4640      	mov	r0, r8
 8007d4a:	f7f8 ff2d 	bl	8000ba8 <__aeabi_d2uiz>
 8007d4e:	2801      	cmp	r0, #1
 8007d50:	bf38      	it	cc
 8007d52:	2001      	movcc	r0, #1
 8007d54:	f7f8 fbd6 	bl	8000504 <__aeabi_ui2d>
 8007d58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d5a:	4680      	mov	r8, r0
 8007d5c:	4689      	mov	r9, r1
 8007d5e:	bb23      	cbnz	r3, 8007daa <_strtod_l+0xb9a>
 8007d60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d64:	9010      	str	r0, [sp, #64]	; 0x40
 8007d66:	9311      	str	r3, [sp, #68]	; 0x44
 8007d68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d74:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007d78:	1a9b      	subs	r3, r3, r2
 8007d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d80:	eeb0 0a48 	vmov.f32	s0, s16
 8007d84:	eef0 0a68 	vmov.f32	s1, s17
 8007d88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d8c:	f001 fe8e 	bl	8009aac <__ulp>
 8007d90:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d94:	ec53 2b10 	vmov	r2, r3, d0
 8007d98:	f7f8 fc2e 	bl	80005f8 <__aeabi_dmul>
 8007d9c:	ec53 2b18 	vmov	r2, r3, d8
 8007da0:	f7f8 fa74 	bl	800028c <__adddf3>
 8007da4:	4682      	mov	sl, r0
 8007da6:	468b      	mov	fp, r1
 8007da8:	e78d      	b.n	8007cc6 <_strtod_l+0xab6>
 8007daa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007dae:	e7db      	b.n	8007d68 <_strtod_l+0xb58>
 8007db0:	a311      	add	r3, pc, #68	; (adr r3, 8007df8 <_strtod_l+0xbe8>)
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	f7f8 fe91 	bl	8000adc <__aeabi_dcmplt>
 8007dba:	e7b2      	b.n	8007d22 <_strtod_l+0xb12>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8007dc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007dc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007dc4:	6013      	str	r3, [r2, #0]
 8007dc6:	f7ff ba6b 	b.w	80072a0 <_strtod_l+0x90>
 8007dca:	2a65      	cmp	r2, #101	; 0x65
 8007dcc:	f43f ab5f 	beq.w	800748e <_strtod_l+0x27e>
 8007dd0:	2a45      	cmp	r2, #69	; 0x45
 8007dd2:	f43f ab5c 	beq.w	800748e <_strtod_l+0x27e>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	f7ff bb94 	b.w	8007504 <_strtod_l+0x2f4>
 8007ddc:	f3af 8000 	nop.w
 8007de0:	94a03595 	.word	0x94a03595
 8007de4:	3fdfffff 	.word	0x3fdfffff
 8007de8:	35afe535 	.word	0x35afe535
 8007dec:	3fe00000 	.word	0x3fe00000
 8007df0:	ffc00000 	.word	0xffc00000
 8007df4:	41dfffff 	.word	0x41dfffff
 8007df8:	94a03595 	.word	0x94a03595
 8007dfc:	3fcfffff 	.word	0x3fcfffff
 8007e00:	3ff00000 	.word	0x3ff00000
 8007e04:	7ff00000 	.word	0x7ff00000
 8007e08:	7fe00000 	.word	0x7fe00000
 8007e0c:	7c9fffff 	.word	0x7c9fffff
 8007e10:	3fe00000 	.word	0x3fe00000
 8007e14:	bff00000 	.word	0xbff00000
 8007e18:	7fefffff 	.word	0x7fefffff

08007e1c <_strtod_r>:
 8007e1c:	4b01      	ldr	r3, [pc, #4]	; (8007e24 <_strtod_r+0x8>)
 8007e1e:	f7ff b9f7 	b.w	8007210 <_strtod_l>
 8007e22:	bf00      	nop
 8007e24:	20000074 	.word	0x20000074

08007e28 <_strtol_l.constprop.0>:
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e2e:	d001      	beq.n	8007e34 <_strtol_l.constprop.0+0xc>
 8007e30:	2b24      	cmp	r3, #36	; 0x24
 8007e32:	d906      	bls.n	8007e42 <_strtol_l.constprop.0+0x1a>
 8007e34:	f7fe faa6 	bl	8006384 <__errno>
 8007e38:	2316      	movs	r3, #22
 8007e3a:	6003      	str	r3, [r0, #0]
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007f28 <_strtol_l.constprop.0+0x100>
 8007e46:	460d      	mov	r5, r1
 8007e48:	462e      	mov	r6, r5
 8007e4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e4e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007e52:	f017 0708 	ands.w	r7, r7, #8
 8007e56:	d1f7      	bne.n	8007e48 <_strtol_l.constprop.0+0x20>
 8007e58:	2c2d      	cmp	r4, #45	; 0x2d
 8007e5a:	d132      	bne.n	8007ec2 <_strtol_l.constprop.0+0x9a>
 8007e5c:	782c      	ldrb	r4, [r5, #0]
 8007e5e:	2701      	movs	r7, #1
 8007e60:	1cb5      	adds	r5, r6, #2
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d05b      	beq.n	8007f1e <_strtol_l.constprop.0+0xf6>
 8007e66:	2b10      	cmp	r3, #16
 8007e68:	d109      	bne.n	8007e7e <_strtol_l.constprop.0+0x56>
 8007e6a:	2c30      	cmp	r4, #48	; 0x30
 8007e6c:	d107      	bne.n	8007e7e <_strtol_l.constprop.0+0x56>
 8007e6e:	782c      	ldrb	r4, [r5, #0]
 8007e70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007e74:	2c58      	cmp	r4, #88	; 0x58
 8007e76:	d14d      	bne.n	8007f14 <_strtol_l.constprop.0+0xec>
 8007e78:	786c      	ldrb	r4, [r5, #1]
 8007e7a:	2310      	movs	r3, #16
 8007e7c:	3502      	adds	r5, #2
 8007e7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007e82:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007e86:	f04f 0c00 	mov.w	ip, #0
 8007e8a:	fbb8 f9f3 	udiv	r9, r8, r3
 8007e8e:	4666      	mov	r6, ip
 8007e90:	fb03 8a19 	mls	sl, r3, r9, r8
 8007e94:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007e98:	f1be 0f09 	cmp.w	lr, #9
 8007e9c:	d816      	bhi.n	8007ecc <_strtol_l.constprop.0+0xa4>
 8007e9e:	4674      	mov	r4, lr
 8007ea0:	42a3      	cmp	r3, r4
 8007ea2:	dd24      	ble.n	8007eee <_strtol_l.constprop.0+0xc6>
 8007ea4:	f1bc 0f00 	cmp.w	ip, #0
 8007ea8:	db1e      	blt.n	8007ee8 <_strtol_l.constprop.0+0xc0>
 8007eaa:	45b1      	cmp	r9, r6
 8007eac:	d31c      	bcc.n	8007ee8 <_strtol_l.constprop.0+0xc0>
 8007eae:	d101      	bne.n	8007eb4 <_strtol_l.constprop.0+0x8c>
 8007eb0:	45a2      	cmp	sl, r4
 8007eb2:	db19      	blt.n	8007ee8 <_strtol_l.constprop.0+0xc0>
 8007eb4:	fb06 4603 	mla	r6, r6, r3, r4
 8007eb8:	f04f 0c01 	mov.w	ip, #1
 8007ebc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ec0:	e7e8      	b.n	8007e94 <_strtol_l.constprop.0+0x6c>
 8007ec2:	2c2b      	cmp	r4, #43	; 0x2b
 8007ec4:	bf04      	itt	eq
 8007ec6:	782c      	ldrbeq	r4, [r5, #0]
 8007ec8:	1cb5      	addeq	r5, r6, #2
 8007eca:	e7ca      	b.n	8007e62 <_strtol_l.constprop.0+0x3a>
 8007ecc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007ed0:	f1be 0f19 	cmp.w	lr, #25
 8007ed4:	d801      	bhi.n	8007eda <_strtol_l.constprop.0+0xb2>
 8007ed6:	3c37      	subs	r4, #55	; 0x37
 8007ed8:	e7e2      	b.n	8007ea0 <_strtol_l.constprop.0+0x78>
 8007eda:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007ede:	f1be 0f19 	cmp.w	lr, #25
 8007ee2:	d804      	bhi.n	8007eee <_strtol_l.constprop.0+0xc6>
 8007ee4:	3c57      	subs	r4, #87	; 0x57
 8007ee6:	e7db      	b.n	8007ea0 <_strtol_l.constprop.0+0x78>
 8007ee8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007eec:	e7e6      	b.n	8007ebc <_strtol_l.constprop.0+0x94>
 8007eee:	f1bc 0f00 	cmp.w	ip, #0
 8007ef2:	da05      	bge.n	8007f00 <_strtol_l.constprop.0+0xd8>
 8007ef4:	2322      	movs	r3, #34	; 0x22
 8007ef6:	6003      	str	r3, [r0, #0]
 8007ef8:	4646      	mov	r6, r8
 8007efa:	b942      	cbnz	r2, 8007f0e <_strtol_l.constprop.0+0xe6>
 8007efc:	4630      	mov	r0, r6
 8007efe:	e79e      	b.n	8007e3e <_strtol_l.constprop.0+0x16>
 8007f00:	b107      	cbz	r7, 8007f04 <_strtol_l.constprop.0+0xdc>
 8007f02:	4276      	negs	r6, r6
 8007f04:	2a00      	cmp	r2, #0
 8007f06:	d0f9      	beq.n	8007efc <_strtol_l.constprop.0+0xd4>
 8007f08:	f1bc 0f00 	cmp.w	ip, #0
 8007f0c:	d000      	beq.n	8007f10 <_strtol_l.constprop.0+0xe8>
 8007f0e:	1e69      	subs	r1, r5, #1
 8007f10:	6011      	str	r1, [r2, #0]
 8007f12:	e7f3      	b.n	8007efc <_strtol_l.constprop.0+0xd4>
 8007f14:	2430      	movs	r4, #48	; 0x30
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1b1      	bne.n	8007e7e <_strtol_l.constprop.0+0x56>
 8007f1a:	2308      	movs	r3, #8
 8007f1c:	e7af      	b.n	8007e7e <_strtol_l.constprop.0+0x56>
 8007f1e:	2c30      	cmp	r4, #48	; 0x30
 8007f20:	d0a5      	beq.n	8007e6e <_strtol_l.constprop.0+0x46>
 8007f22:	230a      	movs	r3, #10
 8007f24:	e7ab      	b.n	8007e7e <_strtol_l.constprop.0+0x56>
 8007f26:	bf00      	nop
 8007f28:	0800aec9 	.word	0x0800aec9

08007f2c <_strtol_r>:
 8007f2c:	f7ff bf7c 	b.w	8007e28 <_strtol_l.constprop.0>

08007f30 <_write_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	4d07      	ldr	r5, [pc, #28]	; (8007f50 <_write_r+0x20>)
 8007f34:	4604      	mov	r4, r0
 8007f36:	4608      	mov	r0, r1
 8007f38:	4611      	mov	r1, r2
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	602a      	str	r2, [r5, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f7fa f8c5 	bl	80020ce <_write>
 8007f44:	1c43      	adds	r3, r0, #1
 8007f46:	d102      	bne.n	8007f4e <_write_r+0x1e>
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	b103      	cbz	r3, 8007f4e <_write_r+0x1e>
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	bd38      	pop	{r3, r4, r5, pc}
 8007f50:	200004b4 	.word	0x200004b4

08007f54 <_close_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	4d06      	ldr	r5, [pc, #24]	; (8007f70 <_close_r+0x1c>)
 8007f58:	2300      	movs	r3, #0
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	4608      	mov	r0, r1
 8007f5e:	602b      	str	r3, [r5, #0]
 8007f60:	f7fa f8d1 	bl	8002106 <_close>
 8007f64:	1c43      	adds	r3, r0, #1
 8007f66:	d102      	bne.n	8007f6e <_close_r+0x1a>
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	b103      	cbz	r3, 8007f6e <_close_r+0x1a>
 8007f6c:	6023      	str	r3, [r4, #0]
 8007f6e:	bd38      	pop	{r3, r4, r5, pc}
 8007f70:	200004b4 	.word	0x200004b4

08007f74 <quorem>:
 8007f74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f78:	6903      	ldr	r3, [r0, #16]
 8007f7a:	690c      	ldr	r4, [r1, #16]
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	4607      	mov	r7, r0
 8007f80:	f2c0 8081 	blt.w	8008086 <quorem+0x112>
 8007f84:	3c01      	subs	r4, #1
 8007f86:	f101 0814 	add.w	r8, r1, #20
 8007f8a:	f100 0514 	add.w	r5, r0, #20
 8007f8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f92:	9301      	str	r3, [sp, #4]
 8007f94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007fa4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007fa8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007fac:	d331      	bcc.n	8008012 <quorem+0x9e>
 8007fae:	f04f 0e00 	mov.w	lr, #0
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	46ac      	mov	ip, r5
 8007fb6:	46f2      	mov	sl, lr
 8007fb8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007fbc:	b293      	uxth	r3, r2
 8007fbe:	fb06 e303 	mla	r3, r6, r3, lr
 8007fc2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	ebaa 0303 	sub.w	r3, sl, r3
 8007fcc:	f8dc a000 	ldr.w	sl, [ip]
 8007fd0:	0c12      	lsrs	r2, r2, #16
 8007fd2:	fa13 f38a 	uxtah	r3, r3, sl
 8007fd6:	fb06 e202 	mla	r2, r6, r2, lr
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	9b00      	ldr	r3, [sp, #0]
 8007fde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007fe2:	b292      	uxth	r2, r2
 8007fe4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007fe8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fec:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ff0:	4581      	cmp	r9, r0
 8007ff2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ff6:	f84c 3b04 	str.w	r3, [ip], #4
 8007ffa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ffe:	d2db      	bcs.n	8007fb8 <quorem+0x44>
 8008000:	f855 300b 	ldr.w	r3, [r5, fp]
 8008004:	b92b      	cbnz	r3, 8008012 <quorem+0x9e>
 8008006:	9b01      	ldr	r3, [sp, #4]
 8008008:	3b04      	subs	r3, #4
 800800a:	429d      	cmp	r5, r3
 800800c:	461a      	mov	r2, r3
 800800e:	d32e      	bcc.n	800806e <quorem+0xfa>
 8008010:	613c      	str	r4, [r7, #16]
 8008012:	4638      	mov	r0, r7
 8008014:	f001 fca4 	bl	8009960 <__mcmp>
 8008018:	2800      	cmp	r0, #0
 800801a:	db24      	blt.n	8008066 <quorem+0xf2>
 800801c:	3601      	adds	r6, #1
 800801e:	4628      	mov	r0, r5
 8008020:	f04f 0c00 	mov.w	ip, #0
 8008024:	f858 2b04 	ldr.w	r2, [r8], #4
 8008028:	f8d0 e000 	ldr.w	lr, [r0]
 800802c:	b293      	uxth	r3, r2
 800802e:	ebac 0303 	sub.w	r3, ip, r3
 8008032:	0c12      	lsrs	r2, r2, #16
 8008034:	fa13 f38e 	uxtah	r3, r3, lr
 8008038:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800803c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008040:	b29b      	uxth	r3, r3
 8008042:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008046:	45c1      	cmp	r9, r8
 8008048:	f840 3b04 	str.w	r3, [r0], #4
 800804c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008050:	d2e8      	bcs.n	8008024 <quorem+0xb0>
 8008052:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008056:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800805a:	b922      	cbnz	r2, 8008066 <quorem+0xf2>
 800805c:	3b04      	subs	r3, #4
 800805e:	429d      	cmp	r5, r3
 8008060:	461a      	mov	r2, r3
 8008062:	d30a      	bcc.n	800807a <quorem+0x106>
 8008064:	613c      	str	r4, [r7, #16]
 8008066:	4630      	mov	r0, r6
 8008068:	b003      	add	sp, #12
 800806a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800806e:	6812      	ldr	r2, [r2, #0]
 8008070:	3b04      	subs	r3, #4
 8008072:	2a00      	cmp	r2, #0
 8008074:	d1cc      	bne.n	8008010 <quorem+0x9c>
 8008076:	3c01      	subs	r4, #1
 8008078:	e7c7      	b.n	800800a <quorem+0x96>
 800807a:	6812      	ldr	r2, [r2, #0]
 800807c:	3b04      	subs	r3, #4
 800807e:	2a00      	cmp	r2, #0
 8008080:	d1f0      	bne.n	8008064 <quorem+0xf0>
 8008082:	3c01      	subs	r4, #1
 8008084:	e7eb      	b.n	800805e <quorem+0xea>
 8008086:	2000      	movs	r0, #0
 8008088:	e7ee      	b.n	8008068 <quorem+0xf4>
 800808a:	0000      	movs	r0, r0
 800808c:	0000      	movs	r0, r0
	...

08008090 <_dtoa_r>:
 8008090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008094:	ed2d 8b04 	vpush	{d8-d9}
 8008098:	ec57 6b10 	vmov	r6, r7, d0
 800809c:	b093      	sub	sp, #76	; 0x4c
 800809e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80080a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80080a4:	9106      	str	r1, [sp, #24]
 80080a6:	ee10 aa10 	vmov	sl, s0
 80080aa:	4604      	mov	r4, r0
 80080ac:	9209      	str	r2, [sp, #36]	; 0x24
 80080ae:	930c      	str	r3, [sp, #48]	; 0x30
 80080b0:	46bb      	mov	fp, r7
 80080b2:	b975      	cbnz	r5, 80080d2 <_dtoa_r+0x42>
 80080b4:	2010      	movs	r0, #16
 80080b6:	f001 f95f 	bl	8009378 <malloc>
 80080ba:	4602      	mov	r2, r0
 80080bc:	6260      	str	r0, [r4, #36]	; 0x24
 80080be:	b920      	cbnz	r0, 80080ca <_dtoa_r+0x3a>
 80080c0:	4ba7      	ldr	r3, [pc, #668]	; (8008360 <_dtoa_r+0x2d0>)
 80080c2:	21ea      	movs	r1, #234	; 0xea
 80080c4:	48a7      	ldr	r0, [pc, #668]	; (8008364 <_dtoa_r+0x2d4>)
 80080c6:	f002 f8cd 	bl	800a264 <__assert_func>
 80080ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80080ce:	6005      	str	r5, [r0, #0]
 80080d0:	60c5      	str	r5, [r0, #12]
 80080d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080d4:	6819      	ldr	r1, [r3, #0]
 80080d6:	b151      	cbz	r1, 80080ee <_dtoa_r+0x5e>
 80080d8:	685a      	ldr	r2, [r3, #4]
 80080da:	604a      	str	r2, [r1, #4]
 80080dc:	2301      	movs	r3, #1
 80080de:	4093      	lsls	r3, r2
 80080e0:	608b      	str	r3, [r1, #8]
 80080e2:	4620      	mov	r0, r4
 80080e4:	f001 f9b0 	bl	8009448 <_Bfree>
 80080e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	1e3b      	subs	r3, r7, #0
 80080f0:	bfaa      	itet	ge
 80080f2:	2300      	movge	r3, #0
 80080f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80080f8:	f8c8 3000 	strge.w	r3, [r8]
 80080fc:	4b9a      	ldr	r3, [pc, #616]	; (8008368 <_dtoa_r+0x2d8>)
 80080fe:	bfbc      	itt	lt
 8008100:	2201      	movlt	r2, #1
 8008102:	f8c8 2000 	strlt.w	r2, [r8]
 8008106:	ea33 030b 	bics.w	r3, r3, fp
 800810a:	d11b      	bne.n	8008144 <_dtoa_r+0xb4>
 800810c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800810e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008118:	4333      	orrs	r3, r6
 800811a:	f000 8592 	beq.w	8008c42 <_dtoa_r+0xbb2>
 800811e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008120:	b963      	cbnz	r3, 800813c <_dtoa_r+0xac>
 8008122:	4b92      	ldr	r3, [pc, #584]	; (800836c <_dtoa_r+0x2dc>)
 8008124:	e022      	b.n	800816c <_dtoa_r+0xdc>
 8008126:	4b92      	ldr	r3, [pc, #584]	; (8008370 <_dtoa_r+0x2e0>)
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	3308      	adds	r3, #8
 800812c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800812e:	6013      	str	r3, [r2, #0]
 8008130:	9801      	ldr	r0, [sp, #4]
 8008132:	b013      	add	sp, #76	; 0x4c
 8008134:	ecbd 8b04 	vpop	{d8-d9}
 8008138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813c:	4b8b      	ldr	r3, [pc, #556]	; (800836c <_dtoa_r+0x2dc>)
 800813e:	9301      	str	r3, [sp, #4]
 8008140:	3303      	adds	r3, #3
 8008142:	e7f3      	b.n	800812c <_dtoa_r+0x9c>
 8008144:	2200      	movs	r2, #0
 8008146:	2300      	movs	r3, #0
 8008148:	4650      	mov	r0, sl
 800814a:	4659      	mov	r1, fp
 800814c:	f7f8 fcbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008150:	ec4b ab19 	vmov	d9, sl, fp
 8008154:	4680      	mov	r8, r0
 8008156:	b158      	cbz	r0, 8008170 <_dtoa_r+0xe0>
 8008158:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800815a:	2301      	movs	r3, #1
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 856b 	beq.w	8008c3c <_dtoa_r+0xbac>
 8008166:	4883      	ldr	r0, [pc, #524]	; (8008374 <_dtoa_r+0x2e4>)
 8008168:	6018      	str	r0, [r3, #0]
 800816a:	1e43      	subs	r3, r0, #1
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	e7df      	b.n	8008130 <_dtoa_r+0xa0>
 8008170:	ec4b ab10 	vmov	d0, sl, fp
 8008174:	aa10      	add	r2, sp, #64	; 0x40
 8008176:	a911      	add	r1, sp, #68	; 0x44
 8008178:	4620      	mov	r0, r4
 800817a:	f001 fd13 	bl	8009ba4 <__d2b>
 800817e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008182:	ee08 0a10 	vmov	s16, r0
 8008186:	2d00      	cmp	r5, #0
 8008188:	f000 8084 	beq.w	8008294 <_dtoa_r+0x204>
 800818c:	ee19 3a90 	vmov	r3, s19
 8008190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008194:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008198:	4656      	mov	r6, sl
 800819a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800819e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80081a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80081a6:	4b74      	ldr	r3, [pc, #464]	; (8008378 <_dtoa_r+0x2e8>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	4630      	mov	r0, r6
 80081ac:	4639      	mov	r1, r7
 80081ae:	f7f8 f86b 	bl	8000288 <__aeabi_dsub>
 80081b2:	a365      	add	r3, pc, #404	; (adr r3, 8008348 <_dtoa_r+0x2b8>)
 80081b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b8:	f7f8 fa1e 	bl	80005f8 <__aeabi_dmul>
 80081bc:	a364      	add	r3, pc, #400	; (adr r3, 8008350 <_dtoa_r+0x2c0>)
 80081be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c2:	f7f8 f863 	bl	800028c <__adddf3>
 80081c6:	4606      	mov	r6, r0
 80081c8:	4628      	mov	r0, r5
 80081ca:	460f      	mov	r7, r1
 80081cc:	f7f8 f9aa 	bl	8000524 <__aeabi_i2d>
 80081d0:	a361      	add	r3, pc, #388	; (adr r3, 8008358 <_dtoa_r+0x2c8>)
 80081d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d6:	f7f8 fa0f 	bl	80005f8 <__aeabi_dmul>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	4630      	mov	r0, r6
 80081e0:	4639      	mov	r1, r7
 80081e2:	f7f8 f853 	bl	800028c <__adddf3>
 80081e6:	4606      	mov	r6, r0
 80081e8:	460f      	mov	r7, r1
 80081ea:	f7f8 fcb5 	bl	8000b58 <__aeabi_d2iz>
 80081ee:	2200      	movs	r2, #0
 80081f0:	9000      	str	r0, [sp, #0]
 80081f2:	2300      	movs	r3, #0
 80081f4:	4630      	mov	r0, r6
 80081f6:	4639      	mov	r1, r7
 80081f8:	f7f8 fc70 	bl	8000adc <__aeabi_dcmplt>
 80081fc:	b150      	cbz	r0, 8008214 <_dtoa_r+0x184>
 80081fe:	9800      	ldr	r0, [sp, #0]
 8008200:	f7f8 f990 	bl	8000524 <__aeabi_i2d>
 8008204:	4632      	mov	r2, r6
 8008206:	463b      	mov	r3, r7
 8008208:	f7f8 fc5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800820c:	b910      	cbnz	r0, 8008214 <_dtoa_r+0x184>
 800820e:	9b00      	ldr	r3, [sp, #0]
 8008210:	3b01      	subs	r3, #1
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	9b00      	ldr	r3, [sp, #0]
 8008216:	2b16      	cmp	r3, #22
 8008218:	d85a      	bhi.n	80082d0 <_dtoa_r+0x240>
 800821a:	9a00      	ldr	r2, [sp, #0]
 800821c:	4b57      	ldr	r3, [pc, #348]	; (800837c <_dtoa_r+0x2ec>)
 800821e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	ec51 0b19 	vmov	r0, r1, d9
 800822a:	f7f8 fc57 	bl	8000adc <__aeabi_dcmplt>
 800822e:	2800      	cmp	r0, #0
 8008230:	d050      	beq.n	80082d4 <_dtoa_r+0x244>
 8008232:	9b00      	ldr	r3, [sp, #0]
 8008234:	3b01      	subs	r3, #1
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	2300      	movs	r3, #0
 800823a:	930b      	str	r3, [sp, #44]	; 0x2c
 800823c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800823e:	1b5d      	subs	r5, r3, r5
 8008240:	1e6b      	subs	r3, r5, #1
 8008242:	9305      	str	r3, [sp, #20]
 8008244:	bf45      	ittet	mi
 8008246:	f1c5 0301 	rsbmi	r3, r5, #1
 800824a:	9304      	strmi	r3, [sp, #16]
 800824c:	2300      	movpl	r3, #0
 800824e:	2300      	movmi	r3, #0
 8008250:	bf4c      	ite	mi
 8008252:	9305      	strmi	r3, [sp, #20]
 8008254:	9304      	strpl	r3, [sp, #16]
 8008256:	9b00      	ldr	r3, [sp, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	db3d      	blt.n	80082d8 <_dtoa_r+0x248>
 800825c:	9b05      	ldr	r3, [sp, #20]
 800825e:	9a00      	ldr	r2, [sp, #0]
 8008260:	920a      	str	r2, [sp, #40]	; 0x28
 8008262:	4413      	add	r3, r2
 8008264:	9305      	str	r3, [sp, #20]
 8008266:	2300      	movs	r3, #0
 8008268:	9307      	str	r3, [sp, #28]
 800826a:	9b06      	ldr	r3, [sp, #24]
 800826c:	2b09      	cmp	r3, #9
 800826e:	f200 8089 	bhi.w	8008384 <_dtoa_r+0x2f4>
 8008272:	2b05      	cmp	r3, #5
 8008274:	bfc4      	itt	gt
 8008276:	3b04      	subgt	r3, #4
 8008278:	9306      	strgt	r3, [sp, #24]
 800827a:	9b06      	ldr	r3, [sp, #24]
 800827c:	f1a3 0302 	sub.w	r3, r3, #2
 8008280:	bfcc      	ite	gt
 8008282:	2500      	movgt	r5, #0
 8008284:	2501      	movle	r5, #1
 8008286:	2b03      	cmp	r3, #3
 8008288:	f200 8087 	bhi.w	800839a <_dtoa_r+0x30a>
 800828c:	e8df f003 	tbb	[pc, r3]
 8008290:	59383a2d 	.word	0x59383a2d
 8008294:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008298:	441d      	add	r5, r3
 800829a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800829e:	2b20      	cmp	r3, #32
 80082a0:	bfc1      	itttt	gt
 80082a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80082a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80082aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80082ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80082b2:	bfda      	itte	le
 80082b4:	f1c3 0320 	rsble	r3, r3, #32
 80082b8:	fa06 f003 	lslle.w	r0, r6, r3
 80082bc:	4318      	orrgt	r0, r3
 80082be:	f7f8 f921 	bl	8000504 <__aeabi_ui2d>
 80082c2:	2301      	movs	r3, #1
 80082c4:	4606      	mov	r6, r0
 80082c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80082ca:	3d01      	subs	r5, #1
 80082cc:	930e      	str	r3, [sp, #56]	; 0x38
 80082ce:	e76a      	b.n	80081a6 <_dtoa_r+0x116>
 80082d0:	2301      	movs	r3, #1
 80082d2:	e7b2      	b.n	800823a <_dtoa_r+0x1aa>
 80082d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80082d6:	e7b1      	b.n	800823c <_dtoa_r+0x1ac>
 80082d8:	9b04      	ldr	r3, [sp, #16]
 80082da:	9a00      	ldr	r2, [sp, #0]
 80082dc:	1a9b      	subs	r3, r3, r2
 80082de:	9304      	str	r3, [sp, #16]
 80082e0:	4253      	negs	r3, r2
 80082e2:	9307      	str	r3, [sp, #28]
 80082e4:	2300      	movs	r3, #0
 80082e6:	930a      	str	r3, [sp, #40]	; 0x28
 80082e8:	e7bf      	b.n	800826a <_dtoa_r+0x1da>
 80082ea:	2300      	movs	r3, #0
 80082ec:	9308      	str	r3, [sp, #32]
 80082ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	dc55      	bgt.n	80083a0 <_dtoa_r+0x310>
 80082f4:	2301      	movs	r3, #1
 80082f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082fa:	461a      	mov	r2, r3
 80082fc:	9209      	str	r2, [sp, #36]	; 0x24
 80082fe:	e00c      	b.n	800831a <_dtoa_r+0x28a>
 8008300:	2301      	movs	r3, #1
 8008302:	e7f3      	b.n	80082ec <_dtoa_r+0x25c>
 8008304:	2300      	movs	r3, #0
 8008306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008308:	9308      	str	r3, [sp, #32]
 800830a:	9b00      	ldr	r3, [sp, #0]
 800830c:	4413      	add	r3, r2
 800830e:	9302      	str	r3, [sp, #8]
 8008310:	3301      	adds	r3, #1
 8008312:	2b01      	cmp	r3, #1
 8008314:	9303      	str	r3, [sp, #12]
 8008316:	bfb8      	it	lt
 8008318:	2301      	movlt	r3, #1
 800831a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800831c:	2200      	movs	r2, #0
 800831e:	6042      	str	r2, [r0, #4]
 8008320:	2204      	movs	r2, #4
 8008322:	f102 0614 	add.w	r6, r2, #20
 8008326:	429e      	cmp	r6, r3
 8008328:	6841      	ldr	r1, [r0, #4]
 800832a:	d93d      	bls.n	80083a8 <_dtoa_r+0x318>
 800832c:	4620      	mov	r0, r4
 800832e:	f001 f84b 	bl	80093c8 <_Balloc>
 8008332:	9001      	str	r0, [sp, #4]
 8008334:	2800      	cmp	r0, #0
 8008336:	d13b      	bne.n	80083b0 <_dtoa_r+0x320>
 8008338:	4b11      	ldr	r3, [pc, #68]	; (8008380 <_dtoa_r+0x2f0>)
 800833a:	4602      	mov	r2, r0
 800833c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008340:	e6c0      	b.n	80080c4 <_dtoa_r+0x34>
 8008342:	2301      	movs	r3, #1
 8008344:	e7df      	b.n	8008306 <_dtoa_r+0x276>
 8008346:	bf00      	nop
 8008348:	636f4361 	.word	0x636f4361
 800834c:	3fd287a7 	.word	0x3fd287a7
 8008350:	8b60c8b3 	.word	0x8b60c8b3
 8008354:	3fc68a28 	.word	0x3fc68a28
 8008358:	509f79fb 	.word	0x509f79fb
 800835c:	3fd34413 	.word	0x3fd34413
 8008360:	0800afd6 	.word	0x0800afd6
 8008364:	0800afed 	.word	0x0800afed
 8008368:	7ff00000 	.word	0x7ff00000
 800836c:	0800afd2 	.word	0x0800afd2
 8008370:	0800afc9 	.word	0x0800afc9
 8008374:	0800ae49 	.word	0x0800ae49
 8008378:	3ff80000 	.word	0x3ff80000
 800837c:	0800b158 	.word	0x0800b158
 8008380:	0800b048 	.word	0x0800b048
 8008384:	2501      	movs	r5, #1
 8008386:	2300      	movs	r3, #0
 8008388:	9306      	str	r3, [sp, #24]
 800838a:	9508      	str	r5, [sp, #32]
 800838c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008390:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008394:	2200      	movs	r2, #0
 8008396:	2312      	movs	r3, #18
 8008398:	e7b0      	b.n	80082fc <_dtoa_r+0x26c>
 800839a:	2301      	movs	r3, #1
 800839c:	9308      	str	r3, [sp, #32]
 800839e:	e7f5      	b.n	800838c <_dtoa_r+0x2fc>
 80083a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083a6:	e7b8      	b.n	800831a <_dtoa_r+0x28a>
 80083a8:	3101      	adds	r1, #1
 80083aa:	6041      	str	r1, [r0, #4]
 80083ac:	0052      	lsls	r2, r2, #1
 80083ae:	e7b8      	b.n	8008322 <_dtoa_r+0x292>
 80083b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083b2:	9a01      	ldr	r2, [sp, #4]
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	9b03      	ldr	r3, [sp, #12]
 80083b8:	2b0e      	cmp	r3, #14
 80083ba:	f200 809d 	bhi.w	80084f8 <_dtoa_r+0x468>
 80083be:	2d00      	cmp	r5, #0
 80083c0:	f000 809a 	beq.w	80084f8 <_dtoa_r+0x468>
 80083c4:	9b00      	ldr	r3, [sp, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	dd32      	ble.n	8008430 <_dtoa_r+0x3a0>
 80083ca:	4ab7      	ldr	r2, [pc, #732]	; (80086a8 <_dtoa_r+0x618>)
 80083cc:	f003 030f 	and.w	r3, r3, #15
 80083d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80083d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083d8:	9b00      	ldr	r3, [sp, #0]
 80083da:	05d8      	lsls	r0, r3, #23
 80083dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80083e0:	d516      	bpl.n	8008410 <_dtoa_r+0x380>
 80083e2:	4bb2      	ldr	r3, [pc, #712]	; (80086ac <_dtoa_r+0x61c>)
 80083e4:	ec51 0b19 	vmov	r0, r1, d9
 80083e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083ec:	f7f8 fa2e 	bl	800084c <__aeabi_ddiv>
 80083f0:	f007 070f 	and.w	r7, r7, #15
 80083f4:	4682      	mov	sl, r0
 80083f6:	468b      	mov	fp, r1
 80083f8:	2503      	movs	r5, #3
 80083fa:	4eac      	ldr	r6, [pc, #688]	; (80086ac <_dtoa_r+0x61c>)
 80083fc:	b957      	cbnz	r7, 8008414 <_dtoa_r+0x384>
 80083fe:	4642      	mov	r2, r8
 8008400:	464b      	mov	r3, r9
 8008402:	4650      	mov	r0, sl
 8008404:	4659      	mov	r1, fp
 8008406:	f7f8 fa21 	bl	800084c <__aeabi_ddiv>
 800840a:	4682      	mov	sl, r0
 800840c:	468b      	mov	fp, r1
 800840e:	e028      	b.n	8008462 <_dtoa_r+0x3d2>
 8008410:	2502      	movs	r5, #2
 8008412:	e7f2      	b.n	80083fa <_dtoa_r+0x36a>
 8008414:	07f9      	lsls	r1, r7, #31
 8008416:	d508      	bpl.n	800842a <_dtoa_r+0x39a>
 8008418:	4640      	mov	r0, r8
 800841a:	4649      	mov	r1, r9
 800841c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008420:	f7f8 f8ea 	bl	80005f8 <__aeabi_dmul>
 8008424:	3501      	adds	r5, #1
 8008426:	4680      	mov	r8, r0
 8008428:	4689      	mov	r9, r1
 800842a:	107f      	asrs	r7, r7, #1
 800842c:	3608      	adds	r6, #8
 800842e:	e7e5      	b.n	80083fc <_dtoa_r+0x36c>
 8008430:	f000 809b 	beq.w	800856a <_dtoa_r+0x4da>
 8008434:	9b00      	ldr	r3, [sp, #0]
 8008436:	4f9d      	ldr	r7, [pc, #628]	; (80086ac <_dtoa_r+0x61c>)
 8008438:	425e      	negs	r6, r3
 800843a:	4b9b      	ldr	r3, [pc, #620]	; (80086a8 <_dtoa_r+0x618>)
 800843c:	f006 020f 	and.w	r2, r6, #15
 8008440:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008448:	ec51 0b19 	vmov	r0, r1, d9
 800844c:	f7f8 f8d4 	bl	80005f8 <__aeabi_dmul>
 8008450:	1136      	asrs	r6, r6, #4
 8008452:	4682      	mov	sl, r0
 8008454:	468b      	mov	fp, r1
 8008456:	2300      	movs	r3, #0
 8008458:	2502      	movs	r5, #2
 800845a:	2e00      	cmp	r6, #0
 800845c:	d17a      	bne.n	8008554 <_dtoa_r+0x4c4>
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1d3      	bne.n	800840a <_dtoa_r+0x37a>
 8008462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008464:	2b00      	cmp	r3, #0
 8008466:	f000 8082 	beq.w	800856e <_dtoa_r+0x4de>
 800846a:	4b91      	ldr	r3, [pc, #580]	; (80086b0 <_dtoa_r+0x620>)
 800846c:	2200      	movs	r2, #0
 800846e:	4650      	mov	r0, sl
 8008470:	4659      	mov	r1, fp
 8008472:	f7f8 fb33 	bl	8000adc <__aeabi_dcmplt>
 8008476:	2800      	cmp	r0, #0
 8008478:	d079      	beq.n	800856e <_dtoa_r+0x4de>
 800847a:	9b03      	ldr	r3, [sp, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d076      	beq.n	800856e <_dtoa_r+0x4de>
 8008480:	9b02      	ldr	r3, [sp, #8]
 8008482:	2b00      	cmp	r3, #0
 8008484:	dd36      	ble.n	80084f4 <_dtoa_r+0x464>
 8008486:	9b00      	ldr	r3, [sp, #0]
 8008488:	4650      	mov	r0, sl
 800848a:	4659      	mov	r1, fp
 800848c:	1e5f      	subs	r7, r3, #1
 800848e:	2200      	movs	r2, #0
 8008490:	4b88      	ldr	r3, [pc, #544]	; (80086b4 <_dtoa_r+0x624>)
 8008492:	f7f8 f8b1 	bl	80005f8 <__aeabi_dmul>
 8008496:	9e02      	ldr	r6, [sp, #8]
 8008498:	4682      	mov	sl, r0
 800849a:	468b      	mov	fp, r1
 800849c:	3501      	adds	r5, #1
 800849e:	4628      	mov	r0, r5
 80084a0:	f7f8 f840 	bl	8000524 <__aeabi_i2d>
 80084a4:	4652      	mov	r2, sl
 80084a6:	465b      	mov	r3, fp
 80084a8:	f7f8 f8a6 	bl	80005f8 <__aeabi_dmul>
 80084ac:	4b82      	ldr	r3, [pc, #520]	; (80086b8 <_dtoa_r+0x628>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	f7f7 feec 	bl	800028c <__adddf3>
 80084b4:	46d0      	mov	r8, sl
 80084b6:	46d9      	mov	r9, fp
 80084b8:	4682      	mov	sl, r0
 80084ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80084be:	2e00      	cmp	r6, #0
 80084c0:	d158      	bne.n	8008574 <_dtoa_r+0x4e4>
 80084c2:	4b7e      	ldr	r3, [pc, #504]	; (80086bc <_dtoa_r+0x62c>)
 80084c4:	2200      	movs	r2, #0
 80084c6:	4640      	mov	r0, r8
 80084c8:	4649      	mov	r1, r9
 80084ca:	f7f7 fedd 	bl	8000288 <__aeabi_dsub>
 80084ce:	4652      	mov	r2, sl
 80084d0:	465b      	mov	r3, fp
 80084d2:	4680      	mov	r8, r0
 80084d4:	4689      	mov	r9, r1
 80084d6:	f7f8 fb1f 	bl	8000b18 <__aeabi_dcmpgt>
 80084da:	2800      	cmp	r0, #0
 80084dc:	f040 8295 	bne.w	8008a0a <_dtoa_r+0x97a>
 80084e0:	4652      	mov	r2, sl
 80084e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80084e6:	4640      	mov	r0, r8
 80084e8:	4649      	mov	r1, r9
 80084ea:	f7f8 faf7 	bl	8000adc <__aeabi_dcmplt>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	f040 8289 	bne.w	8008a06 <_dtoa_r+0x976>
 80084f4:	ec5b ab19 	vmov	sl, fp, d9
 80084f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f2c0 8148 	blt.w	8008790 <_dtoa_r+0x700>
 8008500:	9a00      	ldr	r2, [sp, #0]
 8008502:	2a0e      	cmp	r2, #14
 8008504:	f300 8144 	bgt.w	8008790 <_dtoa_r+0x700>
 8008508:	4b67      	ldr	r3, [pc, #412]	; (80086a8 <_dtoa_r+0x618>)
 800850a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800850e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008514:	2b00      	cmp	r3, #0
 8008516:	f280 80d5 	bge.w	80086c4 <_dtoa_r+0x634>
 800851a:	9b03      	ldr	r3, [sp, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	f300 80d1 	bgt.w	80086c4 <_dtoa_r+0x634>
 8008522:	f040 826f 	bne.w	8008a04 <_dtoa_r+0x974>
 8008526:	4b65      	ldr	r3, [pc, #404]	; (80086bc <_dtoa_r+0x62c>)
 8008528:	2200      	movs	r2, #0
 800852a:	4640      	mov	r0, r8
 800852c:	4649      	mov	r1, r9
 800852e:	f7f8 f863 	bl	80005f8 <__aeabi_dmul>
 8008532:	4652      	mov	r2, sl
 8008534:	465b      	mov	r3, fp
 8008536:	f7f8 fae5 	bl	8000b04 <__aeabi_dcmpge>
 800853a:	9e03      	ldr	r6, [sp, #12]
 800853c:	4637      	mov	r7, r6
 800853e:	2800      	cmp	r0, #0
 8008540:	f040 8245 	bne.w	80089ce <_dtoa_r+0x93e>
 8008544:	9d01      	ldr	r5, [sp, #4]
 8008546:	2331      	movs	r3, #49	; 0x31
 8008548:	f805 3b01 	strb.w	r3, [r5], #1
 800854c:	9b00      	ldr	r3, [sp, #0]
 800854e:	3301      	adds	r3, #1
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	e240      	b.n	80089d6 <_dtoa_r+0x946>
 8008554:	07f2      	lsls	r2, r6, #31
 8008556:	d505      	bpl.n	8008564 <_dtoa_r+0x4d4>
 8008558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800855c:	f7f8 f84c 	bl	80005f8 <__aeabi_dmul>
 8008560:	3501      	adds	r5, #1
 8008562:	2301      	movs	r3, #1
 8008564:	1076      	asrs	r6, r6, #1
 8008566:	3708      	adds	r7, #8
 8008568:	e777      	b.n	800845a <_dtoa_r+0x3ca>
 800856a:	2502      	movs	r5, #2
 800856c:	e779      	b.n	8008462 <_dtoa_r+0x3d2>
 800856e:	9f00      	ldr	r7, [sp, #0]
 8008570:	9e03      	ldr	r6, [sp, #12]
 8008572:	e794      	b.n	800849e <_dtoa_r+0x40e>
 8008574:	9901      	ldr	r1, [sp, #4]
 8008576:	4b4c      	ldr	r3, [pc, #304]	; (80086a8 <_dtoa_r+0x618>)
 8008578:	4431      	add	r1, r6
 800857a:	910d      	str	r1, [sp, #52]	; 0x34
 800857c:	9908      	ldr	r1, [sp, #32]
 800857e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008582:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008586:	2900      	cmp	r1, #0
 8008588:	d043      	beq.n	8008612 <_dtoa_r+0x582>
 800858a:	494d      	ldr	r1, [pc, #308]	; (80086c0 <_dtoa_r+0x630>)
 800858c:	2000      	movs	r0, #0
 800858e:	f7f8 f95d 	bl	800084c <__aeabi_ddiv>
 8008592:	4652      	mov	r2, sl
 8008594:	465b      	mov	r3, fp
 8008596:	f7f7 fe77 	bl	8000288 <__aeabi_dsub>
 800859a:	9d01      	ldr	r5, [sp, #4]
 800859c:	4682      	mov	sl, r0
 800859e:	468b      	mov	fp, r1
 80085a0:	4649      	mov	r1, r9
 80085a2:	4640      	mov	r0, r8
 80085a4:	f7f8 fad8 	bl	8000b58 <__aeabi_d2iz>
 80085a8:	4606      	mov	r6, r0
 80085aa:	f7f7 ffbb 	bl	8000524 <__aeabi_i2d>
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	4640      	mov	r0, r8
 80085b4:	4649      	mov	r1, r9
 80085b6:	f7f7 fe67 	bl	8000288 <__aeabi_dsub>
 80085ba:	3630      	adds	r6, #48	; 0x30
 80085bc:	f805 6b01 	strb.w	r6, [r5], #1
 80085c0:	4652      	mov	r2, sl
 80085c2:	465b      	mov	r3, fp
 80085c4:	4680      	mov	r8, r0
 80085c6:	4689      	mov	r9, r1
 80085c8:	f7f8 fa88 	bl	8000adc <__aeabi_dcmplt>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d163      	bne.n	8008698 <_dtoa_r+0x608>
 80085d0:	4642      	mov	r2, r8
 80085d2:	464b      	mov	r3, r9
 80085d4:	4936      	ldr	r1, [pc, #216]	; (80086b0 <_dtoa_r+0x620>)
 80085d6:	2000      	movs	r0, #0
 80085d8:	f7f7 fe56 	bl	8000288 <__aeabi_dsub>
 80085dc:	4652      	mov	r2, sl
 80085de:	465b      	mov	r3, fp
 80085e0:	f7f8 fa7c 	bl	8000adc <__aeabi_dcmplt>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	f040 80b5 	bne.w	8008754 <_dtoa_r+0x6c4>
 80085ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085ec:	429d      	cmp	r5, r3
 80085ee:	d081      	beq.n	80084f4 <_dtoa_r+0x464>
 80085f0:	4b30      	ldr	r3, [pc, #192]	; (80086b4 <_dtoa_r+0x624>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	4650      	mov	r0, sl
 80085f6:	4659      	mov	r1, fp
 80085f8:	f7f7 fffe 	bl	80005f8 <__aeabi_dmul>
 80085fc:	4b2d      	ldr	r3, [pc, #180]	; (80086b4 <_dtoa_r+0x624>)
 80085fe:	4682      	mov	sl, r0
 8008600:	468b      	mov	fp, r1
 8008602:	4640      	mov	r0, r8
 8008604:	4649      	mov	r1, r9
 8008606:	2200      	movs	r2, #0
 8008608:	f7f7 fff6 	bl	80005f8 <__aeabi_dmul>
 800860c:	4680      	mov	r8, r0
 800860e:	4689      	mov	r9, r1
 8008610:	e7c6      	b.n	80085a0 <_dtoa_r+0x510>
 8008612:	4650      	mov	r0, sl
 8008614:	4659      	mov	r1, fp
 8008616:	f7f7 ffef 	bl	80005f8 <__aeabi_dmul>
 800861a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800861c:	9d01      	ldr	r5, [sp, #4]
 800861e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008620:	4682      	mov	sl, r0
 8008622:	468b      	mov	fp, r1
 8008624:	4649      	mov	r1, r9
 8008626:	4640      	mov	r0, r8
 8008628:	f7f8 fa96 	bl	8000b58 <__aeabi_d2iz>
 800862c:	4606      	mov	r6, r0
 800862e:	f7f7 ff79 	bl	8000524 <__aeabi_i2d>
 8008632:	3630      	adds	r6, #48	; 0x30
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	4640      	mov	r0, r8
 800863a:	4649      	mov	r1, r9
 800863c:	f7f7 fe24 	bl	8000288 <__aeabi_dsub>
 8008640:	f805 6b01 	strb.w	r6, [r5], #1
 8008644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008646:	429d      	cmp	r5, r3
 8008648:	4680      	mov	r8, r0
 800864a:	4689      	mov	r9, r1
 800864c:	f04f 0200 	mov.w	r2, #0
 8008650:	d124      	bne.n	800869c <_dtoa_r+0x60c>
 8008652:	4b1b      	ldr	r3, [pc, #108]	; (80086c0 <_dtoa_r+0x630>)
 8008654:	4650      	mov	r0, sl
 8008656:	4659      	mov	r1, fp
 8008658:	f7f7 fe18 	bl	800028c <__adddf3>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	4640      	mov	r0, r8
 8008662:	4649      	mov	r1, r9
 8008664:	f7f8 fa58 	bl	8000b18 <__aeabi_dcmpgt>
 8008668:	2800      	cmp	r0, #0
 800866a:	d173      	bne.n	8008754 <_dtoa_r+0x6c4>
 800866c:	4652      	mov	r2, sl
 800866e:	465b      	mov	r3, fp
 8008670:	4913      	ldr	r1, [pc, #76]	; (80086c0 <_dtoa_r+0x630>)
 8008672:	2000      	movs	r0, #0
 8008674:	f7f7 fe08 	bl	8000288 <__aeabi_dsub>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	4640      	mov	r0, r8
 800867e:	4649      	mov	r1, r9
 8008680:	f7f8 fa2c 	bl	8000adc <__aeabi_dcmplt>
 8008684:	2800      	cmp	r0, #0
 8008686:	f43f af35 	beq.w	80084f4 <_dtoa_r+0x464>
 800868a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800868c:	1e6b      	subs	r3, r5, #1
 800868e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008690:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008694:	2b30      	cmp	r3, #48	; 0x30
 8008696:	d0f8      	beq.n	800868a <_dtoa_r+0x5fa>
 8008698:	9700      	str	r7, [sp, #0]
 800869a:	e049      	b.n	8008730 <_dtoa_r+0x6a0>
 800869c:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <_dtoa_r+0x624>)
 800869e:	f7f7 ffab 	bl	80005f8 <__aeabi_dmul>
 80086a2:	4680      	mov	r8, r0
 80086a4:	4689      	mov	r9, r1
 80086a6:	e7bd      	b.n	8008624 <_dtoa_r+0x594>
 80086a8:	0800b158 	.word	0x0800b158
 80086ac:	0800b130 	.word	0x0800b130
 80086b0:	3ff00000 	.word	0x3ff00000
 80086b4:	40240000 	.word	0x40240000
 80086b8:	401c0000 	.word	0x401c0000
 80086bc:	40140000 	.word	0x40140000
 80086c0:	3fe00000 	.word	0x3fe00000
 80086c4:	9d01      	ldr	r5, [sp, #4]
 80086c6:	4656      	mov	r6, sl
 80086c8:	465f      	mov	r7, fp
 80086ca:	4642      	mov	r2, r8
 80086cc:	464b      	mov	r3, r9
 80086ce:	4630      	mov	r0, r6
 80086d0:	4639      	mov	r1, r7
 80086d2:	f7f8 f8bb 	bl	800084c <__aeabi_ddiv>
 80086d6:	f7f8 fa3f 	bl	8000b58 <__aeabi_d2iz>
 80086da:	4682      	mov	sl, r0
 80086dc:	f7f7 ff22 	bl	8000524 <__aeabi_i2d>
 80086e0:	4642      	mov	r2, r8
 80086e2:	464b      	mov	r3, r9
 80086e4:	f7f7 ff88 	bl	80005f8 <__aeabi_dmul>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	4630      	mov	r0, r6
 80086ee:	4639      	mov	r1, r7
 80086f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80086f4:	f7f7 fdc8 	bl	8000288 <__aeabi_dsub>
 80086f8:	f805 6b01 	strb.w	r6, [r5], #1
 80086fc:	9e01      	ldr	r6, [sp, #4]
 80086fe:	9f03      	ldr	r7, [sp, #12]
 8008700:	1bae      	subs	r6, r5, r6
 8008702:	42b7      	cmp	r7, r6
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	d135      	bne.n	8008776 <_dtoa_r+0x6e6>
 800870a:	f7f7 fdbf 	bl	800028c <__adddf3>
 800870e:	4642      	mov	r2, r8
 8008710:	464b      	mov	r3, r9
 8008712:	4606      	mov	r6, r0
 8008714:	460f      	mov	r7, r1
 8008716:	f7f8 f9ff 	bl	8000b18 <__aeabi_dcmpgt>
 800871a:	b9d0      	cbnz	r0, 8008752 <_dtoa_r+0x6c2>
 800871c:	4642      	mov	r2, r8
 800871e:	464b      	mov	r3, r9
 8008720:	4630      	mov	r0, r6
 8008722:	4639      	mov	r1, r7
 8008724:	f7f8 f9d0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008728:	b110      	cbz	r0, 8008730 <_dtoa_r+0x6a0>
 800872a:	f01a 0f01 	tst.w	sl, #1
 800872e:	d110      	bne.n	8008752 <_dtoa_r+0x6c2>
 8008730:	4620      	mov	r0, r4
 8008732:	ee18 1a10 	vmov	r1, s16
 8008736:	f000 fe87 	bl	8009448 <_Bfree>
 800873a:	2300      	movs	r3, #0
 800873c:	9800      	ldr	r0, [sp, #0]
 800873e:	702b      	strb	r3, [r5, #0]
 8008740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008742:	3001      	adds	r0, #1
 8008744:	6018      	str	r0, [r3, #0]
 8008746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008748:	2b00      	cmp	r3, #0
 800874a:	f43f acf1 	beq.w	8008130 <_dtoa_r+0xa0>
 800874e:	601d      	str	r5, [r3, #0]
 8008750:	e4ee      	b.n	8008130 <_dtoa_r+0xa0>
 8008752:	9f00      	ldr	r7, [sp, #0]
 8008754:	462b      	mov	r3, r5
 8008756:	461d      	mov	r5, r3
 8008758:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800875c:	2a39      	cmp	r2, #57	; 0x39
 800875e:	d106      	bne.n	800876e <_dtoa_r+0x6de>
 8008760:	9a01      	ldr	r2, [sp, #4]
 8008762:	429a      	cmp	r2, r3
 8008764:	d1f7      	bne.n	8008756 <_dtoa_r+0x6c6>
 8008766:	9901      	ldr	r1, [sp, #4]
 8008768:	2230      	movs	r2, #48	; 0x30
 800876a:	3701      	adds	r7, #1
 800876c:	700a      	strb	r2, [r1, #0]
 800876e:	781a      	ldrb	r2, [r3, #0]
 8008770:	3201      	adds	r2, #1
 8008772:	701a      	strb	r2, [r3, #0]
 8008774:	e790      	b.n	8008698 <_dtoa_r+0x608>
 8008776:	4ba6      	ldr	r3, [pc, #664]	; (8008a10 <_dtoa_r+0x980>)
 8008778:	2200      	movs	r2, #0
 800877a:	f7f7 ff3d 	bl	80005f8 <__aeabi_dmul>
 800877e:	2200      	movs	r2, #0
 8008780:	2300      	movs	r3, #0
 8008782:	4606      	mov	r6, r0
 8008784:	460f      	mov	r7, r1
 8008786:	f7f8 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800878a:	2800      	cmp	r0, #0
 800878c:	d09d      	beq.n	80086ca <_dtoa_r+0x63a>
 800878e:	e7cf      	b.n	8008730 <_dtoa_r+0x6a0>
 8008790:	9a08      	ldr	r2, [sp, #32]
 8008792:	2a00      	cmp	r2, #0
 8008794:	f000 80d7 	beq.w	8008946 <_dtoa_r+0x8b6>
 8008798:	9a06      	ldr	r2, [sp, #24]
 800879a:	2a01      	cmp	r2, #1
 800879c:	f300 80ba 	bgt.w	8008914 <_dtoa_r+0x884>
 80087a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087a2:	2a00      	cmp	r2, #0
 80087a4:	f000 80b2 	beq.w	800890c <_dtoa_r+0x87c>
 80087a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087ac:	9e07      	ldr	r6, [sp, #28]
 80087ae:	9d04      	ldr	r5, [sp, #16]
 80087b0:	9a04      	ldr	r2, [sp, #16]
 80087b2:	441a      	add	r2, r3
 80087b4:	9204      	str	r2, [sp, #16]
 80087b6:	9a05      	ldr	r2, [sp, #20]
 80087b8:	2101      	movs	r1, #1
 80087ba:	441a      	add	r2, r3
 80087bc:	4620      	mov	r0, r4
 80087be:	9205      	str	r2, [sp, #20]
 80087c0:	f000 ff44 	bl	800964c <__i2b>
 80087c4:	4607      	mov	r7, r0
 80087c6:	2d00      	cmp	r5, #0
 80087c8:	dd0c      	ble.n	80087e4 <_dtoa_r+0x754>
 80087ca:	9b05      	ldr	r3, [sp, #20]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	dd09      	ble.n	80087e4 <_dtoa_r+0x754>
 80087d0:	42ab      	cmp	r3, r5
 80087d2:	9a04      	ldr	r2, [sp, #16]
 80087d4:	bfa8      	it	ge
 80087d6:	462b      	movge	r3, r5
 80087d8:	1ad2      	subs	r2, r2, r3
 80087da:	9204      	str	r2, [sp, #16]
 80087dc:	9a05      	ldr	r2, [sp, #20]
 80087de:	1aed      	subs	r5, r5, r3
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	9305      	str	r3, [sp, #20]
 80087e4:	9b07      	ldr	r3, [sp, #28]
 80087e6:	b31b      	cbz	r3, 8008830 <_dtoa_r+0x7a0>
 80087e8:	9b08      	ldr	r3, [sp, #32]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f000 80af 	beq.w	800894e <_dtoa_r+0x8be>
 80087f0:	2e00      	cmp	r6, #0
 80087f2:	dd13      	ble.n	800881c <_dtoa_r+0x78c>
 80087f4:	4639      	mov	r1, r7
 80087f6:	4632      	mov	r2, r6
 80087f8:	4620      	mov	r0, r4
 80087fa:	f000 ffe7 	bl	80097cc <__pow5mult>
 80087fe:	ee18 2a10 	vmov	r2, s16
 8008802:	4601      	mov	r1, r0
 8008804:	4607      	mov	r7, r0
 8008806:	4620      	mov	r0, r4
 8008808:	f000 ff36 	bl	8009678 <__multiply>
 800880c:	ee18 1a10 	vmov	r1, s16
 8008810:	4680      	mov	r8, r0
 8008812:	4620      	mov	r0, r4
 8008814:	f000 fe18 	bl	8009448 <_Bfree>
 8008818:	ee08 8a10 	vmov	s16, r8
 800881c:	9b07      	ldr	r3, [sp, #28]
 800881e:	1b9a      	subs	r2, r3, r6
 8008820:	d006      	beq.n	8008830 <_dtoa_r+0x7a0>
 8008822:	ee18 1a10 	vmov	r1, s16
 8008826:	4620      	mov	r0, r4
 8008828:	f000 ffd0 	bl	80097cc <__pow5mult>
 800882c:	ee08 0a10 	vmov	s16, r0
 8008830:	2101      	movs	r1, #1
 8008832:	4620      	mov	r0, r4
 8008834:	f000 ff0a 	bl	800964c <__i2b>
 8008838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800883a:	2b00      	cmp	r3, #0
 800883c:	4606      	mov	r6, r0
 800883e:	f340 8088 	ble.w	8008952 <_dtoa_r+0x8c2>
 8008842:	461a      	mov	r2, r3
 8008844:	4601      	mov	r1, r0
 8008846:	4620      	mov	r0, r4
 8008848:	f000 ffc0 	bl	80097cc <__pow5mult>
 800884c:	9b06      	ldr	r3, [sp, #24]
 800884e:	2b01      	cmp	r3, #1
 8008850:	4606      	mov	r6, r0
 8008852:	f340 8081 	ble.w	8008958 <_dtoa_r+0x8c8>
 8008856:	f04f 0800 	mov.w	r8, #0
 800885a:	6933      	ldr	r3, [r6, #16]
 800885c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008860:	6918      	ldr	r0, [r3, #16]
 8008862:	f000 fea3 	bl	80095ac <__hi0bits>
 8008866:	f1c0 0020 	rsb	r0, r0, #32
 800886a:	9b05      	ldr	r3, [sp, #20]
 800886c:	4418      	add	r0, r3
 800886e:	f010 001f 	ands.w	r0, r0, #31
 8008872:	f000 8092 	beq.w	800899a <_dtoa_r+0x90a>
 8008876:	f1c0 0320 	rsb	r3, r0, #32
 800887a:	2b04      	cmp	r3, #4
 800887c:	f340 808a 	ble.w	8008994 <_dtoa_r+0x904>
 8008880:	f1c0 001c 	rsb	r0, r0, #28
 8008884:	9b04      	ldr	r3, [sp, #16]
 8008886:	4403      	add	r3, r0
 8008888:	9304      	str	r3, [sp, #16]
 800888a:	9b05      	ldr	r3, [sp, #20]
 800888c:	4403      	add	r3, r0
 800888e:	4405      	add	r5, r0
 8008890:	9305      	str	r3, [sp, #20]
 8008892:	9b04      	ldr	r3, [sp, #16]
 8008894:	2b00      	cmp	r3, #0
 8008896:	dd07      	ble.n	80088a8 <_dtoa_r+0x818>
 8008898:	ee18 1a10 	vmov	r1, s16
 800889c:	461a      	mov	r2, r3
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 ffee 	bl	8009880 <__lshift>
 80088a4:	ee08 0a10 	vmov	s16, r0
 80088a8:	9b05      	ldr	r3, [sp, #20]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	dd05      	ble.n	80088ba <_dtoa_r+0x82a>
 80088ae:	4631      	mov	r1, r6
 80088b0:	461a      	mov	r2, r3
 80088b2:	4620      	mov	r0, r4
 80088b4:	f000 ffe4 	bl	8009880 <__lshift>
 80088b8:	4606      	mov	r6, r0
 80088ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d06e      	beq.n	800899e <_dtoa_r+0x90e>
 80088c0:	ee18 0a10 	vmov	r0, s16
 80088c4:	4631      	mov	r1, r6
 80088c6:	f001 f84b 	bl	8009960 <__mcmp>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	da67      	bge.n	800899e <_dtoa_r+0x90e>
 80088ce:	9b00      	ldr	r3, [sp, #0]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	ee18 1a10 	vmov	r1, s16
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	220a      	movs	r2, #10
 80088da:	2300      	movs	r3, #0
 80088dc:	4620      	mov	r0, r4
 80088de:	f000 fdd5 	bl	800948c <__multadd>
 80088e2:	9b08      	ldr	r3, [sp, #32]
 80088e4:	ee08 0a10 	vmov	s16, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 81b1 	beq.w	8008c50 <_dtoa_r+0xbc0>
 80088ee:	2300      	movs	r3, #0
 80088f0:	4639      	mov	r1, r7
 80088f2:	220a      	movs	r2, #10
 80088f4:	4620      	mov	r0, r4
 80088f6:	f000 fdc9 	bl	800948c <__multadd>
 80088fa:	9b02      	ldr	r3, [sp, #8]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	4607      	mov	r7, r0
 8008900:	f300 808e 	bgt.w	8008a20 <_dtoa_r+0x990>
 8008904:	9b06      	ldr	r3, [sp, #24]
 8008906:	2b02      	cmp	r3, #2
 8008908:	dc51      	bgt.n	80089ae <_dtoa_r+0x91e>
 800890a:	e089      	b.n	8008a20 <_dtoa_r+0x990>
 800890c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800890e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008912:	e74b      	b.n	80087ac <_dtoa_r+0x71c>
 8008914:	9b03      	ldr	r3, [sp, #12]
 8008916:	1e5e      	subs	r6, r3, #1
 8008918:	9b07      	ldr	r3, [sp, #28]
 800891a:	42b3      	cmp	r3, r6
 800891c:	bfbf      	itttt	lt
 800891e:	9b07      	ldrlt	r3, [sp, #28]
 8008920:	9607      	strlt	r6, [sp, #28]
 8008922:	1af2      	sublt	r2, r6, r3
 8008924:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008926:	bfb6      	itet	lt
 8008928:	189b      	addlt	r3, r3, r2
 800892a:	1b9e      	subge	r6, r3, r6
 800892c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800892e:	9b03      	ldr	r3, [sp, #12]
 8008930:	bfb8      	it	lt
 8008932:	2600      	movlt	r6, #0
 8008934:	2b00      	cmp	r3, #0
 8008936:	bfb7      	itett	lt
 8008938:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800893c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008940:	1a9d      	sublt	r5, r3, r2
 8008942:	2300      	movlt	r3, #0
 8008944:	e734      	b.n	80087b0 <_dtoa_r+0x720>
 8008946:	9e07      	ldr	r6, [sp, #28]
 8008948:	9d04      	ldr	r5, [sp, #16]
 800894a:	9f08      	ldr	r7, [sp, #32]
 800894c:	e73b      	b.n	80087c6 <_dtoa_r+0x736>
 800894e:	9a07      	ldr	r2, [sp, #28]
 8008950:	e767      	b.n	8008822 <_dtoa_r+0x792>
 8008952:	9b06      	ldr	r3, [sp, #24]
 8008954:	2b01      	cmp	r3, #1
 8008956:	dc18      	bgt.n	800898a <_dtoa_r+0x8fa>
 8008958:	f1ba 0f00 	cmp.w	sl, #0
 800895c:	d115      	bne.n	800898a <_dtoa_r+0x8fa>
 800895e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008962:	b993      	cbnz	r3, 800898a <_dtoa_r+0x8fa>
 8008964:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008968:	0d1b      	lsrs	r3, r3, #20
 800896a:	051b      	lsls	r3, r3, #20
 800896c:	b183      	cbz	r3, 8008990 <_dtoa_r+0x900>
 800896e:	9b04      	ldr	r3, [sp, #16]
 8008970:	3301      	adds	r3, #1
 8008972:	9304      	str	r3, [sp, #16]
 8008974:	9b05      	ldr	r3, [sp, #20]
 8008976:	3301      	adds	r3, #1
 8008978:	9305      	str	r3, [sp, #20]
 800897a:	f04f 0801 	mov.w	r8, #1
 800897e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008980:	2b00      	cmp	r3, #0
 8008982:	f47f af6a 	bne.w	800885a <_dtoa_r+0x7ca>
 8008986:	2001      	movs	r0, #1
 8008988:	e76f      	b.n	800886a <_dtoa_r+0x7da>
 800898a:	f04f 0800 	mov.w	r8, #0
 800898e:	e7f6      	b.n	800897e <_dtoa_r+0x8ee>
 8008990:	4698      	mov	r8, r3
 8008992:	e7f4      	b.n	800897e <_dtoa_r+0x8ee>
 8008994:	f43f af7d 	beq.w	8008892 <_dtoa_r+0x802>
 8008998:	4618      	mov	r0, r3
 800899a:	301c      	adds	r0, #28
 800899c:	e772      	b.n	8008884 <_dtoa_r+0x7f4>
 800899e:	9b03      	ldr	r3, [sp, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	dc37      	bgt.n	8008a14 <_dtoa_r+0x984>
 80089a4:	9b06      	ldr	r3, [sp, #24]
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	dd34      	ble.n	8008a14 <_dtoa_r+0x984>
 80089aa:	9b03      	ldr	r3, [sp, #12]
 80089ac:	9302      	str	r3, [sp, #8]
 80089ae:	9b02      	ldr	r3, [sp, #8]
 80089b0:	b96b      	cbnz	r3, 80089ce <_dtoa_r+0x93e>
 80089b2:	4631      	mov	r1, r6
 80089b4:	2205      	movs	r2, #5
 80089b6:	4620      	mov	r0, r4
 80089b8:	f000 fd68 	bl	800948c <__multadd>
 80089bc:	4601      	mov	r1, r0
 80089be:	4606      	mov	r6, r0
 80089c0:	ee18 0a10 	vmov	r0, s16
 80089c4:	f000 ffcc 	bl	8009960 <__mcmp>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	f73f adbb 	bgt.w	8008544 <_dtoa_r+0x4b4>
 80089ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d0:	9d01      	ldr	r5, [sp, #4]
 80089d2:	43db      	mvns	r3, r3
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	f04f 0800 	mov.w	r8, #0
 80089da:	4631      	mov	r1, r6
 80089dc:	4620      	mov	r0, r4
 80089de:	f000 fd33 	bl	8009448 <_Bfree>
 80089e2:	2f00      	cmp	r7, #0
 80089e4:	f43f aea4 	beq.w	8008730 <_dtoa_r+0x6a0>
 80089e8:	f1b8 0f00 	cmp.w	r8, #0
 80089ec:	d005      	beq.n	80089fa <_dtoa_r+0x96a>
 80089ee:	45b8      	cmp	r8, r7
 80089f0:	d003      	beq.n	80089fa <_dtoa_r+0x96a>
 80089f2:	4641      	mov	r1, r8
 80089f4:	4620      	mov	r0, r4
 80089f6:	f000 fd27 	bl	8009448 <_Bfree>
 80089fa:	4639      	mov	r1, r7
 80089fc:	4620      	mov	r0, r4
 80089fe:	f000 fd23 	bl	8009448 <_Bfree>
 8008a02:	e695      	b.n	8008730 <_dtoa_r+0x6a0>
 8008a04:	2600      	movs	r6, #0
 8008a06:	4637      	mov	r7, r6
 8008a08:	e7e1      	b.n	80089ce <_dtoa_r+0x93e>
 8008a0a:	9700      	str	r7, [sp, #0]
 8008a0c:	4637      	mov	r7, r6
 8008a0e:	e599      	b.n	8008544 <_dtoa_r+0x4b4>
 8008a10:	40240000 	.word	0x40240000
 8008a14:	9b08      	ldr	r3, [sp, #32]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 80ca 	beq.w	8008bb0 <_dtoa_r+0xb20>
 8008a1c:	9b03      	ldr	r3, [sp, #12]
 8008a1e:	9302      	str	r3, [sp, #8]
 8008a20:	2d00      	cmp	r5, #0
 8008a22:	dd05      	ble.n	8008a30 <_dtoa_r+0x9a0>
 8008a24:	4639      	mov	r1, r7
 8008a26:	462a      	mov	r2, r5
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f000 ff29 	bl	8009880 <__lshift>
 8008a2e:	4607      	mov	r7, r0
 8008a30:	f1b8 0f00 	cmp.w	r8, #0
 8008a34:	d05b      	beq.n	8008aee <_dtoa_r+0xa5e>
 8008a36:	6879      	ldr	r1, [r7, #4]
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 fcc5 	bl	80093c8 <_Balloc>
 8008a3e:	4605      	mov	r5, r0
 8008a40:	b928      	cbnz	r0, 8008a4e <_dtoa_r+0x9be>
 8008a42:	4b87      	ldr	r3, [pc, #540]	; (8008c60 <_dtoa_r+0xbd0>)
 8008a44:	4602      	mov	r2, r0
 8008a46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a4a:	f7ff bb3b 	b.w	80080c4 <_dtoa_r+0x34>
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	3202      	adds	r2, #2
 8008a52:	0092      	lsls	r2, r2, #2
 8008a54:	f107 010c 	add.w	r1, r7, #12
 8008a58:	300c      	adds	r0, #12
 8008a5a:	f000 fca7 	bl	80093ac <memcpy>
 8008a5e:	2201      	movs	r2, #1
 8008a60:	4629      	mov	r1, r5
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 ff0c 	bl	8009880 <__lshift>
 8008a68:	9b01      	ldr	r3, [sp, #4]
 8008a6a:	f103 0901 	add.w	r9, r3, #1
 8008a6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008a72:	4413      	add	r3, r2
 8008a74:	9305      	str	r3, [sp, #20]
 8008a76:	f00a 0301 	and.w	r3, sl, #1
 8008a7a:	46b8      	mov	r8, r7
 8008a7c:	9304      	str	r3, [sp, #16]
 8008a7e:	4607      	mov	r7, r0
 8008a80:	4631      	mov	r1, r6
 8008a82:	ee18 0a10 	vmov	r0, s16
 8008a86:	f7ff fa75 	bl	8007f74 <quorem>
 8008a8a:	4641      	mov	r1, r8
 8008a8c:	9002      	str	r0, [sp, #8]
 8008a8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a92:	ee18 0a10 	vmov	r0, s16
 8008a96:	f000 ff63 	bl	8009960 <__mcmp>
 8008a9a:	463a      	mov	r2, r7
 8008a9c:	9003      	str	r0, [sp, #12]
 8008a9e:	4631      	mov	r1, r6
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 ff79 	bl	8009998 <__mdiff>
 8008aa6:	68c2      	ldr	r2, [r0, #12]
 8008aa8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008aac:	4605      	mov	r5, r0
 8008aae:	bb02      	cbnz	r2, 8008af2 <_dtoa_r+0xa62>
 8008ab0:	4601      	mov	r1, r0
 8008ab2:	ee18 0a10 	vmov	r0, s16
 8008ab6:	f000 ff53 	bl	8009960 <__mcmp>
 8008aba:	4602      	mov	r2, r0
 8008abc:	4629      	mov	r1, r5
 8008abe:	4620      	mov	r0, r4
 8008ac0:	9207      	str	r2, [sp, #28]
 8008ac2:	f000 fcc1 	bl	8009448 <_Bfree>
 8008ac6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008aca:	ea43 0102 	orr.w	r1, r3, r2
 8008ace:	9b04      	ldr	r3, [sp, #16]
 8008ad0:	430b      	orrs	r3, r1
 8008ad2:	464d      	mov	r5, r9
 8008ad4:	d10f      	bne.n	8008af6 <_dtoa_r+0xa66>
 8008ad6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ada:	d02a      	beq.n	8008b32 <_dtoa_r+0xaa2>
 8008adc:	9b03      	ldr	r3, [sp, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	dd02      	ble.n	8008ae8 <_dtoa_r+0xa58>
 8008ae2:	9b02      	ldr	r3, [sp, #8]
 8008ae4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008ae8:	f88b a000 	strb.w	sl, [fp]
 8008aec:	e775      	b.n	80089da <_dtoa_r+0x94a>
 8008aee:	4638      	mov	r0, r7
 8008af0:	e7ba      	b.n	8008a68 <_dtoa_r+0x9d8>
 8008af2:	2201      	movs	r2, #1
 8008af4:	e7e2      	b.n	8008abc <_dtoa_r+0xa2c>
 8008af6:	9b03      	ldr	r3, [sp, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	db04      	blt.n	8008b06 <_dtoa_r+0xa76>
 8008afc:	9906      	ldr	r1, [sp, #24]
 8008afe:	430b      	orrs	r3, r1
 8008b00:	9904      	ldr	r1, [sp, #16]
 8008b02:	430b      	orrs	r3, r1
 8008b04:	d122      	bne.n	8008b4c <_dtoa_r+0xabc>
 8008b06:	2a00      	cmp	r2, #0
 8008b08:	ddee      	ble.n	8008ae8 <_dtoa_r+0xa58>
 8008b0a:	ee18 1a10 	vmov	r1, s16
 8008b0e:	2201      	movs	r2, #1
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 feb5 	bl	8009880 <__lshift>
 8008b16:	4631      	mov	r1, r6
 8008b18:	ee08 0a10 	vmov	s16, r0
 8008b1c:	f000 ff20 	bl	8009960 <__mcmp>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	dc03      	bgt.n	8008b2c <_dtoa_r+0xa9c>
 8008b24:	d1e0      	bne.n	8008ae8 <_dtoa_r+0xa58>
 8008b26:	f01a 0f01 	tst.w	sl, #1
 8008b2a:	d0dd      	beq.n	8008ae8 <_dtoa_r+0xa58>
 8008b2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b30:	d1d7      	bne.n	8008ae2 <_dtoa_r+0xa52>
 8008b32:	2339      	movs	r3, #57	; 0x39
 8008b34:	f88b 3000 	strb.w	r3, [fp]
 8008b38:	462b      	mov	r3, r5
 8008b3a:	461d      	mov	r5, r3
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008b42:	2a39      	cmp	r2, #57	; 0x39
 8008b44:	d071      	beq.n	8008c2a <_dtoa_r+0xb9a>
 8008b46:	3201      	adds	r2, #1
 8008b48:	701a      	strb	r2, [r3, #0]
 8008b4a:	e746      	b.n	80089da <_dtoa_r+0x94a>
 8008b4c:	2a00      	cmp	r2, #0
 8008b4e:	dd07      	ble.n	8008b60 <_dtoa_r+0xad0>
 8008b50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b54:	d0ed      	beq.n	8008b32 <_dtoa_r+0xaa2>
 8008b56:	f10a 0301 	add.w	r3, sl, #1
 8008b5a:	f88b 3000 	strb.w	r3, [fp]
 8008b5e:	e73c      	b.n	80089da <_dtoa_r+0x94a>
 8008b60:	9b05      	ldr	r3, [sp, #20]
 8008b62:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008b66:	4599      	cmp	r9, r3
 8008b68:	d047      	beq.n	8008bfa <_dtoa_r+0xb6a>
 8008b6a:	ee18 1a10 	vmov	r1, s16
 8008b6e:	2300      	movs	r3, #0
 8008b70:	220a      	movs	r2, #10
 8008b72:	4620      	mov	r0, r4
 8008b74:	f000 fc8a 	bl	800948c <__multadd>
 8008b78:	45b8      	cmp	r8, r7
 8008b7a:	ee08 0a10 	vmov	s16, r0
 8008b7e:	f04f 0300 	mov.w	r3, #0
 8008b82:	f04f 020a 	mov.w	r2, #10
 8008b86:	4641      	mov	r1, r8
 8008b88:	4620      	mov	r0, r4
 8008b8a:	d106      	bne.n	8008b9a <_dtoa_r+0xb0a>
 8008b8c:	f000 fc7e 	bl	800948c <__multadd>
 8008b90:	4680      	mov	r8, r0
 8008b92:	4607      	mov	r7, r0
 8008b94:	f109 0901 	add.w	r9, r9, #1
 8008b98:	e772      	b.n	8008a80 <_dtoa_r+0x9f0>
 8008b9a:	f000 fc77 	bl	800948c <__multadd>
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	4680      	mov	r8, r0
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	220a      	movs	r2, #10
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f000 fc70 	bl	800948c <__multadd>
 8008bac:	4607      	mov	r7, r0
 8008bae:	e7f1      	b.n	8008b94 <_dtoa_r+0xb04>
 8008bb0:	9b03      	ldr	r3, [sp, #12]
 8008bb2:	9302      	str	r3, [sp, #8]
 8008bb4:	9d01      	ldr	r5, [sp, #4]
 8008bb6:	ee18 0a10 	vmov	r0, s16
 8008bba:	4631      	mov	r1, r6
 8008bbc:	f7ff f9da 	bl	8007f74 <quorem>
 8008bc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008bc4:	9b01      	ldr	r3, [sp, #4]
 8008bc6:	f805 ab01 	strb.w	sl, [r5], #1
 8008bca:	1aea      	subs	r2, r5, r3
 8008bcc:	9b02      	ldr	r3, [sp, #8]
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	dd09      	ble.n	8008be6 <_dtoa_r+0xb56>
 8008bd2:	ee18 1a10 	vmov	r1, s16
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	220a      	movs	r2, #10
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f000 fc56 	bl	800948c <__multadd>
 8008be0:	ee08 0a10 	vmov	s16, r0
 8008be4:	e7e7      	b.n	8008bb6 <_dtoa_r+0xb26>
 8008be6:	9b02      	ldr	r3, [sp, #8]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	bfc8      	it	gt
 8008bec:	461d      	movgt	r5, r3
 8008bee:	9b01      	ldr	r3, [sp, #4]
 8008bf0:	bfd8      	it	le
 8008bf2:	2501      	movle	r5, #1
 8008bf4:	441d      	add	r5, r3
 8008bf6:	f04f 0800 	mov.w	r8, #0
 8008bfa:	ee18 1a10 	vmov	r1, s16
 8008bfe:	2201      	movs	r2, #1
 8008c00:	4620      	mov	r0, r4
 8008c02:	f000 fe3d 	bl	8009880 <__lshift>
 8008c06:	4631      	mov	r1, r6
 8008c08:	ee08 0a10 	vmov	s16, r0
 8008c0c:	f000 fea8 	bl	8009960 <__mcmp>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	dc91      	bgt.n	8008b38 <_dtoa_r+0xaa8>
 8008c14:	d102      	bne.n	8008c1c <_dtoa_r+0xb8c>
 8008c16:	f01a 0f01 	tst.w	sl, #1
 8008c1a:	d18d      	bne.n	8008b38 <_dtoa_r+0xaa8>
 8008c1c:	462b      	mov	r3, r5
 8008c1e:	461d      	mov	r5, r3
 8008c20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c24:	2a30      	cmp	r2, #48	; 0x30
 8008c26:	d0fa      	beq.n	8008c1e <_dtoa_r+0xb8e>
 8008c28:	e6d7      	b.n	80089da <_dtoa_r+0x94a>
 8008c2a:	9a01      	ldr	r2, [sp, #4]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d184      	bne.n	8008b3a <_dtoa_r+0xaaa>
 8008c30:	9b00      	ldr	r3, [sp, #0]
 8008c32:	3301      	adds	r3, #1
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	2331      	movs	r3, #49	; 0x31
 8008c38:	7013      	strb	r3, [r2, #0]
 8008c3a:	e6ce      	b.n	80089da <_dtoa_r+0x94a>
 8008c3c:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <_dtoa_r+0xbd4>)
 8008c3e:	f7ff ba95 	b.w	800816c <_dtoa_r+0xdc>
 8008c42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f47f aa6e 	bne.w	8008126 <_dtoa_r+0x96>
 8008c4a:	4b07      	ldr	r3, [pc, #28]	; (8008c68 <_dtoa_r+0xbd8>)
 8008c4c:	f7ff ba8e 	b.w	800816c <_dtoa_r+0xdc>
 8008c50:	9b02      	ldr	r3, [sp, #8]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	dcae      	bgt.n	8008bb4 <_dtoa_r+0xb24>
 8008c56:	9b06      	ldr	r3, [sp, #24]
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	f73f aea8 	bgt.w	80089ae <_dtoa_r+0x91e>
 8008c5e:	e7a9      	b.n	8008bb4 <_dtoa_r+0xb24>
 8008c60:	0800b048 	.word	0x0800b048
 8008c64:	0800ae48 	.word	0x0800ae48
 8008c68:	0800afc9 	.word	0x0800afc9

08008c6c <rshift>:
 8008c6c:	6903      	ldr	r3, [r0, #16]
 8008c6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008c72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c76:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008c7a:	f100 0414 	add.w	r4, r0, #20
 8008c7e:	dd45      	ble.n	8008d0c <rshift+0xa0>
 8008c80:	f011 011f 	ands.w	r1, r1, #31
 8008c84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008c88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008c8c:	d10c      	bne.n	8008ca8 <rshift+0x3c>
 8008c8e:	f100 0710 	add.w	r7, r0, #16
 8008c92:	4629      	mov	r1, r5
 8008c94:	42b1      	cmp	r1, r6
 8008c96:	d334      	bcc.n	8008d02 <rshift+0x96>
 8008c98:	1a9b      	subs	r3, r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	1eea      	subs	r2, r5, #3
 8008c9e:	4296      	cmp	r6, r2
 8008ca0:	bf38      	it	cc
 8008ca2:	2300      	movcc	r3, #0
 8008ca4:	4423      	add	r3, r4
 8008ca6:	e015      	b.n	8008cd4 <rshift+0x68>
 8008ca8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008cac:	f1c1 0820 	rsb	r8, r1, #32
 8008cb0:	40cf      	lsrs	r7, r1
 8008cb2:	f105 0e04 	add.w	lr, r5, #4
 8008cb6:	46a1      	mov	r9, r4
 8008cb8:	4576      	cmp	r6, lr
 8008cba:	46f4      	mov	ip, lr
 8008cbc:	d815      	bhi.n	8008cea <rshift+0x7e>
 8008cbe:	1a9a      	subs	r2, r3, r2
 8008cc0:	0092      	lsls	r2, r2, #2
 8008cc2:	3a04      	subs	r2, #4
 8008cc4:	3501      	adds	r5, #1
 8008cc6:	42ae      	cmp	r6, r5
 8008cc8:	bf38      	it	cc
 8008cca:	2200      	movcc	r2, #0
 8008ccc:	18a3      	adds	r3, r4, r2
 8008cce:	50a7      	str	r7, [r4, r2]
 8008cd0:	b107      	cbz	r7, 8008cd4 <rshift+0x68>
 8008cd2:	3304      	adds	r3, #4
 8008cd4:	1b1a      	subs	r2, r3, r4
 8008cd6:	42a3      	cmp	r3, r4
 8008cd8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008cdc:	bf08      	it	eq
 8008cde:	2300      	moveq	r3, #0
 8008ce0:	6102      	str	r2, [r0, #16]
 8008ce2:	bf08      	it	eq
 8008ce4:	6143      	streq	r3, [r0, #20]
 8008ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cea:	f8dc c000 	ldr.w	ip, [ip]
 8008cee:	fa0c fc08 	lsl.w	ip, ip, r8
 8008cf2:	ea4c 0707 	orr.w	r7, ip, r7
 8008cf6:	f849 7b04 	str.w	r7, [r9], #4
 8008cfa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008cfe:	40cf      	lsrs	r7, r1
 8008d00:	e7da      	b.n	8008cb8 <rshift+0x4c>
 8008d02:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d06:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d0a:	e7c3      	b.n	8008c94 <rshift+0x28>
 8008d0c:	4623      	mov	r3, r4
 8008d0e:	e7e1      	b.n	8008cd4 <rshift+0x68>

08008d10 <__hexdig_fun>:
 8008d10:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008d14:	2b09      	cmp	r3, #9
 8008d16:	d802      	bhi.n	8008d1e <__hexdig_fun+0xe>
 8008d18:	3820      	subs	r0, #32
 8008d1a:	b2c0      	uxtb	r0, r0
 8008d1c:	4770      	bx	lr
 8008d1e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008d22:	2b05      	cmp	r3, #5
 8008d24:	d801      	bhi.n	8008d2a <__hexdig_fun+0x1a>
 8008d26:	3847      	subs	r0, #71	; 0x47
 8008d28:	e7f7      	b.n	8008d1a <__hexdig_fun+0xa>
 8008d2a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008d2e:	2b05      	cmp	r3, #5
 8008d30:	d801      	bhi.n	8008d36 <__hexdig_fun+0x26>
 8008d32:	3827      	subs	r0, #39	; 0x27
 8008d34:	e7f1      	b.n	8008d1a <__hexdig_fun+0xa>
 8008d36:	2000      	movs	r0, #0
 8008d38:	4770      	bx	lr
	...

08008d3c <__gethex>:
 8008d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d40:	ed2d 8b02 	vpush	{d8}
 8008d44:	b089      	sub	sp, #36	; 0x24
 8008d46:	ee08 0a10 	vmov	s16, r0
 8008d4a:	9304      	str	r3, [sp, #16]
 8008d4c:	4bb4      	ldr	r3, [pc, #720]	; (8009020 <__gethex+0x2e4>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	9301      	str	r3, [sp, #4]
 8008d52:	4618      	mov	r0, r3
 8008d54:	468b      	mov	fp, r1
 8008d56:	4690      	mov	r8, r2
 8008d58:	f7f7 fa3a 	bl	80001d0 <strlen>
 8008d5c:	9b01      	ldr	r3, [sp, #4]
 8008d5e:	f8db 2000 	ldr.w	r2, [fp]
 8008d62:	4403      	add	r3, r0
 8008d64:	4682      	mov	sl, r0
 8008d66:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008d6a:	9305      	str	r3, [sp, #20]
 8008d6c:	1c93      	adds	r3, r2, #2
 8008d6e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008d72:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008d76:	32fe      	adds	r2, #254	; 0xfe
 8008d78:	18d1      	adds	r1, r2, r3
 8008d7a:	461f      	mov	r7, r3
 8008d7c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008d80:	9100      	str	r1, [sp, #0]
 8008d82:	2830      	cmp	r0, #48	; 0x30
 8008d84:	d0f8      	beq.n	8008d78 <__gethex+0x3c>
 8008d86:	f7ff ffc3 	bl	8008d10 <__hexdig_fun>
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d13a      	bne.n	8008e06 <__gethex+0xca>
 8008d90:	9901      	ldr	r1, [sp, #4]
 8008d92:	4652      	mov	r2, sl
 8008d94:	4638      	mov	r0, r7
 8008d96:	f7fe fa0a 	bl	80071ae <strncmp>
 8008d9a:	4605      	mov	r5, r0
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	d168      	bne.n	8008e72 <__gethex+0x136>
 8008da0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008da4:	eb07 060a 	add.w	r6, r7, sl
 8008da8:	f7ff ffb2 	bl	8008d10 <__hexdig_fun>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d062      	beq.n	8008e76 <__gethex+0x13a>
 8008db0:	4633      	mov	r3, r6
 8008db2:	7818      	ldrb	r0, [r3, #0]
 8008db4:	2830      	cmp	r0, #48	; 0x30
 8008db6:	461f      	mov	r7, r3
 8008db8:	f103 0301 	add.w	r3, r3, #1
 8008dbc:	d0f9      	beq.n	8008db2 <__gethex+0x76>
 8008dbe:	f7ff ffa7 	bl	8008d10 <__hexdig_fun>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	fab0 f480 	clz	r4, r0
 8008dc8:	0964      	lsrs	r4, r4, #5
 8008dca:	4635      	mov	r5, r6
 8008dcc:	9300      	str	r3, [sp, #0]
 8008dce:	463a      	mov	r2, r7
 8008dd0:	4616      	mov	r6, r2
 8008dd2:	3201      	adds	r2, #1
 8008dd4:	7830      	ldrb	r0, [r6, #0]
 8008dd6:	f7ff ff9b 	bl	8008d10 <__hexdig_fun>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d1f8      	bne.n	8008dd0 <__gethex+0x94>
 8008dde:	9901      	ldr	r1, [sp, #4]
 8008de0:	4652      	mov	r2, sl
 8008de2:	4630      	mov	r0, r6
 8008de4:	f7fe f9e3 	bl	80071ae <strncmp>
 8008de8:	b980      	cbnz	r0, 8008e0c <__gethex+0xd0>
 8008dea:	b94d      	cbnz	r5, 8008e00 <__gethex+0xc4>
 8008dec:	eb06 050a 	add.w	r5, r6, sl
 8008df0:	462a      	mov	r2, r5
 8008df2:	4616      	mov	r6, r2
 8008df4:	3201      	adds	r2, #1
 8008df6:	7830      	ldrb	r0, [r6, #0]
 8008df8:	f7ff ff8a 	bl	8008d10 <__hexdig_fun>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d1f8      	bne.n	8008df2 <__gethex+0xb6>
 8008e00:	1bad      	subs	r5, r5, r6
 8008e02:	00ad      	lsls	r5, r5, #2
 8008e04:	e004      	b.n	8008e10 <__gethex+0xd4>
 8008e06:	2400      	movs	r4, #0
 8008e08:	4625      	mov	r5, r4
 8008e0a:	e7e0      	b.n	8008dce <__gethex+0x92>
 8008e0c:	2d00      	cmp	r5, #0
 8008e0e:	d1f7      	bne.n	8008e00 <__gethex+0xc4>
 8008e10:	7833      	ldrb	r3, [r6, #0]
 8008e12:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e16:	2b50      	cmp	r3, #80	; 0x50
 8008e18:	d13b      	bne.n	8008e92 <__gethex+0x156>
 8008e1a:	7873      	ldrb	r3, [r6, #1]
 8008e1c:	2b2b      	cmp	r3, #43	; 0x2b
 8008e1e:	d02c      	beq.n	8008e7a <__gethex+0x13e>
 8008e20:	2b2d      	cmp	r3, #45	; 0x2d
 8008e22:	d02e      	beq.n	8008e82 <__gethex+0x146>
 8008e24:	1c71      	adds	r1, r6, #1
 8008e26:	f04f 0900 	mov.w	r9, #0
 8008e2a:	7808      	ldrb	r0, [r1, #0]
 8008e2c:	f7ff ff70 	bl	8008d10 <__hexdig_fun>
 8008e30:	1e43      	subs	r3, r0, #1
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	2b18      	cmp	r3, #24
 8008e36:	d82c      	bhi.n	8008e92 <__gethex+0x156>
 8008e38:	f1a0 0210 	sub.w	r2, r0, #16
 8008e3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e40:	f7ff ff66 	bl	8008d10 <__hexdig_fun>
 8008e44:	1e43      	subs	r3, r0, #1
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b18      	cmp	r3, #24
 8008e4a:	d91d      	bls.n	8008e88 <__gethex+0x14c>
 8008e4c:	f1b9 0f00 	cmp.w	r9, #0
 8008e50:	d000      	beq.n	8008e54 <__gethex+0x118>
 8008e52:	4252      	negs	r2, r2
 8008e54:	4415      	add	r5, r2
 8008e56:	f8cb 1000 	str.w	r1, [fp]
 8008e5a:	b1e4      	cbz	r4, 8008e96 <__gethex+0x15a>
 8008e5c:	9b00      	ldr	r3, [sp, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	bf14      	ite	ne
 8008e62:	2700      	movne	r7, #0
 8008e64:	2706      	moveq	r7, #6
 8008e66:	4638      	mov	r0, r7
 8008e68:	b009      	add	sp, #36	; 0x24
 8008e6a:	ecbd 8b02 	vpop	{d8}
 8008e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e72:	463e      	mov	r6, r7
 8008e74:	4625      	mov	r5, r4
 8008e76:	2401      	movs	r4, #1
 8008e78:	e7ca      	b.n	8008e10 <__gethex+0xd4>
 8008e7a:	f04f 0900 	mov.w	r9, #0
 8008e7e:	1cb1      	adds	r1, r6, #2
 8008e80:	e7d3      	b.n	8008e2a <__gethex+0xee>
 8008e82:	f04f 0901 	mov.w	r9, #1
 8008e86:	e7fa      	b.n	8008e7e <__gethex+0x142>
 8008e88:	230a      	movs	r3, #10
 8008e8a:	fb03 0202 	mla	r2, r3, r2, r0
 8008e8e:	3a10      	subs	r2, #16
 8008e90:	e7d4      	b.n	8008e3c <__gethex+0x100>
 8008e92:	4631      	mov	r1, r6
 8008e94:	e7df      	b.n	8008e56 <__gethex+0x11a>
 8008e96:	1bf3      	subs	r3, r6, r7
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	2b07      	cmp	r3, #7
 8008e9e:	dc0b      	bgt.n	8008eb8 <__gethex+0x17c>
 8008ea0:	ee18 0a10 	vmov	r0, s16
 8008ea4:	f000 fa90 	bl	80093c8 <_Balloc>
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	b940      	cbnz	r0, 8008ebe <__gethex+0x182>
 8008eac:	4b5d      	ldr	r3, [pc, #372]	; (8009024 <__gethex+0x2e8>)
 8008eae:	4602      	mov	r2, r0
 8008eb0:	21de      	movs	r1, #222	; 0xde
 8008eb2:	485d      	ldr	r0, [pc, #372]	; (8009028 <__gethex+0x2ec>)
 8008eb4:	f001 f9d6 	bl	800a264 <__assert_func>
 8008eb8:	3101      	adds	r1, #1
 8008eba:	105b      	asrs	r3, r3, #1
 8008ebc:	e7ee      	b.n	8008e9c <__gethex+0x160>
 8008ebe:	f100 0914 	add.w	r9, r0, #20
 8008ec2:	f04f 0b00 	mov.w	fp, #0
 8008ec6:	f1ca 0301 	rsb	r3, sl, #1
 8008eca:	f8cd 9008 	str.w	r9, [sp, #8]
 8008ece:	f8cd b000 	str.w	fp, [sp]
 8008ed2:	9306      	str	r3, [sp, #24]
 8008ed4:	42b7      	cmp	r7, r6
 8008ed6:	d340      	bcc.n	8008f5a <__gethex+0x21e>
 8008ed8:	9802      	ldr	r0, [sp, #8]
 8008eda:	9b00      	ldr	r3, [sp, #0]
 8008edc:	f840 3b04 	str.w	r3, [r0], #4
 8008ee0:	eba0 0009 	sub.w	r0, r0, r9
 8008ee4:	1080      	asrs	r0, r0, #2
 8008ee6:	0146      	lsls	r6, r0, #5
 8008ee8:	6120      	str	r0, [r4, #16]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 fb5e 	bl	80095ac <__hi0bits>
 8008ef0:	1a30      	subs	r0, r6, r0
 8008ef2:	f8d8 6000 	ldr.w	r6, [r8]
 8008ef6:	42b0      	cmp	r0, r6
 8008ef8:	dd63      	ble.n	8008fc2 <__gethex+0x286>
 8008efa:	1b87      	subs	r7, r0, r6
 8008efc:	4639      	mov	r1, r7
 8008efe:	4620      	mov	r0, r4
 8008f00:	f000 ff02 	bl	8009d08 <__any_on>
 8008f04:	4682      	mov	sl, r0
 8008f06:	b1a8      	cbz	r0, 8008f34 <__gethex+0x1f8>
 8008f08:	1e7b      	subs	r3, r7, #1
 8008f0a:	1159      	asrs	r1, r3, #5
 8008f0c:	f003 021f 	and.w	r2, r3, #31
 8008f10:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008f14:	f04f 0a01 	mov.w	sl, #1
 8008f18:	fa0a f202 	lsl.w	r2, sl, r2
 8008f1c:	420a      	tst	r2, r1
 8008f1e:	d009      	beq.n	8008f34 <__gethex+0x1f8>
 8008f20:	4553      	cmp	r3, sl
 8008f22:	dd05      	ble.n	8008f30 <__gethex+0x1f4>
 8008f24:	1eb9      	subs	r1, r7, #2
 8008f26:	4620      	mov	r0, r4
 8008f28:	f000 feee 	bl	8009d08 <__any_on>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d145      	bne.n	8008fbc <__gethex+0x280>
 8008f30:	f04f 0a02 	mov.w	sl, #2
 8008f34:	4639      	mov	r1, r7
 8008f36:	4620      	mov	r0, r4
 8008f38:	f7ff fe98 	bl	8008c6c <rshift>
 8008f3c:	443d      	add	r5, r7
 8008f3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f42:	42ab      	cmp	r3, r5
 8008f44:	da4c      	bge.n	8008fe0 <__gethex+0x2a4>
 8008f46:	ee18 0a10 	vmov	r0, s16
 8008f4a:	4621      	mov	r1, r4
 8008f4c:	f000 fa7c 	bl	8009448 <_Bfree>
 8008f50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f52:	2300      	movs	r3, #0
 8008f54:	6013      	str	r3, [r2, #0]
 8008f56:	27a3      	movs	r7, #163	; 0xa3
 8008f58:	e785      	b.n	8008e66 <__gethex+0x12a>
 8008f5a:	1e73      	subs	r3, r6, #1
 8008f5c:	9a05      	ldr	r2, [sp, #20]
 8008f5e:	9303      	str	r3, [sp, #12]
 8008f60:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d019      	beq.n	8008f9c <__gethex+0x260>
 8008f68:	f1bb 0f20 	cmp.w	fp, #32
 8008f6c:	d107      	bne.n	8008f7e <__gethex+0x242>
 8008f6e:	9b02      	ldr	r3, [sp, #8]
 8008f70:	9a00      	ldr	r2, [sp, #0]
 8008f72:	f843 2b04 	str.w	r2, [r3], #4
 8008f76:	9302      	str	r3, [sp, #8]
 8008f78:	2300      	movs	r3, #0
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	469b      	mov	fp, r3
 8008f7e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008f82:	f7ff fec5 	bl	8008d10 <__hexdig_fun>
 8008f86:	9b00      	ldr	r3, [sp, #0]
 8008f88:	f000 000f 	and.w	r0, r0, #15
 8008f8c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008f90:	4303      	orrs	r3, r0
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	f10b 0b04 	add.w	fp, fp, #4
 8008f98:	9b03      	ldr	r3, [sp, #12]
 8008f9a:	e00d      	b.n	8008fb8 <__gethex+0x27c>
 8008f9c:	9b03      	ldr	r3, [sp, #12]
 8008f9e:	9a06      	ldr	r2, [sp, #24]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	42bb      	cmp	r3, r7
 8008fa4:	d3e0      	bcc.n	8008f68 <__gethex+0x22c>
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	9901      	ldr	r1, [sp, #4]
 8008faa:	9307      	str	r3, [sp, #28]
 8008fac:	4652      	mov	r2, sl
 8008fae:	f7fe f8fe 	bl	80071ae <strncmp>
 8008fb2:	9b07      	ldr	r3, [sp, #28]
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d1d7      	bne.n	8008f68 <__gethex+0x22c>
 8008fb8:	461e      	mov	r6, r3
 8008fba:	e78b      	b.n	8008ed4 <__gethex+0x198>
 8008fbc:	f04f 0a03 	mov.w	sl, #3
 8008fc0:	e7b8      	b.n	8008f34 <__gethex+0x1f8>
 8008fc2:	da0a      	bge.n	8008fda <__gethex+0x29e>
 8008fc4:	1a37      	subs	r7, r6, r0
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	ee18 0a10 	vmov	r0, s16
 8008fcc:	463a      	mov	r2, r7
 8008fce:	f000 fc57 	bl	8009880 <__lshift>
 8008fd2:	1bed      	subs	r5, r5, r7
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	f100 0914 	add.w	r9, r0, #20
 8008fda:	f04f 0a00 	mov.w	sl, #0
 8008fde:	e7ae      	b.n	8008f3e <__gethex+0x202>
 8008fe0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008fe4:	42a8      	cmp	r0, r5
 8008fe6:	dd72      	ble.n	80090ce <__gethex+0x392>
 8008fe8:	1b45      	subs	r5, r0, r5
 8008fea:	42ae      	cmp	r6, r5
 8008fec:	dc36      	bgt.n	800905c <__gethex+0x320>
 8008fee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d02a      	beq.n	800904c <__gethex+0x310>
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d02c      	beq.n	8009054 <__gethex+0x318>
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d11c      	bne.n	8009038 <__gethex+0x2fc>
 8008ffe:	42ae      	cmp	r6, r5
 8009000:	d11a      	bne.n	8009038 <__gethex+0x2fc>
 8009002:	2e01      	cmp	r6, #1
 8009004:	d112      	bne.n	800902c <__gethex+0x2f0>
 8009006:	9a04      	ldr	r2, [sp, #16]
 8009008:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800900c:	6013      	str	r3, [r2, #0]
 800900e:	2301      	movs	r3, #1
 8009010:	6123      	str	r3, [r4, #16]
 8009012:	f8c9 3000 	str.w	r3, [r9]
 8009016:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009018:	2762      	movs	r7, #98	; 0x62
 800901a:	601c      	str	r4, [r3, #0]
 800901c:	e723      	b.n	8008e66 <__gethex+0x12a>
 800901e:	bf00      	nop
 8009020:	0800b0c0 	.word	0x0800b0c0
 8009024:	0800b048 	.word	0x0800b048
 8009028:	0800b059 	.word	0x0800b059
 800902c:	1e71      	subs	r1, r6, #1
 800902e:	4620      	mov	r0, r4
 8009030:	f000 fe6a 	bl	8009d08 <__any_on>
 8009034:	2800      	cmp	r0, #0
 8009036:	d1e6      	bne.n	8009006 <__gethex+0x2ca>
 8009038:	ee18 0a10 	vmov	r0, s16
 800903c:	4621      	mov	r1, r4
 800903e:	f000 fa03 	bl	8009448 <_Bfree>
 8009042:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009044:	2300      	movs	r3, #0
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	2750      	movs	r7, #80	; 0x50
 800904a:	e70c      	b.n	8008e66 <__gethex+0x12a>
 800904c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1f2      	bne.n	8009038 <__gethex+0x2fc>
 8009052:	e7d8      	b.n	8009006 <__gethex+0x2ca>
 8009054:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1d5      	bne.n	8009006 <__gethex+0x2ca>
 800905a:	e7ed      	b.n	8009038 <__gethex+0x2fc>
 800905c:	1e6f      	subs	r7, r5, #1
 800905e:	f1ba 0f00 	cmp.w	sl, #0
 8009062:	d131      	bne.n	80090c8 <__gethex+0x38c>
 8009064:	b127      	cbz	r7, 8009070 <__gethex+0x334>
 8009066:	4639      	mov	r1, r7
 8009068:	4620      	mov	r0, r4
 800906a:	f000 fe4d 	bl	8009d08 <__any_on>
 800906e:	4682      	mov	sl, r0
 8009070:	117b      	asrs	r3, r7, #5
 8009072:	2101      	movs	r1, #1
 8009074:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009078:	f007 071f 	and.w	r7, r7, #31
 800907c:	fa01 f707 	lsl.w	r7, r1, r7
 8009080:	421f      	tst	r7, r3
 8009082:	4629      	mov	r1, r5
 8009084:	4620      	mov	r0, r4
 8009086:	bf18      	it	ne
 8009088:	f04a 0a02 	orrne.w	sl, sl, #2
 800908c:	1b76      	subs	r6, r6, r5
 800908e:	f7ff fded 	bl	8008c6c <rshift>
 8009092:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009096:	2702      	movs	r7, #2
 8009098:	f1ba 0f00 	cmp.w	sl, #0
 800909c:	d048      	beq.n	8009130 <__gethex+0x3f4>
 800909e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d015      	beq.n	80090d2 <__gethex+0x396>
 80090a6:	2b03      	cmp	r3, #3
 80090a8:	d017      	beq.n	80090da <__gethex+0x39e>
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d109      	bne.n	80090c2 <__gethex+0x386>
 80090ae:	f01a 0f02 	tst.w	sl, #2
 80090b2:	d006      	beq.n	80090c2 <__gethex+0x386>
 80090b4:	f8d9 0000 	ldr.w	r0, [r9]
 80090b8:	ea4a 0a00 	orr.w	sl, sl, r0
 80090bc:	f01a 0f01 	tst.w	sl, #1
 80090c0:	d10e      	bne.n	80090e0 <__gethex+0x3a4>
 80090c2:	f047 0710 	orr.w	r7, r7, #16
 80090c6:	e033      	b.n	8009130 <__gethex+0x3f4>
 80090c8:	f04f 0a01 	mov.w	sl, #1
 80090cc:	e7d0      	b.n	8009070 <__gethex+0x334>
 80090ce:	2701      	movs	r7, #1
 80090d0:	e7e2      	b.n	8009098 <__gethex+0x35c>
 80090d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090d4:	f1c3 0301 	rsb	r3, r3, #1
 80090d8:	9315      	str	r3, [sp, #84]	; 0x54
 80090da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d0f0      	beq.n	80090c2 <__gethex+0x386>
 80090e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80090e4:	f104 0314 	add.w	r3, r4, #20
 80090e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80090ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80090f0:	f04f 0c00 	mov.w	ip, #0
 80090f4:	4618      	mov	r0, r3
 80090f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80090fa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80090fe:	d01c      	beq.n	800913a <__gethex+0x3fe>
 8009100:	3201      	adds	r2, #1
 8009102:	6002      	str	r2, [r0, #0]
 8009104:	2f02      	cmp	r7, #2
 8009106:	f104 0314 	add.w	r3, r4, #20
 800910a:	d13f      	bne.n	800918c <__gethex+0x450>
 800910c:	f8d8 2000 	ldr.w	r2, [r8]
 8009110:	3a01      	subs	r2, #1
 8009112:	42b2      	cmp	r2, r6
 8009114:	d10a      	bne.n	800912c <__gethex+0x3f0>
 8009116:	1171      	asrs	r1, r6, #5
 8009118:	2201      	movs	r2, #1
 800911a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800911e:	f006 061f 	and.w	r6, r6, #31
 8009122:	fa02 f606 	lsl.w	r6, r2, r6
 8009126:	421e      	tst	r6, r3
 8009128:	bf18      	it	ne
 800912a:	4617      	movne	r7, r2
 800912c:	f047 0720 	orr.w	r7, r7, #32
 8009130:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009132:	601c      	str	r4, [r3, #0]
 8009134:	9b04      	ldr	r3, [sp, #16]
 8009136:	601d      	str	r5, [r3, #0]
 8009138:	e695      	b.n	8008e66 <__gethex+0x12a>
 800913a:	4299      	cmp	r1, r3
 800913c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009140:	d8d8      	bhi.n	80090f4 <__gethex+0x3b8>
 8009142:	68a3      	ldr	r3, [r4, #8]
 8009144:	459b      	cmp	fp, r3
 8009146:	db19      	blt.n	800917c <__gethex+0x440>
 8009148:	6861      	ldr	r1, [r4, #4]
 800914a:	ee18 0a10 	vmov	r0, s16
 800914e:	3101      	adds	r1, #1
 8009150:	f000 f93a 	bl	80093c8 <_Balloc>
 8009154:	4681      	mov	r9, r0
 8009156:	b918      	cbnz	r0, 8009160 <__gethex+0x424>
 8009158:	4b1a      	ldr	r3, [pc, #104]	; (80091c4 <__gethex+0x488>)
 800915a:	4602      	mov	r2, r0
 800915c:	2184      	movs	r1, #132	; 0x84
 800915e:	e6a8      	b.n	8008eb2 <__gethex+0x176>
 8009160:	6922      	ldr	r2, [r4, #16]
 8009162:	3202      	adds	r2, #2
 8009164:	f104 010c 	add.w	r1, r4, #12
 8009168:	0092      	lsls	r2, r2, #2
 800916a:	300c      	adds	r0, #12
 800916c:	f000 f91e 	bl	80093ac <memcpy>
 8009170:	4621      	mov	r1, r4
 8009172:	ee18 0a10 	vmov	r0, s16
 8009176:	f000 f967 	bl	8009448 <_Bfree>
 800917a:	464c      	mov	r4, r9
 800917c:	6923      	ldr	r3, [r4, #16]
 800917e:	1c5a      	adds	r2, r3, #1
 8009180:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009184:	6122      	str	r2, [r4, #16]
 8009186:	2201      	movs	r2, #1
 8009188:	615a      	str	r2, [r3, #20]
 800918a:	e7bb      	b.n	8009104 <__gethex+0x3c8>
 800918c:	6922      	ldr	r2, [r4, #16]
 800918e:	455a      	cmp	r2, fp
 8009190:	dd0b      	ble.n	80091aa <__gethex+0x46e>
 8009192:	2101      	movs	r1, #1
 8009194:	4620      	mov	r0, r4
 8009196:	f7ff fd69 	bl	8008c6c <rshift>
 800919a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800919e:	3501      	adds	r5, #1
 80091a0:	42ab      	cmp	r3, r5
 80091a2:	f6ff aed0 	blt.w	8008f46 <__gethex+0x20a>
 80091a6:	2701      	movs	r7, #1
 80091a8:	e7c0      	b.n	800912c <__gethex+0x3f0>
 80091aa:	f016 061f 	ands.w	r6, r6, #31
 80091ae:	d0fa      	beq.n	80091a6 <__gethex+0x46a>
 80091b0:	4453      	add	r3, sl
 80091b2:	f1c6 0620 	rsb	r6, r6, #32
 80091b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80091ba:	f000 f9f7 	bl	80095ac <__hi0bits>
 80091be:	42b0      	cmp	r0, r6
 80091c0:	dbe7      	blt.n	8009192 <__gethex+0x456>
 80091c2:	e7f0      	b.n	80091a6 <__gethex+0x46a>
 80091c4:	0800b048 	.word	0x0800b048

080091c8 <L_shift>:
 80091c8:	f1c2 0208 	rsb	r2, r2, #8
 80091cc:	0092      	lsls	r2, r2, #2
 80091ce:	b570      	push	{r4, r5, r6, lr}
 80091d0:	f1c2 0620 	rsb	r6, r2, #32
 80091d4:	6843      	ldr	r3, [r0, #4]
 80091d6:	6804      	ldr	r4, [r0, #0]
 80091d8:	fa03 f506 	lsl.w	r5, r3, r6
 80091dc:	432c      	orrs	r4, r5
 80091de:	40d3      	lsrs	r3, r2
 80091e0:	6004      	str	r4, [r0, #0]
 80091e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80091e6:	4288      	cmp	r0, r1
 80091e8:	d3f4      	bcc.n	80091d4 <L_shift+0xc>
 80091ea:	bd70      	pop	{r4, r5, r6, pc}

080091ec <__match>:
 80091ec:	b530      	push	{r4, r5, lr}
 80091ee:	6803      	ldr	r3, [r0, #0]
 80091f0:	3301      	adds	r3, #1
 80091f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091f6:	b914      	cbnz	r4, 80091fe <__match+0x12>
 80091f8:	6003      	str	r3, [r0, #0]
 80091fa:	2001      	movs	r0, #1
 80091fc:	bd30      	pop	{r4, r5, pc}
 80091fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009202:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009206:	2d19      	cmp	r5, #25
 8009208:	bf98      	it	ls
 800920a:	3220      	addls	r2, #32
 800920c:	42a2      	cmp	r2, r4
 800920e:	d0f0      	beq.n	80091f2 <__match+0x6>
 8009210:	2000      	movs	r0, #0
 8009212:	e7f3      	b.n	80091fc <__match+0x10>

08009214 <__hexnan>:
 8009214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009218:	680b      	ldr	r3, [r1, #0]
 800921a:	115e      	asrs	r6, r3, #5
 800921c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009220:	f013 031f 	ands.w	r3, r3, #31
 8009224:	b087      	sub	sp, #28
 8009226:	bf18      	it	ne
 8009228:	3604      	addne	r6, #4
 800922a:	2500      	movs	r5, #0
 800922c:	1f37      	subs	r7, r6, #4
 800922e:	4690      	mov	r8, r2
 8009230:	6802      	ldr	r2, [r0, #0]
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	4682      	mov	sl, r0
 8009236:	f846 5c04 	str.w	r5, [r6, #-4]
 800923a:	46b9      	mov	r9, r7
 800923c:	463c      	mov	r4, r7
 800923e:	9502      	str	r5, [sp, #8]
 8009240:	46ab      	mov	fp, r5
 8009242:	7851      	ldrb	r1, [r2, #1]
 8009244:	1c53      	adds	r3, r2, #1
 8009246:	9303      	str	r3, [sp, #12]
 8009248:	b341      	cbz	r1, 800929c <__hexnan+0x88>
 800924a:	4608      	mov	r0, r1
 800924c:	9205      	str	r2, [sp, #20]
 800924e:	9104      	str	r1, [sp, #16]
 8009250:	f7ff fd5e 	bl	8008d10 <__hexdig_fun>
 8009254:	2800      	cmp	r0, #0
 8009256:	d14f      	bne.n	80092f8 <__hexnan+0xe4>
 8009258:	9904      	ldr	r1, [sp, #16]
 800925a:	9a05      	ldr	r2, [sp, #20]
 800925c:	2920      	cmp	r1, #32
 800925e:	d818      	bhi.n	8009292 <__hexnan+0x7e>
 8009260:	9b02      	ldr	r3, [sp, #8]
 8009262:	459b      	cmp	fp, r3
 8009264:	dd13      	ble.n	800928e <__hexnan+0x7a>
 8009266:	454c      	cmp	r4, r9
 8009268:	d206      	bcs.n	8009278 <__hexnan+0x64>
 800926a:	2d07      	cmp	r5, #7
 800926c:	dc04      	bgt.n	8009278 <__hexnan+0x64>
 800926e:	462a      	mov	r2, r5
 8009270:	4649      	mov	r1, r9
 8009272:	4620      	mov	r0, r4
 8009274:	f7ff ffa8 	bl	80091c8 <L_shift>
 8009278:	4544      	cmp	r4, r8
 800927a:	d950      	bls.n	800931e <__hexnan+0x10a>
 800927c:	2300      	movs	r3, #0
 800927e:	f1a4 0904 	sub.w	r9, r4, #4
 8009282:	f844 3c04 	str.w	r3, [r4, #-4]
 8009286:	f8cd b008 	str.w	fp, [sp, #8]
 800928a:	464c      	mov	r4, r9
 800928c:	461d      	mov	r5, r3
 800928e:	9a03      	ldr	r2, [sp, #12]
 8009290:	e7d7      	b.n	8009242 <__hexnan+0x2e>
 8009292:	2929      	cmp	r1, #41	; 0x29
 8009294:	d156      	bne.n	8009344 <__hexnan+0x130>
 8009296:	3202      	adds	r2, #2
 8009298:	f8ca 2000 	str.w	r2, [sl]
 800929c:	f1bb 0f00 	cmp.w	fp, #0
 80092a0:	d050      	beq.n	8009344 <__hexnan+0x130>
 80092a2:	454c      	cmp	r4, r9
 80092a4:	d206      	bcs.n	80092b4 <__hexnan+0xa0>
 80092a6:	2d07      	cmp	r5, #7
 80092a8:	dc04      	bgt.n	80092b4 <__hexnan+0xa0>
 80092aa:	462a      	mov	r2, r5
 80092ac:	4649      	mov	r1, r9
 80092ae:	4620      	mov	r0, r4
 80092b0:	f7ff ff8a 	bl	80091c8 <L_shift>
 80092b4:	4544      	cmp	r4, r8
 80092b6:	d934      	bls.n	8009322 <__hexnan+0x10e>
 80092b8:	f1a8 0204 	sub.w	r2, r8, #4
 80092bc:	4623      	mov	r3, r4
 80092be:	f853 1b04 	ldr.w	r1, [r3], #4
 80092c2:	f842 1f04 	str.w	r1, [r2, #4]!
 80092c6:	429f      	cmp	r7, r3
 80092c8:	d2f9      	bcs.n	80092be <__hexnan+0xaa>
 80092ca:	1b3b      	subs	r3, r7, r4
 80092cc:	f023 0303 	bic.w	r3, r3, #3
 80092d0:	3304      	adds	r3, #4
 80092d2:	3401      	adds	r4, #1
 80092d4:	3e03      	subs	r6, #3
 80092d6:	42b4      	cmp	r4, r6
 80092d8:	bf88      	it	hi
 80092da:	2304      	movhi	r3, #4
 80092dc:	4443      	add	r3, r8
 80092de:	2200      	movs	r2, #0
 80092e0:	f843 2b04 	str.w	r2, [r3], #4
 80092e4:	429f      	cmp	r7, r3
 80092e6:	d2fb      	bcs.n	80092e0 <__hexnan+0xcc>
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	b91b      	cbnz	r3, 80092f4 <__hexnan+0xe0>
 80092ec:	4547      	cmp	r7, r8
 80092ee:	d127      	bne.n	8009340 <__hexnan+0x12c>
 80092f0:	2301      	movs	r3, #1
 80092f2:	603b      	str	r3, [r7, #0]
 80092f4:	2005      	movs	r0, #5
 80092f6:	e026      	b.n	8009346 <__hexnan+0x132>
 80092f8:	3501      	adds	r5, #1
 80092fa:	2d08      	cmp	r5, #8
 80092fc:	f10b 0b01 	add.w	fp, fp, #1
 8009300:	dd06      	ble.n	8009310 <__hexnan+0xfc>
 8009302:	4544      	cmp	r4, r8
 8009304:	d9c3      	bls.n	800928e <__hexnan+0x7a>
 8009306:	2300      	movs	r3, #0
 8009308:	f844 3c04 	str.w	r3, [r4, #-4]
 800930c:	2501      	movs	r5, #1
 800930e:	3c04      	subs	r4, #4
 8009310:	6822      	ldr	r2, [r4, #0]
 8009312:	f000 000f 	and.w	r0, r0, #15
 8009316:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800931a:	6022      	str	r2, [r4, #0]
 800931c:	e7b7      	b.n	800928e <__hexnan+0x7a>
 800931e:	2508      	movs	r5, #8
 8009320:	e7b5      	b.n	800928e <__hexnan+0x7a>
 8009322:	9b01      	ldr	r3, [sp, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d0df      	beq.n	80092e8 <__hexnan+0xd4>
 8009328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800932c:	f1c3 0320 	rsb	r3, r3, #32
 8009330:	fa22 f303 	lsr.w	r3, r2, r3
 8009334:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009338:	401a      	ands	r2, r3
 800933a:	f846 2c04 	str.w	r2, [r6, #-4]
 800933e:	e7d3      	b.n	80092e8 <__hexnan+0xd4>
 8009340:	3f04      	subs	r7, #4
 8009342:	e7d1      	b.n	80092e8 <__hexnan+0xd4>
 8009344:	2004      	movs	r0, #4
 8009346:	b007      	add	sp, #28
 8009348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800934c <_localeconv_r>:
 800934c:	4800      	ldr	r0, [pc, #0]	; (8009350 <_localeconv_r+0x4>)
 800934e:	4770      	bx	lr
 8009350:	20000164 	.word	0x20000164

08009354 <_lseek_r>:
 8009354:	b538      	push	{r3, r4, r5, lr}
 8009356:	4d07      	ldr	r5, [pc, #28]	; (8009374 <_lseek_r+0x20>)
 8009358:	4604      	mov	r4, r0
 800935a:	4608      	mov	r0, r1
 800935c:	4611      	mov	r1, r2
 800935e:	2200      	movs	r2, #0
 8009360:	602a      	str	r2, [r5, #0]
 8009362:	461a      	mov	r2, r3
 8009364:	f7f8 fef6 	bl	8002154 <_lseek>
 8009368:	1c43      	adds	r3, r0, #1
 800936a:	d102      	bne.n	8009372 <_lseek_r+0x1e>
 800936c:	682b      	ldr	r3, [r5, #0]
 800936e:	b103      	cbz	r3, 8009372 <_lseek_r+0x1e>
 8009370:	6023      	str	r3, [r4, #0]
 8009372:	bd38      	pop	{r3, r4, r5, pc}
 8009374:	200004b4 	.word	0x200004b4

08009378 <malloc>:
 8009378:	4b02      	ldr	r3, [pc, #8]	; (8009384 <malloc+0xc>)
 800937a:	4601      	mov	r1, r0
 800937c:	6818      	ldr	r0, [r3, #0]
 800937e:	f000 bd67 	b.w	8009e50 <_malloc_r>
 8009382:	bf00      	nop
 8009384:	2000000c 	.word	0x2000000c

08009388 <__ascii_mbtowc>:
 8009388:	b082      	sub	sp, #8
 800938a:	b901      	cbnz	r1, 800938e <__ascii_mbtowc+0x6>
 800938c:	a901      	add	r1, sp, #4
 800938e:	b142      	cbz	r2, 80093a2 <__ascii_mbtowc+0x1a>
 8009390:	b14b      	cbz	r3, 80093a6 <__ascii_mbtowc+0x1e>
 8009392:	7813      	ldrb	r3, [r2, #0]
 8009394:	600b      	str	r3, [r1, #0]
 8009396:	7812      	ldrb	r2, [r2, #0]
 8009398:	1e10      	subs	r0, r2, #0
 800939a:	bf18      	it	ne
 800939c:	2001      	movne	r0, #1
 800939e:	b002      	add	sp, #8
 80093a0:	4770      	bx	lr
 80093a2:	4610      	mov	r0, r2
 80093a4:	e7fb      	b.n	800939e <__ascii_mbtowc+0x16>
 80093a6:	f06f 0001 	mvn.w	r0, #1
 80093aa:	e7f8      	b.n	800939e <__ascii_mbtowc+0x16>

080093ac <memcpy>:
 80093ac:	440a      	add	r2, r1
 80093ae:	4291      	cmp	r1, r2
 80093b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80093b4:	d100      	bne.n	80093b8 <memcpy+0xc>
 80093b6:	4770      	bx	lr
 80093b8:	b510      	push	{r4, lr}
 80093ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093c2:	4291      	cmp	r1, r2
 80093c4:	d1f9      	bne.n	80093ba <memcpy+0xe>
 80093c6:	bd10      	pop	{r4, pc}

080093c8 <_Balloc>:
 80093c8:	b570      	push	{r4, r5, r6, lr}
 80093ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093cc:	4604      	mov	r4, r0
 80093ce:	460d      	mov	r5, r1
 80093d0:	b976      	cbnz	r6, 80093f0 <_Balloc+0x28>
 80093d2:	2010      	movs	r0, #16
 80093d4:	f7ff ffd0 	bl	8009378 <malloc>
 80093d8:	4602      	mov	r2, r0
 80093da:	6260      	str	r0, [r4, #36]	; 0x24
 80093dc:	b920      	cbnz	r0, 80093e8 <_Balloc+0x20>
 80093de:	4b18      	ldr	r3, [pc, #96]	; (8009440 <_Balloc+0x78>)
 80093e0:	4818      	ldr	r0, [pc, #96]	; (8009444 <_Balloc+0x7c>)
 80093e2:	2166      	movs	r1, #102	; 0x66
 80093e4:	f000 ff3e 	bl	800a264 <__assert_func>
 80093e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093ec:	6006      	str	r6, [r0, #0]
 80093ee:	60c6      	str	r6, [r0, #12]
 80093f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80093f2:	68f3      	ldr	r3, [r6, #12]
 80093f4:	b183      	cbz	r3, 8009418 <_Balloc+0x50>
 80093f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093fe:	b9b8      	cbnz	r0, 8009430 <_Balloc+0x68>
 8009400:	2101      	movs	r1, #1
 8009402:	fa01 f605 	lsl.w	r6, r1, r5
 8009406:	1d72      	adds	r2, r6, #5
 8009408:	0092      	lsls	r2, r2, #2
 800940a:	4620      	mov	r0, r4
 800940c:	f000 fc9d 	bl	8009d4a <_calloc_r>
 8009410:	b160      	cbz	r0, 800942c <_Balloc+0x64>
 8009412:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009416:	e00e      	b.n	8009436 <_Balloc+0x6e>
 8009418:	2221      	movs	r2, #33	; 0x21
 800941a:	2104      	movs	r1, #4
 800941c:	4620      	mov	r0, r4
 800941e:	f000 fc94 	bl	8009d4a <_calloc_r>
 8009422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009424:	60f0      	str	r0, [r6, #12]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1e4      	bne.n	80093f6 <_Balloc+0x2e>
 800942c:	2000      	movs	r0, #0
 800942e:	bd70      	pop	{r4, r5, r6, pc}
 8009430:	6802      	ldr	r2, [r0, #0]
 8009432:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009436:	2300      	movs	r3, #0
 8009438:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800943c:	e7f7      	b.n	800942e <_Balloc+0x66>
 800943e:	bf00      	nop
 8009440:	0800afd6 	.word	0x0800afd6
 8009444:	0800b0d4 	.word	0x0800b0d4

08009448 <_Bfree>:
 8009448:	b570      	push	{r4, r5, r6, lr}
 800944a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800944c:	4605      	mov	r5, r0
 800944e:	460c      	mov	r4, r1
 8009450:	b976      	cbnz	r6, 8009470 <_Bfree+0x28>
 8009452:	2010      	movs	r0, #16
 8009454:	f7ff ff90 	bl	8009378 <malloc>
 8009458:	4602      	mov	r2, r0
 800945a:	6268      	str	r0, [r5, #36]	; 0x24
 800945c:	b920      	cbnz	r0, 8009468 <_Bfree+0x20>
 800945e:	4b09      	ldr	r3, [pc, #36]	; (8009484 <_Bfree+0x3c>)
 8009460:	4809      	ldr	r0, [pc, #36]	; (8009488 <_Bfree+0x40>)
 8009462:	218a      	movs	r1, #138	; 0x8a
 8009464:	f000 fefe 	bl	800a264 <__assert_func>
 8009468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800946c:	6006      	str	r6, [r0, #0]
 800946e:	60c6      	str	r6, [r0, #12]
 8009470:	b13c      	cbz	r4, 8009482 <_Bfree+0x3a>
 8009472:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009474:	6862      	ldr	r2, [r4, #4]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800947c:	6021      	str	r1, [r4, #0]
 800947e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009482:	bd70      	pop	{r4, r5, r6, pc}
 8009484:	0800afd6 	.word	0x0800afd6
 8009488:	0800b0d4 	.word	0x0800b0d4

0800948c <__multadd>:
 800948c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009490:	690d      	ldr	r5, [r1, #16]
 8009492:	4607      	mov	r7, r0
 8009494:	460c      	mov	r4, r1
 8009496:	461e      	mov	r6, r3
 8009498:	f101 0c14 	add.w	ip, r1, #20
 800949c:	2000      	movs	r0, #0
 800949e:	f8dc 3000 	ldr.w	r3, [ip]
 80094a2:	b299      	uxth	r1, r3
 80094a4:	fb02 6101 	mla	r1, r2, r1, r6
 80094a8:	0c1e      	lsrs	r6, r3, #16
 80094aa:	0c0b      	lsrs	r3, r1, #16
 80094ac:	fb02 3306 	mla	r3, r2, r6, r3
 80094b0:	b289      	uxth	r1, r1
 80094b2:	3001      	adds	r0, #1
 80094b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094b8:	4285      	cmp	r5, r0
 80094ba:	f84c 1b04 	str.w	r1, [ip], #4
 80094be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094c2:	dcec      	bgt.n	800949e <__multadd+0x12>
 80094c4:	b30e      	cbz	r6, 800950a <__multadd+0x7e>
 80094c6:	68a3      	ldr	r3, [r4, #8]
 80094c8:	42ab      	cmp	r3, r5
 80094ca:	dc19      	bgt.n	8009500 <__multadd+0x74>
 80094cc:	6861      	ldr	r1, [r4, #4]
 80094ce:	4638      	mov	r0, r7
 80094d0:	3101      	adds	r1, #1
 80094d2:	f7ff ff79 	bl	80093c8 <_Balloc>
 80094d6:	4680      	mov	r8, r0
 80094d8:	b928      	cbnz	r0, 80094e6 <__multadd+0x5a>
 80094da:	4602      	mov	r2, r0
 80094dc:	4b0c      	ldr	r3, [pc, #48]	; (8009510 <__multadd+0x84>)
 80094de:	480d      	ldr	r0, [pc, #52]	; (8009514 <__multadd+0x88>)
 80094e0:	21b5      	movs	r1, #181	; 0xb5
 80094e2:	f000 febf 	bl	800a264 <__assert_func>
 80094e6:	6922      	ldr	r2, [r4, #16]
 80094e8:	3202      	adds	r2, #2
 80094ea:	f104 010c 	add.w	r1, r4, #12
 80094ee:	0092      	lsls	r2, r2, #2
 80094f0:	300c      	adds	r0, #12
 80094f2:	f7ff ff5b 	bl	80093ac <memcpy>
 80094f6:	4621      	mov	r1, r4
 80094f8:	4638      	mov	r0, r7
 80094fa:	f7ff ffa5 	bl	8009448 <_Bfree>
 80094fe:	4644      	mov	r4, r8
 8009500:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009504:	3501      	adds	r5, #1
 8009506:	615e      	str	r6, [r3, #20]
 8009508:	6125      	str	r5, [r4, #16]
 800950a:	4620      	mov	r0, r4
 800950c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009510:	0800b048 	.word	0x0800b048
 8009514:	0800b0d4 	.word	0x0800b0d4

08009518 <__s2b>:
 8009518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800951c:	460c      	mov	r4, r1
 800951e:	4615      	mov	r5, r2
 8009520:	461f      	mov	r7, r3
 8009522:	2209      	movs	r2, #9
 8009524:	3308      	adds	r3, #8
 8009526:	4606      	mov	r6, r0
 8009528:	fb93 f3f2 	sdiv	r3, r3, r2
 800952c:	2100      	movs	r1, #0
 800952e:	2201      	movs	r2, #1
 8009530:	429a      	cmp	r2, r3
 8009532:	db09      	blt.n	8009548 <__s2b+0x30>
 8009534:	4630      	mov	r0, r6
 8009536:	f7ff ff47 	bl	80093c8 <_Balloc>
 800953a:	b940      	cbnz	r0, 800954e <__s2b+0x36>
 800953c:	4602      	mov	r2, r0
 800953e:	4b19      	ldr	r3, [pc, #100]	; (80095a4 <__s2b+0x8c>)
 8009540:	4819      	ldr	r0, [pc, #100]	; (80095a8 <__s2b+0x90>)
 8009542:	21ce      	movs	r1, #206	; 0xce
 8009544:	f000 fe8e 	bl	800a264 <__assert_func>
 8009548:	0052      	lsls	r2, r2, #1
 800954a:	3101      	adds	r1, #1
 800954c:	e7f0      	b.n	8009530 <__s2b+0x18>
 800954e:	9b08      	ldr	r3, [sp, #32]
 8009550:	6143      	str	r3, [r0, #20]
 8009552:	2d09      	cmp	r5, #9
 8009554:	f04f 0301 	mov.w	r3, #1
 8009558:	6103      	str	r3, [r0, #16]
 800955a:	dd16      	ble.n	800958a <__s2b+0x72>
 800955c:	f104 0909 	add.w	r9, r4, #9
 8009560:	46c8      	mov	r8, r9
 8009562:	442c      	add	r4, r5
 8009564:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009568:	4601      	mov	r1, r0
 800956a:	3b30      	subs	r3, #48	; 0x30
 800956c:	220a      	movs	r2, #10
 800956e:	4630      	mov	r0, r6
 8009570:	f7ff ff8c 	bl	800948c <__multadd>
 8009574:	45a0      	cmp	r8, r4
 8009576:	d1f5      	bne.n	8009564 <__s2b+0x4c>
 8009578:	f1a5 0408 	sub.w	r4, r5, #8
 800957c:	444c      	add	r4, r9
 800957e:	1b2d      	subs	r5, r5, r4
 8009580:	1963      	adds	r3, r4, r5
 8009582:	42bb      	cmp	r3, r7
 8009584:	db04      	blt.n	8009590 <__s2b+0x78>
 8009586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800958a:	340a      	adds	r4, #10
 800958c:	2509      	movs	r5, #9
 800958e:	e7f6      	b.n	800957e <__s2b+0x66>
 8009590:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009594:	4601      	mov	r1, r0
 8009596:	3b30      	subs	r3, #48	; 0x30
 8009598:	220a      	movs	r2, #10
 800959a:	4630      	mov	r0, r6
 800959c:	f7ff ff76 	bl	800948c <__multadd>
 80095a0:	e7ee      	b.n	8009580 <__s2b+0x68>
 80095a2:	bf00      	nop
 80095a4:	0800b048 	.word	0x0800b048
 80095a8:	0800b0d4 	.word	0x0800b0d4

080095ac <__hi0bits>:
 80095ac:	0c03      	lsrs	r3, r0, #16
 80095ae:	041b      	lsls	r3, r3, #16
 80095b0:	b9d3      	cbnz	r3, 80095e8 <__hi0bits+0x3c>
 80095b2:	0400      	lsls	r0, r0, #16
 80095b4:	2310      	movs	r3, #16
 80095b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80095ba:	bf04      	itt	eq
 80095bc:	0200      	lsleq	r0, r0, #8
 80095be:	3308      	addeq	r3, #8
 80095c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80095c4:	bf04      	itt	eq
 80095c6:	0100      	lsleq	r0, r0, #4
 80095c8:	3304      	addeq	r3, #4
 80095ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80095ce:	bf04      	itt	eq
 80095d0:	0080      	lsleq	r0, r0, #2
 80095d2:	3302      	addeq	r3, #2
 80095d4:	2800      	cmp	r0, #0
 80095d6:	db05      	blt.n	80095e4 <__hi0bits+0x38>
 80095d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80095dc:	f103 0301 	add.w	r3, r3, #1
 80095e0:	bf08      	it	eq
 80095e2:	2320      	moveq	r3, #32
 80095e4:	4618      	mov	r0, r3
 80095e6:	4770      	bx	lr
 80095e8:	2300      	movs	r3, #0
 80095ea:	e7e4      	b.n	80095b6 <__hi0bits+0xa>

080095ec <__lo0bits>:
 80095ec:	6803      	ldr	r3, [r0, #0]
 80095ee:	f013 0207 	ands.w	r2, r3, #7
 80095f2:	4601      	mov	r1, r0
 80095f4:	d00b      	beq.n	800960e <__lo0bits+0x22>
 80095f6:	07da      	lsls	r2, r3, #31
 80095f8:	d423      	bmi.n	8009642 <__lo0bits+0x56>
 80095fa:	0798      	lsls	r0, r3, #30
 80095fc:	bf49      	itett	mi
 80095fe:	085b      	lsrmi	r3, r3, #1
 8009600:	089b      	lsrpl	r3, r3, #2
 8009602:	2001      	movmi	r0, #1
 8009604:	600b      	strmi	r3, [r1, #0]
 8009606:	bf5c      	itt	pl
 8009608:	600b      	strpl	r3, [r1, #0]
 800960a:	2002      	movpl	r0, #2
 800960c:	4770      	bx	lr
 800960e:	b298      	uxth	r0, r3
 8009610:	b9a8      	cbnz	r0, 800963e <__lo0bits+0x52>
 8009612:	0c1b      	lsrs	r3, r3, #16
 8009614:	2010      	movs	r0, #16
 8009616:	b2da      	uxtb	r2, r3
 8009618:	b90a      	cbnz	r2, 800961e <__lo0bits+0x32>
 800961a:	3008      	adds	r0, #8
 800961c:	0a1b      	lsrs	r3, r3, #8
 800961e:	071a      	lsls	r2, r3, #28
 8009620:	bf04      	itt	eq
 8009622:	091b      	lsreq	r3, r3, #4
 8009624:	3004      	addeq	r0, #4
 8009626:	079a      	lsls	r2, r3, #30
 8009628:	bf04      	itt	eq
 800962a:	089b      	lsreq	r3, r3, #2
 800962c:	3002      	addeq	r0, #2
 800962e:	07da      	lsls	r2, r3, #31
 8009630:	d403      	bmi.n	800963a <__lo0bits+0x4e>
 8009632:	085b      	lsrs	r3, r3, #1
 8009634:	f100 0001 	add.w	r0, r0, #1
 8009638:	d005      	beq.n	8009646 <__lo0bits+0x5a>
 800963a:	600b      	str	r3, [r1, #0]
 800963c:	4770      	bx	lr
 800963e:	4610      	mov	r0, r2
 8009640:	e7e9      	b.n	8009616 <__lo0bits+0x2a>
 8009642:	2000      	movs	r0, #0
 8009644:	4770      	bx	lr
 8009646:	2020      	movs	r0, #32
 8009648:	4770      	bx	lr
	...

0800964c <__i2b>:
 800964c:	b510      	push	{r4, lr}
 800964e:	460c      	mov	r4, r1
 8009650:	2101      	movs	r1, #1
 8009652:	f7ff feb9 	bl	80093c8 <_Balloc>
 8009656:	4602      	mov	r2, r0
 8009658:	b928      	cbnz	r0, 8009666 <__i2b+0x1a>
 800965a:	4b05      	ldr	r3, [pc, #20]	; (8009670 <__i2b+0x24>)
 800965c:	4805      	ldr	r0, [pc, #20]	; (8009674 <__i2b+0x28>)
 800965e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009662:	f000 fdff 	bl	800a264 <__assert_func>
 8009666:	2301      	movs	r3, #1
 8009668:	6144      	str	r4, [r0, #20]
 800966a:	6103      	str	r3, [r0, #16]
 800966c:	bd10      	pop	{r4, pc}
 800966e:	bf00      	nop
 8009670:	0800b048 	.word	0x0800b048
 8009674:	0800b0d4 	.word	0x0800b0d4

08009678 <__multiply>:
 8009678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967c:	4691      	mov	r9, r2
 800967e:	690a      	ldr	r2, [r1, #16]
 8009680:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009684:	429a      	cmp	r2, r3
 8009686:	bfb8      	it	lt
 8009688:	460b      	movlt	r3, r1
 800968a:	460c      	mov	r4, r1
 800968c:	bfbc      	itt	lt
 800968e:	464c      	movlt	r4, r9
 8009690:	4699      	movlt	r9, r3
 8009692:	6927      	ldr	r7, [r4, #16]
 8009694:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009698:	68a3      	ldr	r3, [r4, #8]
 800969a:	6861      	ldr	r1, [r4, #4]
 800969c:	eb07 060a 	add.w	r6, r7, sl
 80096a0:	42b3      	cmp	r3, r6
 80096a2:	b085      	sub	sp, #20
 80096a4:	bfb8      	it	lt
 80096a6:	3101      	addlt	r1, #1
 80096a8:	f7ff fe8e 	bl	80093c8 <_Balloc>
 80096ac:	b930      	cbnz	r0, 80096bc <__multiply+0x44>
 80096ae:	4602      	mov	r2, r0
 80096b0:	4b44      	ldr	r3, [pc, #272]	; (80097c4 <__multiply+0x14c>)
 80096b2:	4845      	ldr	r0, [pc, #276]	; (80097c8 <__multiply+0x150>)
 80096b4:	f240 115d 	movw	r1, #349	; 0x15d
 80096b8:	f000 fdd4 	bl	800a264 <__assert_func>
 80096bc:	f100 0514 	add.w	r5, r0, #20
 80096c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80096c4:	462b      	mov	r3, r5
 80096c6:	2200      	movs	r2, #0
 80096c8:	4543      	cmp	r3, r8
 80096ca:	d321      	bcc.n	8009710 <__multiply+0x98>
 80096cc:	f104 0314 	add.w	r3, r4, #20
 80096d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80096d4:	f109 0314 	add.w	r3, r9, #20
 80096d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80096dc:	9202      	str	r2, [sp, #8]
 80096de:	1b3a      	subs	r2, r7, r4
 80096e0:	3a15      	subs	r2, #21
 80096e2:	f022 0203 	bic.w	r2, r2, #3
 80096e6:	3204      	adds	r2, #4
 80096e8:	f104 0115 	add.w	r1, r4, #21
 80096ec:	428f      	cmp	r7, r1
 80096ee:	bf38      	it	cc
 80096f0:	2204      	movcc	r2, #4
 80096f2:	9201      	str	r2, [sp, #4]
 80096f4:	9a02      	ldr	r2, [sp, #8]
 80096f6:	9303      	str	r3, [sp, #12]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d80c      	bhi.n	8009716 <__multiply+0x9e>
 80096fc:	2e00      	cmp	r6, #0
 80096fe:	dd03      	ble.n	8009708 <__multiply+0x90>
 8009700:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009704:	2b00      	cmp	r3, #0
 8009706:	d05a      	beq.n	80097be <__multiply+0x146>
 8009708:	6106      	str	r6, [r0, #16]
 800970a:	b005      	add	sp, #20
 800970c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009710:	f843 2b04 	str.w	r2, [r3], #4
 8009714:	e7d8      	b.n	80096c8 <__multiply+0x50>
 8009716:	f8b3 a000 	ldrh.w	sl, [r3]
 800971a:	f1ba 0f00 	cmp.w	sl, #0
 800971e:	d024      	beq.n	800976a <__multiply+0xf2>
 8009720:	f104 0e14 	add.w	lr, r4, #20
 8009724:	46a9      	mov	r9, r5
 8009726:	f04f 0c00 	mov.w	ip, #0
 800972a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800972e:	f8d9 1000 	ldr.w	r1, [r9]
 8009732:	fa1f fb82 	uxth.w	fp, r2
 8009736:	b289      	uxth	r1, r1
 8009738:	fb0a 110b 	mla	r1, sl, fp, r1
 800973c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009740:	f8d9 2000 	ldr.w	r2, [r9]
 8009744:	4461      	add	r1, ip
 8009746:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800974a:	fb0a c20b 	mla	r2, sl, fp, ip
 800974e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009752:	b289      	uxth	r1, r1
 8009754:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009758:	4577      	cmp	r7, lr
 800975a:	f849 1b04 	str.w	r1, [r9], #4
 800975e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009762:	d8e2      	bhi.n	800972a <__multiply+0xb2>
 8009764:	9a01      	ldr	r2, [sp, #4]
 8009766:	f845 c002 	str.w	ip, [r5, r2]
 800976a:	9a03      	ldr	r2, [sp, #12]
 800976c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009770:	3304      	adds	r3, #4
 8009772:	f1b9 0f00 	cmp.w	r9, #0
 8009776:	d020      	beq.n	80097ba <__multiply+0x142>
 8009778:	6829      	ldr	r1, [r5, #0]
 800977a:	f104 0c14 	add.w	ip, r4, #20
 800977e:	46ae      	mov	lr, r5
 8009780:	f04f 0a00 	mov.w	sl, #0
 8009784:	f8bc b000 	ldrh.w	fp, [ip]
 8009788:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800978c:	fb09 220b 	mla	r2, r9, fp, r2
 8009790:	4492      	add	sl, r2
 8009792:	b289      	uxth	r1, r1
 8009794:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009798:	f84e 1b04 	str.w	r1, [lr], #4
 800979c:	f85c 2b04 	ldr.w	r2, [ip], #4
 80097a0:	f8be 1000 	ldrh.w	r1, [lr]
 80097a4:	0c12      	lsrs	r2, r2, #16
 80097a6:	fb09 1102 	mla	r1, r9, r2, r1
 80097aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80097ae:	4567      	cmp	r7, ip
 80097b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80097b4:	d8e6      	bhi.n	8009784 <__multiply+0x10c>
 80097b6:	9a01      	ldr	r2, [sp, #4]
 80097b8:	50a9      	str	r1, [r5, r2]
 80097ba:	3504      	adds	r5, #4
 80097bc:	e79a      	b.n	80096f4 <__multiply+0x7c>
 80097be:	3e01      	subs	r6, #1
 80097c0:	e79c      	b.n	80096fc <__multiply+0x84>
 80097c2:	bf00      	nop
 80097c4:	0800b048 	.word	0x0800b048
 80097c8:	0800b0d4 	.word	0x0800b0d4

080097cc <__pow5mult>:
 80097cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097d0:	4615      	mov	r5, r2
 80097d2:	f012 0203 	ands.w	r2, r2, #3
 80097d6:	4606      	mov	r6, r0
 80097d8:	460f      	mov	r7, r1
 80097da:	d007      	beq.n	80097ec <__pow5mult+0x20>
 80097dc:	4c25      	ldr	r4, [pc, #148]	; (8009874 <__pow5mult+0xa8>)
 80097de:	3a01      	subs	r2, #1
 80097e0:	2300      	movs	r3, #0
 80097e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80097e6:	f7ff fe51 	bl	800948c <__multadd>
 80097ea:	4607      	mov	r7, r0
 80097ec:	10ad      	asrs	r5, r5, #2
 80097ee:	d03d      	beq.n	800986c <__pow5mult+0xa0>
 80097f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80097f2:	b97c      	cbnz	r4, 8009814 <__pow5mult+0x48>
 80097f4:	2010      	movs	r0, #16
 80097f6:	f7ff fdbf 	bl	8009378 <malloc>
 80097fa:	4602      	mov	r2, r0
 80097fc:	6270      	str	r0, [r6, #36]	; 0x24
 80097fe:	b928      	cbnz	r0, 800980c <__pow5mult+0x40>
 8009800:	4b1d      	ldr	r3, [pc, #116]	; (8009878 <__pow5mult+0xac>)
 8009802:	481e      	ldr	r0, [pc, #120]	; (800987c <__pow5mult+0xb0>)
 8009804:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009808:	f000 fd2c 	bl	800a264 <__assert_func>
 800980c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009810:	6004      	str	r4, [r0, #0]
 8009812:	60c4      	str	r4, [r0, #12]
 8009814:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009818:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800981c:	b94c      	cbnz	r4, 8009832 <__pow5mult+0x66>
 800981e:	f240 2171 	movw	r1, #625	; 0x271
 8009822:	4630      	mov	r0, r6
 8009824:	f7ff ff12 	bl	800964c <__i2b>
 8009828:	2300      	movs	r3, #0
 800982a:	f8c8 0008 	str.w	r0, [r8, #8]
 800982e:	4604      	mov	r4, r0
 8009830:	6003      	str	r3, [r0, #0]
 8009832:	f04f 0900 	mov.w	r9, #0
 8009836:	07eb      	lsls	r3, r5, #31
 8009838:	d50a      	bpl.n	8009850 <__pow5mult+0x84>
 800983a:	4639      	mov	r1, r7
 800983c:	4622      	mov	r2, r4
 800983e:	4630      	mov	r0, r6
 8009840:	f7ff ff1a 	bl	8009678 <__multiply>
 8009844:	4639      	mov	r1, r7
 8009846:	4680      	mov	r8, r0
 8009848:	4630      	mov	r0, r6
 800984a:	f7ff fdfd 	bl	8009448 <_Bfree>
 800984e:	4647      	mov	r7, r8
 8009850:	106d      	asrs	r5, r5, #1
 8009852:	d00b      	beq.n	800986c <__pow5mult+0xa0>
 8009854:	6820      	ldr	r0, [r4, #0]
 8009856:	b938      	cbnz	r0, 8009868 <__pow5mult+0x9c>
 8009858:	4622      	mov	r2, r4
 800985a:	4621      	mov	r1, r4
 800985c:	4630      	mov	r0, r6
 800985e:	f7ff ff0b 	bl	8009678 <__multiply>
 8009862:	6020      	str	r0, [r4, #0]
 8009864:	f8c0 9000 	str.w	r9, [r0]
 8009868:	4604      	mov	r4, r0
 800986a:	e7e4      	b.n	8009836 <__pow5mult+0x6a>
 800986c:	4638      	mov	r0, r7
 800986e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009872:	bf00      	nop
 8009874:	0800b220 	.word	0x0800b220
 8009878:	0800afd6 	.word	0x0800afd6
 800987c:	0800b0d4 	.word	0x0800b0d4

08009880 <__lshift>:
 8009880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009884:	460c      	mov	r4, r1
 8009886:	6849      	ldr	r1, [r1, #4]
 8009888:	6923      	ldr	r3, [r4, #16]
 800988a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800988e:	68a3      	ldr	r3, [r4, #8]
 8009890:	4607      	mov	r7, r0
 8009892:	4691      	mov	r9, r2
 8009894:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009898:	f108 0601 	add.w	r6, r8, #1
 800989c:	42b3      	cmp	r3, r6
 800989e:	db0b      	blt.n	80098b8 <__lshift+0x38>
 80098a0:	4638      	mov	r0, r7
 80098a2:	f7ff fd91 	bl	80093c8 <_Balloc>
 80098a6:	4605      	mov	r5, r0
 80098a8:	b948      	cbnz	r0, 80098be <__lshift+0x3e>
 80098aa:	4602      	mov	r2, r0
 80098ac:	4b2a      	ldr	r3, [pc, #168]	; (8009958 <__lshift+0xd8>)
 80098ae:	482b      	ldr	r0, [pc, #172]	; (800995c <__lshift+0xdc>)
 80098b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80098b4:	f000 fcd6 	bl	800a264 <__assert_func>
 80098b8:	3101      	adds	r1, #1
 80098ba:	005b      	lsls	r3, r3, #1
 80098bc:	e7ee      	b.n	800989c <__lshift+0x1c>
 80098be:	2300      	movs	r3, #0
 80098c0:	f100 0114 	add.w	r1, r0, #20
 80098c4:	f100 0210 	add.w	r2, r0, #16
 80098c8:	4618      	mov	r0, r3
 80098ca:	4553      	cmp	r3, sl
 80098cc:	db37      	blt.n	800993e <__lshift+0xbe>
 80098ce:	6920      	ldr	r0, [r4, #16]
 80098d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80098d4:	f104 0314 	add.w	r3, r4, #20
 80098d8:	f019 091f 	ands.w	r9, r9, #31
 80098dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80098e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80098e4:	d02f      	beq.n	8009946 <__lshift+0xc6>
 80098e6:	f1c9 0e20 	rsb	lr, r9, #32
 80098ea:	468a      	mov	sl, r1
 80098ec:	f04f 0c00 	mov.w	ip, #0
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	fa02 f209 	lsl.w	r2, r2, r9
 80098f6:	ea42 020c 	orr.w	r2, r2, ip
 80098fa:	f84a 2b04 	str.w	r2, [sl], #4
 80098fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009902:	4298      	cmp	r0, r3
 8009904:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009908:	d8f2      	bhi.n	80098f0 <__lshift+0x70>
 800990a:	1b03      	subs	r3, r0, r4
 800990c:	3b15      	subs	r3, #21
 800990e:	f023 0303 	bic.w	r3, r3, #3
 8009912:	3304      	adds	r3, #4
 8009914:	f104 0215 	add.w	r2, r4, #21
 8009918:	4290      	cmp	r0, r2
 800991a:	bf38      	it	cc
 800991c:	2304      	movcc	r3, #4
 800991e:	f841 c003 	str.w	ip, [r1, r3]
 8009922:	f1bc 0f00 	cmp.w	ip, #0
 8009926:	d001      	beq.n	800992c <__lshift+0xac>
 8009928:	f108 0602 	add.w	r6, r8, #2
 800992c:	3e01      	subs	r6, #1
 800992e:	4638      	mov	r0, r7
 8009930:	612e      	str	r6, [r5, #16]
 8009932:	4621      	mov	r1, r4
 8009934:	f7ff fd88 	bl	8009448 <_Bfree>
 8009938:	4628      	mov	r0, r5
 800993a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800993e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009942:	3301      	adds	r3, #1
 8009944:	e7c1      	b.n	80098ca <__lshift+0x4a>
 8009946:	3904      	subs	r1, #4
 8009948:	f853 2b04 	ldr.w	r2, [r3], #4
 800994c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009950:	4298      	cmp	r0, r3
 8009952:	d8f9      	bhi.n	8009948 <__lshift+0xc8>
 8009954:	e7ea      	b.n	800992c <__lshift+0xac>
 8009956:	bf00      	nop
 8009958:	0800b048 	.word	0x0800b048
 800995c:	0800b0d4 	.word	0x0800b0d4

08009960 <__mcmp>:
 8009960:	b530      	push	{r4, r5, lr}
 8009962:	6902      	ldr	r2, [r0, #16]
 8009964:	690c      	ldr	r4, [r1, #16]
 8009966:	1b12      	subs	r2, r2, r4
 8009968:	d10e      	bne.n	8009988 <__mcmp+0x28>
 800996a:	f100 0314 	add.w	r3, r0, #20
 800996e:	3114      	adds	r1, #20
 8009970:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009974:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009978:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800997c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009980:	42a5      	cmp	r5, r4
 8009982:	d003      	beq.n	800998c <__mcmp+0x2c>
 8009984:	d305      	bcc.n	8009992 <__mcmp+0x32>
 8009986:	2201      	movs	r2, #1
 8009988:	4610      	mov	r0, r2
 800998a:	bd30      	pop	{r4, r5, pc}
 800998c:	4283      	cmp	r3, r0
 800998e:	d3f3      	bcc.n	8009978 <__mcmp+0x18>
 8009990:	e7fa      	b.n	8009988 <__mcmp+0x28>
 8009992:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009996:	e7f7      	b.n	8009988 <__mcmp+0x28>

08009998 <__mdiff>:
 8009998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999c:	460c      	mov	r4, r1
 800999e:	4606      	mov	r6, r0
 80099a0:	4611      	mov	r1, r2
 80099a2:	4620      	mov	r0, r4
 80099a4:	4690      	mov	r8, r2
 80099a6:	f7ff ffdb 	bl	8009960 <__mcmp>
 80099aa:	1e05      	subs	r5, r0, #0
 80099ac:	d110      	bne.n	80099d0 <__mdiff+0x38>
 80099ae:	4629      	mov	r1, r5
 80099b0:	4630      	mov	r0, r6
 80099b2:	f7ff fd09 	bl	80093c8 <_Balloc>
 80099b6:	b930      	cbnz	r0, 80099c6 <__mdiff+0x2e>
 80099b8:	4b3a      	ldr	r3, [pc, #232]	; (8009aa4 <__mdiff+0x10c>)
 80099ba:	4602      	mov	r2, r0
 80099bc:	f240 2132 	movw	r1, #562	; 0x232
 80099c0:	4839      	ldr	r0, [pc, #228]	; (8009aa8 <__mdiff+0x110>)
 80099c2:	f000 fc4f 	bl	800a264 <__assert_func>
 80099c6:	2301      	movs	r3, #1
 80099c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80099cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d0:	bfa4      	itt	ge
 80099d2:	4643      	movge	r3, r8
 80099d4:	46a0      	movge	r8, r4
 80099d6:	4630      	mov	r0, r6
 80099d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80099dc:	bfa6      	itte	ge
 80099de:	461c      	movge	r4, r3
 80099e0:	2500      	movge	r5, #0
 80099e2:	2501      	movlt	r5, #1
 80099e4:	f7ff fcf0 	bl	80093c8 <_Balloc>
 80099e8:	b920      	cbnz	r0, 80099f4 <__mdiff+0x5c>
 80099ea:	4b2e      	ldr	r3, [pc, #184]	; (8009aa4 <__mdiff+0x10c>)
 80099ec:	4602      	mov	r2, r0
 80099ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 80099f2:	e7e5      	b.n	80099c0 <__mdiff+0x28>
 80099f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80099f8:	6926      	ldr	r6, [r4, #16]
 80099fa:	60c5      	str	r5, [r0, #12]
 80099fc:	f104 0914 	add.w	r9, r4, #20
 8009a00:	f108 0514 	add.w	r5, r8, #20
 8009a04:	f100 0e14 	add.w	lr, r0, #20
 8009a08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009a0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009a10:	f108 0210 	add.w	r2, r8, #16
 8009a14:	46f2      	mov	sl, lr
 8009a16:	2100      	movs	r1, #0
 8009a18:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009a20:	fa1f f883 	uxth.w	r8, r3
 8009a24:	fa11 f18b 	uxtah	r1, r1, fp
 8009a28:	0c1b      	lsrs	r3, r3, #16
 8009a2a:	eba1 0808 	sub.w	r8, r1, r8
 8009a2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009a36:	fa1f f888 	uxth.w	r8, r8
 8009a3a:	1419      	asrs	r1, r3, #16
 8009a3c:	454e      	cmp	r6, r9
 8009a3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009a42:	f84a 3b04 	str.w	r3, [sl], #4
 8009a46:	d8e7      	bhi.n	8009a18 <__mdiff+0x80>
 8009a48:	1b33      	subs	r3, r6, r4
 8009a4a:	3b15      	subs	r3, #21
 8009a4c:	f023 0303 	bic.w	r3, r3, #3
 8009a50:	3304      	adds	r3, #4
 8009a52:	3415      	adds	r4, #21
 8009a54:	42a6      	cmp	r6, r4
 8009a56:	bf38      	it	cc
 8009a58:	2304      	movcc	r3, #4
 8009a5a:	441d      	add	r5, r3
 8009a5c:	4473      	add	r3, lr
 8009a5e:	469e      	mov	lr, r3
 8009a60:	462e      	mov	r6, r5
 8009a62:	4566      	cmp	r6, ip
 8009a64:	d30e      	bcc.n	8009a84 <__mdiff+0xec>
 8009a66:	f10c 0203 	add.w	r2, ip, #3
 8009a6a:	1b52      	subs	r2, r2, r5
 8009a6c:	f022 0203 	bic.w	r2, r2, #3
 8009a70:	3d03      	subs	r5, #3
 8009a72:	45ac      	cmp	ip, r5
 8009a74:	bf38      	it	cc
 8009a76:	2200      	movcc	r2, #0
 8009a78:	441a      	add	r2, r3
 8009a7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009a7e:	b17b      	cbz	r3, 8009aa0 <__mdiff+0x108>
 8009a80:	6107      	str	r7, [r0, #16]
 8009a82:	e7a3      	b.n	80099cc <__mdiff+0x34>
 8009a84:	f856 8b04 	ldr.w	r8, [r6], #4
 8009a88:	fa11 f288 	uxtah	r2, r1, r8
 8009a8c:	1414      	asrs	r4, r2, #16
 8009a8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009a92:	b292      	uxth	r2, r2
 8009a94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009a98:	f84e 2b04 	str.w	r2, [lr], #4
 8009a9c:	1421      	asrs	r1, r4, #16
 8009a9e:	e7e0      	b.n	8009a62 <__mdiff+0xca>
 8009aa0:	3f01      	subs	r7, #1
 8009aa2:	e7ea      	b.n	8009a7a <__mdiff+0xe2>
 8009aa4:	0800b048 	.word	0x0800b048
 8009aa8:	0800b0d4 	.word	0x0800b0d4

08009aac <__ulp>:
 8009aac:	b082      	sub	sp, #8
 8009aae:	ed8d 0b00 	vstr	d0, [sp]
 8009ab2:	9b01      	ldr	r3, [sp, #4]
 8009ab4:	4912      	ldr	r1, [pc, #72]	; (8009b00 <__ulp+0x54>)
 8009ab6:	4019      	ands	r1, r3
 8009ab8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009abc:	2900      	cmp	r1, #0
 8009abe:	dd05      	ble.n	8009acc <__ulp+0x20>
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	ec43 2b10 	vmov	d0, r2, r3
 8009ac8:	b002      	add	sp, #8
 8009aca:	4770      	bx	lr
 8009acc:	4249      	negs	r1, r1
 8009ace:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009ad2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009ad6:	f04f 0200 	mov.w	r2, #0
 8009ada:	f04f 0300 	mov.w	r3, #0
 8009ade:	da04      	bge.n	8009aea <__ulp+0x3e>
 8009ae0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009ae4:	fa41 f300 	asr.w	r3, r1, r0
 8009ae8:	e7ec      	b.n	8009ac4 <__ulp+0x18>
 8009aea:	f1a0 0114 	sub.w	r1, r0, #20
 8009aee:	291e      	cmp	r1, #30
 8009af0:	bfda      	itte	le
 8009af2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009af6:	fa20 f101 	lsrle.w	r1, r0, r1
 8009afa:	2101      	movgt	r1, #1
 8009afc:	460a      	mov	r2, r1
 8009afe:	e7e1      	b.n	8009ac4 <__ulp+0x18>
 8009b00:	7ff00000 	.word	0x7ff00000

08009b04 <__b2d>:
 8009b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b06:	6905      	ldr	r5, [r0, #16]
 8009b08:	f100 0714 	add.w	r7, r0, #20
 8009b0c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009b10:	1f2e      	subs	r6, r5, #4
 8009b12:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009b16:	4620      	mov	r0, r4
 8009b18:	f7ff fd48 	bl	80095ac <__hi0bits>
 8009b1c:	f1c0 0320 	rsb	r3, r0, #32
 8009b20:	280a      	cmp	r0, #10
 8009b22:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009ba0 <__b2d+0x9c>
 8009b26:	600b      	str	r3, [r1, #0]
 8009b28:	dc14      	bgt.n	8009b54 <__b2d+0x50>
 8009b2a:	f1c0 0e0b 	rsb	lr, r0, #11
 8009b2e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009b32:	42b7      	cmp	r7, r6
 8009b34:	ea41 030c 	orr.w	r3, r1, ip
 8009b38:	bf34      	ite	cc
 8009b3a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009b3e:	2100      	movcs	r1, #0
 8009b40:	3015      	adds	r0, #21
 8009b42:	fa04 f000 	lsl.w	r0, r4, r0
 8009b46:	fa21 f10e 	lsr.w	r1, r1, lr
 8009b4a:	ea40 0201 	orr.w	r2, r0, r1
 8009b4e:	ec43 2b10 	vmov	d0, r2, r3
 8009b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b54:	42b7      	cmp	r7, r6
 8009b56:	bf3a      	itte	cc
 8009b58:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009b5c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009b60:	2100      	movcs	r1, #0
 8009b62:	380b      	subs	r0, #11
 8009b64:	d017      	beq.n	8009b96 <__b2d+0x92>
 8009b66:	f1c0 0c20 	rsb	ip, r0, #32
 8009b6a:	fa04 f500 	lsl.w	r5, r4, r0
 8009b6e:	42be      	cmp	r6, r7
 8009b70:	fa21 f40c 	lsr.w	r4, r1, ip
 8009b74:	ea45 0504 	orr.w	r5, r5, r4
 8009b78:	bf8c      	ite	hi
 8009b7a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009b7e:	2400      	movls	r4, #0
 8009b80:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009b84:	fa01 f000 	lsl.w	r0, r1, r0
 8009b88:	fa24 f40c 	lsr.w	r4, r4, ip
 8009b8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009b90:	ea40 0204 	orr.w	r2, r0, r4
 8009b94:	e7db      	b.n	8009b4e <__b2d+0x4a>
 8009b96:	ea44 030c 	orr.w	r3, r4, ip
 8009b9a:	460a      	mov	r2, r1
 8009b9c:	e7d7      	b.n	8009b4e <__b2d+0x4a>
 8009b9e:	bf00      	nop
 8009ba0:	3ff00000 	.word	0x3ff00000

08009ba4 <__d2b>:
 8009ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ba8:	4689      	mov	r9, r1
 8009baa:	2101      	movs	r1, #1
 8009bac:	ec57 6b10 	vmov	r6, r7, d0
 8009bb0:	4690      	mov	r8, r2
 8009bb2:	f7ff fc09 	bl	80093c8 <_Balloc>
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	b930      	cbnz	r0, 8009bc8 <__d2b+0x24>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	4b25      	ldr	r3, [pc, #148]	; (8009c54 <__d2b+0xb0>)
 8009bbe:	4826      	ldr	r0, [pc, #152]	; (8009c58 <__d2b+0xb4>)
 8009bc0:	f240 310a 	movw	r1, #778	; 0x30a
 8009bc4:	f000 fb4e 	bl	800a264 <__assert_func>
 8009bc8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009bcc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009bd0:	bb35      	cbnz	r5, 8009c20 <__d2b+0x7c>
 8009bd2:	2e00      	cmp	r6, #0
 8009bd4:	9301      	str	r3, [sp, #4]
 8009bd6:	d028      	beq.n	8009c2a <__d2b+0x86>
 8009bd8:	4668      	mov	r0, sp
 8009bda:	9600      	str	r6, [sp, #0]
 8009bdc:	f7ff fd06 	bl	80095ec <__lo0bits>
 8009be0:	9900      	ldr	r1, [sp, #0]
 8009be2:	b300      	cbz	r0, 8009c26 <__d2b+0x82>
 8009be4:	9a01      	ldr	r2, [sp, #4]
 8009be6:	f1c0 0320 	rsb	r3, r0, #32
 8009bea:	fa02 f303 	lsl.w	r3, r2, r3
 8009bee:	430b      	orrs	r3, r1
 8009bf0:	40c2      	lsrs	r2, r0
 8009bf2:	6163      	str	r3, [r4, #20]
 8009bf4:	9201      	str	r2, [sp, #4]
 8009bf6:	9b01      	ldr	r3, [sp, #4]
 8009bf8:	61a3      	str	r3, [r4, #24]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	bf14      	ite	ne
 8009bfe:	2202      	movne	r2, #2
 8009c00:	2201      	moveq	r2, #1
 8009c02:	6122      	str	r2, [r4, #16]
 8009c04:	b1d5      	cbz	r5, 8009c3c <__d2b+0x98>
 8009c06:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c0a:	4405      	add	r5, r0
 8009c0c:	f8c9 5000 	str.w	r5, [r9]
 8009c10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c14:	f8c8 0000 	str.w	r0, [r8]
 8009c18:	4620      	mov	r0, r4
 8009c1a:	b003      	add	sp, #12
 8009c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c24:	e7d5      	b.n	8009bd2 <__d2b+0x2e>
 8009c26:	6161      	str	r1, [r4, #20]
 8009c28:	e7e5      	b.n	8009bf6 <__d2b+0x52>
 8009c2a:	a801      	add	r0, sp, #4
 8009c2c:	f7ff fcde 	bl	80095ec <__lo0bits>
 8009c30:	9b01      	ldr	r3, [sp, #4]
 8009c32:	6163      	str	r3, [r4, #20]
 8009c34:	2201      	movs	r2, #1
 8009c36:	6122      	str	r2, [r4, #16]
 8009c38:	3020      	adds	r0, #32
 8009c3a:	e7e3      	b.n	8009c04 <__d2b+0x60>
 8009c3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c44:	f8c9 0000 	str.w	r0, [r9]
 8009c48:	6918      	ldr	r0, [r3, #16]
 8009c4a:	f7ff fcaf 	bl	80095ac <__hi0bits>
 8009c4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c52:	e7df      	b.n	8009c14 <__d2b+0x70>
 8009c54:	0800b048 	.word	0x0800b048
 8009c58:	0800b0d4 	.word	0x0800b0d4

08009c5c <__ratio>:
 8009c5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c60:	4688      	mov	r8, r1
 8009c62:	4669      	mov	r1, sp
 8009c64:	4681      	mov	r9, r0
 8009c66:	f7ff ff4d 	bl	8009b04 <__b2d>
 8009c6a:	a901      	add	r1, sp, #4
 8009c6c:	4640      	mov	r0, r8
 8009c6e:	ec55 4b10 	vmov	r4, r5, d0
 8009c72:	f7ff ff47 	bl	8009b04 <__b2d>
 8009c76:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c7a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009c7e:	eba3 0c02 	sub.w	ip, r3, r2
 8009c82:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009c86:	1a9b      	subs	r3, r3, r2
 8009c88:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009c8c:	ec51 0b10 	vmov	r0, r1, d0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	bfd6      	itet	le
 8009c94:	460a      	movle	r2, r1
 8009c96:	462a      	movgt	r2, r5
 8009c98:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009c9c:	468b      	mov	fp, r1
 8009c9e:	462f      	mov	r7, r5
 8009ca0:	bfd4      	ite	le
 8009ca2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009ca6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009caa:	4620      	mov	r0, r4
 8009cac:	ee10 2a10 	vmov	r2, s0
 8009cb0:	465b      	mov	r3, fp
 8009cb2:	4639      	mov	r1, r7
 8009cb4:	f7f6 fdca 	bl	800084c <__aeabi_ddiv>
 8009cb8:	ec41 0b10 	vmov	d0, r0, r1
 8009cbc:	b003      	add	sp, #12
 8009cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009cc2 <__copybits>:
 8009cc2:	3901      	subs	r1, #1
 8009cc4:	b570      	push	{r4, r5, r6, lr}
 8009cc6:	1149      	asrs	r1, r1, #5
 8009cc8:	6914      	ldr	r4, [r2, #16]
 8009cca:	3101      	adds	r1, #1
 8009ccc:	f102 0314 	add.w	r3, r2, #20
 8009cd0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009cd4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009cd8:	1f05      	subs	r5, r0, #4
 8009cda:	42a3      	cmp	r3, r4
 8009cdc:	d30c      	bcc.n	8009cf8 <__copybits+0x36>
 8009cde:	1aa3      	subs	r3, r4, r2
 8009ce0:	3b11      	subs	r3, #17
 8009ce2:	f023 0303 	bic.w	r3, r3, #3
 8009ce6:	3211      	adds	r2, #17
 8009ce8:	42a2      	cmp	r2, r4
 8009cea:	bf88      	it	hi
 8009cec:	2300      	movhi	r3, #0
 8009cee:	4418      	add	r0, r3
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	4288      	cmp	r0, r1
 8009cf4:	d305      	bcc.n	8009d02 <__copybits+0x40>
 8009cf6:	bd70      	pop	{r4, r5, r6, pc}
 8009cf8:	f853 6b04 	ldr.w	r6, [r3], #4
 8009cfc:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d00:	e7eb      	b.n	8009cda <__copybits+0x18>
 8009d02:	f840 3b04 	str.w	r3, [r0], #4
 8009d06:	e7f4      	b.n	8009cf2 <__copybits+0x30>

08009d08 <__any_on>:
 8009d08:	f100 0214 	add.w	r2, r0, #20
 8009d0c:	6900      	ldr	r0, [r0, #16]
 8009d0e:	114b      	asrs	r3, r1, #5
 8009d10:	4298      	cmp	r0, r3
 8009d12:	b510      	push	{r4, lr}
 8009d14:	db11      	blt.n	8009d3a <__any_on+0x32>
 8009d16:	dd0a      	ble.n	8009d2e <__any_on+0x26>
 8009d18:	f011 011f 	ands.w	r1, r1, #31
 8009d1c:	d007      	beq.n	8009d2e <__any_on+0x26>
 8009d1e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d22:	fa24 f001 	lsr.w	r0, r4, r1
 8009d26:	fa00 f101 	lsl.w	r1, r0, r1
 8009d2a:	428c      	cmp	r4, r1
 8009d2c:	d10b      	bne.n	8009d46 <__any_on+0x3e>
 8009d2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d803      	bhi.n	8009d3e <__any_on+0x36>
 8009d36:	2000      	movs	r0, #0
 8009d38:	bd10      	pop	{r4, pc}
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	e7f7      	b.n	8009d2e <__any_on+0x26>
 8009d3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d42:	2900      	cmp	r1, #0
 8009d44:	d0f5      	beq.n	8009d32 <__any_on+0x2a>
 8009d46:	2001      	movs	r0, #1
 8009d48:	e7f6      	b.n	8009d38 <__any_on+0x30>

08009d4a <_calloc_r>:
 8009d4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d4c:	fba1 2402 	umull	r2, r4, r1, r2
 8009d50:	b94c      	cbnz	r4, 8009d66 <_calloc_r+0x1c>
 8009d52:	4611      	mov	r1, r2
 8009d54:	9201      	str	r2, [sp, #4]
 8009d56:	f000 f87b 	bl	8009e50 <_malloc_r>
 8009d5a:	9a01      	ldr	r2, [sp, #4]
 8009d5c:	4605      	mov	r5, r0
 8009d5e:	b930      	cbnz	r0, 8009d6e <_calloc_r+0x24>
 8009d60:	4628      	mov	r0, r5
 8009d62:	b003      	add	sp, #12
 8009d64:	bd30      	pop	{r4, r5, pc}
 8009d66:	220c      	movs	r2, #12
 8009d68:	6002      	str	r2, [r0, #0]
 8009d6a:	2500      	movs	r5, #0
 8009d6c:	e7f8      	b.n	8009d60 <_calloc_r+0x16>
 8009d6e:	4621      	mov	r1, r4
 8009d70:	f7fc fb32 	bl	80063d8 <memset>
 8009d74:	e7f4      	b.n	8009d60 <_calloc_r+0x16>
	...

08009d78 <_free_r>:
 8009d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d7a:	2900      	cmp	r1, #0
 8009d7c:	d044      	beq.n	8009e08 <_free_r+0x90>
 8009d7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d82:	9001      	str	r0, [sp, #4]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f1a1 0404 	sub.w	r4, r1, #4
 8009d8a:	bfb8      	it	lt
 8009d8c:	18e4      	addlt	r4, r4, r3
 8009d8e:	f000 fc6d 	bl	800a66c <__malloc_lock>
 8009d92:	4a1e      	ldr	r2, [pc, #120]	; (8009e0c <_free_r+0x94>)
 8009d94:	9801      	ldr	r0, [sp, #4]
 8009d96:	6813      	ldr	r3, [r2, #0]
 8009d98:	b933      	cbnz	r3, 8009da8 <_free_r+0x30>
 8009d9a:	6063      	str	r3, [r4, #4]
 8009d9c:	6014      	str	r4, [r2, #0]
 8009d9e:	b003      	add	sp, #12
 8009da0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009da4:	f000 bc68 	b.w	800a678 <__malloc_unlock>
 8009da8:	42a3      	cmp	r3, r4
 8009daa:	d908      	bls.n	8009dbe <_free_r+0x46>
 8009dac:	6825      	ldr	r5, [r4, #0]
 8009dae:	1961      	adds	r1, r4, r5
 8009db0:	428b      	cmp	r3, r1
 8009db2:	bf01      	itttt	eq
 8009db4:	6819      	ldreq	r1, [r3, #0]
 8009db6:	685b      	ldreq	r3, [r3, #4]
 8009db8:	1949      	addeq	r1, r1, r5
 8009dba:	6021      	streq	r1, [r4, #0]
 8009dbc:	e7ed      	b.n	8009d9a <_free_r+0x22>
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	b10b      	cbz	r3, 8009dc8 <_free_r+0x50>
 8009dc4:	42a3      	cmp	r3, r4
 8009dc6:	d9fa      	bls.n	8009dbe <_free_r+0x46>
 8009dc8:	6811      	ldr	r1, [r2, #0]
 8009dca:	1855      	adds	r5, r2, r1
 8009dcc:	42a5      	cmp	r5, r4
 8009dce:	d10b      	bne.n	8009de8 <_free_r+0x70>
 8009dd0:	6824      	ldr	r4, [r4, #0]
 8009dd2:	4421      	add	r1, r4
 8009dd4:	1854      	adds	r4, r2, r1
 8009dd6:	42a3      	cmp	r3, r4
 8009dd8:	6011      	str	r1, [r2, #0]
 8009dda:	d1e0      	bne.n	8009d9e <_free_r+0x26>
 8009ddc:	681c      	ldr	r4, [r3, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	6053      	str	r3, [r2, #4]
 8009de2:	4421      	add	r1, r4
 8009de4:	6011      	str	r1, [r2, #0]
 8009de6:	e7da      	b.n	8009d9e <_free_r+0x26>
 8009de8:	d902      	bls.n	8009df0 <_free_r+0x78>
 8009dea:	230c      	movs	r3, #12
 8009dec:	6003      	str	r3, [r0, #0]
 8009dee:	e7d6      	b.n	8009d9e <_free_r+0x26>
 8009df0:	6825      	ldr	r5, [r4, #0]
 8009df2:	1961      	adds	r1, r4, r5
 8009df4:	428b      	cmp	r3, r1
 8009df6:	bf04      	itt	eq
 8009df8:	6819      	ldreq	r1, [r3, #0]
 8009dfa:	685b      	ldreq	r3, [r3, #4]
 8009dfc:	6063      	str	r3, [r4, #4]
 8009dfe:	bf04      	itt	eq
 8009e00:	1949      	addeq	r1, r1, r5
 8009e02:	6021      	streq	r1, [r4, #0]
 8009e04:	6054      	str	r4, [r2, #4]
 8009e06:	e7ca      	b.n	8009d9e <_free_r+0x26>
 8009e08:	b003      	add	sp, #12
 8009e0a:	bd30      	pop	{r4, r5, pc}
 8009e0c:	200004ac 	.word	0x200004ac

08009e10 <sbrk_aligned>:
 8009e10:	b570      	push	{r4, r5, r6, lr}
 8009e12:	4e0e      	ldr	r6, [pc, #56]	; (8009e4c <sbrk_aligned+0x3c>)
 8009e14:	460c      	mov	r4, r1
 8009e16:	6831      	ldr	r1, [r6, #0]
 8009e18:	4605      	mov	r5, r0
 8009e1a:	b911      	cbnz	r1, 8009e22 <sbrk_aligned+0x12>
 8009e1c:	f000 fa04 	bl	800a228 <_sbrk_r>
 8009e20:	6030      	str	r0, [r6, #0]
 8009e22:	4621      	mov	r1, r4
 8009e24:	4628      	mov	r0, r5
 8009e26:	f000 f9ff 	bl	800a228 <_sbrk_r>
 8009e2a:	1c43      	adds	r3, r0, #1
 8009e2c:	d00a      	beq.n	8009e44 <sbrk_aligned+0x34>
 8009e2e:	1cc4      	adds	r4, r0, #3
 8009e30:	f024 0403 	bic.w	r4, r4, #3
 8009e34:	42a0      	cmp	r0, r4
 8009e36:	d007      	beq.n	8009e48 <sbrk_aligned+0x38>
 8009e38:	1a21      	subs	r1, r4, r0
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	f000 f9f4 	bl	800a228 <_sbrk_r>
 8009e40:	3001      	adds	r0, #1
 8009e42:	d101      	bne.n	8009e48 <sbrk_aligned+0x38>
 8009e44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009e48:	4620      	mov	r0, r4
 8009e4a:	bd70      	pop	{r4, r5, r6, pc}
 8009e4c:	200004b0 	.word	0x200004b0

08009e50 <_malloc_r>:
 8009e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e54:	1ccd      	adds	r5, r1, #3
 8009e56:	f025 0503 	bic.w	r5, r5, #3
 8009e5a:	3508      	adds	r5, #8
 8009e5c:	2d0c      	cmp	r5, #12
 8009e5e:	bf38      	it	cc
 8009e60:	250c      	movcc	r5, #12
 8009e62:	2d00      	cmp	r5, #0
 8009e64:	4607      	mov	r7, r0
 8009e66:	db01      	blt.n	8009e6c <_malloc_r+0x1c>
 8009e68:	42a9      	cmp	r1, r5
 8009e6a:	d905      	bls.n	8009e78 <_malloc_r+0x28>
 8009e6c:	230c      	movs	r3, #12
 8009e6e:	603b      	str	r3, [r7, #0]
 8009e70:	2600      	movs	r6, #0
 8009e72:	4630      	mov	r0, r6
 8009e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e78:	4e2e      	ldr	r6, [pc, #184]	; (8009f34 <_malloc_r+0xe4>)
 8009e7a:	f000 fbf7 	bl	800a66c <__malloc_lock>
 8009e7e:	6833      	ldr	r3, [r6, #0]
 8009e80:	461c      	mov	r4, r3
 8009e82:	bb34      	cbnz	r4, 8009ed2 <_malloc_r+0x82>
 8009e84:	4629      	mov	r1, r5
 8009e86:	4638      	mov	r0, r7
 8009e88:	f7ff ffc2 	bl	8009e10 <sbrk_aligned>
 8009e8c:	1c43      	adds	r3, r0, #1
 8009e8e:	4604      	mov	r4, r0
 8009e90:	d14d      	bne.n	8009f2e <_malloc_r+0xde>
 8009e92:	6834      	ldr	r4, [r6, #0]
 8009e94:	4626      	mov	r6, r4
 8009e96:	2e00      	cmp	r6, #0
 8009e98:	d140      	bne.n	8009f1c <_malloc_r+0xcc>
 8009e9a:	6823      	ldr	r3, [r4, #0]
 8009e9c:	4631      	mov	r1, r6
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	eb04 0803 	add.w	r8, r4, r3
 8009ea4:	f000 f9c0 	bl	800a228 <_sbrk_r>
 8009ea8:	4580      	cmp	r8, r0
 8009eaa:	d13a      	bne.n	8009f22 <_malloc_r+0xd2>
 8009eac:	6821      	ldr	r1, [r4, #0]
 8009eae:	3503      	adds	r5, #3
 8009eb0:	1a6d      	subs	r5, r5, r1
 8009eb2:	f025 0503 	bic.w	r5, r5, #3
 8009eb6:	3508      	adds	r5, #8
 8009eb8:	2d0c      	cmp	r5, #12
 8009eba:	bf38      	it	cc
 8009ebc:	250c      	movcc	r5, #12
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	4638      	mov	r0, r7
 8009ec2:	f7ff ffa5 	bl	8009e10 <sbrk_aligned>
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	d02b      	beq.n	8009f22 <_malloc_r+0xd2>
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	442b      	add	r3, r5
 8009ece:	6023      	str	r3, [r4, #0]
 8009ed0:	e00e      	b.n	8009ef0 <_malloc_r+0xa0>
 8009ed2:	6822      	ldr	r2, [r4, #0]
 8009ed4:	1b52      	subs	r2, r2, r5
 8009ed6:	d41e      	bmi.n	8009f16 <_malloc_r+0xc6>
 8009ed8:	2a0b      	cmp	r2, #11
 8009eda:	d916      	bls.n	8009f0a <_malloc_r+0xba>
 8009edc:	1961      	adds	r1, r4, r5
 8009ede:	42a3      	cmp	r3, r4
 8009ee0:	6025      	str	r5, [r4, #0]
 8009ee2:	bf18      	it	ne
 8009ee4:	6059      	strne	r1, [r3, #4]
 8009ee6:	6863      	ldr	r3, [r4, #4]
 8009ee8:	bf08      	it	eq
 8009eea:	6031      	streq	r1, [r6, #0]
 8009eec:	5162      	str	r2, [r4, r5]
 8009eee:	604b      	str	r3, [r1, #4]
 8009ef0:	4638      	mov	r0, r7
 8009ef2:	f104 060b 	add.w	r6, r4, #11
 8009ef6:	f000 fbbf 	bl	800a678 <__malloc_unlock>
 8009efa:	f026 0607 	bic.w	r6, r6, #7
 8009efe:	1d23      	adds	r3, r4, #4
 8009f00:	1af2      	subs	r2, r6, r3
 8009f02:	d0b6      	beq.n	8009e72 <_malloc_r+0x22>
 8009f04:	1b9b      	subs	r3, r3, r6
 8009f06:	50a3      	str	r3, [r4, r2]
 8009f08:	e7b3      	b.n	8009e72 <_malloc_r+0x22>
 8009f0a:	6862      	ldr	r2, [r4, #4]
 8009f0c:	42a3      	cmp	r3, r4
 8009f0e:	bf0c      	ite	eq
 8009f10:	6032      	streq	r2, [r6, #0]
 8009f12:	605a      	strne	r2, [r3, #4]
 8009f14:	e7ec      	b.n	8009ef0 <_malloc_r+0xa0>
 8009f16:	4623      	mov	r3, r4
 8009f18:	6864      	ldr	r4, [r4, #4]
 8009f1a:	e7b2      	b.n	8009e82 <_malloc_r+0x32>
 8009f1c:	4634      	mov	r4, r6
 8009f1e:	6876      	ldr	r6, [r6, #4]
 8009f20:	e7b9      	b.n	8009e96 <_malloc_r+0x46>
 8009f22:	230c      	movs	r3, #12
 8009f24:	603b      	str	r3, [r7, #0]
 8009f26:	4638      	mov	r0, r7
 8009f28:	f000 fba6 	bl	800a678 <__malloc_unlock>
 8009f2c:	e7a1      	b.n	8009e72 <_malloc_r+0x22>
 8009f2e:	6025      	str	r5, [r4, #0]
 8009f30:	e7de      	b.n	8009ef0 <_malloc_r+0xa0>
 8009f32:	bf00      	nop
 8009f34:	200004ac 	.word	0x200004ac

08009f38 <__ssputs_r>:
 8009f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f3c:	688e      	ldr	r6, [r1, #8]
 8009f3e:	429e      	cmp	r6, r3
 8009f40:	4682      	mov	sl, r0
 8009f42:	460c      	mov	r4, r1
 8009f44:	4690      	mov	r8, r2
 8009f46:	461f      	mov	r7, r3
 8009f48:	d838      	bhi.n	8009fbc <__ssputs_r+0x84>
 8009f4a:	898a      	ldrh	r2, [r1, #12]
 8009f4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f50:	d032      	beq.n	8009fb8 <__ssputs_r+0x80>
 8009f52:	6825      	ldr	r5, [r4, #0]
 8009f54:	6909      	ldr	r1, [r1, #16]
 8009f56:	eba5 0901 	sub.w	r9, r5, r1
 8009f5a:	6965      	ldr	r5, [r4, #20]
 8009f5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f64:	3301      	adds	r3, #1
 8009f66:	444b      	add	r3, r9
 8009f68:	106d      	asrs	r5, r5, #1
 8009f6a:	429d      	cmp	r5, r3
 8009f6c:	bf38      	it	cc
 8009f6e:	461d      	movcc	r5, r3
 8009f70:	0553      	lsls	r3, r2, #21
 8009f72:	d531      	bpl.n	8009fd8 <__ssputs_r+0xa0>
 8009f74:	4629      	mov	r1, r5
 8009f76:	f7ff ff6b 	bl	8009e50 <_malloc_r>
 8009f7a:	4606      	mov	r6, r0
 8009f7c:	b950      	cbnz	r0, 8009f94 <__ssputs_r+0x5c>
 8009f7e:	230c      	movs	r3, #12
 8009f80:	f8ca 3000 	str.w	r3, [sl]
 8009f84:	89a3      	ldrh	r3, [r4, #12]
 8009f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f8a:	81a3      	strh	r3, [r4, #12]
 8009f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f94:	6921      	ldr	r1, [r4, #16]
 8009f96:	464a      	mov	r2, r9
 8009f98:	f7ff fa08 	bl	80093ac <memcpy>
 8009f9c:	89a3      	ldrh	r3, [r4, #12]
 8009f9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fa6:	81a3      	strh	r3, [r4, #12]
 8009fa8:	6126      	str	r6, [r4, #16]
 8009faa:	6165      	str	r5, [r4, #20]
 8009fac:	444e      	add	r6, r9
 8009fae:	eba5 0509 	sub.w	r5, r5, r9
 8009fb2:	6026      	str	r6, [r4, #0]
 8009fb4:	60a5      	str	r5, [r4, #8]
 8009fb6:	463e      	mov	r6, r7
 8009fb8:	42be      	cmp	r6, r7
 8009fba:	d900      	bls.n	8009fbe <__ssputs_r+0x86>
 8009fbc:	463e      	mov	r6, r7
 8009fbe:	6820      	ldr	r0, [r4, #0]
 8009fc0:	4632      	mov	r2, r6
 8009fc2:	4641      	mov	r1, r8
 8009fc4:	f000 fb38 	bl	800a638 <memmove>
 8009fc8:	68a3      	ldr	r3, [r4, #8]
 8009fca:	1b9b      	subs	r3, r3, r6
 8009fcc:	60a3      	str	r3, [r4, #8]
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	4433      	add	r3, r6
 8009fd2:	6023      	str	r3, [r4, #0]
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	e7db      	b.n	8009f90 <__ssputs_r+0x58>
 8009fd8:	462a      	mov	r2, r5
 8009fda:	f000 fb53 	bl	800a684 <_realloc_r>
 8009fde:	4606      	mov	r6, r0
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d1e1      	bne.n	8009fa8 <__ssputs_r+0x70>
 8009fe4:	6921      	ldr	r1, [r4, #16]
 8009fe6:	4650      	mov	r0, sl
 8009fe8:	f7ff fec6 	bl	8009d78 <_free_r>
 8009fec:	e7c7      	b.n	8009f7e <__ssputs_r+0x46>
	...

08009ff0 <_svfiprintf_r>:
 8009ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff4:	4698      	mov	r8, r3
 8009ff6:	898b      	ldrh	r3, [r1, #12]
 8009ff8:	061b      	lsls	r3, r3, #24
 8009ffa:	b09d      	sub	sp, #116	; 0x74
 8009ffc:	4607      	mov	r7, r0
 8009ffe:	460d      	mov	r5, r1
 800a000:	4614      	mov	r4, r2
 800a002:	d50e      	bpl.n	800a022 <_svfiprintf_r+0x32>
 800a004:	690b      	ldr	r3, [r1, #16]
 800a006:	b963      	cbnz	r3, 800a022 <_svfiprintf_r+0x32>
 800a008:	2140      	movs	r1, #64	; 0x40
 800a00a:	f7ff ff21 	bl	8009e50 <_malloc_r>
 800a00e:	6028      	str	r0, [r5, #0]
 800a010:	6128      	str	r0, [r5, #16]
 800a012:	b920      	cbnz	r0, 800a01e <_svfiprintf_r+0x2e>
 800a014:	230c      	movs	r3, #12
 800a016:	603b      	str	r3, [r7, #0]
 800a018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a01c:	e0d1      	b.n	800a1c2 <_svfiprintf_r+0x1d2>
 800a01e:	2340      	movs	r3, #64	; 0x40
 800a020:	616b      	str	r3, [r5, #20]
 800a022:	2300      	movs	r3, #0
 800a024:	9309      	str	r3, [sp, #36]	; 0x24
 800a026:	2320      	movs	r3, #32
 800a028:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a02c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a030:	2330      	movs	r3, #48	; 0x30
 800a032:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a1dc <_svfiprintf_r+0x1ec>
 800a036:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a03a:	f04f 0901 	mov.w	r9, #1
 800a03e:	4623      	mov	r3, r4
 800a040:	469a      	mov	sl, r3
 800a042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a046:	b10a      	cbz	r2, 800a04c <_svfiprintf_r+0x5c>
 800a048:	2a25      	cmp	r2, #37	; 0x25
 800a04a:	d1f9      	bne.n	800a040 <_svfiprintf_r+0x50>
 800a04c:	ebba 0b04 	subs.w	fp, sl, r4
 800a050:	d00b      	beq.n	800a06a <_svfiprintf_r+0x7a>
 800a052:	465b      	mov	r3, fp
 800a054:	4622      	mov	r2, r4
 800a056:	4629      	mov	r1, r5
 800a058:	4638      	mov	r0, r7
 800a05a:	f7ff ff6d 	bl	8009f38 <__ssputs_r>
 800a05e:	3001      	adds	r0, #1
 800a060:	f000 80aa 	beq.w	800a1b8 <_svfiprintf_r+0x1c8>
 800a064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a066:	445a      	add	r2, fp
 800a068:	9209      	str	r2, [sp, #36]	; 0x24
 800a06a:	f89a 3000 	ldrb.w	r3, [sl]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f000 80a2 	beq.w	800a1b8 <_svfiprintf_r+0x1c8>
 800a074:	2300      	movs	r3, #0
 800a076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a07a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a07e:	f10a 0a01 	add.w	sl, sl, #1
 800a082:	9304      	str	r3, [sp, #16]
 800a084:	9307      	str	r3, [sp, #28]
 800a086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a08a:	931a      	str	r3, [sp, #104]	; 0x68
 800a08c:	4654      	mov	r4, sl
 800a08e:	2205      	movs	r2, #5
 800a090:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a094:	4851      	ldr	r0, [pc, #324]	; (800a1dc <_svfiprintf_r+0x1ec>)
 800a096:	f7f6 f8a3 	bl	80001e0 <memchr>
 800a09a:	9a04      	ldr	r2, [sp, #16]
 800a09c:	b9d8      	cbnz	r0, 800a0d6 <_svfiprintf_r+0xe6>
 800a09e:	06d0      	lsls	r0, r2, #27
 800a0a0:	bf44      	itt	mi
 800a0a2:	2320      	movmi	r3, #32
 800a0a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0a8:	0711      	lsls	r1, r2, #28
 800a0aa:	bf44      	itt	mi
 800a0ac:	232b      	movmi	r3, #43	; 0x2b
 800a0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0b6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0b8:	d015      	beq.n	800a0e6 <_svfiprintf_r+0xf6>
 800a0ba:	9a07      	ldr	r2, [sp, #28]
 800a0bc:	4654      	mov	r4, sl
 800a0be:	2000      	movs	r0, #0
 800a0c0:	f04f 0c0a 	mov.w	ip, #10
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0ca:	3b30      	subs	r3, #48	; 0x30
 800a0cc:	2b09      	cmp	r3, #9
 800a0ce:	d94e      	bls.n	800a16e <_svfiprintf_r+0x17e>
 800a0d0:	b1b0      	cbz	r0, 800a100 <_svfiprintf_r+0x110>
 800a0d2:	9207      	str	r2, [sp, #28]
 800a0d4:	e014      	b.n	800a100 <_svfiprintf_r+0x110>
 800a0d6:	eba0 0308 	sub.w	r3, r0, r8
 800a0da:	fa09 f303 	lsl.w	r3, r9, r3
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	9304      	str	r3, [sp, #16]
 800a0e2:	46a2      	mov	sl, r4
 800a0e4:	e7d2      	b.n	800a08c <_svfiprintf_r+0x9c>
 800a0e6:	9b03      	ldr	r3, [sp, #12]
 800a0e8:	1d19      	adds	r1, r3, #4
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	9103      	str	r1, [sp, #12]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	bfbb      	ittet	lt
 800a0f2:	425b      	neglt	r3, r3
 800a0f4:	f042 0202 	orrlt.w	r2, r2, #2
 800a0f8:	9307      	strge	r3, [sp, #28]
 800a0fa:	9307      	strlt	r3, [sp, #28]
 800a0fc:	bfb8      	it	lt
 800a0fe:	9204      	strlt	r2, [sp, #16]
 800a100:	7823      	ldrb	r3, [r4, #0]
 800a102:	2b2e      	cmp	r3, #46	; 0x2e
 800a104:	d10c      	bne.n	800a120 <_svfiprintf_r+0x130>
 800a106:	7863      	ldrb	r3, [r4, #1]
 800a108:	2b2a      	cmp	r3, #42	; 0x2a
 800a10a:	d135      	bne.n	800a178 <_svfiprintf_r+0x188>
 800a10c:	9b03      	ldr	r3, [sp, #12]
 800a10e:	1d1a      	adds	r2, r3, #4
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	9203      	str	r2, [sp, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	bfb8      	it	lt
 800a118:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a11c:	3402      	adds	r4, #2
 800a11e:	9305      	str	r3, [sp, #20]
 800a120:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a1ec <_svfiprintf_r+0x1fc>
 800a124:	7821      	ldrb	r1, [r4, #0]
 800a126:	2203      	movs	r2, #3
 800a128:	4650      	mov	r0, sl
 800a12a:	f7f6 f859 	bl	80001e0 <memchr>
 800a12e:	b140      	cbz	r0, 800a142 <_svfiprintf_r+0x152>
 800a130:	2340      	movs	r3, #64	; 0x40
 800a132:	eba0 000a 	sub.w	r0, r0, sl
 800a136:	fa03 f000 	lsl.w	r0, r3, r0
 800a13a:	9b04      	ldr	r3, [sp, #16]
 800a13c:	4303      	orrs	r3, r0
 800a13e:	3401      	adds	r4, #1
 800a140:	9304      	str	r3, [sp, #16]
 800a142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a146:	4826      	ldr	r0, [pc, #152]	; (800a1e0 <_svfiprintf_r+0x1f0>)
 800a148:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a14c:	2206      	movs	r2, #6
 800a14e:	f7f6 f847 	bl	80001e0 <memchr>
 800a152:	2800      	cmp	r0, #0
 800a154:	d038      	beq.n	800a1c8 <_svfiprintf_r+0x1d8>
 800a156:	4b23      	ldr	r3, [pc, #140]	; (800a1e4 <_svfiprintf_r+0x1f4>)
 800a158:	bb1b      	cbnz	r3, 800a1a2 <_svfiprintf_r+0x1b2>
 800a15a:	9b03      	ldr	r3, [sp, #12]
 800a15c:	3307      	adds	r3, #7
 800a15e:	f023 0307 	bic.w	r3, r3, #7
 800a162:	3308      	adds	r3, #8
 800a164:	9303      	str	r3, [sp, #12]
 800a166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a168:	4433      	add	r3, r6
 800a16a:	9309      	str	r3, [sp, #36]	; 0x24
 800a16c:	e767      	b.n	800a03e <_svfiprintf_r+0x4e>
 800a16e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a172:	460c      	mov	r4, r1
 800a174:	2001      	movs	r0, #1
 800a176:	e7a5      	b.n	800a0c4 <_svfiprintf_r+0xd4>
 800a178:	2300      	movs	r3, #0
 800a17a:	3401      	adds	r4, #1
 800a17c:	9305      	str	r3, [sp, #20]
 800a17e:	4619      	mov	r1, r3
 800a180:	f04f 0c0a 	mov.w	ip, #10
 800a184:	4620      	mov	r0, r4
 800a186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a18a:	3a30      	subs	r2, #48	; 0x30
 800a18c:	2a09      	cmp	r2, #9
 800a18e:	d903      	bls.n	800a198 <_svfiprintf_r+0x1a8>
 800a190:	2b00      	cmp	r3, #0
 800a192:	d0c5      	beq.n	800a120 <_svfiprintf_r+0x130>
 800a194:	9105      	str	r1, [sp, #20]
 800a196:	e7c3      	b.n	800a120 <_svfiprintf_r+0x130>
 800a198:	fb0c 2101 	mla	r1, ip, r1, r2
 800a19c:	4604      	mov	r4, r0
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e7f0      	b.n	800a184 <_svfiprintf_r+0x194>
 800a1a2:	ab03      	add	r3, sp, #12
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	462a      	mov	r2, r5
 800a1a8:	4b0f      	ldr	r3, [pc, #60]	; (800a1e8 <_svfiprintf_r+0x1f8>)
 800a1aa:	a904      	add	r1, sp, #16
 800a1ac:	4638      	mov	r0, r7
 800a1ae:	f7fc f9bb 	bl	8006528 <_printf_float>
 800a1b2:	1c42      	adds	r2, r0, #1
 800a1b4:	4606      	mov	r6, r0
 800a1b6:	d1d6      	bne.n	800a166 <_svfiprintf_r+0x176>
 800a1b8:	89ab      	ldrh	r3, [r5, #12]
 800a1ba:	065b      	lsls	r3, r3, #25
 800a1bc:	f53f af2c 	bmi.w	800a018 <_svfiprintf_r+0x28>
 800a1c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1c2:	b01d      	add	sp, #116	; 0x74
 800a1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c8:	ab03      	add	r3, sp, #12
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	462a      	mov	r2, r5
 800a1ce:	4b06      	ldr	r3, [pc, #24]	; (800a1e8 <_svfiprintf_r+0x1f8>)
 800a1d0:	a904      	add	r1, sp, #16
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	f7fc fc4c 	bl	8006a70 <_printf_i>
 800a1d8:	e7eb      	b.n	800a1b2 <_svfiprintf_r+0x1c2>
 800a1da:	bf00      	nop
 800a1dc:	0800b22c 	.word	0x0800b22c
 800a1e0:	0800b236 	.word	0x0800b236
 800a1e4:	08006529 	.word	0x08006529
 800a1e8:	08009f39 	.word	0x08009f39
 800a1ec:	0800b232 	.word	0x0800b232

0800a1f0 <_read_r>:
 800a1f0:	b538      	push	{r3, r4, r5, lr}
 800a1f2:	4d07      	ldr	r5, [pc, #28]	; (800a210 <_read_r+0x20>)
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	4608      	mov	r0, r1
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	602a      	str	r2, [r5, #0]
 800a1fe:	461a      	mov	r2, r3
 800a200:	f7f7 ff48 	bl	8002094 <_read>
 800a204:	1c43      	adds	r3, r0, #1
 800a206:	d102      	bne.n	800a20e <_read_r+0x1e>
 800a208:	682b      	ldr	r3, [r5, #0]
 800a20a:	b103      	cbz	r3, 800a20e <_read_r+0x1e>
 800a20c:	6023      	str	r3, [r4, #0]
 800a20e:	bd38      	pop	{r3, r4, r5, pc}
 800a210:	200004b4 	.word	0x200004b4
 800a214:	00000000 	.word	0x00000000

0800a218 <nan>:
 800a218:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a220 <nan+0x8>
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	00000000 	.word	0x00000000
 800a224:	7ff80000 	.word	0x7ff80000

0800a228 <_sbrk_r>:
 800a228:	b538      	push	{r3, r4, r5, lr}
 800a22a:	4d06      	ldr	r5, [pc, #24]	; (800a244 <_sbrk_r+0x1c>)
 800a22c:	2300      	movs	r3, #0
 800a22e:	4604      	mov	r4, r0
 800a230:	4608      	mov	r0, r1
 800a232:	602b      	str	r3, [r5, #0]
 800a234:	f7f7 ff9c 	bl	8002170 <_sbrk>
 800a238:	1c43      	adds	r3, r0, #1
 800a23a:	d102      	bne.n	800a242 <_sbrk_r+0x1a>
 800a23c:	682b      	ldr	r3, [r5, #0]
 800a23e:	b103      	cbz	r3, 800a242 <_sbrk_r+0x1a>
 800a240:	6023      	str	r3, [r4, #0]
 800a242:	bd38      	pop	{r3, r4, r5, pc}
 800a244:	200004b4 	.word	0x200004b4

0800a248 <__ascii_wctomb>:
 800a248:	b149      	cbz	r1, 800a25e <__ascii_wctomb+0x16>
 800a24a:	2aff      	cmp	r2, #255	; 0xff
 800a24c:	bf85      	ittet	hi
 800a24e:	238a      	movhi	r3, #138	; 0x8a
 800a250:	6003      	strhi	r3, [r0, #0]
 800a252:	700a      	strbls	r2, [r1, #0]
 800a254:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a258:	bf98      	it	ls
 800a25a:	2001      	movls	r0, #1
 800a25c:	4770      	bx	lr
 800a25e:	4608      	mov	r0, r1
 800a260:	4770      	bx	lr
	...

0800a264 <__assert_func>:
 800a264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a266:	4614      	mov	r4, r2
 800a268:	461a      	mov	r2, r3
 800a26a:	4b09      	ldr	r3, [pc, #36]	; (800a290 <__assert_func+0x2c>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4605      	mov	r5, r0
 800a270:	68d8      	ldr	r0, [r3, #12]
 800a272:	b14c      	cbz	r4, 800a288 <__assert_func+0x24>
 800a274:	4b07      	ldr	r3, [pc, #28]	; (800a294 <__assert_func+0x30>)
 800a276:	9100      	str	r1, [sp, #0]
 800a278:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a27c:	4906      	ldr	r1, [pc, #24]	; (800a298 <__assert_func+0x34>)
 800a27e:	462b      	mov	r3, r5
 800a280:	f000 f9a6 	bl	800a5d0 <fiprintf>
 800a284:	f000 fc46 	bl	800ab14 <abort>
 800a288:	4b04      	ldr	r3, [pc, #16]	; (800a29c <__assert_func+0x38>)
 800a28a:	461c      	mov	r4, r3
 800a28c:	e7f3      	b.n	800a276 <__assert_func+0x12>
 800a28e:	bf00      	nop
 800a290:	2000000c 	.word	0x2000000c
 800a294:	0800b23d 	.word	0x0800b23d
 800a298:	0800b24a 	.word	0x0800b24a
 800a29c:	0800b278 	.word	0x0800b278

0800a2a0 <__sflush_r>:
 800a2a0:	898a      	ldrh	r2, [r1, #12]
 800a2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a6:	4605      	mov	r5, r0
 800a2a8:	0710      	lsls	r0, r2, #28
 800a2aa:	460c      	mov	r4, r1
 800a2ac:	d458      	bmi.n	800a360 <__sflush_r+0xc0>
 800a2ae:	684b      	ldr	r3, [r1, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	dc05      	bgt.n	800a2c0 <__sflush_r+0x20>
 800a2b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	dc02      	bgt.n	800a2c0 <__sflush_r+0x20>
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2c2:	2e00      	cmp	r6, #0
 800a2c4:	d0f9      	beq.n	800a2ba <__sflush_r+0x1a>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2cc:	682f      	ldr	r7, [r5, #0]
 800a2ce:	602b      	str	r3, [r5, #0]
 800a2d0:	d032      	beq.n	800a338 <__sflush_r+0x98>
 800a2d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2d4:	89a3      	ldrh	r3, [r4, #12]
 800a2d6:	075a      	lsls	r2, r3, #29
 800a2d8:	d505      	bpl.n	800a2e6 <__sflush_r+0x46>
 800a2da:	6863      	ldr	r3, [r4, #4]
 800a2dc:	1ac0      	subs	r0, r0, r3
 800a2de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2e0:	b10b      	cbz	r3, 800a2e6 <__sflush_r+0x46>
 800a2e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2e4:	1ac0      	subs	r0, r0, r3
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2ec:	6a21      	ldr	r1, [r4, #32]
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	47b0      	blx	r6
 800a2f2:	1c43      	adds	r3, r0, #1
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	d106      	bne.n	800a306 <__sflush_r+0x66>
 800a2f8:	6829      	ldr	r1, [r5, #0]
 800a2fa:	291d      	cmp	r1, #29
 800a2fc:	d82c      	bhi.n	800a358 <__sflush_r+0xb8>
 800a2fe:	4a2a      	ldr	r2, [pc, #168]	; (800a3a8 <__sflush_r+0x108>)
 800a300:	40ca      	lsrs	r2, r1
 800a302:	07d6      	lsls	r6, r2, #31
 800a304:	d528      	bpl.n	800a358 <__sflush_r+0xb8>
 800a306:	2200      	movs	r2, #0
 800a308:	6062      	str	r2, [r4, #4]
 800a30a:	04d9      	lsls	r1, r3, #19
 800a30c:	6922      	ldr	r2, [r4, #16]
 800a30e:	6022      	str	r2, [r4, #0]
 800a310:	d504      	bpl.n	800a31c <__sflush_r+0x7c>
 800a312:	1c42      	adds	r2, r0, #1
 800a314:	d101      	bne.n	800a31a <__sflush_r+0x7a>
 800a316:	682b      	ldr	r3, [r5, #0]
 800a318:	b903      	cbnz	r3, 800a31c <__sflush_r+0x7c>
 800a31a:	6560      	str	r0, [r4, #84]	; 0x54
 800a31c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a31e:	602f      	str	r7, [r5, #0]
 800a320:	2900      	cmp	r1, #0
 800a322:	d0ca      	beq.n	800a2ba <__sflush_r+0x1a>
 800a324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a328:	4299      	cmp	r1, r3
 800a32a:	d002      	beq.n	800a332 <__sflush_r+0x92>
 800a32c:	4628      	mov	r0, r5
 800a32e:	f7ff fd23 	bl	8009d78 <_free_r>
 800a332:	2000      	movs	r0, #0
 800a334:	6360      	str	r0, [r4, #52]	; 0x34
 800a336:	e7c1      	b.n	800a2bc <__sflush_r+0x1c>
 800a338:	6a21      	ldr	r1, [r4, #32]
 800a33a:	2301      	movs	r3, #1
 800a33c:	4628      	mov	r0, r5
 800a33e:	47b0      	blx	r6
 800a340:	1c41      	adds	r1, r0, #1
 800a342:	d1c7      	bne.n	800a2d4 <__sflush_r+0x34>
 800a344:	682b      	ldr	r3, [r5, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d0c4      	beq.n	800a2d4 <__sflush_r+0x34>
 800a34a:	2b1d      	cmp	r3, #29
 800a34c:	d001      	beq.n	800a352 <__sflush_r+0xb2>
 800a34e:	2b16      	cmp	r3, #22
 800a350:	d101      	bne.n	800a356 <__sflush_r+0xb6>
 800a352:	602f      	str	r7, [r5, #0]
 800a354:	e7b1      	b.n	800a2ba <__sflush_r+0x1a>
 800a356:	89a3      	ldrh	r3, [r4, #12]
 800a358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a35c:	81a3      	strh	r3, [r4, #12]
 800a35e:	e7ad      	b.n	800a2bc <__sflush_r+0x1c>
 800a360:	690f      	ldr	r7, [r1, #16]
 800a362:	2f00      	cmp	r7, #0
 800a364:	d0a9      	beq.n	800a2ba <__sflush_r+0x1a>
 800a366:	0793      	lsls	r3, r2, #30
 800a368:	680e      	ldr	r6, [r1, #0]
 800a36a:	bf08      	it	eq
 800a36c:	694b      	ldreq	r3, [r1, #20]
 800a36e:	600f      	str	r7, [r1, #0]
 800a370:	bf18      	it	ne
 800a372:	2300      	movne	r3, #0
 800a374:	eba6 0807 	sub.w	r8, r6, r7
 800a378:	608b      	str	r3, [r1, #8]
 800a37a:	f1b8 0f00 	cmp.w	r8, #0
 800a37e:	dd9c      	ble.n	800a2ba <__sflush_r+0x1a>
 800a380:	6a21      	ldr	r1, [r4, #32]
 800a382:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a384:	4643      	mov	r3, r8
 800a386:	463a      	mov	r2, r7
 800a388:	4628      	mov	r0, r5
 800a38a:	47b0      	blx	r6
 800a38c:	2800      	cmp	r0, #0
 800a38e:	dc06      	bgt.n	800a39e <__sflush_r+0xfe>
 800a390:	89a3      	ldrh	r3, [r4, #12]
 800a392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a396:	81a3      	strh	r3, [r4, #12]
 800a398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a39c:	e78e      	b.n	800a2bc <__sflush_r+0x1c>
 800a39e:	4407      	add	r7, r0
 800a3a0:	eba8 0800 	sub.w	r8, r8, r0
 800a3a4:	e7e9      	b.n	800a37a <__sflush_r+0xda>
 800a3a6:	bf00      	nop
 800a3a8:	20400001 	.word	0x20400001

0800a3ac <_fflush_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	690b      	ldr	r3, [r1, #16]
 800a3b0:	4605      	mov	r5, r0
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	b913      	cbnz	r3, 800a3bc <_fflush_r+0x10>
 800a3b6:	2500      	movs	r5, #0
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	bd38      	pop	{r3, r4, r5, pc}
 800a3bc:	b118      	cbz	r0, 800a3c6 <_fflush_r+0x1a>
 800a3be:	6983      	ldr	r3, [r0, #24]
 800a3c0:	b90b      	cbnz	r3, 800a3c6 <_fflush_r+0x1a>
 800a3c2:	f000 f887 	bl	800a4d4 <__sinit>
 800a3c6:	4b14      	ldr	r3, [pc, #80]	; (800a418 <_fflush_r+0x6c>)
 800a3c8:	429c      	cmp	r4, r3
 800a3ca:	d11b      	bne.n	800a404 <_fflush_r+0x58>
 800a3cc:	686c      	ldr	r4, [r5, #4]
 800a3ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d0ef      	beq.n	800a3b6 <_fflush_r+0xa>
 800a3d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3d8:	07d0      	lsls	r0, r2, #31
 800a3da:	d404      	bmi.n	800a3e6 <_fflush_r+0x3a>
 800a3dc:	0599      	lsls	r1, r3, #22
 800a3de:	d402      	bmi.n	800a3e6 <_fflush_r+0x3a>
 800a3e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3e2:	f000 f927 	bl	800a634 <__retarget_lock_acquire_recursive>
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	f7ff ff59 	bl	800a2a0 <__sflush_r>
 800a3ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3f0:	07da      	lsls	r2, r3, #31
 800a3f2:	4605      	mov	r5, r0
 800a3f4:	d4e0      	bmi.n	800a3b8 <_fflush_r+0xc>
 800a3f6:	89a3      	ldrh	r3, [r4, #12]
 800a3f8:	059b      	lsls	r3, r3, #22
 800a3fa:	d4dd      	bmi.n	800a3b8 <_fflush_r+0xc>
 800a3fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3fe:	f000 f91a 	bl	800a636 <__retarget_lock_release_recursive>
 800a402:	e7d9      	b.n	800a3b8 <_fflush_r+0xc>
 800a404:	4b05      	ldr	r3, [pc, #20]	; (800a41c <_fflush_r+0x70>)
 800a406:	429c      	cmp	r4, r3
 800a408:	d101      	bne.n	800a40e <_fflush_r+0x62>
 800a40a:	68ac      	ldr	r4, [r5, #8]
 800a40c:	e7df      	b.n	800a3ce <_fflush_r+0x22>
 800a40e:	4b04      	ldr	r3, [pc, #16]	; (800a420 <_fflush_r+0x74>)
 800a410:	429c      	cmp	r4, r3
 800a412:	bf08      	it	eq
 800a414:	68ec      	ldreq	r4, [r5, #12]
 800a416:	e7da      	b.n	800a3ce <_fflush_r+0x22>
 800a418:	0800b29c 	.word	0x0800b29c
 800a41c:	0800b2bc 	.word	0x0800b2bc
 800a420:	0800b27c 	.word	0x0800b27c

0800a424 <std>:
 800a424:	2300      	movs	r3, #0
 800a426:	b510      	push	{r4, lr}
 800a428:	4604      	mov	r4, r0
 800a42a:	e9c0 3300 	strd	r3, r3, [r0]
 800a42e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a432:	6083      	str	r3, [r0, #8]
 800a434:	8181      	strh	r1, [r0, #12]
 800a436:	6643      	str	r3, [r0, #100]	; 0x64
 800a438:	81c2      	strh	r2, [r0, #14]
 800a43a:	6183      	str	r3, [r0, #24]
 800a43c:	4619      	mov	r1, r3
 800a43e:	2208      	movs	r2, #8
 800a440:	305c      	adds	r0, #92	; 0x5c
 800a442:	f7fb ffc9 	bl	80063d8 <memset>
 800a446:	4b05      	ldr	r3, [pc, #20]	; (800a45c <std+0x38>)
 800a448:	6263      	str	r3, [r4, #36]	; 0x24
 800a44a:	4b05      	ldr	r3, [pc, #20]	; (800a460 <std+0x3c>)
 800a44c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a44e:	4b05      	ldr	r3, [pc, #20]	; (800a464 <std+0x40>)
 800a450:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a452:	4b05      	ldr	r3, [pc, #20]	; (800a468 <std+0x44>)
 800a454:	6224      	str	r4, [r4, #32]
 800a456:	6323      	str	r3, [r4, #48]	; 0x30
 800a458:	bd10      	pop	{r4, pc}
 800a45a:	bf00      	nop
 800a45c:	08007129 	.word	0x08007129
 800a460:	0800714b 	.word	0x0800714b
 800a464:	08007183 	.word	0x08007183
 800a468:	080071a7 	.word	0x080071a7

0800a46c <_cleanup_r>:
 800a46c:	4901      	ldr	r1, [pc, #4]	; (800a474 <_cleanup_r+0x8>)
 800a46e:	f000 b8c1 	b.w	800a5f4 <_fwalk_reent>
 800a472:	bf00      	nop
 800a474:	0800a3ad 	.word	0x0800a3ad

0800a478 <__sfmoreglue>:
 800a478:	b570      	push	{r4, r5, r6, lr}
 800a47a:	2268      	movs	r2, #104	; 0x68
 800a47c:	1e4d      	subs	r5, r1, #1
 800a47e:	4355      	muls	r5, r2
 800a480:	460e      	mov	r6, r1
 800a482:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a486:	f7ff fce3 	bl	8009e50 <_malloc_r>
 800a48a:	4604      	mov	r4, r0
 800a48c:	b140      	cbz	r0, 800a4a0 <__sfmoreglue+0x28>
 800a48e:	2100      	movs	r1, #0
 800a490:	e9c0 1600 	strd	r1, r6, [r0]
 800a494:	300c      	adds	r0, #12
 800a496:	60a0      	str	r0, [r4, #8]
 800a498:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a49c:	f7fb ff9c 	bl	80063d8 <memset>
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	bd70      	pop	{r4, r5, r6, pc}

0800a4a4 <__sfp_lock_acquire>:
 800a4a4:	4801      	ldr	r0, [pc, #4]	; (800a4ac <__sfp_lock_acquire+0x8>)
 800a4a6:	f000 b8c5 	b.w	800a634 <__retarget_lock_acquire_recursive>
 800a4aa:	bf00      	nop
 800a4ac:	200004b9 	.word	0x200004b9

0800a4b0 <__sfp_lock_release>:
 800a4b0:	4801      	ldr	r0, [pc, #4]	; (800a4b8 <__sfp_lock_release+0x8>)
 800a4b2:	f000 b8c0 	b.w	800a636 <__retarget_lock_release_recursive>
 800a4b6:	bf00      	nop
 800a4b8:	200004b9 	.word	0x200004b9

0800a4bc <__sinit_lock_acquire>:
 800a4bc:	4801      	ldr	r0, [pc, #4]	; (800a4c4 <__sinit_lock_acquire+0x8>)
 800a4be:	f000 b8b9 	b.w	800a634 <__retarget_lock_acquire_recursive>
 800a4c2:	bf00      	nop
 800a4c4:	200004ba 	.word	0x200004ba

0800a4c8 <__sinit_lock_release>:
 800a4c8:	4801      	ldr	r0, [pc, #4]	; (800a4d0 <__sinit_lock_release+0x8>)
 800a4ca:	f000 b8b4 	b.w	800a636 <__retarget_lock_release_recursive>
 800a4ce:	bf00      	nop
 800a4d0:	200004ba 	.word	0x200004ba

0800a4d4 <__sinit>:
 800a4d4:	b510      	push	{r4, lr}
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	f7ff fff0 	bl	800a4bc <__sinit_lock_acquire>
 800a4dc:	69a3      	ldr	r3, [r4, #24]
 800a4de:	b11b      	cbz	r3, 800a4e8 <__sinit+0x14>
 800a4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4e4:	f7ff bff0 	b.w	800a4c8 <__sinit_lock_release>
 800a4e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a4ec:	6523      	str	r3, [r4, #80]	; 0x50
 800a4ee:	4b13      	ldr	r3, [pc, #76]	; (800a53c <__sinit+0x68>)
 800a4f0:	4a13      	ldr	r2, [pc, #76]	; (800a540 <__sinit+0x6c>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a4f6:	42a3      	cmp	r3, r4
 800a4f8:	bf04      	itt	eq
 800a4fa:	2301      	moveq	r3, #1
 800a4fc:	61a3      	streq	r3, [r4, #24]
 800a4fe:	4620      	mov	r0, r4
 800a500:	f000 f820 	bl	800a544 <__sfp>
 800a504:	6060      	str	r0, [r4, #4]
 800a506:	4620      	mov	r0, r4
 800a508:	f000 f81c 	bl	800a544 <__sfp>
 800a50c:	60a0      	str	r0, [r4, #8]
 800a50e:	4620      	mov	r0, r4
 800a510:	f000 f818 	bl	800a544 <__sfp>
 800a514:	2200      	movs	r2, #0
 800a516:	60e0      	str	r0, [r4, #12]
 800a518:	2104      	movs	r1, #4
 800a51a:	6860      	ldr	r0, [r4, #4]
 800a51c:	f7ff ff82 	bl	800a424 <std>
 800a520:	68a0      	ldr	r0, [r4, #8]
 800a522:	2201      	movs	r2, #1
 800a524:	2109      	movs	r1, #9
 800a526:	f7ff ff7d 	bl	800a424 <std>
 800a52a:	68e0      	ldr	r0, [r4, #12]
 800a52c:	2202      	movs	r2, #2
 800a52e:	2112      	movs	r1, #18
 800a530:	f7ff ff78 	bl	800a424 <std>
 800a534:	2301      	movs	r3, #1
 800a536:	61a3      	str	r3, [r4, #24]
 800a538:	e7d2      	b.n	800a4e0 <__sinit+0xc>
 800a53a:	bf00      	nop
 800a53c:	0800ae34 	.word	0x0800ae34
 800a540:	0800a46d 	.word	0x0800a46d

0800a544 <__sfp>:
 800a544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a546:	4607      	mov	r7, r0
 800a548:	f7ff ffac 	bl	800a4a4 <__sfp_lock_acquire>
 800a54c:	4b1e      	ldr	r3, [pc, #120]	; (800a5c8 <__sfp+0x84>)
 800a54e:	681e      	ldr	r6, [r3, #0]
 800a550:	69b3      	ldr	r3, [r6, #24]
 800a552:	b913      	cbnz	r3, 800a55a <__sfp+0x16>
 800a554:	4630      	mov	r0, r6
 800a556:	f7ff ffbd 	bl	800a4d4 <__sinit>
 800a55a:	3648      	adds	r6, #72	; 0x48
 800a55c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a560:	3b01      	subs	r3, #1
 800a562:	d503      	bpl.n	800a56c <__sfp+0x28>
 800a564:	6833      	ldr	r3, [r6, #0]
 800a566:	b30b      	cbz	r3, 800a5ac <__sfp+0x68>
 800a568:	6836      	ldr	r6, [r6, #0]
 800a56a:	e7f7      	b.n	800a55c <__sfp+0x18>
 800a56c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a570:	b9d5      	cbnz	r5, 800a5a8 <__sfp+0x64>
 800a572:	4b16      	ldr	r3, [pc, #88]	; (800a5cc <__sfp+0x88>)
 800a574:	60e3      	str	r3, [r4, #12]
 800a576:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a57a:	6665      	str	r5, [r4, #100]	; 0x64
 800a57c:	f000 f859 	bl	800a632 <__retarget_lock_init_recursive>
 800a580:	f7ff ff96 	bl	800a4b0 <__sfp_lock_release>
 800a584:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a588:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a58c:	6025      	str	r5, [r4, #0]
 800a58e:	61a5      	str	r5, [r4, #24]
 800a590:	2208      	movs	r2, #8
 800a592:	4629      	mov	r1, r5
 800a594:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a598:	f7fb ff1e 	bl	80063d8 <memset>
 800a59c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5a8:	3468      	adds	r4, #104	; 0x68
 800a5aa:	e7d9      	b.n	800a560 <__sfp+0x1c>
 800a5ac:	2104      	movs	r1, #4
 800a5ae:	4638      	mov	r0, r7
 800a5b0:	f7ff ff62 	bl	800a478 <__sfmoreglue>
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	6030      	str	r0, [r6, #0]
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	d1d5      	bne.n	800a568 <__sfp+0x24>
 800a5bc:	f7ff ff78 	bl	800a4b0 <__sfp_lock_release>
 800a5c0:	230c      	movs	r3, #12
 800a5c2:	603b      	str	r3, [r7, #0]
 800a5c4:	e7ee      	b.n	800a5a4 <__sfp+0x60>
 800a5c6:	bf00      	nop
 800a5c8:	0800ae34 	.word	0x0800ae34
 800a5cc:	ffff0001 	.word	0xffff0001

0800a5d0 <fiprintf>:
 800a5d0:	b40e      	push	{r1, r2, r3}
 800a5d2:	b503      	push	{r0, r1, lr}
 800a5d4:	4601      	mov	r1, r0
 800a5d6:	ab03      	add	r3, sp, #12
 800a5d8:	4805      	ldr	r0, [pc, #20]	; (800a5f0 <fiprintf+0x20>)
 800a5da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5de:	6800      	ldr	r0, [r0, #0]
 800a5e0:	9301      	str	r3, [sp, #4]
 800a5e2:	f000 f8a7 	bl	800a734 <_vfiprintf_r>
 800a5e6:	b002      	add	sp, #8
 800a5e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5ec:	b003      	add	sp, #12
 800a5ee:	4770      	bx	lr
 800a5f0:	2000000c 	.word	0x2000000c

0800a5f4 <_fwalk_reent>:
 800a5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5f8:	4606      	mov	r6, r0
 800a5fa:	4688      	mov	r8, r1
 800a5fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a600:	2700      	movs	r7, #0
 800a602:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a606:	f1b9 0901 	subs.w	r9, r9, #1
 800a60a:	d505      	bpl.n	800a618 <_fwalk_reent+0x24>
 800a60c:	6824      	ldr	r4, [r4, #0]
 800a60e:	2c00      	cmp	r4, #0
 800a610:	d1f7      	bne.n	800a602 <_fwalk_reent+0xe>
 800a612:	4638      	mov	r0, r7
 800a614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a618:	89ab      	ldrh	r3, [r5, #12]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d907      	bls.n	800a62e <_fwalk_reent+0x3a>
 800a61e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a622:	3301      	adds	r3, #1
 800a624:	d003      	beq.n	800a62e <_fwalk_reent+0x3a>
 800a626:	4629      	mov	r1, r5
 800a628:	4630      	mov	r0, r6
 800a62a:	47c0      	blx	r8
 800a62c:	4307      	orrs	r7, r0
 800a62e:	3568      	adds	r5, #104	; 0x68
 800a630:	e7e9      	b.n	800a606 <_fwalk_reent+0x12>

0800a632 <__retarget_lock_init_recursive>:
 800a632:	4770      	bx	lr

0800a634 <__retarget_lock_acquire_recursive>:
 800a634:	4770      	bx	lr

0800a636 <__retarget_lock_release_recursive>:
 800a636:	4770      	bx	lr

0800a638 <memmove>:
 800a638:	4288      	cmp	r0, r1
 800a63a:	b510      	push	{r4, lr}
 800a63c:	eb01 0402 	add.w	r4, r1, r2
 800a640:	d902      	bls.n	800a648 <memmove+0x10>
 800a642:	4284      	cmp	r4, r0
 800a644:	4623      	mov	r3, r4
 800a646:	d807      	bhi.n	800a658 <memmove+0x20>
 800a648:	1e43      	subs	r3, r0, #1
 800a64a:	42a1      	cmp	r1, r4
 800a64c:	d008      	beq.n	800a660 <memmove+0x28>
 800a64e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a652:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a656:	e7f8      	b.n	800a64a <memmove+0x12>
 800a658:	4402      	add	r2, r0
 800a65a:	4601      	mov	r1, r0
 800a65c:	428a      	cmp	r2, r1
 800a65e:	d100      	bne.n	800a662 <memmove+0x2a>
 800a660:	bd10      	pop	{r4, pc}
 800a662:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a666:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a66a:	e7f7      	b.n	800a65c <memmove+0x24>

0800a66c <__malloc_lock>:
 800a66c:	4801      	ldr	r0, [pc, #4]	; (800a674 <__malloc_lock+0x8>)
 800a66e:	f7ff bfe1 	b.w	800a634 <__retarget_lock_acquire_recursive>
 800a672:	bf00      	nop
 800a674:	200004b8 	.word	0x200004b8

0800a678 <__malloc_unlock>:
 800a678:	4801      	ldr	r0, [pc, #4]	; (800a680 <__malloc_unlock+0x8>)
 800a67a:	f7ff bfdc 	b.w	800a636 <__retarget_lock_release_recursive>
 800a67e:	bf00      	nop
 800a680:	200004b8 	.word	0x200004b8

0800a684 <_realloc_r>:
 800a684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a688:	4680      	mov	r8, r0
 800a68a:	4614      	mov	r4, r2
 800a68c:	460e      	mov	r6, r1
 800a68e:	b921      	cbnz	r1, 800a69a <_realloc_r+0x16>
 800a690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a694:	4611      	mov	r1, r2
 800a696:	f7ff bbdb 	b.w	8009e50 <_malloc_r>
 800a69a:	b92a      	cbnz	r2, 800a6a8 <_realloc_r+0x24>
 800a69c:	f7ff fb6c 	bl	8009d78 <_free_r>
 800a6a0:	4625      	mov	r5, r4
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6a8:	f000 faa0 	bl	800abec <_malloc_usable_size_r>
 800a6ac:	4284      	cmp	r4, r0
 800a6ae:	4607      	mov	r7, r0
 800a6b0:	d802      	bhi.n	800a6b8 <_realloc_r+0x34>
 800a6b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6b6:	d812      	bhi.n	800a6de <_realloc_r+0x5a>
 800a6b8:	4621      	mov	r1, r4
 800a6ba:	4640      	mov	r0, r8
 800a6bc:	f7ff fbc8 	bl	8009e50 <_malloc_r>
 800a6c0:	4605      	mov	r5, r0
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	d0ed      	beq.n	800a6a2 <_realloc_r+0x1e>
 800a6c6:	42bc      	cmp	r4, r7
 800a6c8:	4622      	mov	r2, r4
 800a6ca:	4631      	mov	r1, r6
 800a6cc:	bf28      	it	cs
 800a6ce:	463a      	movcs	r2, r7
 800a6d0:	f7fe fe6c 	bl	80093ac <memcpy>
 800a6d4:	4631      	mov	r1, r6
 800a6d6:	4640      	mov	r0, r8
 800a6d8:	f7ff fb4e 	bl	8009d78 <_free_r>
 800a6dc:	e7e1      	b.n	800a6a2 <_realloc_r+0x1e>
 800a6de:	4635      	mov	r5, r6
 800a6e0:	e7df      	b.n	800a6a2 <_realloc_r+0x1e>

0800a6e2 <__sfputc_r>:
 800a6e2:	6893      	ldr	r3, [r2, #8]
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	b410      	push	{r4}
 800a6ea:	6093      	str	r3, [r2, #8]
 800a6ec:	da08      	bge.n	800a700 <__sfputc_r+0x1e>
 800a6ee:	6994      	ldr	r4, [r2, #24]
 800a6f0:	42a3      	cmp	r3, r4
 800a6f2:	db01      	blt.n	800a6f8 <__sfputc_r+0x16>
 800a6f4:	290a      	cmp	r1, #10
 800a6f6:	d103      	bne.n	800a700 <__sfputc_r+0x1e>
 800a6f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6fc:	f000 b94a 	b.w	800a994 <__swbuf_r>
 800a700:	6813      	ldr	r3, [r2, #0]
 800a702:	1c58      	adds	r0, r3, #1
 800a704:	6010      	str	r0, [r2, #0]
 800a706:	7019      	strb	r1, [r3, #0]
 800a708:	4608      	mov	r0, r1
 800a70a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <__sfputs_r>:
 800a710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a712:	4606      	mov	r6, r0
 800a714:	460f      	mov	r7, r1
 800a716:	4614      	mov	r4, r2
 800a718:	18d5      	adds	r5, r2, r3
 800a71a:	42ac      	cmp	r4, r5
 800a71c:	d101      	bne.n	800a722 <__sfputs_r+0x12>
 800a71e:	2000      	movs	r0, #0
 800a720:	e007      	b.n	800a732 <__sfputs_r+0x22>
 800a722:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a726:	463a      	mov	r2, r7
 800a728:	4630      	mov	r0, r6
 800a72a:	f7ff ffda 	bl	800a6e2 <__sfputc_r>
 800a72e:	1c43      	adds	r3, r0, #1
 800a730:	d1f3      	bne.n	800a71a <__sfputs_r+0xa>
 800a732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a734 <_vfiprintf_r>:
 800a734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a738:	460d      	mov	r5, r1
 800a73a:	b09d      	sub	sp, #116	; 0x74
 800a73c:	4614      	mov	r4, r2
 800a73e:	4698      	mov	r8, r3
 800a740:	4606      	mov	r6, r0
 800a742:	b118      	cbz	r0, 800a74c <_vfiprintf_r+0x18>
 800a744:	6983      	ldr	r3, [r0, #24]
 800a746:	b90b      	cbnz	r3, 800a74c <_vfiprintf_r+0x18>
 800a748:	f7ff fec4 	bl	800a4d4 <__sinit>
 800a74c:	4b89      	ldr	r3, [pc, #548]	; (800a974 <_vfiprintf_r+0x240>)
 800a74e:	429d      	cmp	r5, r3
 800a750:	d11b      	bne.n	800a78a <_vfiprintf_r+0x56>
 800a752:	6875      	ldr	r5, [r6, #4]
 800a754:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a756:	07d9      	lsls	r1, r3, #31
 800a758:	d405      	bmi.n	800a766 <_vfiprintf_r+0x32>
 800a75a:	89ab      	ldrh	r3, [r5, #12]
 800a75c:	059a      	lsls	r2, r3, #22
 800a75e:	d402      	bmi.n	800a766 <_vfiprintf_r+0x32>
 800a760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a762:	f7ff ff67 	bl	800a634 <__retarget_lock_acquire_recursive>
 800a766:	89ab      	ldrh	r3, [r5, #12]
 800a768:	071b      	lsls	r3, r3, #28
 800a76a:	d501      	bpl.n	800a770 <_vfiprintf_r+0x3c>
 800a76c:	692b      	ldr	r3, [r5, #16]
 800a76e:	b9eb      	cbnz	r3, 800a7ac <_vfiprintf_r+0x78>
 800a770:	4629      	mov	r1, r5
 800a772:	4630      	mov	r0, r6
 800a774:	f000 f960 	bl	800aa38 <__swsetup_r>
 800a778:	b1c0      	cbz	r0, 800a7ac <_vfiprintf_r+0x78>
 800a77a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a77c:	07dc      	lsls	r4, r3, #31
 800a77e:	d50e      	bpl.n	800a79e <_vfiprintf_r+0x6a>
 800a780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a784:	b01d      	add	sp, #116	; 0x74
 800a786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a78a:	4b7b      	ldr	r3, [pc, #492]	; (800a978 <_vfiprintf_r+0x244>)
 800a78c:	429d      	cmp	r5, r3
 800a78e:	d101      	bne.n	800a794 <_vfiprintf_r+0x60>
 800a790:	68b5      	ldr	r5, [r6, #8]
 800a792:	e7df      	b.n	800a754 <_vfiprintf_r+0x20>
 800a794:	4b79      	ldr	r3, [pc, #484]	; (800a97c <_vfiprintf_r+0x248>)
 800a796:	429d      	cmp	r5, r3
 800a798:	bf08      	it	eq
 800a79a:	68f5      	ldreq	r5, [r6, #12]
 800a79c:	e7da      	b.n	800a754 <_vfiprintf_r+0x20>
 800a79e:	89ab      	ldrh	r3, [r5, #12]
 800a7a0:	0598      	lsls	r0, r3, #22
 800a7a2:	d4ed      	bmi.n	800a780 <_vfiprintf_r+0x4c>
 800a7a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7a6:	f7ff ff46 	bl	800a636 <__retarget_lock_release_recursive>
 800a7aa:	e7e9      	b.n	800a780 <_vfiprintf_r+0x4c>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a7b0:	2320      	movs	r3, #32
 800a7b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7ba:	2330      	movs	r3, #48	; 0x30
 800a7bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a980 <_vfiprintf_r+0x24c>
 800a7c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7c4:	f04f 0901 	mov.w	r9, #1
 800a7c8:	4623      	mov	r3, r4
 800a7ca:	469a      	mov	sl, r3
 800a7cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7d0:	b10a      	cbz	r2, 800a7d6 <_vfiprintf_r+0xa2>
 800a7d2:	2a25      	cmp	r2, #37	; 0x25
 800a7d4:	d1f9      	bne.n	800a7ca <_vfiprintf_r+0x96>
 800a7d6:	ebba 0b04 	subs.w	fp, sl, r4
 800a7da:	d00b      	beq.n	800a7f4 <_vfiprintf_r+0xc0>
 800a7dc:	465b      	mov	r3, fp
 800a7de:	4622      	mov	r2, r4
 800a7e0:	4629      	mov	r1, r5
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	f7ff ff94 	bl	800a710 <__sfputs_r>
 800a7e8:	3001      	adds	r0, #1
 800a7ea:	f000 80aa 	beq.w	800a942 <_vfiprintf_r+0x20e>
 800a7ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7f0:	445a      	add	r2, fp
 800a7f2:	9209      	str	r2, [sp, #36]	; 0x24
 800a7f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f000 80a2 	beq.w	800a942 <_vfiprintf_r+0x20e>
 800a7fe:	2300      	movs	r3, #0
 800a800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a808:	f10a 0a01 	add.w	sl, sl, #1
 800a80c:	9304      	str	r3, [sp, #16]
 800a80e:	9307      	str	r3, [sp, #28]
 800a810:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a814:	931a      	str	r3, [sp, #104]	; 0x68
 800a816:	4654      	mov	r4, sl
 800a818:	2205      	movs	r2, #5
 800a81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a81e:	4858      	ldr	r0, [pc, #352]	; (800a980 <_vfiprintf_r+0x24c>)
 800a820:	f7f5 fcde 	bl	80001e0 <memchr>
 800a824:	9a04      	ldr	r2, [sp, #16]
 800a826:	b9d8      	cbnz	r0, 800a860 <_vfiprintf_r+0x12c>
 800a828:	06d1      	lsls	r1, r2, #27
 800a82a:	bf44      	itt	mi
 800a82c:	2320      	movmi	r3, #32
 800a82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a832:	0713      	lsls	r3, r2, #28
 800a834:	bf44      	itt	mi
 800a836:	232b      	movmi	r3, #43	; 0x2b
 800a838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a83c:	f89a 3000 	ldrb.w	r3, [sl]
 800a840:	2b2a      	cmp	r3, #42	; 0x2a
 800a842:	d015      	beq.n	800a870 <_vfiprintf_r+0x13c>
 800a844:	9a07      	ldr	r2, [sp, #28]
 800a846:	4654      	mov	r4, sl
 800a848:	2000      	movs	r0, #0
 800a84a:	f04f 0c0a 	mov.w	ip, #10
 800a84e:	4621      	mov	r1, r4
 800a850:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a854:	3b30      	subs	r3, #48	; 0x30
 800a856:	2b09      	cmp	r3, #9
 800a858:	d94e      	bls.n	800a8f8 <_vfiprintf_r+0x1c4>
 800a85a:	b1b0      	cbz	r0, 800a88a <_vfiprintf_r+0x156>
 800a85c:	9207      	str	r2, [sp, #28]
 800a85e:	e014      	b.n	800a88a <_vfiprintf_r+0x156>
 800a860:	eba0 0308 	sub.w	r3, r0, r8
 800a864:	fa09 f303 	lsl.w	r3, r9, r3
 800a868:	4313      	orrs	r3, r2
 800a86a:	9304      	str	r3, [sp, #16]
 800a86c:	46a2      	mov	sl, r4
 800a86e:	e7d2      	b.n	800a816 <_vfiprintf_r+0xe2>
 800a870:	9b03      	ldr	r3, [sp, #12]
 800a872:	1d19      	adds	r1, r3, #4
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	9103      	str	r1, [sp, #12]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	bfbb      	ittet	lt
 800a87c:	425b      	neglt	r3, r3
 800a87e:	f042 0202 	orrlt.w	r2, r2, #2
 800a882:	9307      	strge	r3, [sp, #28]
 800a884:	9307      	strlt	r3, [sp, #28]
 800a886:	bfb8      	it	lt
 800a888:	9204      	strlt	r2, [sp, #16]
 800a88a:	7823      	ldrb	r3, [r4, #0]
 800a88c:	2b2e      	cmp	r3, #46	; 0x2e
 800a88e:	d10c      	bne.n	800a8aa <_vfiprintf_r+0x176>
 800a890:	7863      	ldrb	r3, [r4, #1]
 800a892:	2b2a      	cmp	r3, #42	; 0x2a
 800a894:	d135      	bne.n	800a902 <_vfiprintf_r+0x1ce>
 800a896:	9b03      	ldr	r3, [sp, #12]
 800a898:	1d1a      	adds	r2, r3, #4
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	9203      	str	r2, [sp, #12]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	bfb8      	it	lt
 800a8a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a8a6:	3402      	adds	r4, #2
 800a8a8:	9305      	str	r3, [sp, #20]
 800a8aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a990 <_vfiprintf_r+0x25c>
 800a8ae:	7821      	ldrb	r1, [r4, #0]
 800a8b0:	2203      	movs	r2, #3
 800a8b2:	4650      	mov	r0, sl
 800a8b4:	f7f5 fc94 	bl	80001e0 <memchr>
 800a8b8:	b140      	cbz	r0, 800a8cc <_vfiprintf_r+0x198>
 800a8ba:	2340      	movs	r3, #64	; 0x40
 800a8bc:	eba0 000a 	sub.w	r0, r0, sl
 800a8c0:	fa03 f000 	lsl.w	r0, r3, r0
 800a8c4:	9b04      	ldr	r3, [sp, #16]
 800a8c6:	4303      	orrs	r3, r0
 800a8c8:	3401      	adds	r4, #1
 800a8ca:	9304      	str	r3, [sp, #16]
 800a8cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d0:	482c      	ldr	r0, [pc, #176]	; (800a984 <_vfiprintf_r+0x250>)
 800a8d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8d6:	2206      	movs	r2, #6
 800a8d8:	f7f5 fc82 	bl	80001e0 <memchr>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d03f      	beq.n	800a960 <_vfiprintf_r+0x22c>
 800a8e0:	4b29      	ldr	r3, [pc, #164]	; (800a988 <_vfiprintf_r+0x254>)
 800a8e2:	bb1b      	cbnz	r3, 800a92c <_vfiprintf_r+0x1f8>
 800a8e4:	9b03      	ldr	r3, [sp, #12]
 800a8e6:	3307      	adds	r3, #7
 800a8e8:	f023 0307 	bic.w	r3, r3, #7
 800a8ec:	3308      	adds	r3, #8
 800a8ee:	9303      	str	r3, [sp, #12]
 800a8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f2:	443b      	add	r3, r7
 800a8f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f6:	e767      	b.n	800a7c8 <_vfiprintf_r+0x94>
 800a8f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	2001      	movs	r0, #1
 800a900:	e7a5      	b.n	800a84e <_vfiprintf_r+0x11a>
 800a902:	2300      	movs	r3, #0
 800a904:	3401      	adds	r4, #1
 800a906:	9305      	str	r3, [sp, #20]
 800a908:	4619      	mov	r1, r3
 800a90a:	f04f 0c0a 	mov.w	ip, #10
 800a90e:	4620      	mov	r0, r4
 800a910:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a914:	3a30      	subs	r2, #48	; 0x30
 800a916:	2a09      	cmp	r2, #9
 800a918:	d903      	bls.n	800a922 <_vfiprintf_r+0x1ee>
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d0c5      	beq.n	800a8aa <_vfiprintf_r+0x176>
 800a91e:	9105      	str	r1, [sp, #20]
 800a920:	e7c3      	b.n	800a8aa <_vfiprintf_r+0x176>
 800a922:	fb0c 2101 	mla	r1, ip, r1, r2
 800a926:	4604      	mov	r4, r0
 800a928:	2301      	movs	r3, #1
 800a92a:	e7f0      	b.n	800a90e <_vfiprintf_r+0x1da>
 800a92c:	ab03      	add	r3, sp, #12
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	462a      	mov	r2, r5
 800a932:	4b16      	ldr	r3, [pc, #88]	; (800a98c <_vfiprintf_r+0x258>)
 800a934:	a904      	add	r1, sp, #16
 800a936:	4630      	mov	r0, r6
 800a938:	f7fb fdf6 	bl	8006528 <_printf_float>
 800a93c:	4607      	mov	r7, r0
 800a93e:	1c78      	adds	r0, r7, #1
 800a940:	d1d6      	bne.n	800a8f0 <_vfiprintf_r+0x1bc>
 800a942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a944:	07d9      	lsls	r1, r3, #31
 800a946:	d405      	bmi.n	800a954 <_vfiprintf_r+0x220>
 800a948:	89ab      	ldrh	r3, [r5, #12]
 800a94a:	059a      	lsls	r2, r3, #22
 800a94c:	d402      	bmi.n	800a954 <_vfiprintf_r+0x220>
 800a94e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a950:	f7ff fe71 	bl	800a636 <__retarget_lock_release_recursive>
 800a954:	89ab      	ldrh	r3, [r5, #12]
 800a956:	065b      	lsls	r3, r3, #25
 800a958:	f53f af12 	bmi.w	800a780 <_vfiprintf_r+0x4c>
 800a95c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a95e:	e711      	b.n	800a784 <_vfiprintf_r+0x50>
 800a960:	ab03      	add	r3, sp, #12
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	462a      	mov	r2, r5
 800a966:	4b09      	ldr	r3, [pc, #36]	; (800a98c <_vfiprintf_r+0x258>)
 800a968:	a904      	add	r1, sp, #16
 800a96a:	4630      	mov	r0, r6
 800a96c:	f7fc f880 	bl	8006a70 <_printf_i>
 800a970:	e7e4      	b.n	800a93c <_vfiprintf_r+0x208>
 800a972:	bf00      	nop
 800a974:	0800b29c 	.word	0x0800b29c
 800a978:	0800b2bc 	.word	0x0800b2bc
 800a97c:	0800b27c 	.word	0x0800b27c
 800a980:	0800b22c 	.word	0x0800b22c
 800a984:	0800b236 	.word	0x0800b236
 800a988:	08006529 	.word	0x08006529
 800a98c:	0800a711 	.word	0x0800a711
 800a990:	0800b232 	.word	0x0800b232

0800a994 <__swbuf_r>:
 800a994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a996:	460e      	mov	r6, r1
 800a998:	4614      	mov	r4, r2
 800a99a:	4605      	mov	r5, r0
 800a99c:	b118      	cbz	r0, 800a9a6 <__swbuf_r+0x12>
 800a99e:	6983      	ldr	r3, [r0, #24]
 800a9a0:	b90b      	cbnz	r3, 800a9a6 <__swbuf_r+0x12>
 800a9a2:	f7ff fd97 	bl	800a4d4 <__sinit>
 800a9a6:	4b21      	ldr	r3, [pc, #132]	; (800aa2c <__swbuf_r+0x98>)
 800a9a8:	429c      	cmp	r4, r3
 800a9aa:	d12b      	bne.n	800aa04 <__swbuf_r+0x70>
 800a9ac:	686c      	ldr	r4, [r5, #4]
 800a9ae:	69a3      	ldr	r3, [r4, #24]
 800a9b0:	60a3      	str	r3, [r4, #8]
 800a9b2:	89a3      	ldrh	r3, [r4, #12]
 800a9b4:	071a      	lsls	r2, r3, #28
 800a9b6:	d52f      	bpl.n	800aa18 <__swbuf_r+0x84>
 800a9b8:	6923      	ldr	r3, [r4, #16]
 800a9ba:	b36b      	cbz	r3, 800aa18 <__swbuf_r+0x84>
 800a9bc:	6923      	ldr	r3, [r4, #16]
 800a9be:	6820      	ldr	r0, [r4, #0]
 800a9c0:	1ac0      	subs	r0, r0, r3
 800a9c2:	6963      	ldr	r3, [r4, #20]
 800a9c4:	b2f6      	uxtb	r6, r6
 800a9c6:	4283      	cmp	r3, r0
 800a9c8:	4637      	mov	r7, r6
 800a9ca:	dc04      	bgt.n	800a9d6 <__swbuf_r+0x42>
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	f7ff fcec 	bl	800a3ac <_fflush_r>
 800a9d4:	bb30      	cbnz	r0, 800aa24 <__swbuf_r+0x90>
 800a9d6:	68a3      	ldr	r3, [r4, #8]
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	60a3      	str	r3, [r4, #8]
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	1c5a      	adds	r2, r3, #1
 800a9e0:	6022      	str	r2, [r4, #0]
 800a9e2:	701e      	strb	r6, [r3, #0]
 800a9e4:	6963      	ldr	r3, [r4, #20]
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	4283      	cmp	r3, r0
 800a9ea:	d004      	beq.n	800a9f6 <__swbuf_r+0x62>
 800a9ec:	89a3      	ldrh	r3, [r4, #12]
 800a9ee:	07db      	lsls	r3, r3, #31
 800a9f0:	d506      	bpl.n	800aa00 <__swbuf_r+0x6c>
 800a9f2:	2e0a      	cmp	r6, #10
 800a9f4:	d104      	bne.n	800aa00 <__swbuf_r+0x6c>
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	f7ff fcd7 	bl	800a3ac <_fflush_r>
 800a9fe:	b988      	cbnz	r0, 800aa24 <__swbuf_r+0x90>
 800aa00:	4638      	mov	r0, r7
 800aa02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa04:	4b0a      	ldr	r3, [pc, #40]	; (800aa30 <__swbuf_r+0x9c>)
 800aa06:	429c      	cmp	r4, r3
 800aa08:	d101      	bne.n	800aa0e <__swbuf_r+0x7a>
 800aa0a:	68ac      	ldr	r4, [r5, #8]
 800aa0c:	e7cf      	b.n	800a9ae <__swbuf_r+0x1a>
 800aa0e:	4b09      	ldr	r3, [pc, #36]	; (800aa34 <__swbuf_r+0xa0>)
 800aa10:	429c      	cmp	r4, r3
 800aa12:	bf08      	it	eq
 800aa14:	68ec      	ldreq	r4, [r5, #12]
 800aa16:	e7ca      	b.n	800a9ae <__swbuf_r+0x1a>
 800aa18:	4621      	mov	r1, r4
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	f000 f80c 	bl	800aa38 <__swsetup_r>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d0cb      	beq.n	800a9bc <__swbuf_r+0x28>
 800aa24:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800aa28:	e7ea      	b.n	800aa00 <__swbuf_r+0x6c>
 800aa2a:	bf00      	nop
 800aa2c:	0800b29c 	.word	0x0800b29c
 800aa30:	0800b2bc 	.word	0x0800b2bc
 800aa34:	0800b27c 	.word	0x0800b27c

0800aa38 <__swsetup_r>:
 800aa38:	4b32      	ldr	r3, [pc, #200]	; (800ab04 <__swsetup_r+0xcc>)
 800aa3a:	b570      	push	{r4, r5, r6, lr}
 800aa3c:	681d      	ldr	r5, [r3, #0]
 800aa3e:	4606      	mov	r6, r0
 800aa40:	460c      	mov	r4, r1
 800aa42:	b125      	cbz	r5, 800aa4e <__swsetup_r+0x16>
 800aa44:	69ab      	ldr	r3, [r5, #24]
 800aa46:	b913      	cbnz	r3, 800aa4e <__swsetup_r+0x16>
 800aa48:	4628      	mov	r0, r5
 800aa4a:	f7ff fd43 	bl	800a4d4 <__sinit>
 800aa4e:	4b2e      	ldr	r3, [pc, #184]	; (800ab08 <__swsetup_r+0xd0>)
 800aa50:	429c      	cmp	r4, r3
 800aa52:	d10f      	bne.n	800aa74 <__swsetup_r+0x3c>
 800aa54:	686c      	ldr	r4, [r5, #4]
 800aa56:	89a3      	ldrh	r3, [r4, #12]
 800aa58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa5c:	0719      	lsls	r1, r3, #28
 800aa5e:	d42c      	bmi.n	800aaba <__swsetup_r+0x82>
 800aa60:	06dd      	lsls	r5, r3, #27
 800aa62:	d411      	bmi.n	800aa88 <__swsetup_r+0x50>
 800aa64:	2309      	movs	r3, #9
 800aa66:	6033      	str	r3, [r6, #0]
 800aa68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa6c:	81a3      	strh	r3, [r4, #12]
 800aa6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa72:	e03e      	b.n	800aaf2 <__swsetup_r+0xba>
 800aa74:	4b25      	ldr	r3, [pc, #148]	; (800ab0c <__swsetup_r+0xd4>)
 800aa76:	429c      	cmp	r4, r3
 800aa78:	d101      	bne.n	800aa7e <__swsetup_r+0x46>
 800aa7a:	68ac      	ldr	r4, [r5, #8]
 800aa7c:	e7eb      	b.n	800aa56 <__swsetup_r+0x1e>
 800aa7e:	4b24      	ldr	r3, [pc, #144]	; (800ab10 <__swsetup_r+0xd8>)
 800aa80:	429c      	cmp	r4, r3
 800aa82:	bf08      	it	eq
 800aa84:	68ec      	ldreq	r4, [r5, #12]
 800aa86:	e7e6      	b.n	800aa56 <__swsetup_r+0x1e>
 800aa88:	0758      	lsls	r0, r3, #29
 800aa8a:	d512      	bpl.n	800aab2 <__swsetup_r+0x7a>
 800aa8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa8e:	b141      	cbz	r1, 800aaa2 <__swsetup_r+0x6a>
 800aa90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa94:	4299      	cmp	r1, r3
 800aa96:	d002      	beq.n	800aa9e <__swsetup_r+0x66>
 800aa98:	4630      	mov	r0, r6
 800aa9a:	f7ff f96d 	bl	8009d78 <_free_r>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	6363      	str	r3, [r4, #52]	; 0x34
 800aaa2:	89a3      	ldrh	r3, [r4, #12]
 800aaa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aaa8:	81a3      	strh	r3, [r4, #12]
 800aaaa:	2300      	movs	r3, #0
 800aaac:	6063      	str	r3, [r4, #4]
 800aaae:	6923      	ldr	r3, [r4, #16]
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	89a3      	ldrh	r3, [r4, #12]
 800aab4:	f043 0308 	orr.w	r3, r3, #8
 800aab8:	81a3      	strh	r3, [r4, #12]
 800aaba:	6923      	ldr	r3, [r4, #16]
 800aabc:	b94b      	cbnz	r3, 800aad2 <__swsetup_r+0x9a>
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aac8:	d003      	beq.n	800aad2 <__swsetup_r+0x9a>
 800aaca:	4621      	mov	r1, r4
 800aacc:	4630      	mov	r0, r6
 800aace:	f000 f84d 	bl	800ab6c <__smakebuf_r>
 800aad2:	89a0      	ldrh	r0, [r4, #12]
 800aad4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aad8:	f010 0301 	ands.w	r3, r0, #1
 800aadc:	d00a      	beq.n	800aaf4 <__swsetup_r+0xbc>
 800aade:	2300      	movs	r3, #0
 800aae0:	60a3      	str	r3, [r4, #8]
 800aae2:	6963      	ldr	r3, [r4, #20]
 800aae4:	425b      	negs	r3, r3
 800aae6:	61a3      	str	r3, [r4, #24]
 800aae8:	6923      	ldr	r3, [r4, #16]
 800aaea:	b943      	cbnz	r3, 800aafe <__swsetup_r+0xc6>
 800aaec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aaf0:	d1ba      	bne.n	800aa68 <__swsetup_r+0x30>
 800aaf2:	bd70      	pop	{r4, r5, r6, pc}
 800aaf4:	0781      	lsls	r1, r0, #30
 800aaf6:	bf58      	it	pl
 800aaf8:	6963      	ldrpl	r3, [r4, #20]
 800aafa:	60a3      	str	r3, [r4, #8]
 800aafc:	e7f4      	b.n	800aae8 <__swsetup_r+0xb0>
 800aafe:	2000      	movs	r0, #0
 800ab00:	e7f7      	b.n	800aaf2 <__swsetup_r+0xba>
 800ab02:	bf00      	nop
 800ab04:	2000000c 	.word	0x2000000c
 800ab08:	0800b29c 	.word	0x0800b29c
 800ab0c:	0800b2bc 	.word	0x0800b2bc
 800ab10:	0800b27c 	.word	0x0800b27c

0800ab14 <abort>:
 800ab14:	b508      	push	{r3, lr}
 800ab16:	2006      	movs	r0, #6
 800ab18:	f000 f898 	bl	800ac4c <raise>
 800ab1c:	2001      	movs	r0, #1
 800ab1e:	f7f7 faaf 	bl	8002080 <_exit>

0800ab22 <__swhatbuf_r>:
 800ab22:	b570      	push	{r4, r5, r6, lr}
 800ab24:	460e      	mov	r6, r1
 800ab26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab2a:	2900      	cmp	r1, #0
 800ab2c:	b096      	sub	sp, #88	; 0x58
 800ab2e:	4614      	mov	r4, r2
 800ab30:	461d      	mov	r5, r3
 800ab32:	da08      	bge.n	800ab46 <__swhatbuf_r+0x24>
 800ab34:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	602a      	str	r2, [r5, #0]
 800ab3c:	061a      	lsls	r2, r3, #24
 800ab3e:	d410      	bmi.n	800ab62 <__swhatbuf_r+0x40>
 800ab40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab44:	e00e      	b.n	800ab64 <__swhatbuf_r+0x42>
 800ab46:	466a      	mov	r2, sp
 800ab48:	f000 f89c 	bl	800ac84 <_fstat_r>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	dbf1      	blt.n	800ab34 <__swhatbuf_r+0x12>
 800ab50:	9a01      	ldr	r2, [sp, #4]
 800ab52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab5a:	425a      	negs	r2, r3
 800ab5c:	415a      	adcs	r2, r3
 800ab5e:	602a      	str	r2, [r5, #0]
 800ab60:	e7ee      	b.n	800ab40 <__swhatbuf_r+0x1e>
 800ab62:	2340      	movs	r3, #64	; 0x40
 800ab64:	2000      	movs	r0, #0
 800ab66:	6023      	str	r3, [r4, #0]
 800ab68:	b016      	add	sp, #88	; 0x58
 800ab6a:	bd70      	pop	{r4, r5, r6, pc}

0800ab6c <__smakebuf_r>:
 800ab6c:	898b      	ldrh	r3, [r1, #12]
 800ab6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab70:	079d      	lsls	r5, r3, #30
 800ab72:	4606      	mov	r6, r0
 800ab74:	460c      	mov	r4, r1
 800ab76:	d507      	bpl.n	800ab88 <__smakebuf_r+0x1c>
 800ab78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab7c:	6023      	str	r3, [r4, #0]
 800ab7e:	6123      	str	r3, [r4, #16]
 800ab80:	2301      	movs	r3, #1
 800ab82:	6163      	str	r3, [r4, #20]
 800ab84:	b002      	add	sp, #8
 800ab86:	bd70      	pop	{r4, r5, r6, pc}
 800ab88:	ab01      	add	r3, sp, #4
 800ab8a:	466a      	mov	r2, sp
 800ab8c:	f7ff ffc9 	bl	800ab22 <__swhatbuf_r>
 800ab90:	9900      	ldr	r1, [sp, #0]
 800ab92:	4605      	mov	r5, r0
 800ab94:	4630      	mov	r0, r6
 800ab96:	f7ff f95b 	bl	8009e50 <_malloc_r>
 800ab9a:	b948      	cbnz	r0, 800abb0 <__smakebuf_r+0x44>
 800ab9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aba0:	059a      	lsls	r2, r3, #22
 800aba2:	d4ef      	bmi.n	800ab84 <__smakebuf_r+0x18>
 800aba4:	f023 0303 	bic.w	r3, r3, #3
 800aba8:	f043 0302 	orr.w	r3, r3, #2
 800abac:	81a3      	strh	r3, [r4, #12]
 800abae:	e7e3      	b.n	800ab78 <__smakebuf_r+0xc>
 800abb0:	4b0d      	ldr	r3, [pc, #52]	; (800abe8 <__smakebuf_r+0x7c>)
 800abb2:	62b3      	str	r3, [r6, #40]	; 0x28
 800abb4:	89a3      	ldrh	r3, [r4, #12]
 800abb6:	6020      	str	r0, [r4, #0]
 800abb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abbc:	81a3      	strh	r3, [r4, #12]
 800abbe:	9b00      	ldr	r3, [sp, #0]
 800abc0:	6163      	str	r3, [r4, #20]
 800abc2:	9b01      	ldr	r3, [sp, #4]
 800abc4:	6120      	str	r0, [r4, #16]
 800abc6:	b15b      	cbz	r3, 800abe0 <__smakebuf_r+0x74>
 800abc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abcc:	4630      	mov	r0, r6
 800abce:	f000 f86b 	bl	800aca8 <_isatty_r>
 800abd2:	b128      	cbz	r0, 800abe0 <__smakebuf_r+0x74>
 800abd4:	89a3      	ldrh	r3, [r4, #12]
 800abd6:	f023 0303 	bic.w	r3, r3, #3
 800abda:	f043 0301 	orr.w	r3, r3, #1
 800abde:	81a3      	strh	r3, [r4, #12]
 800abe0:	89a0      	ldrh	r0, [r4, #12]
 800abe2:	4305      	orrs	r5, r0
 800abe4:	81a5      	strh	r5, [r4, #12]
 800abe6:	e7cd      	b.n	800ab84 <__smakebuf_r+0x18>
 800abe8:	0800a46d 	.word	0x0800a46d

0800abec <_malloc_usable_size_r>:
 800abec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abf0:	1f18      	subs	r0, r3, #4
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	bfbc      	itt	lt
 800abf6:	580b      	ldrlt	r3, [r1, r0]
 800abf8:	18c0      	addlt	r0, r0, r3
 800abfa:	4770      	bx	lr

0800abfc <_raise_r>:
 800abfc:	291f      	cmp	r1, #31
 800abfe:	b538      	push	{r3, r4, r5, lr}
 800ac00:	4604      	mov	r4, r0
 800ac02:	460d      	mov	r5, r1
 800ac04:	d904      	bls.n	800ac10 <_raise_r+0x14>
 800ac06:	2316      	movs	r3, #22
 800ac08:	6003      	str	r3, [r0, #0]
 800ac0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac0e:	bd38      	pop	{r3, r4, r5, pc}
 800ac10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac12:	b112      	cbz	r2, 800ac1a <_raise_r+0x1e>
 800ac14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac18:	b94b      	cbnz	r3, 800ac2e <_raise_r+0x32>
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f000 f830 	bl	800ac80 <_getpid_r>
 800ac20:	462a      	mov	r2, r5
 800ac22:	4601      	mov	r1, r0
 800ac24:	4620      	mov	r0, r4
 800ac26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac2a:	f000 b817 	b.w	800ac5c <_kill_r>
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d00a      	beq.n	800ac48 <_raise_r+0x4c>
 800ac32:	1c59      	adds	r1, r3, #1
 800ac34:	d103      	bne.n	800ac3e <_raise_r+0x42>
 800ac36:	2316      	movs	r3, #22
 800ac38:	6003      	str	r3, [r0, #0]
 800ac3a:	2001      	movs	r0, #1
 800ac3c:	e7e7      	b.n	800ac0e <_raise_r+0x12>
 800ac3e:	2400      	movs	r4, #0
 800ac40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac44:	4628      	mov	r0, r5
 800ac46:	4798      	blx	r3
 800ac48:	2000      	movs	r0, #0
 800ac4a:	e7e0      	b.n	800ac0e <_raise_r+0x12>

0800ac4c <raise>:
 800ac4c:	4b02      	ldr	r3, [pc, #8]	; (800ac58 <raise+0xc>)
 800ac4e:	4601      	mov	r1, r0
 800ac50:	6818      	ldr	r0, [r3, #0]
 800ac52:	f7ff bfd3 	b.w	800abfc <_raise_r>
 800ac56:	bf00      	nop
 800ac58:	2000000c 	.word	0x2000000c

0800ac5c <_kill_r>:
 800ac5c:	b538      	push	{r3, r4, r5, lr}
 800ac5e:	4d07      	ldr	r5, [pc, #28]	; (800ac7c <_kill_r+0x20>)
 800ac60:	2300      	movs	r3, #0
 800ac62:	4604      	mov	r4, r0
 800ac64:	4608      	mov	r0, r1
 800ac66:	4611      	mov	r1, r2
 800ac68:	602b      	str	r3, [r5, #0]
 800ac6a:	f7f7 f9f9 	bl	8002060 <_kill>
 800ac6e:	1c43      	adds	r3, r0, #1
 800ac70:	d102      	bne.n	800ac78 <_kill_r+0x1c>
 800ac72:	682b      	ldr	r3, [r5, #0]
 800ac74:	b103      	cbz	r3, 800ac78 <_kill_r+0x1c>
 800ac76:	6023      	str	r3, [r4, #0]
 800ac78:	bd38      	pop	{r3, r4, r5, pc}
 800ac7a:	bf00      	nop
 800ac7c:	200004b4 	.word	0x200004b4

0800ac80 <_getpid_r>:
 800ac80:	f7f7 b9e6 	b.w	8002050 <_getpid>

0800ac84 <_fstat_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4d07      	ldr	r5, [pc, #28]	; (800aca4 <_fstat_r+0x20>)
 800ac88:	2300      	movs	r3, #0
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	4608      	mov	r0, r1
 800ac8e:	4611      	mov	r1, r2
 800ac90:	602b      	str	r3, [r5, #0]
 800ac92:	f7f7 fa44 	bl	800211e <_fstat>
 800ac96:	1c43      	adds	r3, r0, #1
 800ac98:	d102      	bne.n	800aca0 <_fstat_r+0x1c>
 800ac9a:	682b      	ldr	r3, [r5, #0]
 800ac9c:	b103      	cbz	r3, 800aca0 <_fstat_r+0x1c>
 800ac9e:	6023      	str	r3, [r4, #0]
 800aca0:	bd38      	pop	{r3, r4, r5, pc}
 800aca2:	bf00      	nop
 800aca4:	200004b4 	.word	0x200004b4

0800aca8 <_isatty_r>:
 800aca8:	b538      	push	{r3, r4, r5, lr}
 800acaa:	4d06      	ldr	r5, [pc, #24]	; (800acc4 <_isatty_r+0x1c>)
 800acac:	2300      	movs	r3, #0
 800acae:	4604      	mov	r4, r0
 800acb0:	4608      	mov	r0, r1
 800acb2:	602b      	str	r3, [r5, #0]
 800acb4:	f7f7 fa43 	bl	800213e <_isatty>
 800acb8:	1c43      	adds	r3, r0, #1
 800acba:	d102      	bne.n	800acc2 <_isatty_r+0x1a>
 800acbc:	682b      	ldr	r3, [r5, #0]
 800acbe:	b103      	cbz	r3, 800acc2 <_isatty_r+0x1a>
 800acc0:	6023      	str	r3, [r4, #0]
 800acc2:	bd38      	pop	{r3, r4, r5, pc}
 800acc4:	200004b4 	.word	0x200004b4

0800acc8 <_init>:
 800acc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acca:	bf00      	nop
 800accc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acce:	bc08      	pop	{r3}
 800acd0:	469e      	mov	lr, r3
 800acd2:	4770      	bx	lr

0800acd4 <_fini>:
 800acd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd6:	bf00      	nop
 800acd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acda:	bc08      	pop	{r3}
 800acdc:	469e      	mov	lr, r3
 800acde:	4770      	bx	lr
