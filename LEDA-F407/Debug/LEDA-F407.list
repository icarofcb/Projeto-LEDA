
LEDA-F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a79c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800a930  0800a930  0001a930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae44  0800ae44  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae44  0800ae44  0001ae44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae4c  0800ae4c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae4c  0800ae4c  0001ae4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae50  0800ae50  0001ae50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800ae54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000003bc  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000598  20000598  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001471e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025e1  00000000  00000000  0003492a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  00036f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011d8  00000000  00000000  000381b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023df1  00000000  00000000  00039390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000150c4  00000000  00000000  0005d181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de2be  00000000  00000000  00072245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150503  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006544  00000000  00000000  00150554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a914 	.word	0x0800a914

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800a914 	.word	0x0800a914

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MPU6050_Init>:
#endif

//==========ACELEROMETRO==========//

void MPU6050_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	9302      	str	r3, [sp, #8]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	1dfb      	adds	r3, r7, #7
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2301      	movs	r3, #1
 8000f62:	2275      	movs	r2, #117	; 0x75
 8000f64:	21d0      	movs	r1, #208	; 0xd0
 8000f66:	4823      	ldr	r0, [pc, #140]	; (8000ff4 <MPU6050_Init+0xa8>)
 8000f68:	f003 fbbc 	bl	80046e4 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b68      	cmp	r3, #104	; 0x68
 8000f70:	d13b      	bne.n	8000fea <MPU6050_Init+0x9e>
	{
		Data = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7a:	9302      	str	r3, [sp, #8]
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	1dbb      	adds	r3, r7, #6
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2301      	movs	r3, #1
 8000f86:	226b      	movs	r2, #107	; 0x6b
 8000f88:	21d0      	movs	r1, #208	; 0xd0
 8000f8a:	481a      	ldr	r0, [pc, #104]	; (8000ff4 <MPU6050_Init+0xa8>)
 8000f8c:	f003 fab0 	bl	80044f0 <HAL_I2C_Mem_Write>

		Data = 0x07;
 8000f90:	2307      	movs	r3, #7
 8000f92:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	1dbb      	adds	r3, r7, #6
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	2219      	movs	r2, #25
 8000fa6:	21d0      	movs	r1, #208	; 0xd0
 8000fa8:	4812      	ldr	r0, [pc, #72]	; (8000ff4 <MPU6050_Init+0xa8>)
 8000faa:	f003 faa1 	bl	80044f0 <HAL_I2C_Mem_Write>

		Data = 0x00;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	9302      	str	r3, [sp, #8]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	1dbb      	adds	r3, r7, #6
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	221c      	movs	r2, #28
 8000fc4:	21d0      	movs	r1, #208	; 0xd0
 8000fc6:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <MPU6050_Init+0xa8>)
 8000fc8:	f003 fa92 	bl	80044f0 <HAL_I2C_Mem_Write>

		Data = 0x00;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	1dbb      	adds	r3, r7, #6
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	221b      	movs	r2, #27
 8000fe2:	21d0      	movs	r1, #208	; 0xd0
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <MPU6050_Init+0xa8>)
 8000fe6:	f003 fa83 	bl	80044f0 <HAL_I2C_Mem_Write>
	}

}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000268 	.word	0x20000268

08000ff8 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	int16_t Accel_X_RAW = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	81fb      	strh	r3, [r7, #14]
	int16_t Accel_Y_RAW = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	81bb      	strh	r3, [r7, #12]
	int16_t Accel_Z_RAW = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	9302      	str	r3, [sp, #8]
 8001010:	2306      	movs	r3, #6
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	223b      	movs	r2, #59	; 0x3b
 800101c:	21d0      	movs	r1, #208	; 0xd0
 800101e:	4853      	ldr	r0, [pc, #332]	; (800116c <MPU6050_Read_Accel+0x174>)
 8001020:	f003 fb60 	bl	80046e4 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001024:	793b      	ldrb	r3, [r7, #4]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	797b      	ldrb	r3, [r7, #5]
 800102c:	b21b      	sxth	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	81fb      	strh	r3, [r7, #14]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b21a      	sxth	r2, r3
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	b21b      	sxth	r3, r3
 800103c:	4313      	orrs	r3, r2
 800103e:	81bb      	strh	r3, [r7, #12]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001040:	7a3b      	ldrb	r3, [r7, #8]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	7a7b      	ldrb	r3, [r7, #9]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	817b      	strh	r3, [r7, #10]

	MPU6050.ax = ((float)Accel_X_RAW/16384.0)*10;
 800104e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105a:	ee17 0a90 	vmov	r0, s15
 800105e:	f7ff fa73 	bl	8000548 <__aeabi_f2d>
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	4b42      	ldr	r3, [pc, #264]	; (8001170 <MPU6050_Read_Accel+0x178>)
 8001068:	f7ff fbf0 	bl	800084c <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	4b3e      	ldr	r3, [pc, #248]	; (8001174 <MPU6050_Read_Accel+0x17c>)
 800107a:	f7ff fabd 	bl	80005f8 <__aeabi_dmul>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	f7ff fd8f 	bl	8000ba8 <__aeabi_d2f>
 800108a:	4603      	mov	r3, r0
 800108c:	4a3a      	ldr	r2, [pc, #232]	; (8001178 <MPU6050_Read_Accel+0x180>)
 800108e:	6013      	str	r3, [r2, #0]
	MPU6050.ay = ((float)Accel_Y_RAW/16384.0)*10;
 8001090:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109c:	ee17 0a90 	vmov	r0, s15
 80010a0:	f7ff fa52 	bl	8000548 <__aeabi_f2d>
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4b31      	ldr	r3, [pc, #196]	; (8001170 <MPU6050_Read_Accel+0x178>)
 80010aa:	f7ff fbcf 	bl	800084c <__aeabi_ddiv>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <MPU6050_Read_Accel+0x17c>)
 80010bc:	f7ff fa9c 	bl	80005f8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fd6e 	bl	8000ba8 <__aeabi_d2f>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a2a      	ldr	r2, [pc, #168]	; (8001178 <MPU6050_Read_Accel+0x180>)
 80010d0:	6053      	str	r3, [r2, #4]
	MPU6050.az = ((float)Accel_Z_RAW/16384.0)*10;
 80010d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010de:	ee17 0a90 	vmov	r0, s15
 80010e2:	f7ff fa31 	bl	8000548 <__aeabi_f2d>
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	4b21      	ldr	r3, [pc, #132]	; (8001170 <MPU6050_Read_Accel+0x178>)
 80010ec:	f7ff fbae 	bl	800084c <__aeabi_ddiv>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <MPU6050_Read_Accel+0x17c>)
 80010fe:	f7ff fa7b 	bl	80005f8 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fd4d 	bl	8000ba8 <__aeabi_d2f>
 800110e:	4603      	mov	r3, r0
 8001110:	4a19      	ldr	r2, [pc, #100]	; (8001178 <MPU6050_Read_Accel+0x180>)
 8001112:	6093      	str	r3, [r2, #8]

	average.ax = mvAx(MPU6050.ax, numberOfIterations);
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <MPU6050_Read_Accel+0x180>)
 8001116:	edd3 7a00 	vldr	s15, [r3]
 800111a:	200a      	movs	r0, #10
 800111c:	eeb0 0a67 	vmov.f32	s0, s15
 8001120:	f000 fbaa 	bl	8001878 <mvAx>
 8001124:	eef0 7a40 	vmov.f32	s15, s0
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <MPU6050_Read_Accel+0x184>)
 800112a:	edc3 7a00 	vstr	s15, [r3]
	average.ay = mvAy(MPU6050.ay, numberOfIterations);
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MPU6050_Read_Accel+0x180>)
 8001130:	edd3 7a01 	vldr	s15, [r3, #4]
 8001134:	200a      	movs	r0, #10
 8001136:	eeb0 0a67 	vmov.f32	s0, s15
 800113a:	f000 fbe9 	bl	8001910 <mvAy>
 800113e:	eef0 7a40 	vmov.f32	s15, s0
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MPU6050_Read_Accel+0x184>)
 8001144:	edc3 7a01 	vstr	s15, [r3, #4]
	average.az = mvAy(MPU6050.az, numberOfIterations);
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MPU6050_Read_Accel+0x180>)
 800114a:	edd3 7a02 	vldr	s15, [r3, #8]
 800114e:	200a      	movs	r0, #10
 8001150:	eeb0 0a67 	vmov.f32	s0, s15
 8001154:	f000 fbdc 	bl	8001910 <mvAy>
 8001158:	eef0 7a40 	vmov.f32	s15, s0
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <MPU6050_Read_Accel+0x184>)
 800115e:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000268 	.word	0x20000268
 8001170:	40d00000 	.word	0x40d00000
 8001174:	40240000 	.word	0x40240000
 8001178:	20000420 	.word	0x20000420
 800117c:	20000438 	.word	0x20000438

08001180 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro  (void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	int16_t Gyro_X_RAW = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	81fb      	strh	r3, [r7, #14]
	int16_t Gyro_Y_RAW = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	81bb      	strh	r3, [r7, #12]
	int16_t Gyro_Z_RAW = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	2306      	movs	r3, #6
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2301      	movs	r3, #1
 80011a2:	2243      	movs	r2, #67	; 0x43
 80011a4:	21d0      	movs	r1, #208	; 0xd0
 80011a6:	4821      	ldr	r0, [pc, #132]	; (800122c <MPU6050_Read_Gyro+0xac>)
 80011a8:	f003 fa9c 	bl	80046e4 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80011ac:	793b      	ldrb	r3, [r7, #4]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	797b      	ldrb	r3, [r7, #5]
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	81fb      	strh	r3, [r7, #14]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21a      	sxth	r2, r3
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	4313      	orrs	r3, r2
 80011c6:	81bb      	strh	r3, [r7, #12]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80011c8:	7a3b      	ldrb	r3, [r7, #8]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	7a7b      	ldrb	r3, [r7, #9]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	817b      	strh	r3, [r7, #10]

	MPU6050.gx = (float)Gyro_X_RAW/131.0;
 80011d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e2:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001230 <MPU6050_Read_Gyro+0xb0>
 80011e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MPU6050_Read_Gyro+0xb4>)
 80011ec:	edc3 7a03 	vstr	s15, [r3, #12]
	MPU6050.gy = (float)Gyro_Y_RAW/131.0;
 80011f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001230 <MPU6050_Read_Gyro+0xb0>
 8001200:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MPU6050_Read_Gyro+0xb4>)
 8001206:	edc3 7a04 	vstr	s15, [r3, #16]
	MPU6050.gz = (float)Gyro_Z_RAW/131.0;
 800120a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001216:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001230 <MPU6050_Read_Gyro+0xb0>
 800121a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <MPU6050_Read_Gyro+0xb4>)
 8001220:	edc3 7a05 	vstr	s15, [r3, #20]

	//average.gx = mvGx(MPU6050.gx, numberOfIterations);
	//average.gy = mvGy(MPU6050.gy, numberOfIterations);
	//average.gz = mvGy(MPU6050.gz, numberOfIterations);

}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000268 	.word	0x20000268
 8001230:	43030000 	.word	0x43030000
 8001234:	20000420 	.word	0x20000420

08001238 <GPS_Init>:

//==========GPS==========//

void GPS_Init()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 800123c:	2201      	movs	r2, #1
 800123e:	4903      	ldr	r1, [pc, #12]	; (800124c <GPS_Init+0x14>)
 8001240:	4803      	ldr	r0, [pc, #12]	; (8001250 <GPS_Init+0x18>)
 8001242:	f004 ffec 	bl	800621e <HAL_UART_Receive_IT>
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000450 	.word	0x20000450
 8001250:	20000390 	.word	0x20000390

08001254 <GPS_UART_CallBack>:

void GPS_UART_CallBack(){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <GPS_UART_CallBack+0x60>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b0a      	cmp	r3, #10
 800125e:	d010      	beq.n	8001282 <GPS_UART_CallBack+0x2e>
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <GPS_UART_CallBack+0x64>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b25b      	sxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	db0b      	blt.n	8001282 <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <GPS_UART_CallBack+0x64>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	b2d1      	uxtb	r1, r2
 8001272:	4a11      	ldr	r2, [pc, #68]	; (80012b8 <GPS_UART_CallBack+0x64>)
 8001274:	7011      	strb	r1, [r2, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <GPS_UART_CallBack+0x60>)
 800127a:	7819      	ldrb	r1, [r3, #0]
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <GPS_UART_CallBack+0x68>)
 800127e:	5499      	strb	r1, [r3, r2]
 8001280:	e010      	b.n	80012a4 <GPS_UART_CallBack+0x50>

		#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer);
		#endif

		if(GPS_validate((char*) rx_buffer))
 8001282:	480e      	ldr	r0, [pc, #56]	; (80012bc <GPS_UART_CallBack+0x68>)
 8001284:	f000 f81e 	bl	80012c4 <GPS_validate>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 800128e:	480b      	ldr	r0, [pc, #44]	; (80012bc <GPS_UART_CallBack+0x68>)
 8001290:	f000 f87a 	bl	8001388 <GPS_parse>
		rx_index = 0;
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <GPS_UART_CallBack+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 800129a:	2280      	movs	r2, #128	; 0x80
 800129c:	2100      	movs	r1, #0
 800129e:	4807      	ldr	r0, [pc, #28]	; (80012bc <GPS_UART_CallBack+0x68>)
 80012a0:	f005 ff80 	bl	80071a4 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80012a4:	2201      	movs	r2, #1
 80012a6:	4903      	ldr	r1, [pc, #12]	; (80012b4 <GPS_UART_CallBack+0x60>)
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <GPS_UART_CallBack+0x6c>)
 80012aa:	f004 ffb8 	bl	800621e <HAL_UART_Receive_IT>
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000450 	.word	0x20000450
 80012b8:	200004d4 	.word	0x200004d4
 80012bc:	20000454 	.word	0x20000454
 80012c0:	20000390 	.word	0x20000390

080012c4 <GPS_validate>:

int GPS_validate(char *nmeastr){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b24      	cmp	r3, #36	; 0x24
 80012de:	d103      	bne.n	80012e8 <GPS_validate+0x24>
        i++;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	3301      	adds	r3, #1
 80012e4:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80012e6:	e00c      	b.n	8001302 <GPS_validate+0x3e>
        return 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	e047      	b.n	800137c <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4053      	eors	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        i++;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3301      	adds	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d008      	beq.n	8001320 <GPS_validate+0x5c>
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	4413      	add	r3, r2
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b2a      	cmp	r3, #42	; 0x2a
 8001318:	d002      	beq.n	8001320 <GPS_validate+0x5c>
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	2b4a      	cmp	r3, #74	; 0x4a
 800131e:	dde5      	ble.n	80012ec <GPS_validate+0x28>
    }

    if(i >= 75){
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	2b4a      	cmp	r3, #74	; 0x4a
 8001324:	dd01      	ble.n	800132a <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8001326:	2300      	movs	r3, #0
 8001328:	e028      	b.n	800137c <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b2a      	cmp	r3, #42	; 0x2a
 8001334:	d119      	bne.n	800136a <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3302      	adds	r3, #2
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	490a      	ldr	r1, [pc, #40]	; (8001384 <GPS_validate+0xc0>)
 800135a:	4618      	mov	r0, r3
 800135c:	f006 fb94 	bl	8007a88 <siprintf>
    return((checkcalcstr[0] == check[0])
 8001360:	7a3a      	ldrb	r2, [r7, #8]
 8001362:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001364:	429a      	cmp	r2, r3
 8001366:	d108      	bne.n	800137a <GPS_validate+0xb6>
 8001368:	e001      	b.n	800136e <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800136a:	2300      	movs	r3, #0
 800136c:	e006      	b.n	800137c <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800136e:	7a7a      	ldrb	r2, [r7, #9]
 8001370:	7b7b      	ldrb	r3, [r7, #13]
 8001372:	429a      	cmp	r2, r3
 8001374:	d101      	bne.n	800137a <GPS_validate+0xb6>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <GPS_validate+0xb8>
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	0800a930 	.word	0x0800a930

08001388 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af08      	add	r7, sp, #32
 800138e:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001390:	2206      	movs	r2, #6
 8001392:	494a      	ldr	r1, [pc, #296]	; (80014bc <GPS_parse+0x134>)
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f006 fc08 	bl	8007baa <strncmp>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d137      	bne.n	8001410 <GPS_parse+0x88>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80013a0:	4b47      	ldr	r3, [pc, #284]	; (80014c0 <GPS_parse+0x138>)
 80013a2:	9307      	str	r3, [sp, #28]
 80013a4:	4b47      	ldr	r3, [pc, #284]	; (80014c4 <GPS_parse+0x13c>)
 80013a6:	9306      	str	r3, [sp, #24]
 80013a8:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <GPS_parse+0x140>)
 80013aa:	9305      	str	r3, [sp, #20]
 80013ac:	4b47      	ldr	r3, [pc, #284]	; (80014cc <GPS_parse+0x144>)
 80013ae:	9304      	str	r3, [sp, #16]
 80013b0:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <GPS_parse+0x148>)
 80013b2:	9303      	str	r3, [sp, #12]
 80013b4:	4b47      	ldr	r3, [pc, #284]	; (80014d4 <GPS_parse+0x14c>)
 80013b6:	9302      	str	r3, [sp, #8]
 80013b8:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <GPS_parse+0x150>)
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	4b47      	ldr	r3, [pc, #284]	; (80014dc <GPS_parse+0x154>)
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	4b47      	ldr	r3, [pc, #284]	; (80014e0 <GPS_parse+0x158>)
 80013c2:	4a48      	ldr	r2, [pc, #288]	; (80014e4 <GPS_parse+0x15c>)
 80013c4:	4948      	ldr	r1, [pc, #288]	; (80014e8 <GPS_parse+0x160>)
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f006 fb7e 	bl	8007ac8 <siscanf>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	dd70      	ble.n	80014b4 <GPS_parse+0x12c>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80013d2:	4b46      	ldr	r3, [pc, #280]	; (80014ec <GPS_parse+0x164>)
 80013d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80013d8:	4b44      	ldr	r3, [pc, #272]	; (80014ec <GPS_parse+0x164>)
 80013da:	7e1b      	ldrb	r3, [r3, #24]
 80013dc:	4618      	mov	r0, r3
 80013de:	eeb0 0a67 	vmov.f32	s0, s15
 80013e2:	f000 f8a7 	bl	8001534 <GPS_nmea_to_dec>
 80013e6:	eef0 7a40 	vmov.f32	s15, s0
 80013ea:	4b40      	ldr	r3, [pc, #256]	; (80014ec <GPS_parse+0x164>)
 80013ec:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80013f0:	4b3e      	ldr	r3, [pc, #248]	; (80014ec <GPS_parse+0x164>)
 80013f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80013f6:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <GPS_parse+0x164>)
 80013f8:	7e5b      	ldrb	r3, [r3, #25]
 80013fa:	4618      	mov	r0, r3
 80013fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001400:	f000 f898 	bl	8001534 <GPS_nmea_to_dec>
 8001404:	eef0 7a40 	vmov.f32	s15, s0
 8001408:	4b38      	ldr	r3, [pc, #224]	; (80014ec <GPS_parse+0x164>)
 800140a:	edc3 7a00 	vstr	s15, [r3]
    		return;
 800140e:	e051      	b.n	80014b4 <GPS_parse+0x12c>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001410:	2206      	movs	r2, #6
 8001412:	4937      	ldr	r1, [pc, #220]	; (80014f0 <GPS_parse+0x168>)
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f006 fbc8 	bl	8007baa <strncmp>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d114      	bne.n	800144a <GPS_parse+0xc2>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001420:	4b34      	ldr	r3, [pc, #208]	; (80014f4 <GPS_parse+0x16c>)
 8001422:	9305      	str	r3, [sp, #20]
 8001424:	4b34      	ldr	r3, [pc, #208]	; (80014f8 <GPS_parse+0x170>)
 8001426:	9304      	str	r3, [sp, #16]
 8001428:	4b34      	ldr	r3, [pc, #208]	; (80014fc <GPS_parse+0x174>)
 800142a:	9303      	str	r3, [sp, #12]
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <GPS_parse+0x14c>)
 800142e:	9302      	str	r3, [sp, #8]
 8001430:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <GPS_parse+0x150>)
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	4b29      	ldr	r3, [pc, #164]	; (80014dc <GPS_parse+0x154>)
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <GPS_parse+0x158>)
 800143a:	4a2a      	ldr	r2, [pc, #168]	; (80014e4 <GPS_parse+0x15c>)
 800143c:	4930      	ldr	r1, [pc, #192]	; (8001500 <GPS_parse+0x178>)
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f006 fb42 	bl	8007ac8 <siscanf>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	e034      	b.n	80014b4 <GPS_parse+0x12c>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 800144a:	2206      	movs	r2, #6
 800144c:	492d      	ldr	r1, [pc, #180]	; (8001504 <GPS_parse+0x17c>)
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f006 fbab 	bl	8007baa <strncmp>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d110      	bne.n	800147c <GPS_parse+0xf4>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 800145a:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <GPS_parse+0x180>)
 800145c:	9303      	str	r3, [sp, #12]
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <GPS_parse+0x15c>)
 8001460:	9302      	str	r3, [sp, #8]
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <GPS_parse+0x14c>)
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <GPS_parse+0x150>)
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <GPS_parse+0x154>)
 800146c:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <GPS_parse+0x158>)
 800146e:	4927      	ldr	r1, [pc, #156]	; (800150c <GPS_parse+0x184>)
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f006 fb29 	bl	8007ac8 <siscanf>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	e01b      	b.n	80014b4 <GPS_parse+0x12c>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 800147c:	2206      	movs	r2, #6
 800147e:	4924      	ldr	r1, [pc, #144]	; (8001510 <GPS_parse+0x188>)
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f006 fb92 	bl	8007baa <strncmp>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d113      	bne.n	80014b4 <GPS_parse+0x12c>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 800148c:	4b21      	ldr	r3, [pc, #132]	; (8001514 <GPS_parse+0x18c>)
 800148e:	9305      	str	r3, [sp, #20]
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <GPS_parse+0x190>)
 8001492:	9304      	str	r3, [sp, #16]
 8001494:	4b21      	ldr	r3, [pc, #132]	; (800151c <GPS_parse+0x194>)
 8001496:	9303      	str	r3, [sp, #12]
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <GPS_parse+0x174>)
 800149a:	9302      	str	r3, [sp, #8]
 800149c:	4b20      	ldr	r3, [pc, #128]	; (8001520 <GPS_parse+0x198>)
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	4b20      	ldr	r3, [pc, #128]	; (8001524 <GPS_parse+0x19c>)
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <GPS_parse+0x1a0>)
 80014a6:	4a21      	ldr	r2, [pc, #132]	; (800152c <GPS_parse+0x1a4>)
 80014a8:	4921      	ldr	r1, [pc, #132]	; (8001530 <GPS_parse+0x1a8>)
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f006 fb0c 	bl	8007ac8 <siscanf>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
            return;
    }
}
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	0800a938 	.word	0x0800a938
 80014c0:	20000504 	.word	0x20000504
 80014c4:	20000500 	.word	0x20000500
 80014c8:	200004fc 	.word	0x200004fc
 80014cc:	200004f8 	.word	0x200004f8
 80014d0:	200004f4 	.word	0x200004f4
 80014d4:	200004f1 	.word	0x200004f1
 80014d8:	200004e4 	.word	0x200004e4
 80014dc:	200004f0 	.word	0x200004f0
 80014e0:	200004e8 	.word	0x200004e8
 80014e4:	200004ec 	.word	0x200004ec
 80014e8:	0800a940 	.word	0x0800a940
 80014ec:	200004d8 	.word	0x200004d8
 80014f0:	0800a968 	.word	0x0800a968
 80014f4:	20000510 	.word	0x20000510
 80014f8:	2000050c 	.word	0x2000050c
 80014fc:	20000508 	.word	0x20000508
 8001500:	0800a970 	.word	0x0800a970
 8001504:	0800a990 	.word	0x0800a990
 8001508:	20000514 	.word	0x20000514
 800150c:	0800a998 	.word	0x0800a998
 8001510:	0800a9b4 	.word	0x0800a9b4
 8001514:	2000052c 	.word	0x2000052c
 8001518:	20000528 	.word	0x20000528
 800151c:	20000525 	.word	0x20000525
 8001520:	20000524 	.word	0x20000524
 8001524:	20000520 	.word	0x20000520
 8001528:	2000051c 	.word	0x2000051c
 800152c:	20000518 	.word	0x20000518
 8001530:	0800a9bc 	.word	0x0800a9bc

08001534 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	ed87 0a01 	vstr	s0, [r7, #4]
 800153e:	4603      	mov	r3, r0
 8001540:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001542:	ed97 7a01 	vldr	s14, [r7, #4]
 8001546:	eddf 6a20 	vldr	s13, [pc, #128]	; 80015c8 <GPS_nmea_to_dec+0x94>
 800154a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800154e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001552:	ee17 3a90 	vmov	r3, s15
 8001556:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	2264      	movs	r2, #100	; 0x64
 800155c:	fb02 f303 	mul.w	r3, r2, r3
 8001560:	ee07 3a90 	vmov	s15, r3
 8001564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001568:	ed97 7a01 	vldr	s14, [r7, #4]
 800156c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001570:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001574:	ed97 7a03 	vldr	s14, [r7, #12]
 8001578:	eddf 6a14 	vldr	s13, [pc, #80]	; 80015cc <GPS_nmea_to_dec+0x98>
 800157c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001580:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001596:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	2b53      	cmp	r3, #83	; 0x53
 800159e:	d002      	beq.n	80015a6 <GPS_nmea_to_dec+0x72>
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	2b57      	cmp	r3, #87	; 0x57
 80015a4:	d105      	bne.n	80015b2 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80015a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80015aa:	eef1 7a67 	vneg.f32	s15, s15
 80015ae:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	ee07 3a90 	vmov	s15, r3
}
 80015b8:	eeb0 0a67 	vmov.f32	s0, s15
 80015bc:	371c      	adds	r7, #28
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	42c80000 	.word	0x42c80000
 80015cc:	42700000 	.word	0x42700000

080015d0 <Nextion_SendString>:


//==========NEXTION==========//

void Nextion_SendString(char *ID,char *string)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b094      	sub	sp, #80	; 0x50
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
	uint8_t Cmd_End[3] = {0xFF, 0xFF, 0xFF};
 80015da:	4a14      	ldr	r2, [pc, #80]	; (800162c <Nextion_SendString+0x5c>)
 80015dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	4611      	mov	r1, r2
 80015e4:	8019      	strh	r1, [r3, #0]
 80015e6:	3302      	adds	r3, #2
 80015e8:	0c12      	lsrs	r2, r2, #16
 80015ea:	701a      	strb	r2, [r3, #0]

	char buf[64];

	sprintf(buf,"%s.txt=\"%s\"", ID, string);
 80015ec:	f107 000c 	add.w	r0, r7, #12
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	490e      	ldr	r1, [pc, #56]	; (8001630 <Nextion_SendString+0x60>)
 80015f6:	f006 fa47 	bl	8007a88 <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 100);
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe fde6 	bl	80001d0 <strlen>
 8001604:	4603      	mov	r3, r0
 8001606:	b29a      	uxth	r2, r3
 8001608:	f107 010c 	add.w	r1, r7, #12
 800160c:	2364      	movs	r3, #100	; 0x64
 800160e:	4809      	ldr	r0, [pc, #36]	; (8001634 <Nextion_SendString+0x64>)
 8001610:	f004 fd73 	bl	80060fa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 10);
 8001614:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001618:	230a      	movs	r3, #10
 800161a:	2203      	movs	r2, #3
 800161c:	4805      	ldr	r0, [pc, #20]	; (8001634 <Nextion_SendString+0x64>)
 800161e:	f004 fd6c 	bl	80060fa <HAL_UART_Transmit>
}
 8001622:	bf00      	nop
 8001624:	3750      	adds	r7, #80	; 0x50
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	0800a9e8 	.word	0x0800a9e8
 8001630:	0800a9dc 	.word	0x0800a9dc
 8001634:	2000034c 	.word	0x2000034c

08001638 <Nextion_SendInt>:

void Nextion_SendInt(char *ID,int var)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b092      	sub	sp, #72	; 0x48
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
	char buf[64];
	sprintf(buf,"%d",var);
 8001642:	f107 0308 	add.w	r3, r7, #8
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	4906      	ldr	r1, [pc, #24]	; (8001664 <Nextion_SendInt+0x2c>)
 800164a:	4618      	mov	r0, r3
 800164c:	f006 fa1c 	bl	8007a88 <siprintf>
	Nextion_SendString(ID,buf);
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4619      	mov	r1, r3
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ffba 	bl	80015d0 <Nextion_SendString>
}
 800165c:	bf00      	nop
 800165e:	3748      	adds	r7, #72	; 0x48
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	0800a9ec 	.word	0x0800a9ec

08001668 <Nextion_Sendfloat>:

void Nextion_Sendfloat(char *ID,float var)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b092      	sub	sp, #72	; 0x48
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	ed87 0a00 	vstr	s0, [r7]
	char buf[64];
	sprintf(buf,"%.2f",var);
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f7fe ff67 	bl	8000548 <__aeabi_f2d>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	f107 0008 	add.w	r0, r7, #8
 8001682:	4906      	ldr	r1, [pc, #24]	; (800169c <Nextion_Sendfloat+0x34>)
 8001684:	f006 fa00 	bl	8007a88 <siprintf>
	Nextion_SendString(ID,buf);
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	4619      	mov	r1, r3
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ff9e 	bl	80015d0 <Nextion_SendString>
}
 8001694:	bf00      	nop
 8001696:	3748      	adds	r7, #72	; 0x48
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	0800a9f0 	.word	0x0800a9f0

080016a0 <updateDisplay>:

void updateDisplay(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	Nextion_Sendfloat("ax", average.ax);
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <updateDisplay+0xa4>)
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	eeb0 0a67 	vmov.f32	s0, s15
 80016ae:	4826      	ldr	r0, [pc, #152]	; (8001748 <updateDisplay+0xa8>)
 80016b0:	f7ff ffda 	bl	8001668 <Nextion_Sendfloat>
	Nextion_Sendfloat("ay", average.ay);
 80016b4:	4b23      	ldr	r3, [pc, #140]	; (8001744 <updateDisplay+0xa4>)
 80016b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80016ba:	eeb0 0a67 	vmov.f32	s0, s15
 80016be:	4823      	ldr	r0, [pc, #140]	; (800174c <updateDisplay+0xac>)
 80016c0:	f7ff ffd2 	bl	8001668 <Nextion_Sendfloat>
	Nextion_Sendfloat("az", average.az);
 80016c4:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <updateDisplay+0xa4>)
 80016c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80016ca:	eeb0 0a67 	vmov.f32	s0, s15
 80016ce:	4820      	ldr	r0, [pc, #128]	; (8001750 <updateDisplay+0xb0>)
 80016d0:	f7ff ffca 	bl	8001668 <Nextion_Sendfloat>

	Nextion_Sendfloat("gx", MPU6050.gx);
 80016d4:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <updateDisplay+0xb4>)
 80016d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80016da:	eeb0 0a67 	vmov.f32	s0, s15
 80016de:	481e      	ldr	r0, [pc, #120]	; (8001758 <updateDisplay+0xb8>)
 80016e0:	f7ff ffc2 	bl	8001668 <Nextion_Sendfloat>
	Nextion_Sendfloat("gy", MPU6050.gy);
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <updateDisplay+0xb4>)
 80016e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80016ea:	eeb0 0a67 	vmov.f32	s0, s15
 80016ee:	481b      	ldr	r0, [pc, #108]	; (800175c <updateDisplay+0xbc>)
 80016f0:	f7ff ffba 	bl	8001668 <Nextion_Sendfloat>
	Nextion_Sendfloat("gz", MPU6050.gz);
 80016f4:	4b17      	ldr	r3, [pc, #92]	; (8001754 <updateDisplay+0xb4>)
 80016f6:	edd3 7a05 	vldr	s15, [r3, #20]
 80016fa:	eeb0 0a67 	vmov.f32	s0, s15
 80016fe:	4818      	ldr	r0, [pc, #96]	; (8001760 <updateDisplay+0xc0>)
 8001700:	f7ff ffb2 	bl	8001668 <Nextion_Sendfloat>

	//Nextion_Sendfloat("gx", average.gx);
	//Nextion_Sendfloat("gy", average.gy);
	//Nextion_Sendfloat("gz", average.gz);

	Nextion_SendInt("lat", GPS.dec_latitude);
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <updateDisplay+0xc4>)
 8001706:	edd3 7a01 	vldr	s15, [r3, #4]
 800170a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800170e:	ee17 1a90 	vmov	r1, s15
 8001712:	4815      	ldr	r0, [pc, #84]	; (8001768 <updateDisplay+0xc8>)
 8001714:	f7ff ff90 	bl	8001638 <Nextion_SendInt>
	Nextion_SendInt("long", GPS.dec_longitude);
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <updateDisplay+0xc4>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001722:	ee17 1a90 	vmov	r1, s15
 8001726:	4811      	ldr	r0, [pc, #68]	; (800176c <updateDisplay+0xcc>)
 8001728:	f7ff ff86 	bl	8001638 <Nextion_SendInt>

	Nextion_Sendfloat("temp", ADC_Select_CHTemp());
 800172c:	f000 f824 	bl	8001778 <ADC_Select_CHTemp>
 8001730:	eef0 7a40 	vmov.f32	s15, s0
 8001734:	eeb0 0a67 	vmov.f32	s0, s15
 8001738:	480d      	ldr	r0, [pc, #52]	; (8001770 <updateDisplay+0xd0>)
 800173a:	f7ff ff95 	bl	8001668 <Nextion_Sendfloat>
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000438 	.word	0x20000438
 8001748:	0800a9f8 	.word	0x0800a9f8
 800174c:	0800a9fc 	.word	0x0800a9fc
 8001750:	0800aa00 	.word	0x0800aa00
 8001754:	20000420 	.word	0x20000420
 8001758:	0800aa04 	.word	0x0800aa04
 800175c:	0800aa08 	.word	0x0800aa08
 8001760:	0800aa0c 	.word	0x0800aa0c
 8001764:	200004d8 	.word	0x200004d8
 8001768:	0800aa10 	.word	0x0800aa10
 800176c:	0800aa14 	.word	0x0800aa14
 8001770:	0800aa1c 	.word	0x0800aa1c
 8001774:	00000000 	.word	0x00000000

08001778 <ADC_Select_CHTemp>:

//==========TEMP==========//

float ADC_Select_CHTemp(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0

	float Temp = 0;
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	617b      	str	r3, [r7, #20]

	uint16_t ADC_READING = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	827b      	strh	r3, [r7, #18]

	ADC_ChannelConfTypeDef sConfig = {0};
 8001788:	463b      	mov	r3, r7
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001794:	2310      	movs	r3, #16
 8001796:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001798:	2301      	movs	r3, #1
 800179a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800179c:	463b      	mov	r3, r7
 800179e:	4619      	mov	r1, r3
 80017a0:	4833      	ldr	r0, [pc, #204]	; (8001870 <ADC_Select_CHTemp+0xf8>)
 80017a2:	f001 f96d 	bl	8002a80 <HAL_ADC_ConfigChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <ADC_Select_CHTemp+0x38>
	{
	  Error_Handler();
 80017ac:	f000 fbea 	bl	8001f84 <Error_Handler>
	}

	HAL_ADC_Start(&hadc1);
 80017b0:	482f      	ldr	r0, [pc, #188]	; (8001870 <ADC_Select_CHTemp+0xf8>)
 80017b2:	f000 ffc7 	bl	8002744 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80017b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017ba:	482d      	ldr	r0, [pc, #180]	; (8001870 <ADC_Select_CHTemp+0xf8>)
 80017bc:	f001 f8c7 	bl	800294e <HAL_ADC_PollForConversion>
	ADC_READING = HAL_ADC_GetValue(&hadc1);
 80017c0:	482b      	ldr	r0, [pc, #172]	; (8001870 <ADC_Select_CHTemp+0xf8>)
 80017c2:	f001 f94f 	bl	8002a64 <HAL_ADC_GetValue>
 80017c6:	4603      	mov	r3, r0
 80017c8:	827b      	strh	r3, [r7, #18]
	HAL_ADC_Stop(&hadc1);
 80017ca:	4829      	ldr	r0, [pc, #164]	; (8001870 <ADC_Select_CHTemp+0xf8>)
 80017cc:	f001 f88c 	bl	80028e8 <HAL_ADC_Stop>

	Temp = ((3.3*ADC_READING/4095 - V25)/Avg_Slope)+25;
 80017d0:	8a7b      	ldrh	r3, [r7, #18]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fea6 	bl	8000524 <__aeabi_i2d>
 80017d8:	a31d      	add	r3, pc, #116	; (adr r3, 8001850 <ADC_Select_CHTemp+0xd8>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f7fe ff0b 	bl	80005f8 <__aeabi_dmul>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	a31b      	add	r3, pc, #108	; (adr r3, 8001858 <ADC_Select_CHTemp+0xe0>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7ff f82c 	bl	800084c <__aeabi_ddiv>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	a318      	add	r3, pc, #96	; (adr r3, 8001860 <ADC_Select_CHTemp+0xe8>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	f7fe fd41 	bl	8000288 <__aeabi_dsub>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	a316      	add	r3, pc, #88	; (adr r3, 8001868 <ADC_Select_CHTemp+0xf0>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7ff f81a 	bl	800084c <__aeabi_ddiv>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <ADC_Select_CHTemp+0xfc>)
 8001826:	f7fe fd31 	bl	800028c <__adddf3>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f7ff f9b9 	bl	8000ba8 <__aeabi_d2f>
 8001836:	4603      	mov	r3, r0
 8001838:	617b      	str	r3, [r7, #20]

	return Temp;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	ee07 3a90 	vmov	s15, r3
}
 8001840:	eeb0 0a67 	vmov.f32	s0, s15
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	f3af 8000 	nop.w
 8001850:	66666666 	.word	0x66666666
 8001854:	400a6666 	.word	0x400a6666
 8001858:	00000000 	.word	0x00000000
 800185c:	40affe00 	.word	0x40affe00
 8001860:	851eb852 	.word	0x851eb852
 8001864:	3fe851eb 	.word	0x3fe851eb
 8001868:	47ae147b 	.word	0x47ae147b
 800186c:	3f647ae1 	.word	0x3f647ae1
 8001870:	200001f8 	.word	0x200001f8
 8001874:	40390000 	.word	0x40390000

08001878 <mvAx>:

//==========MATH==========//

float mvAx(float content, const int n)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001882:	6038      	str	r0, [r7, #0]
	float acc = 0;
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	617b      	str	r3, [r7, #20]

	static float  numbersAx[numberOfIterations];

	for(int i= n-1; i>0; i--) numbersAx[i] = numbersAx[i-1]; //pay attention to n-1
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	3b01      	subs	r3, #1
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	e00d      	b.n	80018ae <mvAx+0x36>
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	3b01      	subs	r3, #1
 8001896:	4a1d      	ldr	r2, [pc, #116]	; (800190c <mvAx+0x94>)
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	491b      	ldr	r1, [pc, #108]	; (800190c <mvAx+0x94>)
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	dcee      	bgt.n	8001892 <mvAx+0x1a>

	numbersAx[0] = content;
 80018b4:	4a15      	ldr	r2, [pc, #84]	; (800190c <mvAx+0x94>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]

	for(int i=0; i<n; i++) acc += numbersAx[i];
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	e00e      	b.n	80018de <mvAx+0x66>
 80018c0:	4a12      	ldr	r2, [pc, #72]	; (800190c <mvAx+0x94>)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80018d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d4:	edc7 7a05 	vstr	s15, [r7, #20]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3301      	adds	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	dbec      	blt.n	80018c0 <mvAx+0x48>

	return acc/n;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80018f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80018f8:	eef0 7a66 	vmov.f32	s15, s13
}
 80018fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000530 	.word	0x20000530

08001910 <mvAy>:

float mvAy(float content, const int n)
{
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	ed87 0a01 	vstr	s0, [r7, #4]
 800191a:	6038      	str	r0, [r7, #0]
	float acc = 0;
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	617b      	str	r3, [r7, #20]

	static float  numbersAy[numberOfIterations];

	for(int i= n-1; i>0; i--) numbersAy[i] = numbersAy[i-1]; //pay attention to n-1
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	3b01      	subs	r3, #1
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	e00d      	b.n	8001946 <mvAy+0x36>
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	3b01      	subs	r3, #1
 800192e:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <mvAy+0x94>)
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	491b      	ldr	r1, [pc, #108]	; (80019a4 <mvAy+0x94>)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	3b01      	subs	r3, #1
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	2b00      	cmp	r3, #0
 800194a:	dcee      	bgt.n	800192a <mvAy+0x1a>

	numbersAy[0] = content;
 800194c:	4a15      	ldr	r2, [pc, #84]	; (80019a4 <mvAy+0x94>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6013      	str	r3, [r2, #0]

	for(int i=0; i<n; i++) acc += numbersAy[i];
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	e00e      	b.n	8001976 <mvAy+0x66>
 8001958:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <mvAy+0x94>)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	edd3 7a00 	vldr	s15, [r3]
 8001964:	ed97 7a05 	vldr	s14, [r7, #20]
 8001968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800196c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3301      	adds	r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	dbec      	blt.n	8001958 <mvAy+0x48>

	return acc/n;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	ee07 3a90 	vmov	s15, r3
 8001984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001988:	ed97 7a05 	vldr	s14, [r7, #20]
 800198c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001990:	eef0 7a66 	vmov.f32	s15, s13
}
 8001994:	eeb0 0a67 	vmov.f32	s0, s15
 8001998:	371c      	adds	r7, #28
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000558 	.word	0x20000558

080019a8 <invertLed>:
}

//==========MCU==========//

void invertLed(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80019ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <invertLed+0x14>)
 80019b2:	f002 fc3e 	bl	8004232 <HAL_GPIO_TogglePin>
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40021400 	.word	0x40021400

080019c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	if(htim==&htim14)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d107      	bne.n	80019e0 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		MPU6050_Read_Accel();
 80019d0:	f7ff fb12 	bl	8000ff8 <MPU6050_Read_Accel>
		MPU6050_Read_Gyro();
 80019d4:	f7ff fbd4 	bl	8001180 <MPU6050_Read_Gyro>

		updateDisplay();
 80019d8:	f7ff fe62 	bl	80016a0 <updateDisplay>

		invertLed();
 80019dc:	f7ff ffe4 	bl	80019a8 <invertLed>
	}

	if(htim==&htim13)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d101      	bne.n	80019ec <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		sendCan();
 80019e8:	f000 f830 	bl	8001a4c <sendCan>
	}
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000304 	.word	0x20000304
 80019f8:	200002bc 	.word	0x200002bc

080019fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	if(huart == &huart2) GPS_UART_CallBack();
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_UART_RxCpltCallback+0x1c>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d101      	bne.n	8001a10 <HAL_UART_RxCpltCallback+0x14>
 8001a0c:	f7ff fc22 	bl	8001254 <GPS_UART_CallBack>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000390 	.word	0x20000390

08001a1c <HAL_CAN_RxFifo0MsgPendingCallback>:

//==========CAN==========//

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData);
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001a26:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001a28:	2100      	movs	r1, #0
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f001 fd41 	bl	80034b2 <HAL_CAN_GetRxMessage>
	dataCheck = 1;
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000410 	.word	0x20000410
 8001a44:	200003ec 	.word	0x200003ec
 8001a48:	2000041c 	.word	0x2000041c

08001a4c <sendCan>:

void sendCan()
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	txData[0] = 4;
 8001a50:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <sendCan+0x24>)
 8001a52:	2204      	movs	r2, #4
 8001a54:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001a56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a5a:	4806      	ldr	r0, [pc, #24]	; (8001a74 <sendCan+0x28>)
 8001a5c:	f002 fbe9 	bl	8004232 <HAL_GPIO_TogglePin>
	HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, &txMailBox);
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <sendCan+0x2c>)
 8001a62:	4a03      	ldr	r2, [pc, #12]	; (8001a70 <sendCan+0x24>)
 8001a64:	4905      	ldr	r1, [pc, #20]	; (8001a7c <sendCan+0x30>)
 8001a66:	4806      	ldr	r0, [pc, #24]	; (8001a80 <sendCan+0x34>)
 8001a68:	f001 fc48 	bl	80032fc <HAL_CAN_AddTxMessage>

	/*
	 * CANTX - PA12
	 * CANRX - PA11
	 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000408 	.word	0x20000408
 8001a74:	40021400 	.word	0x40021400
 8001a78:	20000418 	.word	0x20000418
 8001a7c:	200003d4 	.word	0x200003d4
 8001a80:	20000240 	.word	0x20000240

08001a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a88:	f000 fd82 	bl	8002590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a8c:	f000 f840 	bl	8001b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a90:	f000 fa18 	bl	8001ec4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a94:	f000 f94c 	bl	8001d30 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001a98:	f000 f8a4 	bl	8001be4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001a9c:	f000 f9be 	bl	8001e1c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001aa0:	f000 f9e6 	bl	8001e70 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8001aa4:	f000 f996 	bl	8001dd4 <MX_TIM14_Init>
  MX_CAN1_Init();
 8001aa8:	f000 f8ee 	bl	8001c88 <MX_CAN1_Init>
  MX_TIM13_Init();
 8001aac:	f000 f96e 	bl	8001d8c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 8001ab0:	f7ff fa4c 	bl	8000f4c <MPU6050_Init>

  GPS_Init();
 8001ab4:	f7ff fbc0 	bl	8001238 <GPS_Init>

  HAL_TIM_Base_Start_IT(&htim14);
 8001ab8:	4811      	ldr	r0, [pc, #68]	; (8001b00 <main+0x7c>)
 8001aba:	f004 f87d 	bl	8005bb8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 8001abe:	4811      	ldr	r0, [pc, #68]	; (8001b04 <main+0x80>)
 8001ac0:	f004 f87a 	bl	8005bb8 <HAL_TIM_Base_Start_IT>

  HAL_CAN_Start(&hcan1);
 8001ac4:	4810      	ldr	r0, [pc, #64]	; (8001b08 <main+0x84>)
 8001ac6:	f001 fbd5 	bl	8003274 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001aca:	2102      	movs	r1, #2
 8001acc:	480e      	ldr	r0, [pc, #56]	; (8001b08 <main+0x84>)
 8001ace:	f001 fe02 	bl	80036d6 <HAL_CAN_ActivateNotification>

  txHeader.DLC 		= 1;
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <main+0x88>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	611a      	str	r2, [r3, #16]
  txHeader.ExtId 	= 0;
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <main+0x88>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	605a      	str	r2, [r3, #4]
  txHeader.IDE 		= CAN_ID_STD;
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <main+0x88>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  txHeader.RTR 		= CAN_RTR_DATA;
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <main+0x88>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
  txHeader.StdId 	= 0x407; //sender ID
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <main+0x88>)
 8001aec:	f240 4207 	movw	r2, #1031	; 0x407
 8001af0:	601a      	str	r2, [r3, #0]
  txHeader.TransmitGlobalTime = DISABLE;
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <main+0x88>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	751a      	strb	r2, [r3, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(1);
 8001af8:	2001      	movs	r0, #1
 8001afa:	f000 fdbb 	bl	8002674 <HAL_Delay>
 8001afe:	e7fb      	b.n	8001af8 <main+0x74>
 8001b00:	20000304 	.word	0x20000304
 8001b04:	200002bc 	.word	0x200002bc
 8001b08:	20000240 	.word	0x20000240
 8001b0c:	200003d4 	.word	0x200003d4

08001b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b094      	sub	sp, #80	; 0x50
 8001b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b16:	f107 0320 	add.w	r3, r7, #32
 8001b1a:	2230      	movs	r2, #48	; 0x30
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f005 fb40 	bl	80071a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <SystemClock_Config+0xcc>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	4a27      	ldr	r2, [pc, #156]	; (8001bdc <SystemClock_Config+0xcc>)
 8001b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b42:	6413      	str	r3, [r2, #64]	; 0x40
 8001b44:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <SystemClock_Config+0xcc>)
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b50:	2300      	movs	r3, #0
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <SystemClock_Config+0xd0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a21      	ldr	r2, [pc, #132]	; (8001be0 <SystemClock_Config+0xd0>)
 8001b5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <SystemClock_Config+0xd0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b76:	2302      	movs	r3, #2
 8001b78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b80:	2304      	movs	r3, #4
 8001b82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b84:	23a8      	movs	r3, #168	; 0xa8
 8001b86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001b8c:	2306      	movs	r3, #6
 8001b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b90:	f107 0320 	add.w	r3, r7, #32
 8001b94:	4618      	mov	r0, r3
 8001b96:	f003 fb27 	bl	80051e8 <HAL_RCC_OscConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ba0:	f000 f9f0 	bl	8001f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	2105      	movs	r1, #5
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 fd88 	bl	80056d8 <HAL_RCC_ClockConfig>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bce:	f000 f9d9 	bl	8001f84 <Error_Handler>
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	3750      	adds	r7, #80	; 0x50
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40007000 	.word	0x40007000

08001be4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bea:	463b      	mov	r3, r7
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bf6:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001bf8:	4a21      	ldr	r2, [pc, #132]	; (8001c80 <MX_ADC1_Init+0x9c>)
 8001bfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001bfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c16:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c26:	4a17      	ldr	r2, [pc, #92]	; (8001c84 <MX_ADC1_Init+0xa0>)
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c44:	480d      	ldr	r0, [pc, #52]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c46:	f000 fd39 	bl	80026bc <HAL_ADC_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c50:	f000 f998 	bl	8001f84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001c54:	2310      	movs	r3, #16
 8001c56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c60:	463b      	mov	r3, r7
 8001c62:	4619      	mov	r1, r3
 8001c64:	4805      	ldr	r0, [pc, #20]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c66:	f000 ff0b 	bl	8002a80 <HAL_ADC_ConfigChannel>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c70:	f000 f988 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	200001f8 	.word	0x200001f8
 8001c80:	40012000 	.word	0x40012000
 8001c84:	0f000001 	.word	0x0f000001

08001c88 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c8e:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <MX_CAN1_Init+0xa0>)
 8001c90:	4a26      	ldr	r2, [pc, #152]	; (8001d2c <MX_CAN1_Init+0xa4>)
 8001c92:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <MX_CAN1_Init+0xa0>)
 8001c96:	2206      	movs	r2, #6
 8001c98:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c9a:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <MX_CAN1_Init+0xa0>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ca0:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <MX_CAN1_Init+0xa0>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001ca6:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <MX_CAN1_Init+0xa0>)
 8001ca8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001cac:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 8001cae:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <MX_CAN1_Init+0xa0>)
 8001cb0:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8001cb4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <MX_CAN1_Init+0xa0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001cbc:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <MX_CAN1_Init+0xa0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001cc2:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <MX_CAN1_Init+0xa0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001cc8:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <MX_CAN1_Init+0xa0>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001cce:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <MX_CAN1_Init+0xa0>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <MX_CAN1_Init+0xa0>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001cda:	4813      	ldr	r0, [pc, #76]	; (8001d28 <MX_CAN1_Init+0xa0>)
 8001cdc:	f001 f8ee 	bl	8002ebc <HAL_CAN_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001ce6:	f000 f94d 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation		=	CAN_FILTER_ENABLE;
 8001cea:	2301      	movs	r3, #1
 8001cec:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank			=	18;
 8001cee:	2312      	movs	r3, #18
 8001cf0:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment	= 	CAN_FILTER_FIFO0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh			=	0x407<<5;//0x407<<5;//address that will be let to pass
 8001cf6:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8001cfa:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow			=	0x0000;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh		=	0x407<<5;//0x407<<5;
 8001d00:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8001d04:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow		=	0x0000;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode			=	CAN_FILTERMODE_IDMASK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale			=	CAN_FILTERSCALE_32BIT;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank	=	20;//20;
 8001d12:	2314      	movs	r3, #20
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001d16:	463b      	mov	r3, r7
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4803      	ldr	r0, [pc, #12]	; (8001d28 <MX_CAN1_Init+0xa0>)
 8001d1c:	f001 f9ca 	bl	80030b4 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	3728      	adds	r7, #40	; 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000240 	.word	0x20000240
 8001d2c:	40006400 	.word	0x40006400

08001d30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d36:	4a13      	ldr	r2, [pc, #76]	; (8001d84 <MX_I2C1_Init+0x54>)
 8001d38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d3c:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <MX_I2C1_Init+0x58>)
 8001d3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d6e:	f002 fa7b 	bl	8004268 <HAL_I2C_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d78:	f000 f904 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000268 	.word	0x20000268
 8001d84:	40005400 	.word	0x40005400
 8001d88:	000186a0 	.word	0x000186a0

08001d8c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001d90:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <MX_TIM13_Init+0x40>)
 8001d92:	4a0f      	ldr	r2, [pc, #60]	; (8001dd0 <MX_TIM13_Init+0x44>)
 8001d94:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 16800-1;
 8001d96:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <MX_TIM13_Init+0x40>)
 8001d98:	f244 129f 	movw	r2, #16799	; 0x419f
 8001d9c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <MX_TIM13_Init+0x40>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 5000-1;
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <MX_TIM13_Init+0x40>)
 8001da6:	f241 3287 	movw	r2, #4999	; 0x1387
 8001daa:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dac:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <MX_TIM13_Init+0x40>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <MX_TIM13_Init+0x40>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001db8:	4804      	ldr	r0, [pc, #16]	; (8001dcc <MX_TIM13_Init+0x40>)
 8001dba:	f003 fead 	bl	8005b18 <HAL_TIM_Base_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001dc4:	f000 f8de 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200002bc 	.word	0x200002bc
 8001dd0:	40001c00 	.word	0x40001c00

08001dd4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <MX_TIM14_Init+0x40>)
 8001dda:	4a0f      	ldr	r2, [pc, #60]	; (8001e18 <MX_TIM14_Init+0x44>)
 8001ddc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16800-1;
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <MX_TIM14_Init+0x40>)
 8001de0:	f244 129f 	movw	r2, #16799	; 0x419f
 8001de4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <MX_TIM14_Init+0x40>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <MX_TIM14_Init+0x40>)
 8001dee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001df2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <MX_TIM14_Init+0x40>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <MX_TIM14_Init+0x40>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001e00:	4804      	ldr	r0, [pc, #16]	; (8001e14 <MX_TIM14_Init+0x40>)
 8001e02:	f003 fe89 	bl	8005b18 <HAL_TIM_Base_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001e0c:	f000 f8ba 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000304 	.word	0x20000304
 8001e18:	40002000 	.word	0x40002000

08001e1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <MX_USART1_UART_Init+0x4c>)
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <MX_USART1_UART_Init+0x50>)
 8001e24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <MX_USART1_UART_Init+0x4c>)
 8001e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <MX_USART1_UART_Init+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <MX_USART1_UART_Init+0x4c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <MX_USART1_UART_Init+0x4c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <MX_USART1_UART_Init+0x4c>)
 8001e42:	220c      	movs	r2, #12
 8001e44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <MX_USART1_UART_Init+0x4c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <MX_USART1_UART_Init+0x4c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_USART1_UART_Init+0x4c>)
 8001e54:	f004 f904 	bl	8006060 <HAL_UART_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e5e:	f000 f891 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000034c 	.word	0x2000034c
 8001e6c:	40011000 	.word	0x40011000

08001e70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e76:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <MX_USART2_UART_Init+0x50>)
 8001e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ea6:	4805      	ldr	r0, [pc, #20]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001ea8:	f004 f8da 	bl	8006060 <HAL_UART_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001eb2:	f000 f867 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000390 	.word	0x20000390
 8001ec0:	40004400 	.word	0x40004400

08001ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	4b27      	ldr	r3, [pc, #156]	; (8001f7c <MX_GPIO_Init+0xb8>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a26      	ldr	r2, [pc, #152]	; (8001f7c <MX_GPIO_Init+0xb8>)
 8001ee4:	f043 0320 	orr.w	r3, r3, #32
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <MX_GPIO_Init+0xb8>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <MX_GPIO_Init+0xb8>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a1f      	ldr	r2, [pc, #124]	; (8001f7c <MX_GPIO_Init+0xb8>)
 8001f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <MX_GPIO_Init+0xb8>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <MX_GPIO_Init+0xb8>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a18      	ldr	r2, [pc, #96]	; (8001f7c <MX_GPIO_Init+0xb8>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <MX_GPIO_Init+0xb8>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <MX_GPIO_Init+0xb8>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a11      	ldr	r2, [pc, #68]	; (8001f7c <MX_GPIO_Init+0xb8>)
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <MX_GPIO_Init+0xb8>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001f50:	480b      	ldr	r0, [pc, #44]	; (8001f80 <MX_GPIO_Init+0xbc>)
 8001f52:	f002 f955 	bl	8004200 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001f56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4804      	ldr	r0, [pc, #16]	; (8001f80 <MX_GPIO_Init+0xbc>)
 8001f70:	f001 ffaa 	bl	8003ec8 <HAL_GPIO_Init>

}
 8001f74:	bf00      	nop
 8001f76:	3728      	adds	r7, #40	; 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40021400 	.word	0x40021400

08001f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f88:	b672      	cpsid	i
}
 8001f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <Error_Handler+0x8>
	...

08001f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_MspInit+0x4c>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a0f      	ldr	r2, [pc, #60]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a08      	ldr	r2, [pc, #32]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800

08001fe0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0b      	ldr	r2, [pc, #44]	; (800201c <HAL_ADC_MspInit+0x3c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d10d      	bne.n	800200e <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_ADC_MspInit+0x40>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	4a09      	ldr	r2, [pc, #36]	; (8002020 <HAL_ADC_MspInit+0x40>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002000:	6453      	str	r3, [r2, #68]	; 0x44
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <HAL_ADC_MspInit+0x40>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40012000 	.word	0x40012000
 8002020:	40023800 	.word	0x40023800

08002024 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <HAL_CAN_MspInit+0x94>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d134      	bne.n	80020b0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <HAL_CAN_MspInit+0x98>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a1b      	ldr	r2, [pc, #108]	; (80020bc <HAL_CAN_MspInit+0x98>)
 8002050:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_CAN_MspInit+0x98>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <HAL_CAN_MspInit+0x98>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a14      	ldr	r2, [pc, #80]	; (80020bc <HAL_CAN_MspInit+0x98>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_CAN_MspInit+0x98>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800207e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208c:	2303      	movs	r3, #3
 800208e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002090:	2309      	movs	r3, #9
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	4619      	mov	r1, r3
 800209a:	4809      	ldr	r0, [pc, #36]	; (80020c0 <HAL_CAN_MspInit+0x9c>)
 800209c:	f001 ff14 	bl	8003ec8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2100      	movs	r1, #0
 80020a4:	2014      	movs	r0, #20
 80020a6:	f001 fe46 	bl	8003d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80020aa:	2014      	movs	r0, #20
 80020ac:	f001 fe5f 	bl	8003d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80020b0:	bf00      	nop
 80020b2:	3728      	adds	r7, #40	; 0x28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40006400 	.word	0x40006400
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40020000 	.word	0x40020000

080020c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	; 0x28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a19      	ldr	r2, [pc, #100]	; (8002148 <HAL_I2C_MspInit+0x84>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d12b      	bne.n	800213e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	4b18      	ldr	r3, [pc, #96]	; (800214c <HAL_I2C_MspInit+0x88>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a17      	ldr	r2, [pc, #92]	; (800214c <HAL_I2C_MspInit+0x88>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <HAL_I2C_MspInit+0x88>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002102:	23c0      	movs	r3, #192	; 0xc0
 8002104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002106:	2312      	movs	r3, #18
 8002108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210e:	2303      	movs	r3, #3
 8002110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002112:	2304      	movs	r3, #4
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4619      	mov	r1, r3
 800211c:	480c      	ldr	r0, [pc, #48]	; (8002150 <HAL_I2C_MspInit+0x8c>)
 800211e:	f001 fed3 	bl	8003ec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_I2C_MspInit+0x88>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	4a08      	ldr	r2, [pc, #32]	; (800214c <HAL_I2C_MspInit+0x88>)
 800212c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002130:	6413      	str	r3, [r2, #64]	; 0x40
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_I2C_MspInit+0x88>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800213e:	bf00      	nop
 8002140:	3728      	adds	r7, #40	; 0x28
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40005400 	.word	0x40005400
 800214c:	40023800 	.word	0x40023800
 8002150:	40020400 	.word	0x40020400

08002154 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <HAL_TIM_Base_MspInit+0x80>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d116      	bne.n	8002194 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_TIM_Base_MspInit+0x84>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	4a1a      	ldr	r2, [pc, #104]	; (80021d8 <HAL_TIM_Base_MspInit+0x84>)
 8002170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002174:	6413      	str	r3, [r2, #64]	; 0x40
 8002176:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <HAL_TIM_Base_MspInit+0x84>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	202c      	movs	r0, #44	; 0x2c
 8002188:	f001 fdd5 	bl	8003d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800218c:	202c      	movs	r0, #44	; 0x2c
 800218e:	f001 fdee 	bl	8003d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002192:	e01a      	b.n	80021ca <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM14)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a10      	ldr	r2, [pc, #64]	; (80021dc <HAL_TIM_Base_MspInit+0x88>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d115      	bne.n	80021ca <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <HAL_TIM_Base_MspInit+0x84>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	4a0c      	ldr	r2, [pc, #48]	; (80021d8 <HAL_TIM_Base_MspInit+0x84>)
 80021a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ac:	6413      	str	r3, [r2, #64]	; 0x40
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <HAL_TIM_Base_MspInit+0x84>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	202d      	movs	r0, #45	; 0x2d
 80021c0:	f001 fdb9 	bl	8003d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80021c4:	202d      	movs	r0, #45	; 0x2d
 80021c6:	f001 fdd2 	bl	8003d6e <HAL_NVIC_EnableIRQ>
}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40001c00 	.word	0x40001c00
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40002000 	.word	0x40002000

080021e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08c      	sub	sp, #48	; 0x30
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a36      	ldr	r2, [pc, #216]	; (80022d8 <HAL_UART_MspInit+0xf8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d12d      	bne.n	800225e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	4b35      	ldr	r3, [pc, #212]	; (80022dc <HAL_UART_MspInit+0xfc>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	4a34      	ldr	r2, [pc, #208]	; (80022dc <HAL_UART_MspInit+0xfc>)
 800220c:	f043 0310 	orr.w	r3, r3, #16
 8002210:	6453      	str	r3, [r2, #68]	; 0x44
 8002212:	4b32      	ldr	r3, [pc, #200]	; (80022dc <HAL_UART_MspInit+0xfc>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	4b2e      	ldr	r3, [pc, #184]	; (80022dc <HAL_UART_MspInit+0xfc>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a2d      	ldr	r2, [pc, #180]	; (80022dc <HAL_UART_MspInit+0xfc>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <HAL_UART_MspInit+0xfc>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800223a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800223e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800224c:	2307      	movs	r3, #7
 800224e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	f107 031c 	add.w	r3, r7, #28
 8002254:	4619      	mov	r1, r3
 8002256:	4822      	ldr	r0, [pc, #136]	; (80022e0 <HAL_UART_MspInit+0x100>)
 8002258:	f001 fe36 	bl	8003ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800225c:	e038      	b.n	80022d0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a20      	ldr	r2, [pc, #128]	; (80022e4 <HAL_UART_MspInit+0x104>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d133      	bne.n	80022d0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002268:	2300      	movs	r3, #0
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_UART_MspInit+0xfc>)
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	4a1a      	ldr	r2, [pc, #104]	; (80022dc <HAL_UART_MspInit+0xfc>)
 8002272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002276:	6413      	str	r3, [r2, #64]	; 0x40
 8002278:	4b18      	ldr	r3, [pc, #96]	; (80022dc <HAL_UART_MspInit+0xfc>)
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	4b14      	ldr	r3, [pc, #80]	; (80022dc <HAL_UART_MspInit+0xfc>)
 800228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228c:	4a13      	ldr	r2, [pc, #76]	; (80022dc <HAL_UART_MspInit+0xfc>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6313      	str	r3, [r2, #48]	; 0x30
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <HAL_UART_MspInit+0xfc>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022a0:	230c      	movs	r3, #12
 80022a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ac:	2303      	movs	r3, #3
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022b0:	2307      	movs	r3, #7
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	4619      	mov	r1, r3
 80022ba:	4809      	ldr	r0, [pc, #36]	; (80022e0 <HAL_UART_MspInit+0x100>)
 80022bc:	f001 fe04 	bl	8003ec8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2100      	movs	r1, #0
 80022c4:	2026      	movs	r0, #38	; 0x26
 80022c6:	f001 fd36 	bl	8003d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022ca:	2026      	movs	r0, #38	; 0x26
 80022cc:	f001 fd4f 	bl	8003d6e <HAL_NVIC_EnableIRQ>
}
 80022d0:	bf00      	nop
 80022d2:	3730      	adds	r7, #48	; 0x30
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40011000 	.word	0x40011000
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40020000 	.word	0x40020000
 80022e4:	40004400 	.word	0x40004400

080022e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022ec:	e7fe      	b.n	80022ec <NMI_Handler+0x4>

080022ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f2:	e7fe      	b.n	80022f2 <HardFault_Handler+0x4>

080022f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f8:	e7fe      	b.n	80022f8 <MemManage_Handler+0x4>

080022fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022fe:	e7fe      	b.n	80022fe <BusFault_Handler+0x4>

08002300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002304:	e7fe      	b.n	8002304 <UsageFault_Handler+0x4>

08002306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002334:	f000 f97e 	bl	8002634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}

0800233c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002340:	4802      	ldr	r0, [pc, #8]	; (800234c <CAN1_RX0_IRQHandler+0x10>)
 8002342:	f001 f9ee 	bl	8003722 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000240 	.word	0x20000240

08002350 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <USART2_IRQHandler+0x10>)
 8002356:	f003 ff93 	bl	8006280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000390 	.word	0x20000390

08002364 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800236a:	f003 fc95 	bl	8005c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200002bc 	.word	0x200002bc

08002378 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800237c:	4802      	ldr	r0, [pc, #8]	; (8002388 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800237e:	f003 fc8b 	bl	8005c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000304 	.word	0x20000304

0800238c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
	return 1;
 8002390:	2301      	movs	r3, #1
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_kill>:

int _kill(int pid, int sig)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023a6:	f004 fed3 	bl	8007150 <__errno>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2216      	movs	r2, #22
 80023ae:	601a      	str	r2, [r3, #0]
	return -1;
 80023b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_exit>:

void _exit (int status)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ffe7 	bl	800239c <_kill>
	while (1) {}		/* Make sure we hang here */
 80023ce:	e7fe      	b.n	80023ce <_exit+0x12>

080023d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	e00a      	b.n	80023f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023e2:	f3af 8000 	nop.w
 80023e6:	4601      	mov	r1, r0
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	60ba      	str	r2, [r7, #8]
 80023ee:	b2ca      	uxtb	r2, r1
 80023f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3301      	adds	r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	dbf0      	blt.n	80023e2 <_read+0x12>
	}

return len;
 8002400:	687b      	ldr	r3, [r7, #4]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	e009      	b.n	8002430 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	60ba      	str	r2, [r7, #8]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	3301      	adds	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	dbf1      	blt.n	800241c <_write+0x12>
	}
	return len;
 8002438:	687b      	ldr	r3, [r7, #4]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <_close>:

int _close(int file)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
	return -1;
 800244a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800246a:	605a      	str	r2, [r3, #4]
	return 0;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <_isatty>:

int _isatty(int file)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
	return 1;
 8002482:	2301      	movs	r3, #1
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
	return 0;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <_sbrk+0x5c>)
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <_sbrk+0x60>)
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <_sbrk+0x64>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <_sbrk+0x64>)
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <_sbrk+0x68>)
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <_sbrk+0x64>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d207      	bcs.n	80024ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024dc:	f004 fe38 	bl	8007150 <__errno>
 80024e0:	4603      	mov	r3, r0
 80024e2:	220c      	movs	r2, #12
 80024e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ea:	e009      	b.n	8002500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <_sbrk+0x64>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <_sbrk+0x64>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	4a05      	ldr	r2, [pc, #20]	; (8002510 <_sbrk+0x64>)
 80024fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fe:	68fb      	ldr	r3, [r7, #12]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20020000 	.word	0x20020000
 800250c:	00000400 	.word	0x00000400
 8002510:	20000580 	.word	0x20000580
 8002514:	20000598 	.word	0x20000598

08002518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <SystemInit+0x20>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002522:	4a05      	ldr	r2, [pc, #20]	; (8002538 <SystemInit+0x20>)
 8002524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <Reset_Handler>:
 800253c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002574 <LoopFillZerobss+0x12>
 8002540:	480d      	ldr	r0, [pc, #52]	; (8002578 <LoopFillZerobss+0x16>)
 8002542:	490e      	ldr	r1, [pc, #56]	; (800257c <LoopFillZerobss+0x1a>)
 8002544:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <LoopFillZerobss+0x1e>)
 8002546:	2300      	movs	r3, #0
 8002548:	e002      	b.n	8002550 <LoopCopyDataInit>

0800254a <CopyDataInit>:
 800254a:	58d4      	ldr	r4, [r2, r3]
 800254c:	50c4      	str	r4, [r0, r3]
 800254e:	3304      	adds	r3, #4

08002550 <LoopCopyDataInit>:
 8002550:	18c4      	adds	r4, r0, r3
 8002552:	428c      	cmp	r4, r1
 8002554:	d3f9      	bcc.n	800254a <CopyDataInit>
 8002556:	4a0b      	ldr	r2, [pc, #44]	; (8002584 <LoopFillZerobss+0x22>)
 8002558:	4c0b      	ldr	r4, [pc, #44]	; (8002588 <LoopFillZerobss+0x26>)
 800255a:	2300      	movs	r3, #0
 800255c:	e001      	b.n	8002562 <LoopFillZerobss>

0800255e <FillZerobss>:
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	3204      	adds	r2, #4

08002562 <LoopFillZerobss>:
 8002562:	42a2      	cmp	r2, r4
 8002564:	d3fb      	bcc.n	800255e <FillZerobss>
 8002566:	f7ff ffd7 	bl	8002518 <SystemInit>
 800256a:	f004 fdf7 	bl	800715c <__libc_init_array>
 800256e:	f7ff fa89 	bl	8001a84 <main>
 8002572:	4770      	bx	lr
 8002574:	20020000 	.word	0x20020000
 8002578:	20000000 	.word	0x20000000
 800257c:	200001dc 	.word	0x200001dc
 8002580:	0800ae54 	.word	0x0800ae54
 8002584:	200001dc 	.word	0x200001dc
 8002588:	20000598 	.word	0x20000598

0800258c <ADC_IRQHandler>:
 800258c:	e7fe      	b.n	800258c <ADC_IRQHandler>
	...

08002590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002594:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <HAL_Init+0x40>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0d      	ldr	r2, [pc, #52]	; (80025d0 <HAL_Init+0x40>)
 800259a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800259e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_Init+0x40>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <HAL_Init+0x40>)
 80025a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <HAL_Init+0x40>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a07      	ldr	r2, [pc, #28]	; (80025d0 <HAL_Init+0x40>)
 80025b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b8:	2003      	movs	r0, #3
 80025ba:	f001 fbb1 	bl	8003d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025be:	200f      	movs	r0, #15
 80025c0:	f000 f808 	bl	80025d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025c4:	f7ff fce4 	bl	8001f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40023c00 	.word	0x40023c00

080025d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_InitTick+0x54>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_InitTick+0x58>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f2:	4618      	mov	r0, r3
 80025f4:	f001 fbc9 	bl	8003d8a <HAL_SYSTICK_Config>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e00e      	b.n	8002620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b0f      	cmp	r3, #15
 8002606:	d80a      	bhi.n	800261e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002608:	2200      	movs	r2, #0
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002610:	f001 fb91 	bl	8003d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002614:	4a06      	ldr	r2, [pc, #24]	; (8002630 <HAL_InitTick+0x5c>)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	e000      	b.n	8002620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
}
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000000 	.word	0x20000000
 800262c:	20000008 	.word	0x20000008
 8002630:	20000004 	.word	0x20000004

08002634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_IncTick+0x20>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_IncTick+0x24>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4413      	add	r3, r2
 8002644:	4a04      	ldr	r2, [pc, #16]	; (8002658 <HAL_IncTick+0x24>)
 8002646:	6013      	str	r3, [r2, #0]
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20000008 	.word	0x20000008
 8002658:	20000584 	.word	0x20000584

0800265c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return uwTick;
 8002660:	4b03      	ldr	r3, [pc, #12]	; (8002670 <HAL_GetTick+0x14>)
 8002662:	681b      	ldr	r3, [r3, #0]
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	20000584 	.word	0x20000584

08002674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800267c:	f7ff ffee 	bl	800265c <HAL_GetTick>
 8002680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800268c:	d005      	beq.n	800269a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <HAL_Delay+0x44>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4413      	add	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800269a:	bf00      	nop
 800269c:	f7ff ffde 	bl	800265c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d8f7      	bhi.n	800269c <HAL_Delay+0x28>
  {
  }
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000008 	.word	0x20000008

080026bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e033      	b.n	800273a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff fc80 	bl	8001fe0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d118      	bne.n	800272c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002702:	f023 0302 	bic.w	r3, r3, #2
 8002706:	f043 0202 	orr.w	r2, r3, #2
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fad8 	bl	8002cc4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f023 0303 	bic.w	r3, r3, #3
 8002722:	f043 0201 	orr.w	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
 800272a:	e001      	b.n	8002730 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_ADC_Start+0x1a>
 800275a:	2302      	movs	r3, #2
 800275c:	e0b2      	b.n	80028c4 <HAL_ADC_Start+0x180>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b01      	cmp	r3, #1
 8002772:	d018      	beq.n	80027a6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002784:	4b52      	ldr	r3, [pc, #328]	; (80028d0 <HAL_ADC_Start+0x18c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a52      	ldr	r2, [pc, #328]	; (80028d4 <HAL_ADC_Start+0x190>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	0c9a      	lsrs	r2, r3, #18
 8002790:	4613      	mov	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4413      	add	r3, r2
 8002796:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002798:	e002      	b.n	80027a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	3b01      	subs	r3, #1
 800279e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f9      	bne.n	800279a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d17a      	bne.n	80028aa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d007      	beq.n	80027e6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f2:	d106      	bne.n	8002802 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f8:	f023 0206 	bic.w	r2, r3, #6
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	645a      	str	r2, [r3, #68]	; 0x44
 8002800:	e002      	b.n	8002808 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002810:	4b31      	ldr	r3, [pc, #196]	; (80028d8 <HAL_ADC_Start+0x194>)
 8002812:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800281c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 031f 	and.w	r3, r3, #31
 8002826:	2b00      	cmp	r3, #0
 8002828:	d12a      	bne.n	8002880 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a2b      	ldr	r2, [pc, #172]	; (80028dc <HAL_ADC_Start+0x198>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d015      	beq.n	8002860 <HAL_ADC_Start+0x11c>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a29      	ldr	r2, [pc, #164]	; (80028e0 <HAL_ADC_Start+0x19c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d105      	bne.n	800284a <HAL_ADC_Start+0x106>
 800283e:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <HAL_ADC_Start+0x194>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a25      	ldr	r2, [pc, #148]	; (80028e4 <HAL_ADC_Start+0x1a0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d136      	bne.n	80028c2 <HAL_ADC_Start+0x17e>
 8002854:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <HAL_ADC_Start+0x194>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b00      	cmp	r3, #0
 800285e:	d130      	bne.n	80028c2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d129      	bne.n	80028c2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800287c:	609a      	str	r2, [r3, #8]
 800287e:	e020      	b.n	80028c2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a15      	ldr	r2, [pc, #84]	; (80028dc <HAL_ADC_Start+0x198>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d11b      	bne.n	80028c2 <HAL_ADC_Start+0x17e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d114      	bne.n	80028c2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	e00b      	b.n	80028c2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f043 0210 	orr.w	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f043 0201 	orr.w	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	20000000 	.word	0x20000000
 80028d4:	431bde83 	.word	0x431bde83
 80028d8:	40012300 	.word	0x40012300
 80028dc:	40012000 	.word	0x40012000
 80028e0:	40012100 	.word	0x40012100
 80028e4:	40012200 	.word	0x40012200

080028e8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_Stop+0x16>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e021      	b.n	8002942 <HAL_ADC_Stop+0x5a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0201 	bic.w	r2, r2, #1
 8002914:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d109      	bne.n	8002938 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	f043 0201 	orr.w	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296a:	d113      	bne.n	8002994 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800297a:	d10b      	bne.n	8002994 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f043 0220 	orr.w	r2, r3, #32
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e063      	b.n	8002a5c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002994:	f7ff fe62 	bl	800265c <HAL_GetTick>
 8002998:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800299a:	e021      	b.n	80029e0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029a2:	d01d      	beq.n	80029e0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <HAL_ADC_PollForConversion+0x6c>
 80029aa:	f7ff fe57 	bl	800265c <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d212      	bcs.n	80029e0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d00b      	beq.n	80029e0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f043 0204 	orr.w	r2, r3, #4
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e03d      	b.n	8002a5c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d1d6      	bne.n	800299c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f06f 0212 	mvn.w	r2, #18
 80029f6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d123      	bne.n	8002a5a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d11f      	bne.n	8002a5a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d006      	beq.n	8002a36 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d111      	bne.n	8002a5a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d105      	bne.n	8002a5a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x1c>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e105      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x228>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b09      	cmp	r3, #9
 8002aaa:	d925      	bls.n	8002af8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68d9      	ldr	r1, [r3, #12]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4613      	mov	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4413      	add	r3, r2
 8002ac0:	3b1e      	subs	r3, #30
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43da      	mvns	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	400a      	ands	r2, r1
 8002ad0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68d9      	ldr	r1, [r3, #12]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4403      	add	r3, r0
 8002aea:	3b1e      	subs	r3, #30
 8002aec:	409a      	lsls	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	e022      	b.n	8002b3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6919      	ldr	r1, [r3, #16]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	4613      	mov	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4413      	add	r3, r2
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43da      	mvns	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	400a      	ands	r2, r1
 8002b1a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6919      	ldr	r1, [r3, #16]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	4603      	mov	r3, r0
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4403      	add	r3, r0
 8002b34:	409a      	lsls	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d824      	bhi.n	8002b90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	3b05      	subs	r3, #5
 8002b58:	221f      	movs	r2, #31
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	400a      	ands	r2, r1
 8002b66:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	4618      	mov	r0, r3
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	3b05      	subs	r3, #5
 8002b82:	fa00 f203 	lsl.w	r2, r0, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b8e:	e04c      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b0c      	cmp	r3, #12
 8002b96:	d824      	bhi.n	8002be2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3b23      	subs	r3, #35	; 0x23
 8002baa:	221f      	movs	r2, #31
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43da      	mvns	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	400a      	ands	r2, r1
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3b23      	subs	r3, #35	; 0x23
 8002bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
 8002be0:	e023      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3b41      	subs	r3, #65	; 0x41
 8002bf4:	221f      	movs	r2, #31
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	400a      	ands	r2, r1
 8002c02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	4618      	mov	r0, r3
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3b41      	subs	r3, #65	; 0x41
 8002c1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <HAL_ADC_ConfigChannel+0x234>)
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a21      	ldr	r2, [pc, #132]	; (8002cb8 <HAL_ADC_ConfigChannel+0x238>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d109      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x1cc>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b12      	cmp	r3, #18
 8002c3e:	d105      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a19      	ldr	r2, [pc, #100]	; (8002cb8 <HAL_ADC_ConfigChannel+0x238>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d123      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x21e>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	d003      	beq.n	8002c66 <HAL_ADC_ConfigChannel+0x1e6>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b11      	cmp	r3, #17
 8002c64:	d11b      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b10      	cmp	r3, #16
 8002c78:	d111      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <HAL_ADC_ConfigChannel+0x23c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a10      	ldr	r2, [pc, #64]	; (8002cc0 <HAL_ADC_ConfigChannel+0x240>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	0c9a      	lsrs	r2, r3, #18
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c90:	e002      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f9      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	40012300 	.word	0x40012300
 8002cb8:	40012000 	.word	0x40012000
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	431bde83 	.word	0x431bde83

08002cc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ccc:	4b79      	ldr	r3, [pc, #484]	; (8002eb4 <ADC_Init+0x1f0>)
 8002cce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	021a      	lsls	r2, r3, #8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6899      	ldr	r1, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	4a58      	ldr	r2, [pc, #352]	; (8002eb8 <ADC_Init+0x1f4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d022      	beq.n	8002da2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6899      	ldr	r1, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6899      	ldr	r1, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	e00f      	b.n	8002dc2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002db0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0202 	bic.w	r2, r2, #2
 8002dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6899      	ldr	r1, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	7e1b      	ldrb	r3, [r3, #24]
 8002ddc:	005a      	lsls	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01b      	beq.n	8002e28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6859      	ldr	r1, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	035a      	lsls	r2, r3, #13
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	e007      	b.n	8002e38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	051a      	lsls	r2, r3, #20
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6899      	ldr	r1, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e7a:	025a      	lsls	r2, r3, #9
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6899      	ldr	r1, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	029a      	lsls	r2, r3, #10
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	609a      	str	r2, [r3, #8]
}
 8002ea8:	bf00      	nop
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	40012300 	.word	0x40012300
 8002eb8:	0f000001 	.word	0x0f000001

08002ebc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e0ed      	b.n	80030aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d102      	bne.n	8002ee0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff f8a2 	bl	8002024 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ef0:	f7ff fbb4 	bl	800265c <HAL_GetTick>
 8002ef4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ef6:	e012      	b.n	8002f1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ef8:	f7ff fbb0 	bl	800265c <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b0a      	cmp	r3, #10
 8002f04:	d90b      	bls.n	8002f1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2205      	movs	r2, #5
 8002f16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0c5      	b.n	80030aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0e5      	beq.n	8002ef8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0202 	bic.w	r2, r2, #2
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f3c:	f7ff fb8e 	bl	800265c <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f42:	e012      	b.n	8002f6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f44:	f7ff fb8a 	bl	800265c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b0a      	cmp	r3, #10
 8002f50:	d90b      	bls.n	8002f6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2205      	movs	r2, #5
 8002f62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e09f      	b.n	80030aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1e5      	bne.n	8002f44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	7e1b      	ldrb	r3, [r3, #24]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d108      	bne.n	8002f92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	e007      	b.n	8002fa2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7e5b      	ldrb	r3, [r3, #25]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d108      	bne.n	8002fbc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	e007      	b.n	8002fcc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	7e9b      	ldrb	r3, [r3, #26]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d108      	bne.n	8002fe6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0220 	orr.w	r2, r2, #32
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e007      	b.n	8002ff6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0220 	bic.w	r2, r2, #32
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7edb      	ldrb	r3, [r3, #27]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d108      	bne.n	8003010 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0210 	bic.w	r2, r2, #16
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	e007      	b.n	8003020 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0210 	orr.w	r2, r2, #16
 800301e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	7f1b      	ldrb	r3, [r3, #28]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d108      	bne.n	800303a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0208 	orr.w	r2, r2, #8
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	e007      	b.n	800304a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0208 	bic.w	r2, r2, #8
 8003048:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	7f5b      	ldrb	r3, [r3, #29]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d108      	bne.n	8003064 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0204 	orr.w	r2, r2, #4
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	e007      	b.n	8003074 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0204 	bic.w	r2, r2, #4
 8003072:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	ea42 0103 	orr.w	r1, r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	1e5a      	subs	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d003      	beq.n	80030da <HAL_CAN_ConfigFilter+0x26>
 80030d2:	7cfb      	ldrb	r3, [r7, #19]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	f040 80be 	bne.w	8003256 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80030da:	4b65      	ldr	r3, [pc, #404]	; (8003270 <HAL_CAN_ConfigFilter+0x1bc>)
 80030dc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030e4:	f043 0201 	orr.w	r2, r3, #1
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	431a      	orrs	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	2201      	movs	r2, #1
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	43db      	mvns	r3, r3
 800312c:	401a      	ands	r2, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d123      	bne.n	8003184 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	43db      	mvns	r3, r3
 8003146:	401a      	ands	r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800315e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	3248      	adds	r2, #72	; 0x48
 8003164:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003178:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800317a:	6979      	ldr	r1, [r7, #20]
 800317c:	3348      	adds	r3, #72	; 0x48
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	440b      	add	r3, r1
 8003182:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d122      	bne.n	80031d2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	431a      	orrs	r2, r3
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	3248      	adds	r2, #72	; 0x48
 80031b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031c8:	6979      	ldr	r1, [r7, #20]
 80031ca:	3348      	adds	r3, #72	; 0x48
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	440b      	add	r3, r1
 80031d0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	401a      	ands	r2, r3
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80031ec:	e007      	b.n	80031fe <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	43db      	mvns	r3, r3
 8003210:	401a      	ands	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003218:	e007      	b.n	800322a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	431a      	orrs	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d107      	bne.n	8003242 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	431a      	orrs	r2, r3
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003248:	f023 0201 	bic.w	r2, r3, #1
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	e006      	b.n	8003264 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
  }
}
 8003264:	4618      	mov	r0, r3
 8003266:	371c      	adds	r7, #28
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	40006400 	.word	0x40006400

08003274 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d12e      	bne.n	80032e6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0201 	bic.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032a0:	f7ff f9dc 	bl	800265c <HAL_GetTick>
 80032a4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032a6:	e012      	b.n	80032ce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032a8:	f7ff f9d8 	bl	800265c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b0a      	cmp	r3, #10
 80032b4:	d90b      	bls.n	80032ce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2205      	movs	r2, #5
 80032c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e012      	b.n	80032f4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1e5      	bne.n	80032a8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e006      	b.n	80032f4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
  }
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b089      	sub	sp, #36	; 0x24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003310:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800331a:	7ffb      	ldrb	r3, [r7, #31]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d003      	beq.n	8003328 <HAL_CAN_AddTxMessage+0x2c>
 8003320:	7ffb      	ldrb	r3, [r7, #31]
 8003322:	2b02      	cmp	r3, #2
 8003324:	f040 80b8 	bne.w	8003498 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10a      	bne.n	8003348 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 80a0 	beq.w	8003488 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	0e1b      	lsrs	r3, r3, #24
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d907      	bls.n	8003368 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e09e      	b.n	80034a6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003368:	2201      	movs	r2, #1
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	409a      	lsls	r2, r3
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10d      	bne.n	8003396 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003384:	68f9      	ldr	r1, [r7, #12]
 8003386:	6809      	ldr	r1, [r1, #0]
 8003388:	431a      	orrs	r2, r3
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	3318      	adds	r3, #24
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	440b      	add	r3, r1
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	e00f      	b.n	80033b6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033a0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033a6:	68f9      	ldr	r1, [r7, #12]
 80033a8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80033aa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	3318      	adds	r3, #24
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	440b      	add	r3, r1
 80033b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6819      	ldr	r1, [r3, #0]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	3318      	adds	r3, #24
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	440b      	add	r3, r1
 80033c6:	3304      	adds	r3, #4
 80033c8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	7d1b      	ldrb	r3, [r3, #20]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d111      	bne.n	80033f6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	3318      	adds	r3, #24
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	4413      	add	r3, r2
 80033de:	3304      	adds	r3, #4
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	6811      	ldr	r1, [r2, #0]
 80033e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	3318      	adds	r3, #24
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	440b      	add	r3, r1
 80033f2:	3304      	adds	r3, #4
 80033f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3307      	adds	r3, #7
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	061a      	lsls	r2, r3, #24
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3306      	adds	r3, #6
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3305      	adds	r3, #5
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	4313      	orrs	r3, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	3204      	adds	r2, #4
 8003416:	7812      	ldrb	r2, [r2, #0]
 8003418:	4610      	mov	r0, r2
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	6811      	ldr	r1, [r2, #0]
 800341e:	ea43 0200 	orr.w	r2, r3, r0
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	440b      	add	r3, r1
 8003428:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800342c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3303      	adds	r3, #3
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	061a      	lsls	r2, r3, #24
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3302      	adds	r3, #2
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3301      	adds	r3, #1
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	4313      	orrs	r3, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	7812      	ldrb	r2, [r2, #0]
 800344e:	4610      	mov	r0, r2
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	6811      	ldr	r1, [r2, #0]
 8003454:	ea43 0200 	orr.w	r2, r3, r0
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	440b      	add	r3, r1
 800345e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003462:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	3318      	adds	r3, #24
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	4413      	add	r3, r2
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	6811      	ldr	r1, [r2, #0]
 8003476:	f043 0201 	orr.w	r2, r3, #1
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	3318      	adds	r3, #24
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	440b      	add	r3, r1
 8003482:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	e00e      	b.n	80034a6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e006      	b.n	80034a6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
  }
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3724      	adds	r7, #36	; 0x24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80034b2:	b480      	push	{r7}
 80034b4:	b087      	sub	sp, #28
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80034c8:	7dfb      	ldrb	r3, [r7, #23]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d003      	beq.n	80034d6 <HAL_CAN_GetRxMessage+0x24>
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	f040 80f3 	bne.w	80036bc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10e      	bne.n	80034fa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d116      	bne.n	8003518 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e0e7      	b.n	80036ca <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d107      	bne.n	8003518 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0d8      	b.n	80036ca <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	331b      	adds	r3, #27
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	4413      	add	r3, r2
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0204 	and.w	r2, r3, #4
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10c      	bne.n	8003550 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	331b      	adds	r3, #27
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	4413      	add	r3, r2
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	0d5b      	lsrs	r3, r3, #21
 8003546:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	e00b      	b.n	8003568 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	331b      	adds	r3, #27
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	4413      	add	r3, r2
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	08db      	lsrs	r3, r3, #3
 8003560:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	331b      	adds	r3, #27
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	4413      	add	r3, r2
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0202 	and.w	r2, r3, #2
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	331b      	adds	r3, #27
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	4413      	add	r3, r2
 800358a:	3304      	adds	r3, #4
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 020f 	and.w	r2, r3, #15
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	331b      	adds	r3, #27
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	4413      	add	r3, r2
 80035a2:	3304      	adds	r3, #4
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	0a1b      	lsrs	r3, r3, #8
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	331b      	adds	r3, #27
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	4413      	add	r3, r2
 80035ba:	3304      	adds	r3, #4
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	0c1b      	lsrs	r3, r3, #16
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	0a1a      	lsrs	r2, r3, #8
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	3301      	adds	r3, #1
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	4413      	add	r3, r2
 8003600:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	0c1a      	lsrs	r2, r3, #16
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	3302      	adds	r3, #2
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	4413      	add	r3, r2
 800361a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	0e1a      	lsrs	r2, r3, #24
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	3303      	adds	r3, #3
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	4413      	add	r3, r2
 8003634:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	3304      	adds	r3, #4
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	4413      	add	r3, r2
 800364c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	0a1a      	lsrs	r2, r3, #8
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	3305      	adds	r3, #5
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	4413      	add	r3, r2
 8003666:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	0c1a      	lsrs	r2, r3, #16
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	3306      	adds	r3, #6
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	4413      	add	r3, r2
 8003680:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	0e1a      	lsrs	r2, r3, #24
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	3307      	adds	r3, #7
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d108      	bne.n	80036a8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0220 	orr.w	r2, r2, #32
 80036a4:	60da      	str	r2, [r3, #12]
 80036a6:	e007      	b.n	80036b8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0220 	orr.w	r2, r2, #32
 80036b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	e006      	b.n	80036ca <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
  }
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	371c      	adds	r7, #28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036e6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d002      	beq.n	80036f4 <HAL_CAN_ActivateNotification+0x1e>
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d109      	bne.n	8003708 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6959      	ldr	r1, [r3, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	e006      	b.n	8003716 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
  }
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b08a      	sub	sp, #40	; 0x28
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800372a:	2300      	movs	r3, #0
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d07c      	beq.n	8003862 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d023      	beq.n	80037ba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2201      	movs	r2, #1
 8003778:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f983 	bl	8003a90 <HAL_CAN_TxMailbox0CompleteCallback>
 800378a:	e016      	b.n	80037ba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d004      	beq.n	80037a0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
 800379e:	e00c      	b.n	80037ba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d004      	beq.n	80037b4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
 80037b2:	e002      	b.n	80037ba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f989 	bl	8003acc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d024      	beq.n	800380e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f963 	bl	8003aa4 <HAL_CAN_TxMailbox1CompleteCallback>
 80037de:	e016      	b.n	800380e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d004      	beq.n	80037f4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
 80037f2:	e00c      	b.n	800380e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d004      	beq.n	8003808 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
 8003806:	e002      	b.n	800380e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f969 	bl	8003ae0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d024      	beq.n	8003862 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003820:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f943 	bl	8003ab8 <HAL_CAN_TxMailbox2CompleteCallback>
 8003832:	e016      	b.n	8003862 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d004      	beq.n	8003848 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
 8003846:	e00c      	b.n	8003862 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d004      	beq.n	800385c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
 800385a:	e002      	b.n	8003862 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f949 	bl	8003af4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00c      	beq.n	8003886 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	2b00      	cmp	r3, #0
 8003874:	d007      	beq.n	8003886 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800387c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2210      	movs	r2, #16
 8003884:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00b      	beq.n	80038a8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d006      	beq.n	80038a8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2208      	movs	r2, #8
 80038a0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f930 	bl	8003b08 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7fe f8ab 	bl	8001a1c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00c      	beq.n	80038ea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2210      	movs	r2, #16
 80038e8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00b      	beq.n	800390c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d006      	beq.n	800390c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2208      	movs	r2, #8
 8003904:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f912 	bl	8003b30 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f8f9 	bl	8003b1c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00b      	beq.n	800394c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b00      	cmp	r3, #0
 800393c:	d006      	beq.n	800394c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2210      	movs	r2, #16
 8003944:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f8fc 	bl	8003b44 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00b      	beq.n	800396e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d006      	beq.n	800396e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2208      	movs	r2, #8
 8003966:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f8f5 	bl	8003b58 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d07b      	beq.n	8003a70 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	d072      	beq.n	8003a68 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	f043 0302 	orr.w	r3, r3, #2
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	f043 0304 	orr.w	r3, r3, #4
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d043      	beq.n	8003a68 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d03e      	beq.n	8003a68 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039f0:	2b60      	cmp	r3, #96	; 0x60
 80039f2:	d02b      	beq.n	8003a4c <HAL_CAN_IRQHandler+0x32a>
 80039f4:	2b60      	cmp	r3, #96	; 0x60
 80039f6:	d82e      	bhi.n	8003a56 <HAL_CAN_IRQHandler+0x334>
 80039f8:	2b50      	cmp	r3, #80	; 0x50
 80039fa:	d022      	beq.n	8003a42 <HAL_CAN_IRQHandler+0x320>
 80039fc:	2b50      	cmp	r3, #80	; 0x50
 80039fe:	d82a      	bhi.n	8003a56 <HAL_CAN_IRQHandler+0x334>
 8003a00:	2b40      	cmp	r3, #64	; 0x40
 8003a02:	d019      	beq.n	8003a38 <HAL_CAN_IRQHandler+0x316>
 8003a04:	2b40      	cmp	r3, #64	; 0x40
 8003a06:	d826      	bhi.n	8003a56 <HAL_CAN_IRQHandler+0x334>
 8003a08:	2b30      	cmp	r3, #48	; 0x30
 8003a0a:	d010      	beq.n	8003a2e <HAL_CAN_IRQHandler+0x30c>
 8003a0c:	2b30      	cmp	r3, #48	; 0x30
 8003a0e:	d822      	bhi.n	8003a56 <HAL_CAN_IRQHandler+0x334>
 8003a10:	2b10      	cmp	r3, #16
 8003a12:	d002      	beq.n	8003a1a <HAL_CAN_IRQHandler+0x2f8>
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	d005      	beq.n	8003a24 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a18:	e01d      	b.n	8003a56 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	f043 0308 	orr.w	r3, r3, #8
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a22:	e019      	b.n	8003a58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	f043 0310 	orr.w	r3, r3, #16
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a2c:	e014      	b.n	8003a58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	f043 0320 	orr.w	r3, r3, #32
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a36:	e00f      	b.n	8003a58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a40:	e00a      	b.n	8003a58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a4a:	e005      	b.n	8003a58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a54:	e000      	b.n	8003a58 <HAL_CAN_IRQHandler+0x336>
            break;
 8003a56:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a66:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f872 	bl	8003b6c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a88:	bf00      	nop
 8003a8a:	3728      	adds	r7, #40	; 0x28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b90:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bb2:	4a04      	ldr	r2, [pc, #16]	; (8003bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	60d3      	str	r3, [r2, #12]
}
 8003bb8:	bf00      	nop
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	e000ed00 	.word	0xe000ed00

08003bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <__NVIC_GetPriorityGrouping+0x18>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	0a1b      	lsrs	r3, r3, #8
 8003bd2:	f003 0307 	and.w	r3, r3, #7
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	e000ed00 	.word	0xe000ed00

08003be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	db0b      	blt.n	8003c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	f003 021f 	and.w	r2, r3, #31
 8003bfc:	4907      	ldr	r1, [pc, #28]	; (8003c1c <__NVIC_EnableIRQ+0x38>)
 8003bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	2001      	movs	r0, #1
 8003c06:	fa00 f202 	lsl.w	r2, r0, r2
 8003c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	e000e100 	.word	0xe000e100

08003c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	6039      	str	r1, [r7, #0]
 8003c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	db0a      	blt.n	8003c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	490c      	ldr	r1, [pc, #48]	; (8003c6c <__NVIC_SetPriority+0x4c>)
 8003c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3e:	0112      	lsls	r2, r2, #4
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	440b      	add	r3, r1
 8003c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c48:	e00a      	b.n	8003c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	4908      	ldr	r1, [pc, #32]	; (8003c70 <__NVIC_SetPriority+0x50>)
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	3b04      	subs	r3, #4
 8003c58:	0112      	lsls	r2, r2, #4
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	761a      	strb	r2, [r3, #24]
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	e000e100 	.word	0xe000e100
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b089      	sub	sp, #36	; 0x24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f1c3 0307 	rsb	r3, r3, #7
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	bf28      	it	cs
 8003c92:	2304      	movcs	r3, #4
 8003c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	2b06      	cmp	r3, #6
 8003c9c:	d902      	bls.n	8003ca4 <NVIC_EncodePriority+0x30>
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	3b03      	subs	r3, #3
 8003ca2:	e000      	b.n	8003ca6 <NVIC_EncodePriority+0x32>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43da      	mvns	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc6:	43d9      	mvns	r1, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ccc:	4313      	orrs	r3, r2
         );
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3724      	adds	r7, #36	; 0x24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
	...

08003cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cec:	d301      	bcc.n	8003cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e00f      	b.n	8003d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cf2:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <SysTick_Config+0x40>)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cfa:	210f      	movs	r1, #15
 8003cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d00:	f7ff ff8e 	bl	8003c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <SysTick_Config+0x40>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d0a:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <SysTick_Config+0x40>)
 8003d0c:	2207      	movs	r2, #7
 8003d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	e000e010 	.word	0xe000e010

08003d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff ff29 	bl	8003b80 <__NVIC_SetPriorityGrouping>
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b086      	sub	sp, #24
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	607a      	str	r2, [r7, #4]
 8003d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d48:	f7ff ff3e 	bl	8003bc8 <__NVIC_GetPriorityGrouping>
 8003d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	6978      	ldr	r0, [r7, #20]
 8003d54:	f7ff ff8e 	bl	8003c74 <NVIC_EncodePriority>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d5e:	4611      	mov	r1, r2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff ff5d 	bl	8003c20 <__NVIC_SetPriority>
}
 8003d66:	bf00      	nop
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	4603      	mov	r3, r0
 8003d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff ff31 	bl	8003be4 <__NVIC_EnableIRQ>
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7ff ffa2 	bl	8003cdc <SysTick_Config>
 8003d98:	4603      	mov	r3, r0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b084      	sub	sp, #16
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003db0:	f7fe fc54 	bl	800265c <HAL_GetTick>
 8003db4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d008      	beq.n	8003dd4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2280      	movs	r2, #128	; 0x80
 8003dc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e052      	b.n	8003e7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0216 	bic.w	r2, r2, #22
 8003de2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003df2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d103      	bne.n	8003e04 <HAL_DMA_Abort+0x62>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0208 	bic.w	r2, r2, #8
 8003e12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0201 	bic.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e24:	e013      	b.n	8003e4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e26:	f7fe fc19 	bl	800265c <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b05      	cmp	r3, #5
 8003e32:	d90c      	bls.n	8003e4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2203      	movs	r2, #3
 8003e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e015      	b.n	8003e7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e4      	bne.n	8003e26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e60:	223f      	movs	r2, #63	; 0x3f
 8003e62:	409a      	lsls	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d004      	beq.n	8003ea0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2280      	movs	r2, #128	; 0x80
 8003e9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e00c      	b.n	8003eba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2205      	movs	r2, #5
 8003ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0201 	bic.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b089      	sub	sp, #36	; 0x24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]
 8003ee2:	e16b      	b.n	80041bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	f040 815a 	bne.w	80041b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d005      	beq.n	8003f1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d130      	bne.n	8003f7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	2203      	movs	r2, #3
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f50:	2201      	movs	r2, #1
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	091b      	lsrs	r3, r3, #4
 8003f66:	f003 0201 	and.w	r2, r3, #1
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d017      	beq.n	8003fb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	2203      	movs	r2, #3
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d123      	bne.n	800400c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	08da      	lsrs	r2, r3, #3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3208      	adds	r2, #8
 8003fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	220f      	movs	r2, #15
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	08da      	lsrs	r2, r3, #3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3208      	adds	r2, #8
 8004006:	69b9      	ldr	r1, [r7, #24]
 8004008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	2203      	movs	r2, #3
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	43db      	mvns	r3, r3
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4013      	ands	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 0203 	and.w	r2, r3, #3
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4313      	orrs	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 80b4 	beq.w	80041b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	4b60      	ldr	r3, [pc, #384]	; (80041d4 <HAL_GPIO_Init+0x30c>)
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	4a5f      	ldr	r2, [pc, #380]	; (80041d4 <HAL_GPIO_Init+0x30c>)
 8004058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800405c:	6453      	str	r3, [r2, #68]	; 0x44
 800405e:	4b5d      	ldr	r3, [pc, #372]	; (80041d4 <HAL_GPIO_Init+0x30c>)
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800406a:	4a5b      	ldr	r2, [pc, #364]	; (80041d8 <HAL_GPIO_Init+0x310>)
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	089b      	lsrs	r3, r3, #2
 8004070:	3302      	adds	r3, #2
 8004072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	220f      	movs	r2, #15
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4013      	ands	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a52      	ldr	r2, [pc, #328]	; (80041dc <HAL_GPIO_Init+0x314>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d02b      	beq.n	80040ee <HAL_GPIO_Init+0x226>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a51      	ldr	r2, [pc, #324]	; (80041e0 <HAL_GPIO_Init+0x318>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d025      	beq.n	80040ea <HAL_GPIO_Init+0x222>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a50      	ldr	r2, [pc, #320]	; (80041e4 <HAL_GPIO_Init+0x31c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d01f      	beq.n	80040e6 <HAL_GPIO_Init+0x21e>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a4f      	ldr	r2, [pc, #316]	; (80041e8 <HAL_GPIO_Init+0x320>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d019      	beq.n	80040e2 <HAL_GPIO_Init+0x21a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a4e      	ldr	r2, [pc, #312]	; (80041ec <HAL_GPIO_Init+0x324>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d013      	beq.n	80040de <HAL_GPIO_Init+0x216>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a4d      	ldr	r2, [pc, #308]	; (80041f0 <HAL_GPIO_Init+0x328>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00d      	beq.n	80040da <HAL_GPIO_Init+0x212>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a4c      	ldr	r2, [pc, #304]	; (80041f4 <HAL_GPIO_Init+0x32c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d007      	beq.n	80040d6 <HAL_GPIO_Init+0x20e>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a4b      	ldr	r2, [pc, #300]	; (80041f8 <HAL_GPIO_Init+0x330>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d101      	bne.n	80040d2 <HAL_GPIO_Init+0x20a>
 80040ce:	2307      	movs	r3, #7
 80040d0:	e00e      	b.n	80040f0 <HAL_GPIO_Init+0x228>
 80040d2:	2308      	movs	r3, #8
 80040d4:	e00c      	b.n	80040f0 <HAL_GPIO_Init+0x228>
 80040d6:	2306      	movs	r3, #6
 80040d8:	e00a      	b.n	80040f0 <HAL_GPIO_Init+0x228>
 80040da:	2305      	movs	r3, #5
 80040dc:	e008      	b.n	80040f0 <HAL_GPIO_Init+0x228>
 80040de:	2304      	movs	r3, #4
 80040e0:	e006      	b.n	80040f0 <HAL_GPIO_Init+0x228>
 80040e2:	2303      	movs	r3, #3
 80040e4:	e004      	b.n	80040f0 <HAL_GPIO_Init+0x228>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e002      	b.n	80040f0 <HAL_GPIO_Init+0x228>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <HAL_GPIO_Init+0x228>
 80040ee:	2300      	movs	r3, #0
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	f002 0203 	and.w	r2, r2, #3
 80040f6:	0092      	lsls	r2, r2, #2
 80040f8:	4093      	lsls	r3, r2
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004100:	4935      	ldr	r1, [pc, #212]	; (80041d8 <HAL_GPIO_Init+0x310>)
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	089b      	lsrs	r3, r3, #2
 8004106:	3302      	adds	r3, #2
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800410e:	4b3b      	ldr	r3, [pc, #236]	; (80041fc <HAL_GPIO_Init+0x334>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	43db      	mvns	r3, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4013      	ands	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004132:	4a32      	ldr	r2, [pc, #200]	; (80041fc <HAL_GPIO_Init+0x334>)
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004138:	4b30      	ldr	r3, [pc, #192]	; (80041fc <HAL_GPIO_Init+0x334>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	43db      	mvns	r3, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4013      	ands	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800415c:	4a27      	ldr	r2, [pc, #156]	; (80041fc <HAL_GPIO_Init+0x334>)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004162:	4b26      	ldr	r3, [pc, #152]	; (80041fc <HAL_GPIO_Init+0x334>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	43db      	mvns	r3, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4013      	ands	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004186:	4a1d      	ldr	r2, [pc, #116]	; (80041fc <HAL_GPIO_Init+0x334>)
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800418c:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <HAL_GPIO_Init+0x334>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	43db      	mvns	r3, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4013      	ands	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041b0:	4a12      	ldr	r2, [pc, #72]	; (80041fc <HAL_GPIO_Init+0x334>)
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	3301      	adds	r3, #1
 80041ba:	61fb      	str	r3, [r7, #28]
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	2b0f      	cmp	r3, #15
 80041c0:	f67f ae90 	bls.w	8003ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop
 80041c8:	3724      	adds	r7, #36	; 0x24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40023800 	.word	0x40023800
 80041d8:	40013800 	.word	0x40013800
 80041dc:	40020000 	.word	0x40020000
 80041e0:	40020400 	.word	0x40020400
 80041e4:	40020800 	.word	0x40020800
 80041e8:	40020c00 	.word	0x40020c00
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40021400 	.word	0x40021400
 80041f4:	40021800 	.word	0x40021800
 80041f8:	40021c00 	.word	0x40021c00
 80041fc:	40013c00 	.word	0x40013c00

08004200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	807b      	strh	r3, [r7, #2]
 800420c:	4613      	mov	r3, r2
 800420e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004210:	787b      	ldrb	r3, [r7, #1]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004216:	887a      	ldrh	r2, [r7, #2]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800421c:	e003      	b.n	8004226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800421e:	887b      	ldrh	r3, [r7, #2]
 8004220:	041a      	lsls	r2, r3, #16
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	619a      	str	r2, [r3, #24]
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004232:	b480      	push	{r7}
 8004234:	b085      	sub	sp, #20
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	460b      	mov	r3, r1
 800423c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004244:	887a      	ldrh	r2, [r7, #2]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4013      	ands	r3, r2
 800424a:	041a      	lsls	r2, r3, #16
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	43d9      	mvns	r1, r3
 8004250:	887b      	ldrh	r3, [r7, #2]
 8004252:	400b      	ands	r3, r1
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	619a      	str	r2, [r3, #24]
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e12b      	b.n	80044d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fd ff18 	bl	80020c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2224      	movs	r2, #36	; 0x24
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0201 	bic.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042cc:	f001 fbfc 	bl	8005ac8 <HAL_RCC_GetPCLK1Freq>
 80042d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4a81      	ldr	r2, [pc, #516]	; (80044dc <HAL_I2C_Init+0x274>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d807      	bhi.n	80042ec <HAL_I2C_Init+0x84>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4a80      	ldr	r2, [pc, #512]	; (80044e0 <HAL_I2C_Init+0x278>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	bf94      	ite	ls
 80042e4:	2301      	movls	r3, #1
 80042e6:	2300      	movhi	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	e006      	b.n	80042fa <HAL_I2C_Init+0x92>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4a7d      	ldr	r2, [pc, #500]	; (80044e4 <HAL_I2C_Init+0x27c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	bf94      	ite	ls
 80042f4:	2301      	movls	r3, #1
 80042f6:	2300      	movhi	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e0e7      	b.n	80044d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4a78      	ldr	r2, [pc, #480]	; (80044e8 <HAL_I2C_Init+0x280>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	0c9b      	lsrs	r3, r3, #18
 800430c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	430a      	orrs	r2, r1
 8004320:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	4a6a      	ldr	r2, [pc, #424]	; (80044dc <HAL_I2C_Init+0x274>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d802      	bhi.n	800433c <HAL_I2C_Init+0xd4>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	3301      	adds	r3, #1
 800433a:	e009      	b.n	8004350 <HAL_I2C_Init+0xe8>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004342:	fb02 f303 	mul.w	r3, r2, r3
 8004346:	4a69      	ldr	r2, [pc, #420]	; (80044ec <HAL_I2C_Init+0x284>)
 8004348:	fba2 2303 	umull	r2, r3, r2, r3
 800434c:	099b      	lsrs	r3, r3, #6
 800434e:	3301      	adds	r3, #1
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	430b      	orrs	r3, r1
 8004356:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004362:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	495c      	ldr	r1, [pc, #368]	; (80044dc <HAL_I2C_Init+0x274>)
 800436c:	428b      	cmp	r3, r1
 800436e:	d819      	bhi.n	80043a4 <HAL_I2C_Init+0x13c>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	1e59      	subs	r1, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	fbb1 f3f3 	udiv	r3, r1, r3
 800437e:	1c59      	adds	r1, r3, #1
 8004380:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004384:	400b      	ands	r3, r1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_I2C_Init+0x138>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1e59      	subs	r1, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	fbb1 f3f3 	udiv	r3, r1, r3
 8004398:	3301      	adds	r3, #1
 800439a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800439e:	e051      	b.n	8004444 <HAL_I2C_Init+0x1dc>
 80043a0:	2304      	movs	r3, #4
 80043a2:	e04f      	b.n	8004444 <HAL_I2C_Init+0x1dc>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d111      	bne.n	80043d0 <HAL_I2C_Init+0x168>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	1e58      	subs	r0, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6859      	ldr	r1, [r3, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	440b      	add	r3, r1
 80043ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80043be:	3301      	adds	r3, #1
 80043c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	bf0c      	ite	eq
 80043c8:	2301      	moveq	r3, #1
 80043ca:	2300      	movne	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	e012      	b.n	80043f6 <HAL_I2C_Init+0x18e>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	1e58      	subs	r0, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6859      	ldr	r1, [r3, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	0099      	lsls	r1, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043e6:	3301      	adds	r3, #1
 80043e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	bf0c      	ite	eq
 80043f0:	2301      	moveq	r3, #1
 80043f2:	2300      	movne	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_I2C_Init+0x196>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e022      	b.n	8004444 <HAL_I2C_Init+0x1dc>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10e      	bne.n	8004424 <HAL_I2C_Init+0x1bc>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1e58      	subs	r0, r3, #1
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6859      	ldr	r1, [r3, #4]
 800440e:	460b      	mov	r3, r1
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	440b      	add	r3, r1
 8004414:	fbb0 f3f3 	udiv	r3, r0, r3
 8004418:	3301      	adds	r3, #1
 800441a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004422:	e00f      	b.n	8004444 <HAL_I2C_Init+0x1dc>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	1e58      	subs	r0, r3, #1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6859      	ldr	r1, [r3, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	0099      	lsls	r1, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	fbb0 f3f3 	udiv	r3, r0, r3
 800443a:	3301      	adds	r3, #1
 800443c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	6809      	ldr	r1, [r1, #0]
 8004448:	4313      	orrs	r3, r2
 800444a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69da      	ldr	r2, [r3, #28]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004472:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6911      	ldr	r1, [r2, #16]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68d2      	ldr	r2, [r2, #12]
 800447e:	4311      	orrs	r1, r2
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	430b      	orrs	r3, r1
 8004486:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	000186a0 	.word	0x000186a0
 80044e0:	001e847f 	.word	0x001e847f
 80044e4:	003d08ff 	.word	0x003d08ff
 80044e8:	431bde83 	.word	0x431bde83
 80044ec:	10624dd3 	.word	0x10624dd3

080044f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	4608      	mov	r0, r1
 80044fa:	4611      	mov	r1, r2
 80044fc:	461a      	mov	r2, r3
 80044fe:	4603      	mov	r3, r0
 8004500:	817b      	strh	r3, [r7, #10]
 8004502:	460b      	mov	r3, r1
 8004504:	813b      	strh	r3, [r7, #8]
 8004506:	4613      	mov	r3, r2
 8004508:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800450a:	f7fe f8a7 	bl	800265c <HAL_GetTick>
 800450e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b20      	cmp	r3, #32
 800451a:	f040 80d9 	bne.w	80046d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	2319      	movs	r3, #25
 8004524:	2201      	movs	r2, #1
 8004526:	496d      	ldr	r1, [pc, #436]	; (80046dc <HAL_I2C_Mem_Write+0x1ec>)
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 fc7f 	bl	8004e2c <I2C_WaitOnFlagUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004534:	2302      	movs	r3, #2
 8004536:	e0cc      	b.n	80046d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_I2C_Mem_Write+0x56>
 8004542:	2302      	movs	r3, #2
 8004544:	e0c5      	b.n	80046d2 <HAL_I2C_Mem_Write+0x1e2>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b01      	cmp	r3, #1
 800455a:	d007      	beq.n	800456c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800457a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2221      	movs	r2, #33	; 0x21
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2240      	movs	r2, #64	; 0x40
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a3a      	ldr	r2, [r7, #32]
 8004596:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800459c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4a4d      	ldr	r2, [pc, #308]	; (80046e0 <HAL_I2C_Mem_Write+0x1f0>)
 80045ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045ae:	88f8      	ldrh	r0, [r7, #6]
 80045b0:	893a      	ldrh	r2, [r7, #8]
 80045b2:	8979      	ldrh	r1, [r7, #10]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	9301      	str	r3, [sp, #4]
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	4603      	mov	r3, r0
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 fab6 	bl	8004b30 <I2C_RequestMemoryWrite>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d052      	beq.n	8004670 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e081      	b.n	80046d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 fd00 	bl	8004fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00d      	beq.n	80045fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d107      	bne.n	80045f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e06b      	b.n	80046d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	781a      	ldrb	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b04      	cmp	r3, #4
 8004636:	d11b      	bne.n	8004670 <HAL_I2C_Mem_Write+0x180>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463c:	2b00      	cmp	r3, #0
 800463e:	d017      	beq.n	8004670 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1aa      	bne.n	80045ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 fcec 	bl	800505a <I2C_WaitOnBTFFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00d      	beq.n	80046a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	2b04      	cmp	r3, #4
 800468e:	d107      	bne.n	80046a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800469e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e016      	b.n	80046d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e000      	b.n	80046d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046d0:	2302      	movs	r3, #2
  }
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	00100002 	.word	0x00100002
 80046e0:	ffff0000 	.word	0xffff0000

080046e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08c      	sub	sp, #48	; 0x30
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	4608      	mov	r0, r1
 80046ee:	4611      	mov	r1, r2
 80046f0:	461a      	mov	r2, r3
 80046f2:	4603      	mov	r3, r0
 80046f4:	817b      	strh	r3, [r7, #10]
 80046f6:	460b      	mov	r3, r1
 80046f8:	813b      	strh	r3, [r7, #8]
 80046fa:	4613      	mov	r3, r2
 80046fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046fe:	f7fd ffad 	bl	800265c <HAL_GetTick>
 8004702:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b20      	cmp	r3, #32
 800470e:	f040 8208 	bne.w	8004b22 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	2319      	movs	r3, #25
 8004718:	2201      	movs	r2, #1
 800471a:	497b      	ldr	r1, [pc, #492]	; (8004908 <HAL_I2C_Mem_Read+0x224>)
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 fb85 	bl	8004e2c <I2C_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004728:	2302      	movs	r3, #2
 800472a:	e1fb      	b.n	8004b24 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_I2C_Mem_Read+0x56>
 8004736:	2302      	movs	r3, #2
 8004738:	e1f4      	b.n	8004b24 <HAL_I2C_Mem_Read+0x440>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b01      	cmp	r3, #1
 800474e:	d007      	beq.n	8004760 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2222      	movs	r2, #34	; 0x22
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2240      	movs	r2, #64	; 0x40
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800478a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004790:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a5b      	ldr	r2, [pc, #364]	; (800490c <HAL_I2C_Mem_Read+0x228>)
 80047a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047a2:	88f8      	ldrh	r0, [r7, #6]
 80047a4:	893a      	ldrh	r2, [r7, #8]
 80047a6:	8979      	ldrh	r1, [r7, #10]
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	4603      	mov	r3, r0
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 fa52 	bl	8004c5c <I2C_RequestMemoryRead>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e1b0      	b.n	8004b24 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d113      	bne.n	80047f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ca:	2300      	movs	r3, #0
 80047cc:	623b      	str	r3, [r7, #32]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	623b      	str	r3, [r7, #32]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	623b      	str	r3, [r7, #32]
 80047de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	e184      	b.n	8004afc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d11b      	bne.n	8004832 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004808:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e164      	b.n	8004afc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004836:	2b02      	cmp	r3, #2
 8004838:	d11b      	bne.n	8004872 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004848:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004858:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800485a:	2300      	movs	r3, #0
 800485c:	61bb      	str	r3, [r7, #24]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	e144      	b.n	8004afc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004888:	e138      	b.n	8004afc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488e:	2b03      	cmp	r3, #3
 8004890:	f200 80f1 	bhi.w	8004a76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004898:	2b01      	cmp	r3, #1
 800489a:	d123      	bne.n	80048e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800489c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 fc1b 	bl	80050dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e139      	b.n	8004b24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048e2:	e10b      	b.n	8004afc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d14e      	bne.n	800498a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f2:	2200      	movs	r2, #0
 80048f4:	4906      	ldr	r1, [pc, #24]	; (8004910 <HAL_I2C_Mem_Read+0x22c>)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 fa98 	bl	8004e2c <I2C_WaitOnFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d008      	beq.n	8004914 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e10e      	b.n	8004b24 <HAL_I2C_Mem_Read+0x440>
 8004906:	bf00      	nop
 8004908:	00100002 	.word	0x00100002
 800490c:	ffff0000 	.word	0xffff0000
 8004910:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004988:	e0b8      	b.n	8004afc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004990:	2200      	movs	r2, #0
 8004992:	4966      	ldr	r1, [pc, #408]	; (8004b2c <HAL_I2C_Mem_Read+0x448>)
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fa49 	bl	8004e2c <I2C_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0bf      	b.n	8004b24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691a      	ldr	r2, [r3, #16]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	2200      	movs	r2, #0
 80049ee:	494f      	ldr	r1, [pc, #316]	; (8004b2c <HAL_I2C_Mem_Read+0x448>)
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fa1b 	bl	8004e2c <I2C_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e091      	b.n	8004b24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a74:	e042      	b.n	8004afc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fb2e 	bl	80050dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e04c      	b.n	8004b24 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d118      	bne.n	8004afc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f47f aec2 	bne.w	800488a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e000      	b.n	8004b24 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004b22:	2302      	movs	r3, #2
  }
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3728      	adds	r7, #40	; 0x28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	00010004 	.word	0x00010004

08004b30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	4608      	mov	r0, r1
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	817b      	strh	r3, [r7, #10]
 8004b42:	460b      	mov	r3, r1
 8004b44:	813b      	strh	r3, [r7, #8]
 8004b46:	4613      	mov	r3, r2
 8004b48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f960 	bl	8004e2c <I2C_WaitOnFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00d      	beq.n	8004b8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b80:	d103      	bne.n	8004b8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e05f      	b.n	8004c4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b8e:	897b      	ldrh	r3, [r7, #10]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	6a3a      	ldr	r2, [r7, #32]
 8004ba2:	492d      	ldr	r1, [pc, #180]	; (8004c58 <I2C_RequestMemoryWrite+0x128>)
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f998 	bl	8004eda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e04c      	b.n	8004c4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bcc:	6a39      	ldr	r1, [r7, #32]
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 fa02 	bl	8004fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00d      	beq.n	8004bf6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d107      	bne.n	8004bf2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e02b      	b.n	8004c4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d105      	bne.n	8004c08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bfc:	893b      	ldrh	r3, [r7, #8]
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	611a      	str	r2, [r3, #16]
 8004c06:	e021      	b.n	8004c4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c08:	893b      	ldrh	r3, [r7, #8]
 8004c0a:	0a1b      	lsrs	r3, r3, #8
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c18:	6a39      	ldr	r1, [r7, #32]
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 f9dc 	bl	8004fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00d      	beq.n	8004c42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d107      	bne.n	8004c3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e005      	b.n	8004c4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c42:	893b      	ldrh	r3, [r7, #8]
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	00010002 	.word	0x00010002

08004c5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	4608      	mov	r0, r1
 8004c66:	4611      	mov	r1, r2
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	817b      	strh	r3, [r7, #10]
 8004c6e:	460b      	mov	r3, r1
 8004c70:	813b      	strh	r3, [r7, #8]
 8004c72:	4613      	mov	r3, r2
 8004c74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 f8c2 	bl	8004e2c <I2C_WaitOnFlagUntilTimeout>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00d      	beq.n	8004cca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cbc:	d103      	bne.n	8004cc6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e0aa      	b.n	8004e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cca:	897b      	ldrh	r3, [r7, #10]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	461a      	mov	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	6a3a      	ldr	r2, [r7, #32]
 8004cde:	4952      	ldr	r1, [pc, #328]	; (8004e28 <I2C_RequestMemoryRead+0x1cc>)
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 f8fa 	bl	8004eda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e097      	b.n	8004e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d08:	6a39      	ldr	r1, [r7, #32]
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f964 	bl	8004fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00d      	beq.n	8004d32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d107      	bne.n	8004d2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e076      	b.n	8004e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d105      	bne.n	8004d44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d38:	893b      	ldrh	r3, [r7, #8]
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	611a      	str	r2, [r3, #16]
 8004d42:	e021      	b.n	8004d88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d44:	893b      	ldrh	r3, [r7, #8]
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d54:	6a39      	ldr	r1, [r7, #32]
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 f93e 	bl	8004fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00d      	beq.n	8004d7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d107      	bne.n	8004d7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e050      	b.n	8004e20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d7e:	893b      	ldrh	r3, [r7, #8]
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d8a:	6a39      	ldr	r1, [r7, #32]
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f923 	bl	8004fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00d      	beq.n	8004db4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d107      	bne.n	8004db0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e035      	b.n	8004e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dc2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f82b 	bl	8004e2c <I2C_WaitOnFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00d      	beq.n	8004df8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dea:	d103      	bne.n	8004df4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e013      	b.n	8004e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004df8:	897b      	ldrh	r3, [r7, #10]
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	f043 0301 	orr.w	r3, r3, #1
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	6a3a      	ldr	r2, [r7, #32]
 8004e0c:	4906      	ldr	r1, [pc, #24]	; (8004e28 <I2C_RequestMemoryRead+0x1cc>)
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f863 	bl	8004eda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	00010002 	.word	0x00010002

08004e2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e3c:	e025      	b.n	8004e8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e44:	d021      	beq.n	8004e8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e46:	f7fd fc09 	bl	800265c <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d302      	bcc.n	8004e5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d116      	bne.n	8004e8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	f043 0220 	orr.w	r2, r3, #32
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e023      	b.n	8004ed2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	0c1b      	lsrs	r3, r3, #16
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d10d      	bne.n	8004eb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	43da      	mvns	r2, r3
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	bf0c      	ite	eq
 8004ea6:	2301      	moveq	r3, #1
 8004ea8:	2300      	movne	r3, #0
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	461a      	mov	r2, r3
 8004eae:	e00c      	b.n	8004eca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	43da      	mvns	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	bf0c      	ite	eq
 8004ec2:	2301      	moveq	r3, #1
 8004ec4:	2300      	movne	r3, #0
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	79fb      	ldrb	r3, [r7, #7]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d0b6      	beq.n	8004e3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	607a      	str	r2, [r7, #4]
 8004ee6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ee8:	e051      	b.n	8004f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef8:	d123      	bne.n	8004f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f043 0204 	orr.w	r2, r3, #4
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e046      	b.n	8004fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f48:	d021      	beq.n	8004f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4a:	f7fd fb87 	bl	800265c <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d302      	bcc.n	8004f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d116      	bne.n	8004f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	f043 0220 	orr.w	r2, r3, #32
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e020      	b.n	8004fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	0c1b      	lsrs	r3, r3, #16
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d10c      	bne.n	8004fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	43da      	mvns	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	bf14      	ite	ne
 8004faa:	2301      	movne	r3, #1
 8004fac:	2300      	moveq	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	e00b      	b.n	8004fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	43da      	mvns	r2, r3
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	bf14      	ite	ne
 8004fc4:	2301      	movne	r3, #1
 8004fc6:	2300      	moveq	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d18d      	bne.n	8004eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fe4:	e02d      	b.n	8005042 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f8ce 	bl	8005188 <I2C_IsAcknowledgeFailed>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e02d      	b.n	8005052 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ffc:	d021      	beq.n	8005042 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffe:	f7fd fb2d 	bl	800265c <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	429a      	cmp	r2, r3
 800500c:	d302      	bcc.n	8005014 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d116      	bne.n	8005042 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	f043 0220 	orr.w	r2, r3, #32
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e007      	b.n	8005052 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504c:	2b80      	cmp	r3, #128	; 0x80
 800504e:	d1ca      	bne.n	8004fe6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005066:	e02d      	b.n	80050c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 f88d 	bl	8005188 <I2C_IsAcknowledgeFailed>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e02d      	b.n	80050d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800507e:	d021      	beq.n	80050c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005080:	f7fd faec 	bl	800265c <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	429a      	cmp	r2, r3
 800508e:	d302      	bcc.n	8005096 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d116      	bne.n	80050c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2220      	movs	r2, #32
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b0:	f043 0220 	orr.w	r2, r3, #32
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e007      	b.n	80050d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	f003 0304 	and.w	r3, r3, #4
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d1ca      	bne.n	8005068 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050e8:	e042      	b.n	8005170 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	f003 0310 	and.w	r3, r3, #16
 80050f4:	2b10      	cmp	r3, #16
 80050f6:	d119      	bne.n	800512c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f06f 0210 	mvn.w	r2, #16
 8005100:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e029      	b.n	8005180 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800512c:	f7fd fa96 	bl	800265c <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	429a      	cmp	r2, r3
 800513a:	d302      	bcc.n	8005142 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d116      	bne.n	8005170 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	f043 0220 	orr.w	r2, r3, #32
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e007      	b.n	8005180 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517a:	2b40      	cmp	r3, #64	; 0x40
 800517c:	d1b5      	bne.n	80050ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800519e:	d11b      	bne.n	80051d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	f043 0204 	orr.w	r2, r3, #4
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e000      	b.n	80051da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
	...

080051e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e267      	b.n	80056ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d075      	beq.n	80052f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005206:	4b88      	ldr	r3, [pc, #544]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 030c 	and.w	r3, r3, #12
 800520e:	2b04      	cmp	r3, #4
 8005210:	d00c      	beq.n	800522c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005212:	4b85      	ldr	r3, [pc, #532]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800521a:	2b08      	cmp	r3, #8
 800521c:	d112      	bne.n	8005244 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800521e:	4b82      	ldr	r3, [pc, #520]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005226:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800522a:	d10b      	bne.n	8005244 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800522c:	4b7e      	ldr	r3, [pc, #504]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d05b      	beq.n	80052f0 <HAL_RCC_OscConfig+0x108>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d157      	bne.n	80052f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e242      	b.n	80056ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800524c:	d106      	bne.n	800525c <HAL_RCC_OscConfig+0x74>
 800524e:	4b76      	ldr	r3, [pc, #472]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a75      	ldr	r2, [pc, #468]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 8005254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	e01d      	b.n	8005298 <HAL_RCC_OscConfig+0xb0>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005264:	d10c      	bne.n	8005280 <HAL_RCC_OscConfig+0x98>
 8005266:	4b70      	ldr	r3, [pc, #448]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a6f      	ldr	r2, [pc, #444]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 800526c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	4b6d      	ldr	r3, [pc, #436]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a6c      	ldr	r2, [pc, #432]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 8005278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	e00b      	b.n	8005298 <HAL_RCC_OscConfig+0xb0>
 8005280:	4b69      	ldr	r3, [pc, #420]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a68      	ldr	r2, [pc, #416]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 8005286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	4b66      	ldr	r3, [pc, #408]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a65      	ldr	r2, [pc, #404]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 8005292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d013      	beq.n	80052c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a0:	f7fd f9dc 	bl	800265c <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052a8:	f7fd f9d8 	bl	800265c <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b64      	cmp	r3, #100	; 0x64
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e207      	b.n	80056ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ba:	4b5b      	ldr	r3, [pc, #364]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f0      	beq.n	80052a8 <HAL_RCC_OscConfig+0xc0>
 80052c6:	e014      	b.n	80052f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c8:	f7fd f9c8 	bl	800265c <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052d0:	f7fd f9c4 	bl	800265c <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b64      	cmp	r3, #100	; 0x64
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e1f3      	b.n	80056ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052e2:	4b51      	ldr	r3, [pc, #324]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f0      	bne.n	80052d0 <HAL_RCC_OscConfig+0xe8>
 80052ee:	e000      	b.n	80052f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d063      	beq.n	80053c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052fe:	4b4a      	ldr	r3, [pc, #296]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 030c 	and.w	r3, r3, #12
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00b      	beq.n	8005322 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800530a:	4b47      	ldr	r3, [pc, #284]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005312:	2b08      	cmp	r3, #8
 8005314:	d11c      	bne.n	8005350 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005316:	4b44      	ldr	r3, [pc, #272]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d116      	bne.n	8005350 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005322:	4b41      	ldr	r3, [pc, #260]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <HAL_RCC_OscConfig+0x152>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d001      	beq.n	800533a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e1c7      	b.n	80056ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800533a:	4b3b      	ldr	r3, [pc, #236]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	4937      	ldr	r1, [pc, #220]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 800534a:	4313      	orrs	r3, r2
 800534c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800534e:	e03a      	b.n	80053c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d020      	beq.n	800539a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005358:	4b34      	ldr	r3, [pc, #208]	; (800542c <HAL_RCC_OscConfig+0x244>)
 800535a:	2201      	movs	r2, #1
 800535c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535e:	f7fd f97d 	bl	800265c <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005366:	f7fd f979 	bl	800265c <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e1a8      	b.n	80056ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005378:	4b2b      	ldr	r3, [pc, #172]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0f0      	beq.n	8005366 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005384:	4b28      	ldr	r3, [pc, #160]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	4925      	ldr	r1, [pc, #148]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 8005394:	4313      	orrs	r3, r2
 8005396:	600b      	str	r3, [r1, #0]
 8005398:	e015      	b.n	80053c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800539a:	4b24      	ldr	r3, [pc, #144]	; (800542c <HAL_RCC_OscConfig+0x244>)
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a0:	f7fd f95c 	bl	800265c <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053a8:	f7fd f958 	bl	800265c <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e187      	b.n	80056ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ba:	4b1b      	ldr	r3, [pc, #108]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f0      	bne.n	80053a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d036      	beq.n	8005440 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d016      	beq.n	8005408 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053da:	4b15      	ldr	r3, [pc, #84]	; (8005430 <HAL_RCC_OscConfig+0x248>)
 80053dc:	2201      	movs	r2, #1
 80053de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e0:	f7fd f93c 	bl	800265c <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053e8:	f7fd f938 	bl	800265c <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e167      	b.n	80056ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053fa:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <HAL_RCC_OscConfig+0x240>)
 80053fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0f0      	beq.n	80053e8 <HAL_RCC_OscConfig+0x200>
 8005406:	e01b      	b.n	8005440 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005408:	4b09      	ldr	r3, [pc, #36]	; (8005430 <HAL_RCC_OscConfig+0x248>)
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800540e:	f7fd f925 	bl	800265c <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005414:	e00e      	b.n	8005434 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005416:	f7fd f921 	bl	800265c <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d907      	bls.n	8005434 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e150      	b.n	80056ca <HAL_RCC_OscConfig+0x4e2>
 8005428:	40023800 	.word	0x40023800
 800542c:	42470000 	.word	0x42470000
 8005430:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005434:	4b88      	ldr	r3, [pc, #544]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 8005436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1ea      	bne.n	8005416 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8097 	beq.w	800557c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800544e:	2300      	movs	r3, #0
 8005450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005452:	4b81      	ldr	r3, [pc, #516]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10f      	bne.n	800547e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800545e:	2300      	movs	r3, #0
 8005460:	60bb      	str	r3, [r7, #8]
 8005462:	4b7d      	ldr	r3, [pc, #500]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	4a7c      	ldr	r2, [pc, #496]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 8005468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800546c:	6413      	str	r3, [r2, #64]	; 0x40
 800546e:	4b7a      	ldr	r3, [pc, #488]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005476:	60bb      	str	r3, [r7, #8]
 8005478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800547a:	2301      	movs	r3, #1
 800547c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800547e:	4b77      	ldr	r3, [pc, #476]	; (800565c <HAL_RCC_OscConfig+0x474>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005486:	2b00      	cmp	r3, #0
 8005488:	d118      	bne.n	80054bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800548a:	4b74      	ldr	r3, [pc, #464]	; (800565c <HAL_RCC_OscConfig+0x474>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a73      	ldr	r2, [pc, #460]	; (800565c <HAL_RCC_OscConfig+0x474>)
 8005490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005496:	f7fd f8e1 	bl	800265c <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800549c:	e008      	b.n	80054b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800549e:	f7fd f8dd 	bl	800265c <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e10c      	b.n	80056ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b0:	4b6a      	ldr	r3, [pc, #424]	; (800565c <HAL_RCC_OscConfig+0x474>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0f0      	beq.n	800549e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d106      	bne.n	80054d2 <HAL_RCC_OscConfig+0x2ea>
 80054c4:	4b64      	ldr	r3, [pc, #400]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 80054c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c8:	4a63      	ldr	r2, [pc, #396]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 80054ca:	f043 0301 	orr.w	r3, r3, #1
 80054ce:	6713      	str	r3, [r2, #112]	; 0x70
 80054d0:	e01c      	b.n	800550c <HAL_RCC_OscConfig+0x324>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	2b05      	cmp	r3, #5
 80054d8:	d10c      	bne.n	80054f4 <HAL_RCC_OscConfig+0x30c>
 80054da:	4b5f      	ldr	r3, [pc, #380]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 80054dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054de:	4a5e      	ldr	r2, [pc, #376]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 80054e0:	f043 0304 	orr.w	r3, r3, #4
 80054e4:	6713      	str	r3, [r2, #112]	; 0x70
 80054e6:	4b5c      	ldr	r3, [pc, #368]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 80054e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ea:	4a5b      	ldr	r2, [pc, #364]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 80054ec:	f043 0301 	orr.w	r3, r3, #1
 80054f0:	6713      	str	r3, [r2, #112]	; 0x70
 80054f2:	e00b      	b.n	800550c <HAL_RCC_OscConfig+0x324>
 80054f4:	4b58      	ldr	r3, [pc, #352]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 80054f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f8:	4a57      	ldr	r2, [pc, #348]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 80054fa:	f023 0301 	bic.w	r3, r3, #1
 80054fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005500:	4b55      	ldr	r3, [pc, #340]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 8005502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005504:	4a54      	ldr	r2, [pc, #336]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 8005506:	f023 0304 	bic.w	r3, r3, #4
 800550a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d015      	beq.n	8005540 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005514:	f7fd f8a2 	bl	800265c <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800551a:	e00a      	b.n	8005532 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800551c:	f7fd f89e 	bl	800265c <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	f241 3288 	movw	r2, #5000	; 0x1388
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e0cb      	b.n	80056ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005532:	4b49      	ldr	r3, [pc, #292]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 8005534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0ee      	beq.n	800551c <HAL_RCC_OscConfig+0x334>
 800553e:	e014      	b.n	800556a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005540:	f7fd f88c 	bl	800265c <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005546:	e00a      	b.n	800555e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005548:	f7fd f888 	bl	800265c <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	f241 3288 	movw	r2, #5000	; 0x1388
 8005556:	4293      	cmp	r3, r2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e0b5      	b.n	80056ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800555e:	4b3e      	ldr	r3, [pc, #248]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 8005560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1ee      	bne.n	8005548 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800556a:	7dfb      	ldrb	r3, [r7, #23]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d105      	bne.n	800557c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005570:	4b39      	ldr	r3, [pc, #228]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 8005572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005574:	4a38      	ldr	r2, [pc, #224]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 8005576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800557a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 80a1 	beq.w	80056c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005586:	4b34      	ldr	r3, [pc, #208]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 030c 	and.w	r3, r3, #12
 800558e:	2b08      	cmp	r3, #8
 8005590:	d05c      	beq.n	800564c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	2b02      	cmp	r3, #2
 8005598:	d141      	bne.n	800561e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800559a:	4b31      	ldr	r3, [pc, #196]	; (8005660 <HAL_RCC_OscConfig+0x478>)
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a0:	f7fd f85c 	bl	800265c <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055a8:	f7fd f858 	bl	800265c <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e087      	b.n	80056ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ba:	4b27      	ldr	r3, [pc, #156]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f0      	bne.n	80055a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69da      	ldr	r2, [r3, #28]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	019b      	lsls	r3, r3, #6
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055dc:	085b      	lsrs	r3, r3, #1
 80055de:	3b01      	subs	r3, #1
 80055e0:	041b      	lsls	r3, r3, #16
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	061b      	lsls	r3, r3, #24
 80055ea:	491b      	ldr	r1, [pc, #108]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055f0:	4b1b      	ldr	r3, [pc, #108]	; (8005660 <HAL_RCC_OscConfig+0x478>)
 80055f2:	2201      	movs	r2, #1
 80055f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f6:	f7fd f831 	bl	800265c <HAL_GetTick>
 80055fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055fe:	f7fd f82d 	bl	800265c <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e05c      	b.n	80056ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005610:	4b11      	ldr	r3, [pc, #68]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f0      	beq.n	80055fe <HAL_RCC_OscConfig+0x416>
 800561c:	e054      	b.n	80056c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800561e:	4b10      	ldr	r3, [pc, #64]	; (8005660 <HAL_RCC_OscConfig+0x478>)
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005624:	f7fd f81a 	bl	800265c <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800562c:	f7fd f816 	bl	800265c <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e045      	b.n	80056ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800563e:	4b06      	ldr	r3, [pc, #24]	; (8005658 <HAL_RCC_OscConfig+0x470>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1f0      	bne.n	800562c <HAL_RCC_OscConfig+0x444>
 800564a:	e03d      	b.n	80056c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d107      	bne.n	8005664 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e038      	b.n	80056ca <HAL_RCC_OscConfig+0x4e2>
 8005658:	40023800 	.word	0x40023800
 800565c:	40007000 	.word	0x40007000
 8005660:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005664:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <HAL_RCC_OscConfig+0x4ec>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d028      	beq.n	80056c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800567c:	429a      	cmp	r2, r3
 800567e:	d121      	bne.n	80056c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568a:	429a      	cmp	r2, r3
 800568c:	d11a      	bne.n	80056c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005694:	4013      	ands	r3, r2
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800569a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800569c:	4293      	cmp	r3, r2
 800569e:	d111      	bne.n	80056c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056aa:	085b      	lsrs	r3, r3, #1
 80056ac:	3b01      	subs	r3, #1
 80056ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d107      	bne.n	80056c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d001      	beq.n	80056c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	40023800 	.word	0x40023800

080056d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e0cc      	b.n	8005886 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056ec:	4b68      	ldr	r3, [pc, #416]	; (8005890 <HAL_RCC_ClockConfig+0x1b8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d90c      	bls.n	8005714 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fa:	4b65      	ldr	r3, [pc, #404]	; (8005890 <HAL_RCC_ClockConfig+0x1b8>)
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005702:	4b63      	ldr	r3, [pc, #396]	; (8005890 <HAL_RCC_ClockConfig+0x1b8>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d001      	beq.n	8005714 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e0b8      	b.n	8005886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d020      	beq.n	8005762 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800572c:	4b59      	ldr	r3, [pc, #356]	; (8005894 <HAL_RCC_ClockConfig+0x1bc>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	4a58      	ldr	r2, [pc, #352]	; (8005894 <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005736:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0308 	and.w	r3, r3, #8
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005744:	4b53      	ldr	r3, [pc, #332]	; (8005894 <HAL_RCC_ClockConfig+0x1bc>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	4a52      	ldr	r2, [pc, #328]	; (8005894 <HAL_RCC_ClockConfig+0x1bc>)
 800574a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800574e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005750:	4b50      	ldr	r3, [pc, #320]	; (8005894 <HAL_RCC_ClockConfig+0x1bc>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	494d      	ldr	r1, [pc, #308]	; (8005894 <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	4313      	orrs	r3, r2
 8005760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d044      	beq.n	80057f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d107      	bne.n	8005786 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005776:	4b47      	ldr	r3, [pc, #284]	; (8005894 <HAL_RCC_ClockConfig+0x1bc>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d119      	bne.n	80057b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e07f      	b.n	8005886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2b02      	cmp	r3, #2
 800578c:	d003      	beq.n	8005796 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005792:	2b03      	cmp	r3, #3
 8005794:	d107      	bne.n	80057a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005796:	4b3f      	ldr	r3, [pc, #252]	; (8005894 <HAL_RCC_ClockConfig+0x1bc>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d109      	bne.n	80057b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e06f      	b.n	8005886 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057a6:	4b3b      	ldr	r3, [pc, #236]	; (8005894 <HAL_RCC_ClockConfig+0x1bc>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e067      	b.n	8005886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057b6:	4b37      	ldr	r3, [pc, #220]	; (8005894 <HAL_RCC_ClockConfig+0x1bc>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f023 0203 	bic.w	r2, r3, #3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	4934      	ldr	r1, [pc, #208]	; (8005894 <HAL_RCC_ClockConfig+0x1bc>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057c8:	f7fc ff48 	bl	800265c <HAL_GetTick>
 80057cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ce:	e00a      	b.n	80057e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057d0:	f7fc ff44 	bl	800265c <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	f241 3288 	movw	r2, #5000	; 0x1388
 80057de:	4293      	cmp	r3, r2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e04f      	b.n	8005886 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057e6:	4b2b      	ldr	r3, [pc, #172]	; (8005894 <HAL_RCC_ClockConfig+0x1bc>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 020c 	and.w	r2, r3, #12
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d1eb      	bne.n	80057d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057f8:	4b25      	ldr	r3, [pc, #148]	; (8005890 <HAL_RCC_ClockConfig+0x1b8>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0307 	and.w	r3, r3, #7
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	429a      	cmp	r2, r3
 8005804:	d20c      	bcs.n	8005820 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005806:	4b22      	ldr	r3, [pc, #136]	; (8005890 <HAL_RCC_ClockConfig+0x1b8>)
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800580e:	4b20      	ldr	r3, [pc, #128]	; (8005890 <HAL_RCC_ClockConfig+0x1b8>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d001      	beq.n	8005820 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e032      	b.n	8005886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b00      	cmp	r3, #0
 800582a:	d008      	beq.n	800583e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800582c:	4b19      	ldr	r3, [pc, #100]	; (8005894 <HAL_RCC_ClockConfig+0x1bc>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	4916      	ldr	r1, [pc, #88]	; (8005894 <HAL_RCC_ClockConfig+0x1bc>)
 800583a:	4313      	orrs	r3, r2
 800583c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d009      	beq.n	800585e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800584a:	4b12      	ldr	r3, [pc, #72]	; (8005894 <HAL_RCC_ClockConfig+0x1bc>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	490e      	ldr	r1, [pc, #56]	; (8005894 <HAL_RCC_ClockConfig+0x1bc>)
 800585a:	4313      	orrs	r3, r2
 800585c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800585e:	f000 f821 	bl	80058a4 <HAL_RCC_GetSysClockFreq>
 8005862:	4602      	mov	r2, r0
 8005864:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <HAL_RCC_ClockConfig+0x1bc>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	091b      	lsrs	r3, r3, #4
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	490a      	ldr	r1, [pc, #40]	; (8005898 <HAL_RCC_ClockConfig+0x1c0>)
 8005870:	5ccb      	ldrb	r3, [r1, r3]
 8005872:	fa22 f303 	lsr.w	r3, r2, r3
 8005876:	4a09      	ldr	r2, [pc, #36]	; (800589c <HAL_RCC_ClockConfig+0x1c4>)
 8005878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800587a:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <HAL_RCC_ClockConfig+0x1c8>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4618      	mov	r0, r3
 8005880:	f7fc fea8 	bl	80025d4 <HAL_InitTick>

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	40023c00 	.word	0x40023c00
 8005894:	40023800 	.word	0x40023800
 8005898:	0800aa30 	.word	0x0800aa30
 800589c:	20000000 	.word	0x20000000
 80058a0:	20000004 	.word	0x20000004

080058a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058a8:	b094      	sub	sp, #80	; 0x50
 80058aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	647b      	str	r3, [r7, #68]	; 0x44
 80058b0:	2300      	movs	r3, #0
 80058b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058b4:	2300      	movs	r3, #0
 80058b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058bc:	4b79      	ldr	r3, [pc, #484]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 030c 	and.w	r3, r3, #12
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d00d      	beq.n	80058e4 <HAL_RCC_GetSysClockFreq+0x40>
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	f200 80e1 	bhi.w	8005a90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <HAL_RCC_GetSysClockFreq+0x34>
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d003      	beq.n	80058de <HAL_RCC_GetSysClockFreq+0x3a>
 80058d6:	e0db      	b.n	8005a90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058d8:	4b73      	ldr	r3, [pc, #460]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x204>)
 80058da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80058dc:	e0db      	b.n	8005a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058de:	4b73      	ldr	r3, [pc, #460]	; (8005aac <HAL_RCC_GetSysClockFreq+0x208>)
 80058e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058e2:	e0d8      	b.n	8005a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058e4:	4b6f      	ldr	r3, [pc, #444]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058ee:	4b6d      	ldr	r3, [pc, #436]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d063      	beq.n	80059c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058fa:	4b6a      	ldr	r3, [pc, #424]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	099b      	lsrs	r3, r3, #6
 8005900:	2200      	movs	r2, #0
 8005902:	63bb      	str	r3, [r7, #56]	; 0x38
 8005904:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800590c:	633b      	str	r3, [r7, #48]	; 0x30
 800590e:	2300      	movs	r3, #0
 8005910:	637b      	str	r3, [r7, #52]	; 0x34
 8005912:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005916:	4622      	mov	r2, r4
 8005918:	462b      	mov	r3, r5
 800591a:	f04f 0000 	mov.w	r0, #0
 800591e:	f04f 0100 	mov.w	r1, #0
 8005922:	0159      	lsls	r1, r3, #5
 8005924:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005928:	0150      	lsls	r0, r2, #5
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	4621      	mov	r1, r4
 8005930:	1a51      	subs	r1, r2, r1
 8005932:	6139      	str	r1, [r7, #16]
 8005934:	4629      	mov	r1, r5
 8005936:	eb63 0301 	sbc.w	r3, r3, r1
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005948:	4659      	mov	r1, fp
 800594a:	018b      	lsls	r3, r1, #6
 800594c:	4651      	mov	r1, sl
 800594e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005952:	4651      	mov	r1, sl
 8005954:	018a      	lsls	r2, r1, #6
 8005956:	4651      	mov	r1, sl
 8005958:	ebb2 0801 	subs.w	r8, r2, r1
 800595c:	4659      	mov	r1, fp
 800595e:	eb63 0901 	sbc.w	r9, r3, r1
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	f04f 0300 	mov.w	r3, #0
 800596a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800596e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005976:	4690      	mov	r8, r2
 8005978:	4699      	mov	r9, r3
 800597a:	4623      	mov	r3, r4
 800597c:	eb18 0303 	adds.w	r3, r8, r3
 8005980:	60bb      	str	r3, [r7, #8]
 8005982:	462b      	mov	r3, r5
 8005984:	eb49 0303 	adc.w	r3, r9, r3
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005996:	4629      	mov	r1, r5
 8005998:	024b      	lsls	r3, r1, #9
 800599a:	4621      	mov	r1, r4
 800599c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059a0:	4621      	mov	r1, r4
 80059a2:	024a      	lsls	r2, r1, #9
 80059a4:	4610      	mov	r0, r2
 80059a6:	4619      	mov	r1, r3
 80059a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059aa:	2200      	movs	r2, #0
 80059ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059b4:	f7fb f948 	bl	8000c48 <__aeabi_uldivmod>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4613      	mov	r3, r2
 80059be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c0:	e058      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059c2:	4b38      	ldr	r3, [pc, #224]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	099b      	lsrs	r3, r3, #6
 80059c8:	2200      	movs	r2, #0
 80059ca:	4618      	mov	r0, r3
 80059cc:	4611      	mov	r1, r2
 80059ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059d2:	623b      	str	r3, [r7, #32]
 80059d4:	2300      	movs	r3, #0
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
 80059d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059dc:	4642      	mov	r2, r8
 80059de:	464b      	mov	r3, r9
 80059e0:	f04f 0000 	mov.w	r0, #0
 80059e4:	f04f 0100 	mov.w	r1, #0
 80059e8:	0159      	lsls	r1, r3, #5
 80059ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059ee:	0150      	lsls	r0, r2, #5
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	4641      	mov	r1, r8
 80059f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80059fa:	4649      	mov	r1, r9
 80059fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	f04f 0300 	mov.w	r3, #0
 8005a08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a14:	ebb2 040a 	subs.w	r4, r2, sl
 8005a18:	eb63 050b 	sbc.w	r5, r3, fp
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	00eb      	lsls	r3, r5, #3
 8005a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a2a:	00e2      	lsls	r2, r4, #3
 8005a2c:	4614      	mov	r4, r2
 8005a2e:	461d      	mov	r5, r3
 8005a30:	4643      	mov	r3, r8
 8005a32:	18e3      	adds	r3, r4, r3
 8005a34:	603b      	str	r3, [r7, #0]
 8005a36:	464b      	mov	r3, r9
 8005a38:	eb45 0303 	adc.w	r3, r5, r3
 8005a3c:	607b      	str	r3, [r7, #4]
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	f04f 0300 	mov.w	r3, #0
 8005a46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	028b      	lsls	r3, r1, #10
 8005a4e:	4621      	mov	r1, r4
 8005a50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a54:	4621      	mov	r1, r4
 8005a56:	028a      	lsls	r2, r1, #10
 8005a58:	4610      	mov	r0, r2
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a5e:	2200      	movs	r2, #0
 8005a60:	61bb      	str	r3, [r7, #24]
 8005a62:	61fa      	str	r2, [r7, #28]
 8005a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a68:	f7fb f8ee 	bl	8000c48 <__aeabi_uldivmod>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4613      	mov	r3, r2
 8005a72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a74:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	0c1b      	lsrs	r3, r3, #16
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	3301      	adds	r3, #1
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005a84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a8e:	e002      	b.n	8005a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3750      	adds	r7, #80	; 0x50
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40023800 	.word	0x40023800
 8005aa8:	00f42400 	.word	0x00f42400
 8005aac:	007a1200 	.word	0x007a1200

08005ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ab4:	4b03      	ldr	r3, [pc, #12]	; (8005ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	20000000 	.word	0x20000000

08005ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005acc:	f7ff fff0 	bl	8005ab0 <HAL_RCC_GetHCLKFreq>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	4b05      	ldr	r3, [pc, #20]	; (8005ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	0a9b      	lsrs	r3, r3, #10
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	4903      	ldr	r1, [pc, #12]	; (8005aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ade:	5ccb      	ldrb	r3, [r1, r3]
 8005ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	40023800 	.word	0x40023800
 8005aec:	0800aa40 	.word	0x0800aa40

08005af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005af4:	f7ff ffdc 	bl	8005ab0 <HAL_RCC_GetHCLKFreq>
 8005af8:	4602      	mov	r2, r0
 8005afa:	4b05      	ldr	r3, [pc, #20]	; (8005b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	0b5b      	lsrs	r3, r3, #13
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	4903      	ldr	r1, [pc, #12]	; (8005b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b06:	5ccb      	ldrb	r3, [r1, r3]
 8005b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40023800 	.word	0x40023800
 8005b14:	0800aa40 	.word	0x0800aa40

08005b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e041      	b.n	8005bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fc fb08 	bl	8002154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3304      	adds	r3, #4
 8005b54:	4619      	mov	r1, r3
 8005b56:	4610      	mov	r0, r2
 8005b58:	f000 f9ce 	bl	8005ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d001      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e04e      	b.n	8005c6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0201 	orr.w	r2, r2, #1
 8005be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a23      	ldr	r2, [pc, #140]	; (8005c7c <HAL_TIM_Base_Start_IT+0xc4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d022      	beq.n	8005c38 <HAL_TIM_Base_Start_IT+0x80>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bfa:	d01d      	beq.n	8005c38 <HAL_TIM_Base_Start_IT+0x80>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a1f      	ldr	r2, [pc, #124]	; (8005c80 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d018      	beq.n	8005c38 <HAL_TIM_Base_Start_IT+0x80>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a1e      	ldr	r2, [pc, #120]	; (8005c84 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d013      	beq.n	8005c38 <HAL_TIM_Base_Start_IT+0x80>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a1c      	ldr	r2, [pc, #112]	; (8005c88 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00e      	beq.n	8005c38 <HAL_TIM_Base_Start_IT+0x80>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a1b      	ldr	r2, [pc, #108]	; (8005c8c <HAL_TIM_Base_Start_IT+0xd4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d009      	beq.n	8005c38 <HAL_TIM_Base_Start_IT+0x80>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a19      	ldr	r2, [pc, #100]	; (8005c90 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d004      	beq.n	8005c38 <HAL_TIM_Base_Start_IT+0x80>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a18      	ldr	r2, [pc, #96]	; (8005c94 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d111      	bne.n	8005c5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b06      	cmp	r3, #6
 8005c48:	d010      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f042 0201 	orr.w	r2, r2, #1
 8005c58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5a:	e007      	b.n	8005c6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0201 	orr.w	r2, r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	40010000 	.word	0x40010000
 8005c80:	40000400 	.word	0x40000400
 8005c84:	40000800 	.word	0x40000800
 8005c88:	40000c00 	.word	0x40000c00
 8005c8c:	40010400 	.word	0x40010400
 8005c90:	40014000 	.word	0x40014000
 8005c94:	40001800 	.word	0x40001800

08005c98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d122      	bne.n	8005cf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d11b      	bne.n	8005cf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f06f 0202 	mvn.w	r2, #2
 8005cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f8ee 	bl	8005ebc <HAL_TIM_IC_CaptureCallback>
 8005ce0:	e005      	b.n	8005cee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f8e0 	bl	8005ea8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f8f1 	bl	8005ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f003 0304 	and.w	r3, r3, #4
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d122      	bne.n	8005d48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b04      	cmp	r3, #4
 8005d0e:	d11b      	bne.n	8005d48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f06f 0204 	mvn.w	r2, #4
 8005d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f8c4 	bl	8005ebc <HAL_TIM_IC_CaptureCallback>
 8005d34:	e005      	b.n	8005d42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f8b6 	bl	8005ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f8c7 	bl	8005ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	d122      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d11b      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0208 	mvn.w	r2, #8
 8005d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2204      	movs	r2, #4
 8005d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f89a 	bl	8005ebc <HAL_TIM_IC_CaptureCallback>
 8005d88:	e005      	b.n	8005d96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f88c 	bl	8005ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f89d 	bl	8005ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0310 	and.w	r3, r3, #16
 8005da6:	2b10      	cmp	r3, #16
 8005da8:	d122      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0310 	and.w	r3, r3, #16
 8005db4:	2b10      	cmp	r3, #16
 8005db6:	d11b      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0210 	mvn.w	r2, #16
 8005dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2208      	movs	r2, #8
 8005dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f870 	bl	8005ebc <HAL_TIM_IC_CaptureCallback>
 8005ddc:	e005      	b.n	8005dea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f862 	bl	8005ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f873 	bl	8005ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d10e      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d107      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f06f 0201 	mvn.w	r2, #1
 8005e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7fb fdd2 	bl	80019c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e26:	2b80      	cmp	r3, #128	; 0x80
 8005e28:	d10e      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e34:	2b80      	cmp	r3, #128	; 0x80
 8005e36:	d107      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f902 	bl	800604c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e52:	2b40      	cmp	r3, #64	; 0x40
 8005e54:	d10e      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e60:	2b40      	cmp	r3, #64	; 0x40
 8005e62:	d107      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f838 	bl	8005ee4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	d10e      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	d107      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f06f 0220 	mvn.w	r2, #32
 8005e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f8cc 	bl	8006038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ea0:	bf00      	nop
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a40      	ldr	r2, [pc, #256]	; (800600c <TIM_Base_SetConfig+0x114>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d013      	beq.n	8005f38 <TIM_Base_SetConfig+0x40>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f16:	d00f      	beq.n	8005f38 <TIM_Base_SetConfig+0x40>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a3d      	ldr	r2, [pc, #244]	; (8006010 <TIM_Base_SetConfig+0x118>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00b      	beq.n	8005f38 <TIM_Base_SetConfig+0x40>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a3c      	ldr	r2, [pc, #240]	; (8006014 <TIM_Base_SetConfig+0x11c>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d007      	beq.n	8005f38 <TIM_Base_SetConfig+0x40>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a3b      	ldr	r2, [pc, #236]	; (8006018 <TIM_Base_SetConfig+0x120>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_Base_SetConfig+0x40>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a3a      	ldr	r2, [pc, #232]	; (800601c <TIM_Base_SetConfig+0x124>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d108      	bne.n	8005f4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a2f      	ldr	r2, [pc, #188]	; (800600c <TIM_Base_SetConfig+0x114>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d02b      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f58:	d027      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a2c      	ldr	r2, [pc, #176]	; (8006010 <TIM_Base_SetConfig+0x118>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d023      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a2b      	ldr	r2, [pc, #172]	; (8006014 <TIM_Base_SetConfig+0x11c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d01f      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a2a      	ldr	r2, [pc, #168]	; (8006018 <TIM_Base_SetConfig+0x120>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d01b      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a29      	ldr	r2, [pc, #164]	; (800601c <TIM_Base_SetConfig+0x124>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d017      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a28      	ldr	r2, [pc, #160]	; (8006020 <TIM_Base_SetConfig+0x128>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d013      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a27      	ldr	r2, [pc, #156]	; (8006024 <TIM_Base_SetConfig+0x12c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00f      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a26      	ldr	r2, [pc, #152]	; (8006028 <TIM_Base_SetConfig+0x130>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00b      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a25      	ldr	r2, [pc, #148]	; (800602c <TIM_Base_SetConfig+0x134>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d007      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a24      	ldr	r2, [pc, #144]	; (8006030 <TIM_Base_SetConfig+0x138>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d003      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a23      	ldr	r2, [pc, #140]	; (8006034 <TIM_Base_SetConfig+0x13c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d108      	bne.n	8005fbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a0a      	ldr	r2, [pc, #40]	; (800600c <TIM_Base_SetConfig+0x114>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d003      	beq.n	8005ff0 <TIM_Base_SetConfig+0xf8>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a0c      	ldr	r2, [pc, #48]	; (800601c <TIM_Base_SetConfig+0x124>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d103      	bne.n	8005ff8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	691a      	ldr	r2, [r3, #16]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	615a      	str	r2, [r3, #20]
}
 8005ffe:	bf00      	nop
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	40010000 	.word	0x40010000
 8006010:	40000400 	.word	0x40000400
 8006014:	40000800 	.word	0x40000800
 8006018:	40000c00 	.word	0x40000c00
 800601c:	40010400 	.word	0x40010400
 8006020:	40014000 	.word	0x40014000
 8006024:	40014400 	.word	0x40014400
 8006028:	40014800 	.word	0x40014800
 800602c:	40001800 	.word	0x40001800
 8006030:	40001c00 	.word	0x40001c00
 8006034:	40002000 	.word	0x40002000

08006038 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e03f      	b.n	80060f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d106      	bne.n	800608c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fc f8aa 	bl	80021e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2224      	movs	r2, #36	; 0x24
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fddf 	bl	8006c68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695a      	ldr	r2, [r3, #20]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b08a      	sub	sp, #40	; 0x28
 80060fe:	af02      	add	r7, sp, #8
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	603b      	str	r3, [r7, #0]
 8006106:	4613      	mov	r3, r2
 8006108:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b20      	cmp	r3, #32
 8006118:	d17c      	bne.n	8006214 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <HAL_UART_Transmit+0x2c>
 8006120:	88fb      	ldrh	r3, [r7, #6]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e075      	b.n	8006216 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_UART_Transmit+0x3e>
 8006134:	2302      	movs	r3, #2
 8006136:	e06e      	b.n	8006216 <HAL_UART_Transmit+0x11c>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2221      	movs	r2, #33	; 0x21
 800614a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800614e:	f7fc fa85 	bl	800265c <HAL_GetTick>
 8006152:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	88fa      	ldrh	r2, [r7, #6]
 8006158:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	88fa      	ldrh	r2, [r7, #6]
 800615e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006168:	d108      	bne.n	800617c <HAL_UART_Transmit+0x82>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d104      	bne.n	800617c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006172:	2300      	movs	r3, #0
 8006174:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	61bb      	str	r3, [r7, #24]
 800617a:	e003      	b.n	8006184 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006180:	2300      	movs	r3, #0
 8006182:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800618c:	e02a      	b.n	80061e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2200      	movs	r2, #0
 8006196:	2180      	movs	r1, #128	; 0x80
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 fb1f 	bl	80067dc <UART_WaitOnFlagUntilTimeout>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e036      	b.n	8006216 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10b      	bne.n	80061c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	3302      	adds	r3, #2
 80061c2:	61bb      	str	r3, [r7, #24]
 80061c4:	e007      	b.n	80061d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	781a      	ldrb	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	3301      	adds	r3, #1
 80061d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061da:	b29b      	uxth	r3, r3
 80061dc:	3b01      	subs	r3, #1
 80061de:	b29a      	uxth	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1cf      	bne.n	800618e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2200      	movs	r2, #0
 80061f6:	2140      	movs	r1, #64	; 0x40
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 faef 	bl	80067dc <UART_WaitOnFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e006      	b.n	8006216 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006210:	2300      	movs	r3, #0
 8006212:	e000      	b.n	8006216 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006214:	2302      	movs	r3, #2
  }
}
 8006216:	4618      	mov	r0, r3
 8006218:	3720      	adds	r7, #32
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	4613      	mov	r3, r2
 800622a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b20      	cmp	r3, #32
 8006236:	d11d      	bne.n	8006274 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <HAL_UART_Receive_IT+0x26>
 800623e:	88fb      	ldrh	r3, [r7, #6]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e016      	b.n	8006276 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800624e:	2b01      	cmp	r3, #1
 8006250:	d101      	bne.n	8006256 <HAL_UART_Receive_IT+0x38>
 8006252:	2302      	movs	r3, #2
 8006254:	e00f      	b.n	8006276 <HAL_UART_Receive_IT+0x58>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006264:	88fb      	ldrh	r3, [r7, #6]
 8006266:	461a      	mov	r2, r3
 8006268:	68b9      	ldr	r1, [r7, #8]
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 fb24 	bl	80068b8 <UART_Start_Receive_IT>
 8006270:	4603      	mov	r3, r0
 8006272:	e000      	b.n	8006276 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006274:	2302      	movs	r3, #2
  }
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
	...

08006280 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b0ba      	sub	sp, #232	; 0xe8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b6:	f003 030f 	and.w	r3, r3, #15
 80062ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80062be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10f      	bne.n	80062e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d009      	beq.n	80062e6 <HAL_UART_IRQHandler+0x66>
 80062d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fc07 	bl	8006af2 <UART_Receive_IT>
      return;
 80062e4:	e256      	b.n	8006794 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 80de 	beq.w	80064ac <HAL_UART_IRQHandler+0x22c>
 80062f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d106      	bne.n	800630a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006300:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 80d1 	beq.w	80064ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800630a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00b      	beq.n	800632e <HAL_UART_IRQHandler+0xae>
 8006316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800631a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631e:	2b00      	cmp	r3, #0
 8006320:	d005      	beq.n	800632e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	f043 0201 	orr.w	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800632e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006332:	f003 0304 	and.w	r3, r3, #4
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00b      	beq.n	8006352 <HAL_UART_IRQHandler+0xd2>
 800633a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	f043 0202 	orr.w	r2, r3, #2
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00b      	beq.n	8006376 <HAL_UART_IRQHandler+0xf6>
 800635e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	f043 0204 	orr.w	r2, r3, #4
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800637a:	f003 0308 	and.w	r3, r3, #8
 800637e:	2b00      	cmp	r3, #0
 8006380:	d011      	beq.n	80063a6 <HAL_UART_IRQHandler+0x126>
 8006382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b00      	cmp	r3, #0
 800638c:	d105      	bne.n	800639a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800638e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d005      	beq.n	80063a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	f043 0208 	orr.w	r2, r3, #8
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 81ed 	beq.w	800678a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b4:	f003 0320 	and.w	r3, r3, #32
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d008      	beq.n	80063ce <HAL_UART_IRQHandler+0x14e>
 80063bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c0:	f003 0320 	and.w	r3, r3, #32
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fb92 	bl	8006af2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d8:	2b40      	cmp	r3, #64	; 0x40
 80063da:	bf0c      	ite	eq
 80063dc:	2301      	moveq	r3, #1
 80063de:	2300      	movne	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d103      	bne.n	80063fa <HAL_UART_IRQHandler+0x17a>
 80063f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d04f      	beq.n	800649a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fa9a 	bl	8006934 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640a:	2b40      	cmp	r3, #64	; 0x40
 800640c:	d141      	bne.n	8006492 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3314      	adds	r3, #20
 8006414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006424:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800642c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3314      	adds	r3, #20
 8006436:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800643a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800643e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006442:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006446:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1d9      	bne.n	800640e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	2b00      	cmp	r3, #0
 8006460:	d013      	beq.n	800648a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	4a7d      	ldr	r2, [pc, #500]	; (800665c <HAL_UART_IRQHandler+0x3dc>)
 8006468:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	4618      	mov	r0, r3
 8006470:	f7fd fd07 	bl	8003e82 <HAL_DMA_Abort_IT>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d016      	beq.n	80064a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006484:	4610      	mov	r0, r2
 8006486:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006488:	e00e      	b.n	80064a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f990 	bl	80067b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006490:	e00a      	b.n	80064a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f98c 	bl	80067b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006498:	e006      	b.n	80064a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f988 	bl	80067b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80064a6:	e170      	b.n	800678a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a8:	bf00      	nop
    return;
 80064aa:	e16e      	b.n	800678a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	f040 814a 	bne.w	800674a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ba:	f003 0310 	and.w	r3, r3, #16
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f000 8143 	beq.w	800674a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80064c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c8:	f003 0310 	and.w	r3, r3, #16
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 813c 	beq.w	800674a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064d2:	2300      	movs	r3, #0
 80064d4:	60bb      	str	r3, [r7, #8]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	60bb      	str	r3, [r7, #8]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	60bb      	str	r3, [r7, #8]
 80064e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f2:	2b40      	cmp	r3, #64	; 0x40
 80064f4:	f040 80b4 	bne.w	8006660 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006504:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 8140 	beq.w	800678e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006516:	429a      	cmp	r2, r3
 8006518:	f080 8139 	bcs.w	800678e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006522:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800652e:	f000 8088 	beq.w	8006642 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	330c      	adds	r3, #12
 8006538:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006548:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800654c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006550:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	330c      	adds	r3, #12
 800655a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800655e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800656a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006576:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1d9      	bne.n	8006532 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3314      	adds	r3, #20
 8006584:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800658e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006590:	f023 0301 	bic.w	r3, r3, #1
 8006594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3314      	adds	r3, #20
 800659e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065ae:	e841 2300 	strex	r3, r2, [r1]
 80065b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1e1      	bne.n	800657e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3314      	adds	r3, #20
 80065c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3314      	adds	r3, #20
 80065da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e3      	bne.n	80065ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	330c      	adds	r3, #12
 8006606:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800660a:	e853 3f00 	ldrex	r3, [r3]
 800660e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006612:	f023 0310 	bic.w	r3, r3, #16
 8006616:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	330c      	adds	r3, #12
 8006620:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006624:	65ba      	str	r2, [r7, #88]	; 0x58
 8006626:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006628:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800662a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800662c:	e841 2300 	strex	r3, r2, [r1]
 8006630:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1e3      	bne.n	8006600 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	4618      	mov	r0, r3
 800663e:	f7fd fbb0 	bl	8003da2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800664a:	b29b      	uxth	r3, r3
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	b29b      	uxth	r3, r3
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f8b6 	bl	80067c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006658:	e099      	b.n	800678e <HAL_UART_IRQHandler+0x50e>
 800665a:	bf00      	nop
 800665c:	080069fb 	.word	0x080069fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006668:	b29b      	uxth	r3, r3
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006674:	b29b      	uxth	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 808b 	beq.w	8006792 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800667c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 8086 	beq.w	8006792 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	330c      	adds	r3, #12
 800668c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	e853 3f00 	ldrex	r3, [r3]
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006698:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800669c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	330c      	adds	r3, #12
 80066a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80066aa:	647a      	str	r2, [r7, #68]	; 0x44
 80066ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e3      	bne.n	8006686 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3314      	adds	r3, #20
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	623b      	str	r3, [r7, #32]
   return(result);
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	f023 0301 	bic.w	r3, r3, #1
 80066d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3314      	adds	r3, #20
 80066de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066e2:	633a      	str	r2, [r7, #48]	; 0x30
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e3      	bne.n	80066be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	330c      	adds	r3, #12
 800670a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	e853 3f00 	ldrex	r3, [r3]
 8006712:	60fb      	str	r3, [r7, #12]
   return(result);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 0310 	bic.w	r3, r3, #16
 800671a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	330c      	adds	r3, #12
 8006724:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006728:	61fa      	str	r2, [r7, #28]
 800672a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	69b9      	ldr	r1, [r7, #24]
 800672e:	69fa      	ldr	r2, [r7, #28]
 8006730:	e841 2300 	strex	r3, r2, [r1]
 8006734:	617b      	str	r3, [r7, #20]
   return(result);
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e3      	bne.n	8006704 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800673c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006740:	4619      	mov	r1, r3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f83e 	bl	80067c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006748:	e023      	b.n	8006792 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800674a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006752:	2b00      	cmp	r3, #0
 8006754:	d009      	beq.n	800676a <HAL_UART_IRQHandler+0x4ea>
 8006756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800675a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f95d 	bl	8006a22 <UART_Transmit_IT>
    return;
 8006768:	e014      	b.n	8006794 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800676a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800676e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00e      	beq.n	8006794 <HAL_UART_IRQHandler+0x514>
 8006776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b00      	cmp	r3, #0
 8006780:	d008      	beq.n	8006794 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f99d 	bl	8006ac2 <UART_EndTransmit_IT>
    return;
 8006788:	e004      	b.n	8006794 <HAL_UART_IRQHandler+0x514>
    return;
 800678a:	bf00      	nop
 800678c:	e002      	b.n	8006794 <HAL_UART_IRQHandler+0x514>
      return;
 800678e:	bf00      	nop
 8006790:	e000      	b.n	8006794 <HAL_UART_IRQHandler+0x514>
      return;
 8006792:	bf00      	nop
  }
}
 8006794:	37e8      	adds	r7, #232	; 0xe8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop

0800679c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b090      	sub	sp, #64	; 0x40
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	4613      	mov	r3, r2
 80067ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ec:	e050      	b.n	8006890 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067f4:	d04c      	beq.n	8006890 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d007      	beq.n	800680c <UART_WaitOnFlagUntilTimeout+0x30>
 80067fc:	f7fb ff2e 	bl	800265c <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006808:	429a      	cmp	r2, r3
 800680a:	d241      	bcs.n	8006890 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800682c:	637a      	str	r2, [r7, #52]	; 0x34
 800682e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800683a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e5      	bne.n	800680c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3314      	adds	r3, #20
 8006846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	e853 3f00 	ldrex	r3, [r3]
 800684e:	613b      	str	r3, [r7, #16]
   return(result);
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f023 0301 	bic.w	r3, r3, #1
 8006856:	63bb      	str	r3, [r7, #56]	; 0x38
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3314      	adds	r3, #20
 800685e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006860:	623a      	str	r2, [r7, #32]
 8006862:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006864:	69f9      	ldr	r1, [r7, #28]
 8006866:	6a3a      	ldr	r2, [r7, #32]
 8006868:	e841 2300 	strex	r3, r2, [r1]
 800686c:	61bb      	str	r3, [r7, #24]
   return(result);
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1e5      	bne.n	8006840 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e00f      	b.n	80068b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	4013      	ands	r3, r2
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	429a      	cmp	r2, r3
 800689e:	bf0c      	ite	eq
 80068a0:	2301      	moveq	r3, #1
 80068a2:	2300      	movne	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	461a      	mov	r2, r3
 80068a8:	79fb      	ldrb	r3, [r7, #7]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d09f      	beq.n	80067ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3740      	adds	r7, #64	; 0x40
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	4613      	mov	r3, r2
 80068c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	88fa      	ldrh	r2, [r7, #6]
 80068d0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	88fa      	ldrh	r2, [r7, #6]
 80068d6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2222      	movs	r2, #34	; 0x22
 80068e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d007      	beq.n	8006906 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006904:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	695a      	ldr	r2, [r3, #20]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f042 0201 	orr.w	r2, r2, #1
 8006914:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f042 0220 	orr.w	r2, r2, #32
 8006924:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006934:	b480      	push	{r7}
 8006936:	b095      	sub	sp, #84	; 0x54
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	330c      	adds	r3, #12
 8006942:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006946:	e853 3f00 	ldrex	r3, [r3]
 800694a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	330c      	adds	r3, #12
 800695a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800695c:	643a      	str	r2, [r7, #64]	; 0x40
 800695e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006960:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006962:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006964:	e841 2300 	strex	r3, r2, [r1]
 8006968:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1e5      	bne.n	800693c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3314      	adds	r3, #20
 8006976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	e853 3f00 	ldrex	r3, [r3]
 800697e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	f023 0301 	bic.w	r3, r3, #1
 8006986:	64bb      	str	r3, [r7, #72]	; 0x48
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3314      	adds	r3, #20
 800698e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006990:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006994:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006998:	e841 2300 	strex	r3, r2, [r1]
 800699c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1e5      	bne.n	8006970 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d119      	bne.n	80069e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	330c      	adds	r3, #12
 80069b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f023 0310 	bic.w	r3, r3, #16
 80069c2:	647b      	str	r3, [r7, #68]	; 0x44
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	330c      	adds	r3, #12
 80069ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069cc:	61ba      	str	r2, [r7, #24]
 80069ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	6979      	ldr	r1, [r7, #20]
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	613b      	str	r3, [r7, #16]
   return(result);
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e5      	bne.n	80069ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80069ee:	bf00      	nop
 80069f0:	3754      	adds	r7, #84	; 0x54
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f7ff fecb 	bl	80067b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a1a:	bf00      	nop
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b085      	sub	sp, #20
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b21      	cmp	r3, #33	; 0x21
 8006a34:	d13e      	bne.n	8006ab4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a3e:	d114      	bne.n	8006a6a <UART_Transmit_IT+0x48>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d110      	bne.n	8006a6a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	1c9a      	adds	r2, r3, #2
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	621a      	str	r2, [r3, #32]
 8006a68:	e008      	b.n	8006a7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	1c59      	adds	r1, r3, #1
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	6211      	str	r1, [r2, #32]
 8006a74:	781a      	ldrb	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d10f      	bne.n	8006ab0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	e000      	b.n	8006ab6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ab4:	2302      	movs	r3, #2
  }
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b082      	sub	sp, #8
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68da      	ldr	r2, [r3, #12]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ad8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2220      	movs	r2, #32
 8006ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff fe5a 	bl	800679c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b08c      	sub	sp, #48	; 0x30
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b22      	cmp	r3, #34	; 0x22
 8006b04:	f040 80ab 	bne.w	8006c5e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b10:	d117      	bne.n	8006b42 <UART_Receive_IT+0x50>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d113      	bne.n	8006b42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3a:	1c9a      	adds	r2, r3, #2
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	629a      	str	r2, [r3, #40]	; 0x28
 8006b40:	e026      	b.n	8006b90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b54:	d007      	beq.n	8006b66 <UART_Receive_IT+0x74>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10a      	bne.n	8006b74 <UART_Receive_IT+0x82>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d106      	bne.n	8006b74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	b2da      	uxtb	r2, r3
 8006b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	e008      	b.n	8006b86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d15a      	bne.n	8006c5a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0220 	bic.w	r2, r2, #32
 8006bb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	695a      	ldr	r2, [r3, #20]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f022 0201 	bic.w	r2, r2, #1
 8006bd2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d135      	bne.n	8006c50 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	330c      	adds	r3, #12
 8006bf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f023 0310 	bic.w	r3, r3, #16
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	330c      	adds	r3, #12
 8006c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c0a:	623a      	str	r2, [r7, #32]
 8006c0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	69f9      	ldr	r1, [r7, #28]
 8006c10:	6a3a      	ldr	r2, [r7, #32]
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e5      	bne.n	8006bea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0310 	and.w	r3, r3, #16
 8006c28:	2b10      	cmp	r3, #16
 8006c2a:	d10a      	bne.n	8006c42 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	60fb      	str	r3, [r7, #12]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	60fb      	str	r3, [r7, #12]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	60fb      	str	r3, [r7, #12]
 8006c40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff fdbb 	bl	80067c4 <HAL_UARTEx_RxEventCallback>
 8006c4e:	e002      	b.n	8006c56 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7fa fed3 	bl	80019fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c56:	2300      	movs	r3, #0
 8006c58:	e002      	b.n	8006c60 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e000      	b.n	8006c60 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006c5e:	2302      	movs	r3, #2
  }
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3730      	adds	r7, #48	; 0x30
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c6c:	b0c0      	sub	sp, #256	; 0x100
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c84:	68d9      	ldr	r1, [r3, #12]
 8006c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	ea40 0301 	orr.w	r3, r0, r1
 8006c90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006cc0:	f021 010c 	bic.w	r1, r1, #12
 8006cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cce:	430b      	orrs	r3, r1
 8006cd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce2:	6999      	ldr	r1, [r3, #24]
 8006ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	ea40 0301 	orr.w	r3, r0, r1
 8006cee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	4b8f      	ldr	r3, [pc, #572]	; (8006f34 <UART_SetConfig+0x2cc>)
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d005      	beq.n	8006d08 <UART_SetConfig+0xa0>
 8006cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	4b8d      	ldr	r3, [pc, #564]	; (8006f38 <UART_SetConfig+0x2d0>)
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d104      	bne.n	8006d12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d08:	f7fe fef2 	bl	8005af0 <HAL_RCC_GetPCLK2Freq>
 8006d0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006d10:	e003      	b.n	8006d1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d12:	f7fe fed9 	bl	8005ac8 <HAL_RCC_GetPCLK1Freq>
 8006d16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d24:	f040 810c 	bne.w	8006f40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d3a:	4622      	mov	r2, r4
 8006d3c:	462b      	mov	r3, r5
 8006d3e:	1891      	adds	r1, r2, r2
 8006d40:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d42:	415b      	adcs	r3, r3
 8006d44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d4a:	4621      	mov	r1, r4
 8006d4c:	eb12 0801 	adds.w	r8, r2, r1
 8006d50:	4629      	mov	r1, r5
 8006d52:	eb43 0901 	adc.w	r9, r3, r1
 8006d56:	f04f 0200 	mov.w	r2, #0
 8006d5a:	f04f 0300 	mov.w	r3, #0
 8006d5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d6a:	4690      	mov	r8, r2
 8006d6c:	4699      	mov	r9, r3
 8006d6e:	4623      	mov	r3, r4
 8006d70:	eb18 0303 	adds.w	r3, r8, r3
 8006d74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d78:	462b      	mov	r3, r5
 8006d7a:	eb49 0303 	adc.w	r3, r9, r3
 8006d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d96:	460b      	mov	r3, r1
 8006d98:	18db      	adds	r3, r3, r3
 8006d9a:	653b      	str	r3, [r7, #80]	; 0x50
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	eb42 0303 	adc.w	r3, r2, r3
 8006da2:	657b      	str	r3, [r7, #84]	; 0x54
 8006da4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006da8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006dac:	f7f9 ff4c 	bl	8000c48 <__aeabi_uldivmod>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	4b61      	ldr	r3, [pc, #388]	; (8006f3c <UART_SetConfig+0x2d4>)
 8006db6:	fba3 2302 	umull	r2, r3, r3, r2
 8006dba:	095b      	lsrs	r3, r3, #5
 8006dbc:	011c      	lsls	r4, r3, #4
 8006dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006dc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006dcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006dd0:	4642      	mov	r2, r8
 8006dd2:	464b      	mov	r3, r9
 8006dd4:	1891      	adds	r1, r2, r2
 8006dd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006dd8:	415b      	adcs	r3, r3
 8006dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ddc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006de0:	4641      	mov	r1, r8
 8006de2:	eb12 0a01 	adds.w	sl, r2, r1
 8006de6:	4649      	mov	r1, r9
 8006de8:	eb43 0b01 	adc.w	fp, r3, r1
 8006dec:	f04f 0200 	mov.w	r2, #0
 8006df0:	f04f 0300 	mov.w	r3, #0
 8006df4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006df8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006dfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e00:	4692      	mov	sl, r2
 8006e02:	469b      	mov	fp, r3
 8006e04:	4643      	mov	r3, r8
 8006e06:	eb1a 0303 	adds.w	r3, sl, r3
 8006e0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e0e:	464b      	mov	r3, r9
 8006e10:	eb4b 0303 	adc.w	r3, fp, r3
 8006e14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006e28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	18db      	adds	r3, r3, r3
 8006e30:	643b      	str	r3, [r7, #64]	; 0x40
 8006e32:	4613      	mov	r3, r2
 8006e34:	eb42 0303 	adc.w	r3, r2, r3
 8006e38:	647b      	str	r3, [r7, #68]	; 0x44
 8006e3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e42:	f7f9 ff01 	bl	8000c48 <__aeabi_uldivmod>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	4b3b      	ldr	r3, [pc, #236]	; (8006f3c <UART_SetConfig+0x2d4>)
 8006e4e:	fba3 2301 	umull	r2, r3, r3, r1
 8006e52:	095b      	lsrs	r3, r3, #5
 8006e54:	2264      	movs	r2, #100	; 0x64
 8006e56:	fb02 f303 	mul.w	r3, r2, r3
 8006e5a:	1acb      	subs	r3, r1, r3
 8006e5c:	00db      	lsls	r3, r3, #3
 8006e5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e62:	4b36      	ldr	r3, [pc, #216]	; (8006f3c <UART_SetConfig+0x2d4>)
 8006e64:	fba3 2302 	umull	r2, r3, r3, r2
 8006e68:	095b      	lsrs	r3, r3, #5
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e70:	441c      	add	r4, r3
 8006e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e84:	4642      	mov	r2, r8
 8006e86:	464b      	mov	r3, r9
 8006e88:	1891      	adds	r1, r2, r2
 8006e8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e8c:	415b      	adcs	r3, r3
 8006e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e94:	4641      	mov	r1, r8
 8006e96:	1851      	adds	r1, r2, r1
 8006e98:	6339      	str	r1, [r7, #48]	; 0x30
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	414b      	adcs	r3, r1
 8006e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea0:	f04f 0200 	mov.w	r2, #0
 8006ea4:	f04f 0300 	mov.w	r3, #0
 8006ea8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006eac:	4659      	mov	r1, fp
 8006eae:	00cb      	lsls	r3, r1, #3
 8006eb0:	4651      	mov	r1, sl
 8006eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eb6:	4651      	mov	r1, sl
 8006eb8:	00ca      	lsls	r2, r1, #3
 8006eba:	4610      	mov	r0, r2
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	4642      	mov	r2, r8
 8006ec2:	189b      	adds	r3, r3, r2
 8006ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ec8:	464b      	mov	r3, r9
 8006eca:	460a      	mov	r2, r1
 8006ecc:	eb42 0303 	adc.w	r3, r2, r3
 8006ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ee0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006ee4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006ee8:	460b      	mov	r3, r1
 8006eea:	18db      	adds	r3, r3, r3
 8006eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eee:	4613      	mov	r3, r2
 8006ef0:	eb42 0303 	adc.w	r3, r2, r3
 8006ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ef6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006efa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006efe:	f7f9 fea3 	bl	8000c48 <__aeabi_uldivmod>
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	4b0d      	ldr	r3, [pc, #52]	; (8006f3c <UART_SetConfig+0x2d4>)
 8006f08:	fba3 1302 	umull	r1, r3, r3, r2
 8006f0c:	095b      	lsrs	r3, r3, #5
 8006f0e:	2164      	movs	r1, #100	; 0x64
 8006f10:	fb01 f303 	mul.w	r3, r1, r3
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	3332      	adds	r3, #50	; 0x32
 8006f1a:	4a08      	ldr	r2, [pc, #32]	; (8006f3c <UART_SetConfig+0x2d4>)
 8006f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f20:	095b      	lsrs	r3, r3, #5
 8006f22:	f003 0207 	and.w	r2, r3, #7
 8006f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4422      	add	r2, r4
 8006f2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f30:	e105      	b.n	800713e <UART_SetConfig+0x4d6>
 8006f32:	bf00      	nop
 8006f34:	40011000 	.word	0x40011000
 8006f38:	40011400 	.word	0x40011400
 8006f3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f44:	2200      	movs	r2, #0
 8006f46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f52:	4642      	mov	r2, r8
 8006f54:	464b      	mov	r3, r9
 8006f56:	1891      	adds	r1, r2, r2
 8006f58:	6239      	str	r1, [r7, #32]
 8006f5a:	415b      	adcs	r3, r3
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f62:	4641      	mov	r1, r8
 8006f64:	1854      	adds	r4, r2, r1
 8006f66:	4649      	mov	r1, r9
 8006f68:	eb43 0501 	adc.w	r5, r3, r1
 8006f6c:	f04f 0200 	mov.w	r2, #0
 8006f70:	f04f 0300 	mov.w	r3, #0
 8006f74:	00eb      	lsls	r3, r5, #3
 8006f76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f7a:	00e2      	lsls	r2, r4, #3
 8006f7c:	4614      	mov	r4, r2
 8006f7e:	461d      	mov	r5, r3
 8006f80:	4643      	mov	r3, r8
 8006f82:	18e3      	adds	r3, r4, r3
 8006f84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f88:	464b      	mov	r3, r9
 8006f8a:	eb45 0303 	adc.w	r3, r5, r3
 8006f8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fa2:	f04f 0200 	mov.w	r2, #0
 8006fa6:	f04f 0300 	mov.w	r3, #0
 8006faa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006fae:	4629      	mov	r1, r5
 8006fb0:	008b      	lsls	r3, r1, #2
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fb8:	4621      	mov	r1, r4
 8006fba:	008a      	lsls	r2, r1, #2
 8006fbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006fc0:	f7f9 fe42 	bl	8000c48 <__aeabi_uldivmod>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4b60      	ldr	r3, [pc, #384]	; (800714c <UART_SetConfig+0x4e4>)
 8006fca:	fba3 2302 	umull	r2, r3, r3, r2
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	011c      	lsls	r4, r3, #4
 8006fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006fdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006fe0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006fe4:	4642      	mov	r2, r8
 8006fe6:	464b      	mov	r3, r9
 8006fe8:	1891      	adds	r1, r2, r2
 8006fea:	61b9      	str	r1, [r7, #24]
 8006fec:	415b      	adcs	r3, r3
 8006fee:	61fb      	str	r3, [r7, #28]
 8006ff0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ff4:	4641      	mov	r1, r8
 8006ff6:	1851      	adds	r1, r2, r1
 8006ff8:	6139      	str	r1, [r7, #16]
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	414b      	adcs	r3, r1
 8006ffe:	617b      	str	r3, [r7, #20]
 8007000:	f04f 0200 	mov.w	r2, #0
 8007004:	f04f 0300 	mov.w	r3, #0
 8007008:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800700c:	4659      	mov	r1, fp
 800700e:	00cb      	lsls	r3, r1, #3
 8007010:	4651      	mov	r1, sl
 8007012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007016:	4651      	mov	r1, sl
 8007018:	00ca      	lsls	r2, r1, #3
 800701a:	4610      	mov	r0, r2
 800701c:	4619      	mov	r1, r3
 800701e:	4603      	mov	r3, r0
 8007020:	4642      	mov	r2, r8
 8007022:	189b      	adds	r3, r3, r2
 8007024:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007028:	464b      	mov	r3, r9
 800702a:	460a      	mov	r2, r1
 800702c:	eb42 0303 	adc.w	r3, r2, r3
 8007030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	67bb      	str	r3, [r7, #120]	; 0x78
 800703e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	f04f 0300 	mov.w	r3, #0
 8007048:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800704c:	4649      	mov	r1, r9
 800704e:	008b      	lsls	r3, r1, #2
 8007050:	4641      	mov	r1, r8
 8007052:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007056:	4641      	mov	r1, r8
 8007058:	008a      	lsls	r2, r1, #2
 800705a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800705e:	f7f9 fdf3 	bl	8000c48 <__aeabi_uldivmod>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4b39      	ldr	r3, [pc, #228]	; (800714c <UART_SetConfig+0x4e4>)
 8007068:	fba3 1302 	umull	r1, r3, r3, r2
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	2164      	movs	r1, #100	; 0x64
 8007070:	fb01 f303 	mul.w	r3, r1, r3
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	3332      	adds	r3, #50	; 0x32
 800707a:	4a34      	ldr	r2, [pc, #208]	; (800714c <UART_SetConfig+0x4e4>)
 800707c:	fba2 2303 	umull	r2, r3, r2, r3
 8007080:	095b      	lsrs	r3, r3, #5
 8007082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007086:	441c      	add	r4, r3
 8007088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800708c:	2200      	movs	r2, #0
 800708e:	673b      	str	r3, [r7, #112]	; 0x70
 8007090:	677a      	str	r2, [r7, #116]	; 0x74
 8007092:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007096:	4642      	mov	r2, r8
 8007098:	464b      	mov	r3, r9
 800709a:	1891      	adds	r1, r2, r2
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	415b      	adcs	r3, r3
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070a6:	4641      	mov	r1, r8
 80070a8:	1851      	adds	r1, r2, r1
 80070aa:	6039      	str	r1, [r7, #0]
 80070ac:	4649      	mov	r1, r9
 80070ae:	414b      	adcs	r3, r1
 80070b0:	607b      	str	r3, [r7, #4]
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	f04f 0300 	mov.w	r3, #0
 80070ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070be:	4659      	mov	r1, fp
 80070c0:	00cb      	lsls	r3, r1, #3
 80070c2:	4651      	mov	r1, sl
 80070c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070c8:	4651      	mov	r1, sl
 80070ca:	00ca      	lsls	r2, r1, #3
 80070cc:	4610      	mov	r0, r2
 80070ce:	4619      	mov	r1, r3
 80070d0:	4603      	mov	r3, r0
 80070d2:	4642      	mov	r2, r8
 80070d4:	189b      	adds	r3, r3, r2
 80070d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80070d8:	464b      	mov	r3, r9
 80070da:	460a      	mov	r2, r1
 80070dc:	eb42 0303 	adc.w	r3, r2, r3
 80070e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	663b      	str	r3, [r7, #96]	; 0x60
 80070ec:	667a      	str	r2, [r7, #100]	; 0x64
 80070ee:	f04f 0200 	mov.w	r2, #0
 80070f2:	f04f 0300 	mov.w	r3, #0
 80070f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80070fa:	4649      	mov	r1, r9
 80070fc:	008b      	lsls	r3, r1, #2
 80070fe:	4641      	mov	r1, r8
 8007100:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007104:	4641      	mov	r1, r8
 8007106:	008a      	lsls	r2, r1, #2
 8007108:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800710c:	f7f9 fd9c 	bl	8000c48 <__aeabi_uldivmod>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4b0d      	ldr	r3, [pc, #52]	; (800714c <UART_SetConfig+0x4e4>)
 8007116:	fba3 1302 	umull	r1, r3, r3, r2
 800711a:	095b      	lsrs	r3, r3, #5
 800711c:	2164      	movs	r1, #100	; 0x64
 800711e:	fb01 f303 	mul.w	r3, r1, r3
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	011b      	lsls	r3, r3, #4
 8007126:	3332      	adds	r3, #50	; 0x32
 8007128:	4a08      	ldr	r2, [pc, #32]	; (800714c <UART_SetConfig+0x4e4>)
 800712a:	fba2 2303 	umull	r2, r3, r2, r3
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	f003 020f 	and.w	r2, r3, #15
 8007134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4422      	add	r2, r4
 800713c:	609a      	str	r2, [r3, #8]
}
 800713e:	bf00      	nop
 8007140:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007144:	46bd      	mov	sp, r7
 8007146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800714a:	bf00      	nop
 800714c:	51eb851f 	.word	0x51eb851f

08007150 <__errno>:
 8007150:	4b01      	ldr	r3, [pc, #4]	; (8007158 <__errno+0x8>)
 8007152:	6818      	ldr	r0, [r3, #0]
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	2000000c 	.word	0x2000000c

0800715c <__libc_init_array>:
 800715c:	b570      	push	{r4, r5, r6, lr}
 800715e:	4d0d      	ldr	r5, [pc, #52]	; (8007194 <__libc_init_array+0x38>)
 8007160:	4c0d      	ldr	r4, [pc, #52]	; (8007198 <__libc_init_array+0x3c>)
 8007162:	1b64      	subs	r4, r4, r5
 8007164:	10a4      	asrs	r4, r4, #2
 8007166:	2600      	movs	r6, #0
 8007168:	42a6      	cmp	r6, r4
 800716a:	d109      	bne.n	8007180 <__libc_init_array+0x24>
 800716c:	4d0b      	ldr	r5, [pc, #44]	; (800719c <__libc_init_array+0x40>)
 800716e:	4c0c      	ldr	r4, [pc, #48]	; (80071a0 <__libc_init_array+0x44>)
 8007170:	f003 fbd0 	bl	800a914 <_init>
 8007174:	1b64      	subs	r4, r4, r5
 8007176:	10a4      	asrs	r4, r4, #2
 8007178:	2600      	movs	r6, #0
 800717a:	42a6      	cmp	r6, r4
 800717c:	d105      	bne.n	800718a <__libc_init_array+0x2e>
 800717e:	bd70      	pop	{r4, r5, r6, pc}
 8007180:	f855 3b04 	ldr.w	r3, [r5], #4
 8007184:	4798      	blx	r3
 8007186:	3601      	adds	r6, #1
 8007188:	e7ee      	b.n	8007168 <__libc_init_array+0xc>
 800718a:	f855 3b04 	ldr.w	r3, [r5], #4
 800718e:	4798      	blx	r3
 8007190:	3601      	adds	r6, #1
 8007192:	e7f2      	b.n	800717a <__libc_init_array+0x1e>
 8007194:	0800ae4c 	.word	0x0800ae4c
 8007198:	0800ae4c 	.word	0x0800ae4c
 800719c:	0800ae4c 	.word	0x0800ae4c
 80071a0:	0800ae50 	.word	0x0800ae50

080071a4 <memset>:
 80071a4:	4402      	add	r2, r0
 80071a6:	4603      	mov	r3, r0
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d100      	bne.n	80071ae <memset+0xa>
 80071ac:	4770      	bx	lr
 80071ae:	f803 1b01 	strb.w	r1, [r3], #1
 80071b2:	e7f9      	b.n	80071a8 <memset+0x4>

080071b4 <__cvt>:
 80071b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071b8:	ec55 4b10 	vmov	r4, r5, d0
 80071bc:	2d00      	cmp	r5, #0
 80071be:	460e      	mov	r6, r1
 80071c0:	4619      	mov	r1, r3
 80071c2:	462b      	mov	r3, r5
 80071c4:	bfbb      	ittet	lt
 80071c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80071ca:	461d      	movlt	r5, r3
 80071cc:	2300      	movge	r3, #0
 80071ce:	232d      	movlt	r3, #45	; 0x2d
 80071d0:	700b      	strb	r3, [r1, #0]
 80071d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80071d8:	4691      	mov	r9, r2
 80071da:	f023 0820 	bic.w	r8, r3, #32
 80071de:	bfbc      	itt	lt
 80071e0:	4622      	movlt	r2, r4
 80071e2:	4614      	movlt	r4, r2
 80071e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071e8:	d005      	beq.n	80071f6 <__cvt+0x42>
 80071ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80071ee:	d100      	bne.n	80071f2 <__cvt+0x3e>
 80071f0:	3601      	adds	r6, #1
 80071f2:	2102      	movs	r1, #2
 80071f4:	e000      	b.n	80071f8 <__cvt+0x44>
 80071f6:	2103      	movs	r1, #3
 80071f8:	ab03      	add	r3, sp, #12
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	ab02      	add	r3, sp, #8
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	ec45 4b10 	vmov	d0, r4, r5
 8007204:	4653      	mov	r3, sl
 8007206:	4632      	mov	r2, r6
 8007208:	f000 fd92 	bl	8007d30 <_dtoa_r>
 800720c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007210:	4607      	mov	r7, r0
 8007212:	d102      	bne.n	800721a <__cvt+0x66>
 8007214:	f019 0f01 	tst.w	r9, #1
 8007218:	d022      	beq.n	8007260 <__cvt+0xac>
 800721a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800721e:	eb07 0906 	add.w	r9, r7, r6
 8007222:	d110      	bne.n	8007246 <__cvt+0x92>
 8007224:	783b      	ldrb	r3, [r7, #0]
 8007226:	2b30      	cmp	r3, #48	; 0x30
 8007228:	d10a      	bne.n	8007240 <__cvt+0x8c>
 800722a:	2200      	movs	r2, #0
 800722c:	2300      	movs	r3, #0
 800722e:	4620      	mov	r0, r4
 8007230:	4629      	mov	r1, r5
 8007232:	f7f9 fc49 	bl	8000ac8 <__aeabi_dcmpeq>
 8007236:	b918      	cbnz	r0, 8007240 <__cvt+0x8c>
 8007238:	f1c6 0601 	rsb	r6, r6, #1
 800723c:	f8ca 6000 	str.w	r6, [sl]
 8007240:	f8da 3000 	ldr.w	r3, [sl]
 8007244:	4499      	add	r9, r3
 8007246:	2200      	movs	r2, #0
 8007248:	2300      	movs	r3, #0
 800724a:	4620      	mov	r0, r4
 800724c:	4629      	mov	r1, r5
 800724e:	f7f9 fc3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007252:	b108      	cbz	r0, 8007258 <__cvt+0xa4>
 8007254:	f8cd 900c 	str.w	r9, [sp, #12]
 8007258:	2230      	movs	r2, #48	; 0x30
 800725a:	9b03      	ldr	r3, [sp, #12]
 800725c:	454b      	cmp	r3, r9
 800725e:	d307      	bcc.n	8007270 <__cvt+0xbc>
 8007260:	9b03      	ldr	r3, [sp, #12]
 8007262:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007264:	1bdb      	subs	r3, r3, r7
 8007266:	4638      	mov	r0, r7
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	b004      	add	sp, #16
 800726c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007270:	1c59      	adds	r1, r3, #1
 8007272:	9103      	str	r1, [sp, #12]
 8007274:	701a      	strb	r2, [r3, #0]
 8007276:	e7f0      	b.n	800725a <__cvt+0xa6>

08007278 <__exponent>:
 8007278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800727a:	4603      	mov	r3, r0
 800727c:	2900      	cmp	r1, #0
 800727e:	bfb8      	it	lt
 8007280:	4249      	neglt	r1, r1
 8007282:	f803 2b02 	strb.w	r2, [r3], #2
 8007286:	bfb4      	ite	lt
 8007288:	222d      	movlt	r2, #45	; 0x2d
 800728a:	222b      	movge	r2, #43	; 0x2b
 800728c:	2909      	cmp	r1, #9
 800728e:	7042      	strb	r2, [r0, #1]
 8007290:	dd2a      	ble.n	80072e8 <__exponent+0x70>
 8007292:	f10d 0407 	add.w	r4, sp, #7
 8007296:	46a4      	mov	ip, r4
 8007298:	270a      	movs	r7, #10
 800729a:	46a6      	mov	lr, r4
 800729c:	460a      	mov	r2, r1
 800729e:	fb91 f6f7 	sdiv	r6, r1, r7
 80072a2:	fb07 1516 	mls	r5, r7, r6, r1
 80072a6:	3530      	adds	r5, #48	; 0x30
 80072a8:	2a63      	cmp	r2, #99	; 0x63
 80072aa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80072ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80072b2:	4631      	mov	r1, r6
 80072b4:	dcf1      	bgt.n	800729a <__exponent+0x22>
 80072b6:	3130      	adds	r1, #48	; 0x30
 80072b8:	f1ae 0502 	sub.w	r5, lr, #2
 80072bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80072c0:	1c44      	adds	r4, r0, #1
 80072c2:	4629      	mov	r1, r5
 80072c4:	4561      	cmp	r1, ip
 80072c6:	d30a      	bcc.n	80072de <__exponent+0x66>
 80072c8:	f10d 0209 	add.w	r2, sp, #9
 80072cc:	eba2 020e 	sub.w	r2, r2, lr
 80072d0:	4565      	cmp	r5, ip
 80072d2:	bf88      	it	hi
 80072d4:	2200      	movhi	r2, #0
 80072d6:	4413      	add	r3, r2
 80072d8:	1a18      	subs	r0, r3, r0
 80072da:	b003      	add	sp, #12
 80072dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80072e6:	e7ed      	b.n	80072c4 <__exponent+0x4c>
 80072e8:	2330      	movs	r3, #48	; 0x30
 80072ea:	3130      	adds	r1, #48	; 0x30
 80072ec:	7083      	strb	r3, [r0, #2]
 80072ee:	70c1      	strb	r1, [r0, #3]
 80072f0:	1d03      	adds	r3, r0, #4
 80072f2:	e7f1      	b.n	80072d8 <__exponent+0x60>

080072f4 <_printf_float>:
 80072f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f8:	ed2d 8b02 	vpush	{d8}
 80072fc:	b08d      	sub	sp, #52	; 0x34
 80072fe:	460c      	mov	r4, r1
 8007300:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007304:	4616      	mov	r6, r2
 8007306:	461f      	mov	r7, r3
 8007308:	4605      	mov	r5, r0
 800730a:	f001 faff 	bl	800890c <_localeconv_r>
 800730e:	f8d0 a000 	ldr.w	sl, [r0]
 8007312:	4650      	mov	r0, sl
 8007314:	f7f8 ff5c 	bl	80001d0 <strlen>
 8007318:	2300      	movs	r3, #0
 800731a:	930a      	str	r3, [sp, #40]	; 0x28
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	9305      	str	r3, [sp, #20]
 8007320:	f8d8 3000 	ldr.w	r3, [r8]
 8007324:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007328:	3307      	adds	r3, #7
 800732a:	f023 0307 	bic.w	r3, r3, #7
 800732e:	f103 0208 	add.w	r2, r3, #8
 8007332:	f8c8 2000 	str.w	r2, [r8]
 8007336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800733e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007342:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007346:	9307      	str	r3, [sp, #28]
 8007348:	f8cd 8018 	str.w	r8, [sp, #24]
 800734c:	ee08 0a10 	vmov	s16, r0
 8007350:	4b9f      	ldr	r3, [pc, #636]	; (80075d0 <_printf_float+0x2dc>)
 8007352:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007356:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800735a:	f7f9 fbe7 	bl	8000b2c <__aeabi_dcmpun>
 800735e:	bb88      	cbnz	r0, 80073c4 <_printf_float+0xd0>
 8007360:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007364:	4b9a      	ldr	r3, [pc, #616]	; (80075d0 <_printf_float+0x2dc>)
 8007366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800736a:	f7f9 fbc1 	bl	8000af0 <__aeabi_dcmple>
 800736e:	bb48      	cbnz	r0, 80073c4 <_printf_float+0xd0>
 8007370:	2200      	movs	r2, #0
 8007372:	2300      	movs	r3, #0
 8007374:	4640      	mov	r0, r8
 8007376:	4649      	mov	r1, r9
 8007378:	f7f9 fbb0 	bl	8000adc <__aeabi_dcmplt>
 800737c:	b110      	cbz	r0, 8007384 <_printf_float+0x90>
 800737e:	232d      	movs	r3, #45	; 0x2d
 8007380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007384:	4b93      	ldr	r3, [pc, #588]	; (80075d4 <_printf_float+0x2e0>)
 8007386:	4894      	ldr	r0, [pc, #592]	; (80075d8 <_printf_float+0x2e4>)
 8007388:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800738c:	bf94      	ite	ls
 800738e:	4698      	movls	r8, r3
 8007390:	4680      	movhi	r8, r0
 8007392:	2303      	movs	r3, #3
 8007394:	6123      	str	r3, [r4, #16]
 8007396:	9b05      	ldr	r3, [sp, #20]
 8007398:	f023 0204 	bic.w	r2, r3, #4
 800739c:	6022      	str	r2, [r4, #0]
 800739e:	f04f 0900 	mov.w	r9, #0
 80073a2:	9700      	str	r7, [sp, #0]
 80073a4:	4633      	mov	r3, r6
 80073a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80073a8:	4621      	mov	r1, r4
 80073aa:	4628      	mov	r0, r5
 80073ac:	f000 f9d8 	bl	8007760 <_printf_common>
 80073b0:	3001      	adds	r0, #1
 80073b2:	f040 8090 	bne.w	80074d6 <_printf_float+0x1e2>
 80073b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073ba:	b00d      	add	sp, #52	; 0x34
 80073bc:	ecbd 8b02 	vpop	{d8}
 80073c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c4:	4642      	mov	r2, r8
 80073c6:	464b      	mov	r3, r9
 80073c8:	4640      	mov	r0, r8
 80073ca:	4649      	mov	r1, r9
 80073cc:	f7f9 fbae 	bl	8000b2c <__aeabi_dcmpun>
 80073d0:	b140      	cbz	r0, 80073e4 <_printf_float+0xf0>
 80073d2:	464b      	mov	r3, r9
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	bfbc      	itt	lt
 80073d8:	232d      	movlt	r3, #45	; 0x2d
 80073da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80073de:	487f      	ldr	r0, [pc, #508]	; (80075dc <_printf_float+0x2e8>)
 80073e0:	4b7f      	ldr	r3, [pc, #508]	; (80075e0 <_printf_float+0x2ec>)
 80073e2:	e7d1      	b.n	8007388 <_printf_float+0x94>
 80073e4:	6863      	ldr	r3, [r4, #4]
 80073e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80073ea:	9206      	str	r2, [sp, #24]
 80073ec:	1c5a      	adds	r2, r3, #1
 80073ee:	d13f      	bne.n	8007470 <_printf_float+0x17c>
 80073f0:	2306      	movs	r3, #6
 80073f2:	6063      	str	r3, [r4, #4]
 80073f4:	9b05      	ldr	r3, [sp, #20]
 80073f6:	6861      	ldr	r1, [r4, #4]
 80073f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80073fc:	2300      	movs	r3, #0
 80073fe:	9303      	str	r3, [sp, #12]
 8007400:	ab0a      	add	r3, sp, #40	; 0x28
 8007402:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007406:	ab09      	add	r3, sp, #36	; 0x24
 8007408:	ec49 8b10 	vmov	d0, r8, r9
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	6022      	str	r2, [r4, #0]
 8007410:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007414:	4628      	mov	r0, r5
 8007416:	f7ff fecd 	bl	80071b4 <__cvt>
 800741a:	9b06      	ldr	r3, [sp, #24]
 800741c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800741e:	2b47      	cmp	r3, #71	; 0x47
 8007420:	4680      	mov	r8, r0
 8007422:	d108      	bne.n	8007436 <_printf_float+0x142>
 8007424:	1cc8      	adds	r0, r1, #3
 8007426:	db02      	blt.n	800742e <_printf_float+0x13a>
 8007428:	6863      	ldr	r3, [r4, #4]
 800742a:	4299      	cmp	r1, r3
 800742c:	dd41      	ble.n	80074b2 <_printf_float+0x1be>
 800742e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007432:	fa5f fb8b 	uxtb.w	fp, fp
 8007436:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800743a:	d820      	bhi.n	800747e <_printf_float+0x18a>
 800743c:	3901      	subs	r1, #1
 800743e:	465a      	mov	r2, fp
 8007440:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007444:	9109      	str	r1, [sp, #36]	; 0x24
 8007446:	f7ff ff17 	bl	8007278 <__exponent>
 800744a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800744c:	1813      	adds	r3, r2, r0
 800744e:	2a01      	cmp	r2, #1
 8007450:	4681      	mov	r9, r0
 8007452:	6123      	str	r3, [r4, #16]
 8007454:	dc02      	bgt.n	800745c <_printf_float+0x168>
 8007456:	6822      	ldr	r2, [r4, #0]
 8007458:	07d2      	lsls	r2, r2, #31
 800745a:	d501      	bpl.n	8007460 <_printf_float+0x16c>
 800745c:	3301      	adds	r3, #1
 800745e:	6123      	str	r3, [r4, #16]
 8007460:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007464:	2b00      	cmp	r3, #0
 8007466:	d09c      	beq.n	80073a2 <_printf_float+0xae>
 8007468:	232d      	movs	r3, #45	; 0x2d
 800746a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800746e:	e798      	b.n	80073a2 <_printf_float+0xae>
 8007470:	9a06      	ldr	r2, [sp, #24]
 8007472:	2a47      	cmp	r2, #71	; 0x47
 8007474:	d1be      	bne.n	80073f4 <_printf_float+0x100>
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1bc      	bne.n	80073f4 <_printf_float+0x100>
 800747a:	2301      	movs	r3, #1
 800747c:	e7b9      	b.n	80073f2 <_printf_float+0xfe>
 800747e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007482:	d118      	bne.n	80074b6 <_printf_float+0x1c2>
 8007484:	2900      	cmp	r1, #0
 8007486:	6863      	ldr	r3, [r4, #4]
 8007488:	dd0b      	ble.n	80074a2 <_printf_float+0x1ae>
 800748a:	6121      	str	r1, [r4, #16]
 800748c:	b913      	cbnz	r3, 8007494 <_printf_float+0x1a0>
 800748e:	6822      	ldr	r2, [r4, #0]
 8007490:	07d0      	lsls	r0, r2, #31
 8007492:	d502      	bpl.n	800749a <_printf_float+0x1a6>
 8007494:	3301      	adds	r3, #1
 8007496:	440b      	add	r3, r1
 8007498:	6123      	str	r3, [r4, #16]
 800749a:	65a1      	str	r1, [r4, #88]	; 0x58
 800749c:	f04f 0900 	mov.w	r9, #0
 80074a0:	e7de      	b.n	8007460 <_printf_float+0x16c>
 80074a2:	b913      	cbnz	r3, 80074aa <_printf_float+0x1b6>
 80074a4:	6822      	ldr	r2, [r4, #0]
 80074a6:	07d2      	lsls	r2, r2, #31
 80074a8:	d501      	bpl.n	80074ae <_printf_float+0x1ba>
 80074aa:	3302      	adds	r3, #2
 80074ac:	e7f4      	b.n	8007498 <_printf_float+0x1a4>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e7f2      	b.n	8007498 <_printf_float+0x1a4>
 80074b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80074b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074b8:	4299      	cmp	r1, r3
 80074ba:	db05      	blt.n	80074c8 <_printf_float+0x1d4>
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	6121      	str	r1, [r4, #16]
 80074c0:	07d8      	lsls	r0, r3, #31
 80074c2:	d5ea      	bpl.n	800749a <_printf_float+0x1a6>
 80074c4:	1c4b      	adds	r3, r1, #1
 80074c6:	e7e7      	b.n	8007498 <_printf_float+0x1a4>
 80074c8:	2900      	cmp	r1, #0
 80074ca:	bfd4      	ite	le
 80074cc:	f1c1 0202 	rsble	r2, r1, #2
 80074d0:	2201      	movgt	r2, #1
 80074d2:	4413      	add	r3, r2
 80074d4:	e7e0      	b.n	8007498 <_printf_float+0x1a4>
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	055a      	lsls	r2, r3, #21
 80074da:	d407      	bmi.n	80074ec <_printf_float+0x1f8>
 80074dc:	6923      	ldr	r3, [r4, #16]
 80074de:	4642      	mov	r2, r8
 80074e0:	4631      	mov	r1, r6
 80074e2:	4628      	mov	r0, r5
 80074e4:	47b8      	blx	r7
 80074e6:	3001      	adds	r0, #1
 80074e8:	d12c      	bne.n	8007544 <_printf_float+0x250>
 80074ea:	e764      	b.n	80073b6 <_printf_float+0xc2>
 80074ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074f0:	f240 80e0 	bls.w	80076b4 <_printf_float+0x3c0>
 80074f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074f8:	2200      	movs	r2, #0
 80074fa:	2300      	movs	r3, #0
 80074fc:	f7f9 fae4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007500:	2800      	cmp	r0, #0
 8007502:	d034      	beq.n	800756e <_printf_float+0x27a>
 8007504:	4a37      	ldr	r2, [pc, #220]	; (80075e4 <_printf_float+0x2f0>)
 8007506:	2301      	movs	r3, #1
 8007508:	4631      	mov	r1, r6
 800750a:	4628      	mov	r0, r5
 800750c:	47b8      	blx	r7
 800750e:	3001      	adds	r0, #1
 8007510:	f43f af51 	beq.w	80073b6 <_printf_float+0xc2>
 8007514:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007518:	429a      	cmp	r2, r3
 800751a:	db02      	blt.n	8007522 <_printf_float+0x22e>
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	07d8      	lsls	r0, r3, #31
 8007520:	d510      	bpl.n	8007544 <_printf_float+0x250>
 8007522:	ee18 3a10 	vmov	r3, s16
 8007526:	4652      	mov	r2, sl
 8007528:	4631      	mov	r1, r6
 800752a:	4628      	mov	r0, r5
 800752c:	47b8      	blx	r7
 800752e:	3001      	adds	r0, #1
 8007530:	f43f af41 	beq.w	80073b6 <_printf_float+0xc2>
 8007534:	f04f 0800 	mov.w	r8, #0
 8007538:	f104 091a 	add.w	r9, r4, #26
 800753c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800753e:	3b01      	subs	r3, #1
 8007540:	4543      	cmp	r3, r8
 8007542:	dc09      	bgt.n	8007558 <_printf_float+0x264>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	079b      	lsls	r3, r3, #30
 8007548:	f100 8105 	bmi.w	8007756 <_printf_float+0x462>
 800754c:	68e0      	ldr	r0, [r4, #12]
 800754e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007550:	4298      	cmp	r0, r3
 8007552:	bfb8      	it	lt
 8007554:	4618      	movlt	r0, r3
 8007556:	e730      	b.n	80073ba <_printf_float+0xc6>
 8007558:	2301      	movs	r3, #1
 800755a:	464a      	mov	r2, r9
 800755c:	4631      	mov	r1, r6
 800755e:	4628      	mov	r0, r5
 8007560:	47b8      	blx	r7
 8007562:	3001      	adds	r0, #1
 8007564:	f43f af27 	beq.w	80073b6 <_printf_float+0xc2>
 8007568:	f108 0801 	add.w	r8, r8, #1
 800756c:	e7e6      	b.n	800753c <_printf_float+0x248>
 800756e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007570:	2b00      	cmp	r3, #0
 8007572:	dc39      	bgt.n	80075e8 <_printf_float+0x2f4>
 8007574:	4a1b      	ldr	r2, [pc, #108]	; (80075e4 <_printf_float+0x2f0>)
 8007576:	2301      	movs	r3, #1
 8007578:	4631      	mov	r1, r6
 800757a:	4628      	mov	r0, r5
 800757c:	47b8      	blx	r7
 800757e:	3001      	adds	r0, #1
 8007580:	f43f af19 	beq.w	80073b6 <_printf_float+0xc2>
 8007584:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007588:	4313      	orrs	r3, r2
 800758a:	d102      	bne.n	8007592 <_printf_float+0x29e>
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	07d9      	lsls	r1, r3, #31
 8007590:	d5d8      	bpl.n	8007544 <_printf_float+0x250>
 8007592:	ee18 3a10 	vmov	r3, s16
 8007596:	4652      	mov	r2, sl
 8007598:	4631      	mov	r1, r6
 800759a:	4628      	mov	r0, r5
 800759c:	47b8      	blx	r7
 800759e:	3001      	adds	r0, #1
 80075a0:	f43f af09 	beq.w	80073b6 <_printf_float+0xc2>
 80075a4:	f04f 0900 	mov.w	r9, #0
 80075a8:	f104 0a1a 	add.w	sl, r4, #26
 80075ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ae:	425b      	negs	r3, r3
 80075b0:	454b      	cmp	r3, r9
 80075b2:	dc01      	bgt.n	80075b8 <_printf_float+0x2c4>
 80075b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b6:	e792      	b.n	80074de <_printf_float+0x1ea>
 80075b8:	2301      	movs	r3, #1
 80075ba:	4652      	mov	r2, sl
 80075bc:	4631      	mov	r1, r6
 80075be:	4628      	mov	r0, r5
 80075c0:	47b8      	blx	r7
 80075c2:	3001      	adds	r0, #1
 80075c4:	f43f aef7 	beq.w	80073b6 <_printf_float+0xc2>
 80075c8:	f109 0901 	add.w	r9, r9, #1
 80075cc:	e7ee      	b.n	80075ac <_printf_float+0x2b8>
 80075ce:	bf00      	nop
 80075d0:	7fefffff 	.word	0x7fefffff
 80075d4:	0800aa4c 	.word	0x0800aa4c
 80075d8:	0800aa50 	.word	0x0800aa50
 80075dc:	0800aa58 	.word	0x0800aa58
 80075e0:	0800aa54 	.word	0x0800aa54
 80075e4:	0800ac81 	.word	0x0800ac81
 80075e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075ec:	429a      	cmp	r2, r3
 80075ee:	bfa8      	it	ge
 80075f0:	461a      	movge	r2, r3
 80075f2:	2a00      	cmp	r2, #0
 80075f4:	4691      	mov	r9, r2
 80075f6:	dc37      	bgt.n	8007668 <_printf_float+0x374>
 80075f8:	f04f 0b00 	mov.w	fp, #0
 80075fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007600:	f104 021a 	add.w	r2, r4, #26
 8007604:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007606:	9305      	str	r3, [sp, #20]
 8007608:	eba3 0309 	sub.w	r3, r3, r9
 800760c:	455b      	cmp	r3, fp
 800760e:	dc33      	bgt.n	8007678 <_printf_float+0x384>
 8007610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007614:	429a      	cmp	r2, r3
 8007616:	db3b      	blt.n	8007690 <_printf_float+0x39c>
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	07da      	lsls	r2, r3, #31
 800761c:	d438      	bmi.n	8007690 <_printf_float+0x39c>
 800761e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007620:	9a05      	ldr	r2, [sp, #20]
 8007622:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007624:	1a9a      	subs	r2, r3, r2
 8007626:	eba3 0901 	sub.w	r9, r3, r1
 800762a:	4591      	cmp	r9, r2
 800762c:	bfa8      	it	ge
 800762e:	4691      	movge	r9, r2
 8007630:	f1b9 0f00 	cmp.w	r9, #0
 8007634:	dc35      	bgt.n	80076a2 <_printf_float+0x3ae>
 8007636:	f04f 0800 	mov.w	r8, #0
 800763a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800763e:	f104 0a1a 	add.w	sl, r4, #26
 8007642:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007646:	1a9b      	subs	r3, r3, r2
 8007648:	eba3 0309 	sub.w	r3, r3, r9
 800764c:	4543      	cmp	r3, r8
 800764e:	f77f af79 	ble.w	8007544 <_printf_float+0x250>
 8007652:	2301      	movs	r3, #1
 8007654:	4652      	mov	r2, sl
 8007656:	4631      	mov	r1, r6
 8007658:	4628      	mov	r0, r5
 800765a:	47b8      	blx	r7
 800765c:	3001      	adds	r0, #1
 800765e:	f43f aeaa 	beq.w	80073b6 <_printf_float+0xc2>
 8007662:	f108 0801 	add.w	r8, r8, #1
 8007666:	e7ec      	b.n	8007642 <_printf_float+0x34e>
 8007668:	4613      	mov	r3, r2
 800766a:	4631      	mov	r1, r6
 800766c:	4642      	mov	r2, r8
 800766e:	4628      	mov	r0, r5
 8007670:	47b8      	blx	r7
 8007672:	3001      	adds	r0, #1
 8007674:	d1c0      	bne.n	80075f8 <_printf_float+0x304>
 8007676:	e69e      	b.n	80073b6 <_printf_float+0xc2>
 8007678:	2301      	movs	r3, #1
 800767a:	4631      	mov	r1, r6
 800767c:	4628      	mov	r0, r5
 800767e:	9205      	str	r2, [sp, #20]
 8007680:	47b8      	blx	r7
 8007682:	3001      	adds	r0, #1
 8007684:	f43f ae97 	beq.w	80073b6 <_printf_float+0xc2>
 8007688:	9a05      	ldr	r2, [sp, #20]
 800768a:	f10b 0b01 	add.w	fp, fp, #1
 800768e:	e7b9      	b.n	8007604 <_printf_float+0x310>
 8007690:	ee18 3a10 	vmov	r3, s16
 8007694:	4652      	mov	r2, sl
 8007696:	4631      	mov	r1, r6
 8007698:	4628      	mov	r0, r5
 800769a:	47b8      	blx	r7
 800769c:	3001      	adds	r0, #1
 800769e:	d1be      	bne.n	800761e <_printf_float+0x32a>
 80076a0:	e689      	b.n	80073b6 <_printf_float+0xc2>
 80076a2:	9a05      	ldr	r2, [sp, #20]
 80076a4:	464b      	mov	r3, r9
 80076a6:	4442      	add	r2, r8
 80076a8:	4631      	mov	r1, r6
 80076aa:	4628      	mov	r0, r5
 80076ac:	47b8      	blx	r7
 80076ae:	3001      	adds	r0, #1
 80076b0:	d1c1      	bne.n	8007636 <_printf_float+0x342>
 80076b2:	e680      	b.n	80073b6 <_printf_float+0xc2>
 80076b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076b6:	2a01      	cmp	r2, #1
 80076b8:	dc01      	bgt.n	80076be <_printf_float+0x3ca>
 80076ba:	07db      	lsls	r3, r3, #31
 80076bc:	d538      	bpl.n	8007730 <_printf_float+0x43c>
 80076be:	2301      	movs	r3, #1
 80076c0:	4642      	mov	r2, r8
 80076c2:	4631      	mov	r1, r6
 80076c4:	4628      	mov	r0, r5
 80076c6:	47b8      	blx	r7
 80076c8:	3001      	adds	r0, #1
 80076ca:	f43f ae74 	beq.w	80073b6 <_printf_float+0xc2>
 80076ce:	ee18 3a10 	vmov	r3, s16
 80076d2:	4652      	mov	r2, sl
 80076d4:	4631      	mov	r1, r6
 80076d6:	4628      	mov	r0, r5
 80076d8:	47b8      	blx	r7
 80076da:	3001      	adds	r0, #1
 80076dc:	f43f ae6b 	beq.w	80073b6 <_printf_float+0xc2>
 80076e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076e4:	2200      	movs	r2, #0
 80076e6:	2300      	movs	r3, #0
 80076e8:	f7f9 f9ee 	bl	8000ac8 <__aeabi_dcmpeq>
 80076ec:	b9d8      	cbnz	r0, 8007726 <_printf_float+0x432>
 80076ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076f0:	f108 0201 	add.w	r2, r8, #1
 80076f4:	3b01      	subs	r3, #1
 80076f6:	4631      	mov	r1, r6
 80076f8:	4628      	mov	r0, r5
 80076fa:	47b8      	blx	r7
 80076fc:	3001      	adds	r0, #1
 80076fe:	d10e      	bne.n	800771e <_printf_float+0x42a>
 8007700:	e659      	b.n	80073b6 <_printf_float+0xc2>
 8007702:	2301      	movs	r3, #1
 8007704:	4652      	mov	r2, sl
 8007706:	4631      	mov	r1, r6
 8007708:	4628      	mov	r0, r5
 800770a:	47b8      	blx	r7
 800770c:	3001      	adds	r0, #1
 800770e:	f43f ae52 	beq.w	80073b6 <_printf_float+0xc2>
 8007712:	f108 0801 	add.w	r8, r8, #1
 8007716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007718:	3b01      	subs	r3, #1
 800771a:	4543      	cmp	r3, r8
 800771c:	dcf1      	bgt.n	8007702 <_printf_float+0x40e>
 800771e:	464b      	mov	r3, r9
 8007720:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007724:	e6dc      	b.n	80074e0 <_printf_float+0x1ec>
 8007726:	f04f 0800 	mov.w	r8, #0
 800772a:	f104 0a1a 	add.w	sl, r4, #26
 800772e:	e7f2      	b.n	8007716 <_printf_float+0x422>
 8007730:	2301      	movs	r3, #1
 8007732:	4642      	mov	r2, r8
 8007734:	e7df      	b.n	80076f6 <_printf_float+0x402>
 8007736:	2301      	movs	r3, #1
 8007738:	464a      	mov	r2, r9
 800773a:	4631      	mov	r1, r6
 800773c:	4628      	mov	r0, r5
 800773e:	47b8      	blx	r7
 8007740:	3001      	adds	r0, #1
 8007742:	f43f ae38 	beq.w	80073b6 <_printf_float+0xc2>
 8007746:	f108 0801 	add.w	r8, r8, #1
 800774a:	68e3      	ldr	r3, [r4, #12]
 800774c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800774e:	1a5b      	subs	r3, r3, r1
 8007750:	4543      	cmp	r3, r8
 8007752:	dcf0      	bgt.n	8007736 <_printf_float+0x442>
 8007754:	e6fa      	b.n	800754c <_printf_float+0x258>
 8007756:	f04f 0800 	mov.w	r8, #0
 800775a:	f104 0919 	add.w	r9, r4, #25
 800775e:	e7f4      	b.n	800774a <_printf_float+0x456>

08007760 <_printf_common>:
 8007760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007764:	4616      	mov	r6, r2
 8007766:	4699      	mov	r9, r3
 8007768:	688a      	ldr	r2, [r1, #8]
 800776a:	690b      	ldr	r3, [r1, #16]
 800776c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007770:	4293      	cmp	r3, r2
 8007772:	bfb8      	it	lt
 8007774:	4613      	movlt	r3, r2
 8007776:	6033      	str	r3, [r6, #0]
 8007778:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800777c:	4607      	mov	r7, r0
 800777e:	460c      	mov	r4, r1
 8007780:	b10a      	cbz	r2, 8007786 <_printf_common+0x26>
 8007782:	3301      	adds	r3, #1
 8007784:	6033      	str	r3, [r6, #0]
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	0699      	lsls	r1, r3, #26
 800778a:	bf42      	ittt	mi
 800778c:	6833      	ldrmi	r3, [r6, #0]
 800778e:	3302      	addmi	r3, #2
 8007790:	6033      	strmi	r3, [r6, #0]
 8007792:	6825      	ldr	r5, [r4, #0]
 8007794:	f015 0506 	ands.w	r5, r5, #6
 8007798:	d106      	bne.n	80077a8 <_printf_common+0x48>
 800779a:	f104 0a19 	add.w	sl, r4, #25
 800779e:	68e3      	ldr	r3, [r4, #12]
 80077a0:	6832      	ldr	r2, [r6, #0]
 80077a2:	1a9b      	subs	r3, r3, r2
 80077a4:	42ab      	cmp	r3, r5
 80077a6:	dc26      	bgt.n	80077f6 <_printf_common+0x96>
 80077a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077ac:	1e13      	subs	r3, r2, #0
 80077ae:	6822      	ldr	r2, [r4, #0]
 80077b0:	bf18      	it	ne
 80077b2:	2301      	movne	r3, #1
 80077b4:	0692      	lsls	r2, r2, #26
 80077b6:	d42b      	bmi.n	8007810 <_printf_common+0xb0>
 80077b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077bc:	4649      	mov	r1, r9
 80077be:	4638      	mov	r0, r7
 80077c0:	47c0      	blx	r8
 80077c2:	3001      	adds	r0, #1
 80077c4:	d01e      	beq.n	8007804 <_printf_common+0xa4>
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	68e5      	ldr	r5, [r4, #12]
 80077ca:	6832      	ldr	r2, [r6, #0]
 80077cc:	f003 0306 	and.w	r3, r3, #6
 80077d0:	2b04      	cmp	r3, #4
 80077d2:	bf08      	it	eq
 80077d4:	1aad      	subeq	r5, r5, r2
 80077d6:	68a3      	ldr	r3, [r4, #8]
 80077d8:	6922      	ldr	r2, [r4, #16]
 80077da:	bf0c      	ite	eq
 80077dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077e0:	2500      	movne	r5, #0
 80077e2:	4293      	cmp	r3, r2
 80077e4:	bfc4      	itt	gt
 80077e6:	1a9b      	subgt	r3, r3, r2
 80077e8:	18ed      	addgt	r5, r5, r3
 80077ea:	2600      	movs	r6, #0
 80077ec:	341a      	adds	r4, #26
 80077ee:	42b5      	cmp	r5, r6
 80077f0:	d11a      	bne.n	8007828 <_printf_common+0xc8>
 80077f2:	2000      	movs	r0, #0
 80077f4:	e008      	b.n	8007808 <_printf_common+0xa8>
 80077f6:	2301      	movs	r3, #1
 80077f8:	4652      	mov	r2, sl
 80077fa:	4649      	mov	r1, r9
 80077fc:	4638      	mov	r0, r7
 80077fe:	47c0      	blx	r8
 8007800:	3001      	adds	r0, #1
 8007802:	d103      	bne.n	800780c <_printf_common+0xac>
 8007804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800780c:	3501      	adds	r5, #1
 800780e:	e7c6      	b.n	800779e <_printf_common+0x3e>
 8007810:	18e1      	adds	r1, r4, r3
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	2030      	movs	r0, #48	; 0x30
 8007816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800781a:	4422      	add	r2, r4
 800781c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007824:	3302      	adds	r3, #2
 8007826:	e7c7      	b.n	80077b8 <_printf_common+0x58>
 8007828:	2301      	movs	r3, #1
 800782a:	4622      	mov	r2, r4
 800782c:	4649      	mov	r1, r9
 800782e:	4638      	mov	r0, r7
 8007830:	47c0      	blx	r8
 8007832:	3001      	adds	r0, #1
 8007834:	d0e6      	beq.n	8007804 <_printf_common+0xa4>
 8007836:	3601      	adds	r6, #1
 8007838:	e7d9      	b.n	80077ee <_printf_common+0x8e>
	...

0800783c <_printf_i>:
 800783c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007840:	7e0f      	ldrb	r7, [r1, #24]
 8007842:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007844:	2f78      	cmp	r7, #120	; 0x78
 8007846:	4691      	mov	r9, r2
 8007848:	4680      	mov	r8, r0
 800784a:	460c      	mov	r4, r1
 800784c:	469a      	mov	sl, r3
 800784e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007852:	d807      	bhi.n	8007864 <_printf_i+0x28>
 8007854:	2f62      	cmp	r7, #98	; 0x62
 8007856:	d80a      	bhi.n	800786e <_printf_i+0x32>
 8007858:	2f00      	cmp	r7, #0
 800785a:	f000 80d8 	beq.w	8007a0e <_printf_i+0x1d2>
 800785e:	2f58      	cmp	r7, #88	; 0x58
 8007860:	f000 80a3 	beq.w	80079aa <_printf_i+0x16e>
 8007864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800786c:	e03a      	b.n	80078e4 <_printf_i+0xa8>
 800786e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007872:	2b15      	cmp	r3, #21
 8007874:	d8f6      	bhi.n	8007864 <_printf_i+0x28>
 8007876:	a101      	add	r1, pc, #4	; (adr r1, 800787c <_printf_i+0x40>)
 8007878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800787c:	080078d5 	.word	0x080078d5
 8007880:	080078e9 	.word	0x080078e9
 8007884:	08007865 	.word	0x08007865
 8007888:	08007865 	.word	0x08007865
 800788c:	08007865 	.word	0x08007865
 8007890:	08007865 	.word	0x08007865
 8007894:	080078e9 	.word	0x080078e9
 8007898:	08007865 	.word	0x08007865
 800789c:	08007865 	.word	0x08007865
 80078a0:	08007865 	.word	0x08007865
 80078a4:	08007865 	.word	0x08007865
 80078a8:	080079f5 	.word	0x080079f5
 80078ac:	08007919 	.word	0x08007919
 80078b0:	080079d7 	.word	0x080079d7
 80078b4:	08007865 	.word	0x08007865
 80078b8:	08007865 	.word	0x08007865
 80078bc:	08007a17 	.word	0x08007a17
 80078c0:	08007865 	.word	0x08007865
 80078c4:	08007919 	.word	0x08007919
 80078c8:	08007865 	.word	0x08007865
 80078cc:	08007865 	.word	0x08007865
 80078d0:	080079df 	.word	0x080079df
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	1d1a      	adds	r2, r3, #4
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	602a      	str	r2, [r5, #0]
 80078dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078e4:	2301      	movs	r3, #1
 80078e6:	e0a3      	b.n	8007a30 <_printf_i+0x1f4>
 80078e8:	6820      	ldr	r0, [r4, #0]
 80078ea:	6829      	ldr	r1, [r5, #0]
 80078ec:	0606      	lsls	r6, r0, #24
 80078ee:	f101 0304 	add.w	r3, r1, #4
 80078f2:	d50a      	bpl.n	800790a <_printf_i+0xce>
 80078f4:	680e      	ldr	r6, [r1, #0]
 80078f6:	602b      	str	r3, [r5, #0]
 80078f8:	2e00      	cmp	r6, #0
 80078fa:	da03      	bge.n	8007904 <_printf_i+0xc8>
 80078fc:	232d      	movs	r3, #45	; 0x2d
 80078fe:	4276      	negs	r6, r6
 8007900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007904:	485e      	ldr	r0, [pc, #376]	; (8007a80 <_printf_i+0x244>)
 8007906:	230a      	movs	r3, #10
 8007908:	e019      	b.n	800793e <_printf_i+0x102>
 800790a:	680e      	ldr	r6, [r1, #0]
 800790c:	602b      	str	r3, [r5, #0]
 800790e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007912:	bf18      	it	ne
 8007914:	b236      	sxthne	r6, r6
 8007916:	e7ef      	b.n	80078f8 <_printf_i+0xbc>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	6820      	ldr	r0, [r4, #0]
 800791c:	1d19      	adds	r1, r3, #4
 800791e:	6029      	str	r1, [r5, #0]
 8007920:	0601      	lsls	r1, r0, #24
 8007922:	d501      	bpl.n	8007928 <_printf_i+0xec>
 8007924:	681e      	ldr	r6, [r3, #0]
 8007926:	e002      	b.n	800792e <_printf_i+0xf2>
 8007928:	0646      	lsls	r6, r0, #25
 800792a:	d5fb      	bpl.n	8007924 <_printf_i+0xe8>
 800792c:	881e      	ldrh	r6, [r3, #0]
 800792e:	4854      	ldr	r0, [pc, #336]	; (8007a80 <_printf_i+0x244>)
 8007930:	2f6f      	cmp	r7, #111	; 0x6f
 8007932:	bf0c      	ite	eq
 8007934:	2308      	moveq	r3, #8
 8007936:	230a      	movne	r3, #10
 8007938:	2100      	movs	r1, #0
 800793a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800793e:	6865      	ldr	r5, [r4, #4]
 8007940:	60a5      	str	r5, [r4, #8]
 8007942:	2d00      	cmp	r5, #0
 8007944:	bfa2      	ittt	ge
 8007946:	6821      	ldrge	r1, [r4, #0]
 8007948:	f021 0104 	bicge.w	r1, r1, #4
 800794c:	6021      	strge	r1, [r4, #0]
 800794e:	b90e      	cbnz	r6, 8007954 <_printf_i+0x118>
 8007950:	2d00      	cmp	r5, #0
 8007952:	d04d      	beq.n	80079f0 <_printf_i+0x1b4>
 8007954:	4615      	mov	r5, r2
 8007956:	fbb6 f1f3 	udiv	r1, r6, r3
 800795a:	fb03 6711 	mls	r7, r3, r1, r6
 800795e:	5dc7      	ldrb	r7, [r0, r7]
 8007960:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007964:	4637      	mov	r7, r6
 8007966:	42bb      	cmp	r3, r7
 8007968:	460e      	mov	r6, r1
 800796a:	d9f4      	bls.n	8007956 <_printf_i+0x11a>
 800796c:	2b08      	cmp	r3, #8
 800796e:	d10b      	bne.n	8007988 <_printf_i+0x14c>
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	07de      	lsls	r6, r3, #31
 8007974:	d508      	bpl.n	8007988 <_printf_i+0x14c>
 8007976:	6923      	ldr	r3, [r4, #16]
 8007978:	6861      	ldr	r1, [r4, #4]
 800797a:	4299      	cmp	r1, r3
 800797c:	bfde      	ittt	le
 800797e:	2330      	movle	r3, #48	; 0x30
 8007980:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007984:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007988:	1b52      	subs	r2, r2, r5
 800798a:	6122      	str	r2, [r4, #16]
 800798c:	f8cd a000 	str.w	sl, [sp]
 8007990:	464b      	mov	r3, r9
 8007992:	aa03      	add	r2, sp, #12
 8007994:	4621      	mov	r1, r4
 8007996:	4640      	mov	r0, r8
 8007998:	f7ff fee2 	bl	8007760 <_printf_common>
 800799c:	3001      	adds	r0, #1
 800799e:	d14c      	bne.n	8007a3a <_printf_i+0x1fe>
 80079a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079a4:	b004      	add	sp, #16
 80079a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079aa:	4835      	ldr	r0, [pc, #212]	; (8007a80 <_printf_i+0x244>)
 80079ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079b0:	6829      	ldr	r1, [r5, #0]
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80079b8:	6029      	str	r1, [r5, #0]
 80079ba:	061d      	lsls	r5, r3, #24
 80079bc:	d514      	bpl.n	80079e8 <_printf_i+0x1ac>
 80079be:	07df      	lsls	r7, r3, #31
 80079c0:	bf44      	itt	mi
 80079c2:	f043 0320 	orrmi.w	r3, r3, #32
 80079c6:	6023      	strmi	r3, [r4, #0]
 80079c8:	b91e      	cbnz	r6, 80079d2 <_printf_i+0x196>
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	f023 0320 	bic.w	r3, r3, #32
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	2310      	movs	r3, #16
 80079d4:	e7b0      	b.n	8007938 <_printf_i+0xfc>
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	f043 0320 	orr.w	r3, r3, #32
 80079dc:	6023      	str	r3, [r4, #0]
 80079de:	2378      	movs	r3, #120	; 0x78
 80079e0:	4828      	ldr	r0, [pc, #160]	; (8007a84 <_printf_i+0x248>)
 80079e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079e6:	e7e3      	b.n	80079b0 <_printf_i+0x174>
 80079e8:	0659      	lsls	r1, r3, #25
 80079ea:	bf48      	it	mi
 80079ec:	b2b6      	uxthmi	r6, r6
 80079ee:	e7e6      	b.n	80079be <_printf_i+0x182>
 80079f0:	4615      	mov	r5, r2
 80079f2:	e7bb      	b.n	800796c <_printf_i+0x130>
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	6826      	ldr	r6, [r4, #0]
 80079f8:	6961      	ldr	r1, [r4, #20]
 80079fa:	1d18      	adds	r0, r3, #4
 80079fc:	6028      	str	r0, [r5, #0]
 80079fe:	0635      	lsls	r5, r6, #24
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	d501      	bpl.n	8007a08 <_printf_i+0x1cc>
 8007a04:	6019      	str	r1, [r3, #0]
 8007a06:	e002      	b.n	8007a0e <_printf_i+0x1d2>
 8007a08:	0670      	lsls	r0, r6, #25
 8007a0a:	d5fb      	bpl.n	8007a04 <_printf_i+0x1c8>
 8007a0c:	8019      	strh	r1, [r3, #0]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	6123      	str	r3, [r4, #16]
 8007a12:	4615      	mov	r5, r2
 8007a14:	e7ba      	b.n	800798c <_printf_i+0x150>
 8007a16:	682b      	ldr	r3, [r5, #0]
 8007a18:	1d1a      	adds	r2, r3, #4
 8007a1a:	602a      	str	r2, [r5, #0]
 8007a1c:	681d      	ldr	r5, [r3, #0]
 8007a1e:	6862      	ldr	r2, [r4, #4]
 8007a20:	2100      	movs	r1, #0
 8007a22:	4628      	mov	r0, r5
 8007a24:	f7f8 fbdc 	bl	80001e0 <memchr>
 8007a28:	b108      	cbz	r0, 8007a2e <_printf_i+0x1f2>
 8007a2a:	1b40      	subs	r0, r0, r5
 8007a2c:	6060      	str	r0, [r4, #4]
 8007a2e:	6863      	ldr	r3, [r4, #4]
 8007a30:	6123      	str	r3, [r4, #16]
 8007a32:	2300      	movs	r3, #0
 8007a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a38:	e7a8      	b.n	800798c <_printf_i+0x150>
 8007a3a:	6923      	ldr	r3, [r4, #16]
 8007a3c:	462a      	mov	r2, r5
 8007a3e:	4649      	mov	r1, r9
 8007a40:	4640      	mov	r0, r8
 8007a42:	47d0      	blx	sl
 8007a44:	3001      	adds	r0, #1
 8007a46:	d0ab      	beq.n	80079a0 <_printf_i+0x164>
 8007a48:	6823      	ldr	r3, [r4, #0]
 8007a4a:	079b      	lsls	r3, r3, #30
 8007a4c:	d413      	bmi.n	8007a76 <_printf_i+0x23a>
 8007a4e:	68e0      	ldr	r0, [r4, #12]
 8007a50:	9b03      	ldr	r3, [sp, #12]
 8007a52:	4298      	cmp	r0, r3
 8007a54:	bfb8      	it	lt
 8007a56:	4618      	movlt	r0, r3
 8007a58:	e7a4      	b.n	80079a4 <_printf_i+0x168>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	4632      	mov	r2, r6
 8007a5e:	4649      	mov	r1, r9
 8007a60:	4640      	mov	r0, r8
 8007a62:	47d0      	blx	sl
 8007a64:	3001      	adds	r0, #1
 8007a66:	d09b      	beq.n	80079a0 <_printf_i+0x164>
 8007a68:	3501      	adds	r5, #1
 8007a6a:	68e3      	ldr	r3, [r4, #12]
 8007a6c:	9903      	ldr	r1, [sp, #12]
 8007a6e:	1a5b      	subs	r3, r3, r1
 8007a70:	42ab      	cmp	r3, r5
 8007a72:	dcf2      	bgt.n	8007a5a <_printf_i+0x21e>
 8007a74:	e7eb      	b.n	8007a4e <_printf_i+0x212>
 8007a76:	2500      	movs	r5, #0
 8007a78:	f104 0619 	add.w	r6, r4, #25
 8007a7c:	e7f5      	b.n	8007a6a <_printf_i+0x22e>
 8007a7e:	bf00      	nop
 8007a80:	0800aa5c 	.word	0x0800aa5c
 8007a84:	0800aa6d 	.word	0x0800aa6d

08007a88 <siprintf>:
 8007a88:	b40e      	push	{r1, r2, r3}
 8007a8a:	b500      	push	{lr}
 8007a8c:	b09c      	sub	sp, #112	; 0x70
 8007a8e:	ab1d      	add	r3, sp, #116	; 0x74
 8007a90:	9002      	str	r0, [sp, #8]
 8007a92:	9006      	str	r0, [sp, #24]
 8007a94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a98:	4809      	ldr	r0, [pc, #36]	; (8007ac0 <siprintf+0x38>)
 8007a9a:	9107      	str	r1, [sp, #28]
 8007a9c:	9104      	str	r1, [sp, #16]
 8007a9e:	4909      	ldr	r1, [pc, #36]	; (8007ac4 <siprintf+0x3c>)
 8007aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aa4:	9105      	str	r1, [sp, #20]
 8007aa6:	6800      	ldr	r0, [r0, #0]
 8007aa8:	9301      	str	r3, [sp, #4]
 8007aaa:	a902      	add	r1, sp, #8
 8007aac:	f001 fc30 	bl	8009310 <_svfiprintf_r>
 8007ab0:	9b02      	ldr	r3, [sp, #8]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	701a      	strb	r2, [r3, #0]
 8007ab6:	b01c      	add	sp, #112	; 0x70
 8007ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007abc:	b003      	add	sp, #12
 8007abe:	4770      	bx	lr
 8007ac0:	2000000c 	.word	0x2000000c
 8007ac4:	ffff0208 	.word	0xffff0208

08007ac8 <siscanf>:
 8007ac8:	b40e      	push	{r1, r2, r3}
 8007aca:	b510      	push	{r4, lr}
 8007acc:	b09f      	sub	sp, #124	; 0x7c
 8007ace:	ac21      	add	r4, sp, #132	; 0x84
 8007ad0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007ad4:	f854 2b04 	ldr.w	r2, [r4], #4
 8007ad8:	9201      	str	r2, [sp, #4]
 8007ada:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007ade:	9004      	str	r0, [sp, #16]
 8007ae0:	9008      	str	r0, [sp, #32]
 8007ae2:	f7f8 fb75 	bl	80001d0 <strlen>
 8007ae6:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <siscanf+0x50>)
 8007ae8:	9005      	str	r0, [sp, #20]
 8007aea:	9009      	str	r0, [sp, #36]	; 0x24
 8007aec:	930d      	str	r3, [sp, #52]	; 0x34
 8007aee:	480b      	ldr	r0, [pc, #44]	; (8007b1c <siscanf+0x54>)
 8007af0:	9a01      	ldr	r2, [sp, #4]
 8007af2:	6800      	ldr	r0, [r0, #0]
 8007af4:	9403      	str	r4, [sp, #12]
 8007af6:	2300      	movs	r3, #0
 8007af8:	9311      	str	r3, [sp, #68]	; 0x44
 8007afa:	9316      	str	r3, [sp, #88]	; 0x58
 8007afc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b00:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007b04:	a904      	add	r1, sp, #16
 8007b06:	4623      	mov	r3, r4
 8007b08:	f001 fd5c 	bl	80095c4 <__ssvfiscanf_r>
 8007b0c:	b01f      	add	sp, #124	; 0x7c
 8007b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b12:	b003      	add	sp, #12
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	08007b43 	.word	0x08007b43
 8007b1c:	2000000c 	.word	0x2000000c

08007b20 <__sread>:
 8007b20:	b510      	push	{r4, lr}
 8007b22:	460c      	mov	r4, r1
 8007b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b28:	f002 f816 	bl	8009b58 <_read_r>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	bfab      	itete	ge
 8007b30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b32:	89a3      	ldrhlt	r3, [r4, #12]
 8007b34:	181b      	addge	r3, r3, r0
 8007b36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b3a:	bfac      	ite	ge
 8007b3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b3e:	81a3      	strhlt	r3, [r4, #12]
 8007b40:	bd10      	pop	{r4, pc}

08007b42 <__seofread>:
 8007b42:	2000      	movs	r0, #0
 8007b44:	4770      	bx	lr

08007b46 <__swrite>:
 8007b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b4a:	461f      	mov	r7, r3
 8007b4c:	898b      	ldrh	r3, [r1, #12]
 8007b4e:	05db      	lsls	r3, r3, #23
 8007b50:	4605      	mov	r5, r0
 8007b52:	460c      	mov	r4, r1
 8007b54:	4616      	mov	r6, r2
 8007b56:	d505      	bpl.n	8007b64 <__swrite+0x1e>
 8007b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f000 fed8 	bl	8008914 <_lseek_r>
 8007b64:	89a3      	ldrh	r3, [r4, #12]
 8007b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b6e:	81a3      	strh	r3, [r4, #12]
 8007b70:	4632      	mov	r2, r6
 8007b72:	463b      	mov	r3, r7
 8007b74:	4628      	mov	r0, r5
 8007b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7a:	f000 b82b 	b.w	8007bd4 <_write_r>

08007b7e <__sseek>:
 8007b7e:	b510      	push	{r4, lr}
 8007b80:	460c      	mov	r4, r1
 8007b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b86:	f000 fec5 	bl	8008914 <_lseek_r>
 8007b8a:	1c43      	adds	r3, r0, #1
 8007b8c:	89a3      	ldrh	r3, [r4, #12]
 8007b8e:	bf15      	itete	ne
 8007b90:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b9a:	81a3      	strheq	r3, [r4, #12]
 8007b9c:	bf18      	it	ne
 8007b9e:	81a3      	strhne	r3, [r4, #12]
 8007ba0:	bd10      	pop	{r4, pc}

08007ba2 <__sclose>:
 8007ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba6:	f000 b827 	b.w	8007bf8 <_close_r>

08007baa <strncmp>:
 8007baa:	b510      	push	{r4, lr}
 8007bac:	b17a      	cbz	r2, 8007bce <strncmp+0x24>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	3901      	subs	r1, #1
 8007bb2:	1884      	adds	r4, r0, r2
 8007bb4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007bb8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007bbc:	4290      	cmp	r0, r2
 8007bbe:	d101      	bne.n	8007bc4 <strncmp+0x1a>
 8007bc0:	42a3      	cmp	r3, r4
 8007bc2:	d101      	bne.n	8007bc8 <strncmp+0x1e>
 8007bc4:	1a80      	subs	r0, r0, r2
 8007bc6:	bd10      	pop	{r4, pc}
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	d1f3      	bne.n	8007bb4 <strncmp+0xa>
 8007bcc:	e7fa      	b.n	8007bc4 <strncmp+0x1a>
 8007bce:	4610      	mov	r0, r2
 8007bd0:	e7f9      	b.n	8007bc6 <strncmp+0x1c>
	...

08007bd4 <_write_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4d07      	ldr	r5, [pc, #28]	; (8007bf4 <_write_r+0x20>)
 8007bd8:	4604      	mov	r4, r0
 8007bda:	4608      	mov	r0, r1
 8007bdc:	4611      	mov	r1, r2
 8007bde:	2200      	movs	r2, #0
 8007be0:	602a      	str	r2, [r5, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	f7fa fc11 	bl	800240a <_write>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d102      	bne.n	8007bf2 <_write_r+0x1e>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	b103      	cbz	r3, 8007bf2 <_write_r+0x1e>
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	20000590 	.word	0x20000590

08007bf8 <_close_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4d06      	ldr	r5, [pc, #24]	; (8007c14 <_close_r+0x1c>)
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4608      	mov	r0, r1
 8007c02:	602b      	str	r3, [r5, #0]
 8007c04:	f7fa fc1d 	bl	8002442 <_close>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_close_r+0x1a>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_close_r+0x1a>
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	20000590 	.word	0x20000590

08007c18 <quorem>:
 8007c18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1c:	6903      	ldr	r3, [r0, #16]
 8007c1e:	690c      	ldr	r4, [r1, #16]
 8007c20:	42a3      	cmp	r3, r4
 8007c22:	4607      	mov	r7, r0
 8007c24:	f2c0 8081 	blt.w	8007d2a <quorem+0x112>
 8007c28:	3c01      	subs	r4, #1
 8007c2a:	f101 0814 	add.w	r8, r1, #20
 8007c2e:	f100 0514 	add.w	r5, r0, #20
 8007c32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c36:	9301      	str	r3, [sp, #4]
 8007c38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c40:	3301      	adds	r3, #1
 8007c42:	429a      	cmp	r2, r3
 8007c44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c50:	d331      	bcc.n	8007cb6 <quorem+0x9e>
 8007c52:	f04f 0e00 	mov.w	lr, #0
 8007c56:	4640      	mov	r0, r8
 8007c58:	46ac      	mov	ip, r5
 8007c5a:	46f2      	mov	sl, lr
 8007c5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c60:	b293      	uxth	r3, r2
 8007c62:	fb06 e303 	mla	r3, r6, r3, lr
 8007c66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	ebaa 0303 	sub.w	r3, sl, r3
 8007c70:	f8dc a000 	ldr.w	sl, [ip]
 8007c74:	0c12      	lsrs	r2, r2, #16
 8007c76:	fa13 f38a 	uxtah	r3, r3, sl
 8007c7a:	fb06 e202 	mla	r2, r6, r2, lr
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	9b00      	ldr	r3, [sp, #0]
 8007c82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c86:	b292      	uxth	r2, r2
 8007c88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c90:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c94:	4581      	cmp	r9, r0
 8007c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c9a:	f84c 3b04 	str.w	r3, [ip], #4
 8007c9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ca2:	d2db      	bcs.n	8007c5c <quorem+0x44>
 8007ca4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ca8:	b92b      	cbnz	r3, 8007cb6 <quorem+0x9e>
 8007caa:	9b01      	ldr	r3, [sp, #4]
 8007cac:	3b04      	subs	r3, #4
 8007cae:	429d      	cmp	r5, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	d32e      	bcc.n	8007d12 <quorem+0xfa>
 8007cb4:	613c      	str	r4, [r7, #16]
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	f001 f8d6 	bl	8008e68 <__mcmp>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	db24      	blt.n	8007d0a <quorem+0xf2>
 8007cc0:	3601      	adds	r6, #1
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f04f 0c00 	mov.w	ip, #0
 8007cc8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ccc:	f8d0 e000 	ldr.w	lr, [r0]
 8007cd0:	b293      	uxth	r3, r2
 8007cd2:	ebac 0303 	sub.w	r3, ip, r3
 8007cd6:	0c12      	lsrs	r2, r2, #16
 8007cd8:	fa13 f38e 	uxtah	r3, r3, lr
 8007cdc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ce0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cea:	45c1      	cmp	r9, r8
 8007cec:	f840 3b04 	str.w	r3, [r0], #4
 8007cf0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007cf4:	d2e8      	bcs.n	8007cc8 <quorem+0xb0>
 8007cf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cfe:	b922      	cbnz	r2, 8007d0a <quorem+0xf2>
 8007d00:	3b04      	subs	r3, #4
 8007d02:	429d      	cmp	r5, r3
 8007d04:	461a      	mov	r2, r3
 8007d06:	d30a      	bcc.n	8007d1e <quorem+0x106>
 8007d08:	613c      	str	r4, [r7, #16]
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	b003      	add	sp, #12
 8007d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d12:	6812      	ldr	r2, [r2, #0]
 8007d14:	3b04      	subs	r3, #4
 8007d16:	2a00      	cmp	r2, #0
 8007d18:	d1cc      	bne.n	8007cb4 <quorem+0x9c>
 8007d1a:	3c01      	subs	r4, #1
 8007d1c:	e7c7      	b.n	8007cae <quorem+0x96>
 8007d1e:	6812      	ldr	r2, [r2, #0]
 8007d20:	3b04      	subs	r3, #4
 8007d22:	2a00      	cmp	r2, #0
 8007d24:	d1f0      	bne.n	8007d08 <quorem+0xf0>
 8007d26:	3c01      	subs	r4, #1
 8007d28:	e7eb      	b.n	8007d02 <quorem+0xea>
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	e7ee      	b.n	8007d0c <quorem+0xf4>
	...

08007d30 <_dtoa_r>:
 8007d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d34:	ed2d 8b04 	vpush	{d8-d9}
 8007d38:	ec57 6b10 	vmov	r6, r7, d0
 8007d3c:	b093      	sub	sp, #76	; 0x4c
 8007d3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d44:	9106      	str	r1, [sp, #24]
 8007d46:	ee10 aa10 	vmov	sl, s0
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d4e:	930c      	str	r3, [sp, #48]	; 0x30
 8007d50:	46bb      	mov	fp, r7
 8007d52:	b975      	cbnz	r5, 8007d72 <_dtoa_r+0x42>
 8007d54:	2010      	movs	r0, #16
 8007d56:	f000 fdef 	bl	8008938 <malloc>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	6260      	str	r0, [r4, #36]	; 0x24
 8007d5e:	b920      	cbnz	r0, 8007d6a <_dtoa_r+0x3a>
 8007d60:	4ba7      	ldr	r3, [pc, #668]	; (8008000 <_dtoa_r+0x2d0>)
 8007d62:	21ea      	movs	r1, #234	; 0xea
 8007d64:	48a7      	ldr	r0, [pc, #668]	; (8008004 <_dtoa_r+0x2d4>)
 8007d66:	f002 f883 	bl	8009e70 <__assert_func>
 8007d6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d6e:	6005      	str	r5, [r0, #0]
 8007d70:	60c5      	str	r5, [r0, #12]
 8007d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d74:	6819      	ldr	r1, [r3, #0]
 8007d76:	b151      	cbz	r1, 8007d8e <_dtoa_r+0x5e>
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	604a      	str	r2, [r1, #4]
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	4093      	lsls	r3, r2
 8007d80:	608b      	str	r3, [r1, #8]
 8007d82:	4620      	mov	r0, r4
 8007d84:	f000 fe2e 	bl	80089e4 <_Bfree>
 8007d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	1e3b      	subs	r3, r7, #0
 8007d90:	bfaa      	itet	ge
 8007d92:	2300      	movge	r3, #0
 8007d94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007d98:	f8c8 3000 	strge.w	r3, [r8]
 8007d9c:	4b9a      	ldr	r3, [pc, #616]	; (8008008 <_dtoa_r+0x2d8>)
 8007d9e:	bfbc      	itt	lt
 8007da0:	2201      	movlt	r2, #1
 8007da2:	f8c8 2000 	strlt.w	r2, [r8]
 8007da6:	ea33 030b 	bics.w	r3, r3, fp
 8007daa:	d11b      	bne.n	8007de4 <_dtoa_r+0xb4>
 8007dac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dae:	f242 730f 	movw	r3, #9999	; 0x270f
 8007db2:	6013      	str	r3, [r2, #0]
 8007db4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007db8:	4333      	orrs	r3, r6
 8007dba:	f000 8592 	beq.w	80088e2 <_dtoa_r+0xbb2>
 8007dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dc0:	b963      	cbnz	r3, 8007ddc <_dtoa_r+0xac>
 8007dc2:	4b92      	ldr	r3, [pc, #584]	; (800800c <_dtoa_r+0x2dc>)
 8007dc4:	e022      	b.n	8007e0c <_dtoa_r+0xdc>
 8007dc6:	4b92      	ldr	r3, [pc, #584]	; (8008010 <_dtoa_r+0x2e0>)
 8007dc8:	9301      	str	r3, [sp, #4]
 8007dca:	3308      	adds	r3, #8
 8007dcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	9801      	ldr	r0, [sp, #4]
 8007dd2:	b013      	add	sp, #76	; 0x4c
 8007dd4:	ecbd 8b04 	vpop	{d8-d9}
 8007dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ddc:	4b8b      	ldr	r3, [pc, #556]	; (800800c <_dtoa_r+0x2dc>)
 8007dde:	9301      	str	r3, [sp, #4]
 8007de0:	3303      	adds	r3, #3
 8007de2:	e7f3      	b.n	8007dcc <_dtoa_r+0x9c>
 8007de4:	2200      	movs	r2, #0
 8007de6:	2300      	movs	r3, #0
 8007de8:	4650      	mov	r0, sl
 8007dea:	4659      	mov	r1, fp
 8007dec:	f7f8 fe6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007df0:	ec4b ab19 	vmov	d9, sl, fp
 8007df4:	4680      	mov	r8, r0
 8007df6:	b158      	cbz	r0, 8007e10 <_dtoa_r+0xe0>
 8007df8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	6013      	str	r3, [r2, #0]
 8007dfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 856b 	beq.w	80088dc <_dtoa_r+0xbac>
 8007e06:	4883      	ldr	r0, [pc, #524]	; (8008014 <_dtoa_r+0x2e4>)
 8007e08:	6018      	str	r0, [r3, #0]
 8007e0a:	1e43      	subs	r3, r0, #1
 8007e0c:	9301      	str	r3, [sp, #4]
 8007e0e:	e7df      	b.n	8007dd0 <_dtoa_r+0xa0>
 8007e10:	ec4b ab10 	vmov	d0, sl, fp
 8007e14:	aa10      	add	r2, sp, #64	; 0x40
 8007e16:	a911      	add	r1, sp, #68	; 0x44
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f001 f8cb 	bl	8008fb4 <__d2b>
 8007e1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007e22:	ee08 0a10 	vmov	s16, r0
 8007e26:	2d00      	cmp	r5, #0
 8007e28:	f000 8084 	beq.w	8007f34 <_dtoa_r+0x204>
 8007e2c:	ee19 3a90 	vmov	r3, s19
 8007e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007e38:	4656      	mov	r6, sl
 8007e3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007e3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007e46:	4b74      	ldr	r3, [pc, #464]	; (8008018 <_dtoa_r+0x2e8>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	4639      	mov	r1, r7
 8007e4e:	f7f8 fa1b 	bl	8000288 <__aeabi_dsub>
 8007e52:	a365      	add	r3, pc, #404	; (adr r3, 8007fe8 <_dtoa_r+0x2b8>)
 8007e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e58:	f7f8 fbce 	bl	80005f8 <__aeabi_dmul>
 8007e5c:	a364      	add	r3, pc, #400	; (adr r3, 8007ff0 <_dtoa_r+0x2c0>)
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	f7f8 fa13 	bl	800028c <__adddf3>
 8007e66:	4606      	mov	r6, r0
 8007e68:	4628      	mov	r0, r5
 8007e6a:	460f      	mov	r7, r1
 8007e6c:	f7f8 fb5a 	bl	8000524 <__aeabi_i2d>
 8007e70:	a361      	add	r3, pc, #388	; (adr r3, 8007ff8 <_dtoa_r+0x2c8>)
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	f7f8 fbbf 	bl	80005f8 <__aeabi_dmul>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4630      	mov	r0, r6
 8007e80:	4639      	mov	r1, r7
 8007e82:	f7f8 fa03 	bl	800028c <__adddf3>
 8007e86:	4606      	mov	r6, r0
 8007e88:	460f      	mov	r7, r1
 8007e8a:	f7f8 fe65 	bl	8000b58 <__aeabi_d2iz>
 8007e8e:	2200      	movs	r2, #0
 8007e90:	9000      	str	r0, [sp, #0]
 8007e92:	2300      	movs	r3, #0
 8007e94:	4630      	mov	r0, r6
 8007e96:	4639      	mov	r1, r7
 8007e98:	f7f8 fe20 	bl	8000adc <__aeabi_dcmplt>
 8007e9c:	b150      	cbz	r0, 8007eb4 <_dtoa_r+0x184>
 8007e9e:	9800      	ldr	r0, [sp, #0]
 8007ea0:	f7f8 fb40 	bl	8000524 <__aeabi_i2d>
 8007ea4:	4632      	mov	r2, r6
 8007ea6:	463b      	mov	r3, r7
 8007ea8:	f7f8 fe0e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007eac:	b910      	cbnz	r0, 8007eb4 <_dtoa_r+0x184>
 8007eae:	9b00      	ldr	r3, [sp, #0]
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	9b00      	ldr	r3, [sp, #0]
 8007eb6:	2b16      	cmp	r3, #22
 8007eb8:	d85a      	bhi.n	8007f70 <_dtoa_r+0x240>
 8007eba:	9a00      	ldr	r2, [sp, #0]
 8007ebc:	4b57      	ldr	r3, [pc, #348]	; (800801c <_dtoa_r+0x2ec>)
 8007ebe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	ec51 0b19 	vmov	r0, r1, d9
 8007eca:	f7f8 fe07 	bl	8000adc <__aeabi_dcmplt>
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	d050      	beq.n	8007f74 <_dtoa_r+0x244>
 8007ed2:	9b00      	ldr	r3, [sp, #0]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	2300      	movs	r3, #0
 8007eda:	930b      	str	r3, [sp, #44]	; 0x2c
 8007edc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ede:	1b5d      	subs	r5, r3, r5
 8007ee0:	1e6b      	subs	r3, r5, #1
 8007ee2:	9305      	str	r3, [sp, #20]
 8007ee4:	bf45      	ittet	mi
 8007ee6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007eea:	9304      	strmi	r3, [sp, #16]
 8007eec:	2300      	movpl	r3, #0
 8007eee:	2300      	movmi	r3, #0
 8007ef0:	bf4c      	ite	mi
 8007ef2:	9305      	strmi	r3, [sp, #20]
 8007ef4:	9304      	strpl	r3, [sp, #16]
 8007ef6:	9b00      	ldr	r3, [sp, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	db3d      	blt.n	8007f78 <_dtoa_r+0x248>
 8007efc:	9b05      	ldr	r3, [sp, #20]
 8007efe:	9a00      	ldr	r2, [sp, #0]
 8007f00:	920a      	str	r2, [sp, #40]	; 0x28
 8007f02:	4413      	add	r3, r2
 8007f04:	9305      	str	r3, [sp, #20]
 8007f06:	2300      	movs	r3, #0
 8007f08:	9307      	str	r3, [sp, #28]
 8007f0a:	9b06      	ldr	r3, [sp, #24]
 8007f0c:	2b09      	cmp	r3, #9
 8007f0e:	f200 8089 	bhi.w	8008024 <_dtoa_r+0x2f4>
 8007f12:	2b05      	cmp	r3, #5
 8007f14:	bfc4      	itt	gt
 8007f16:	3b04      	subgt	r3, #4
 8007f18:	9306      	strgt	r3, [sp, #24]
 8007f1a:	9b06      	ldr	r3, [sp, #24]
 8007f1c:	f1a3 0302 	sub.w	r3, r3, #2
 8007f20:	bfcc      	ite	gt
 8007f22:	2500      	movgt	r5, #0
 8007f24:	2501      	movle	r5, #1
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	f200 8087 	bhi.w	800803a <_dtoa_r+0x30a>
 8007f2c:	e8df f003 	tbb	[pc, r3]
 8007f30:	59383a2d 	.word	0x59383a2d
 8007f34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007f38:	441d      	add	r5, r3
 8007f3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007f3e:	2b20      	cmp	r3, #32
 8007f40:	bfc1      	itttt	gt
 8007f42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007f4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007f4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007f52:	bfda      	itte	le
 8007f54:	f1c3 0320 	rsble	r3, r3, #32
 8007f58:	fa06 f003 	lslle.w	r0, r6, r3
 8007f5c:	4318      	orrgt	r0, r3
 8007f5e:	f7f8 fad1 	bl	8000504 <__aeabi_ui2d>
 8007f62:	2301      	movs	r3, #1
 8007f64:	4606      	mov	r6, r0
 8007f66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007f6a:	3d01      	subs	r5, #1
 8007f6c:	930e      	str	r3, [sp, #56]	; 0x38
 8007f6e:	e76a      	b.n	8007e46 <_dtoa_r+0x116>
 8007f70:	2301      	movs	r3, #1
 8007f72:	e7b2      	b.n	8007eda <_dtoa_r+0x1aa>
 8007f74:	900b      	str	r0, [sp, #44]	; 0x2c
 8007f76:	e7b1      	b.n	8007edc <_dtoa_r+0x1ac>
 8007f78:	9b04      	ldr	r3, [sp, #16]
 8007f7a:	9a00      	ldr	r2, [sp, #0]
 8007f7c:	1a9b      	subs	r3, r3, r2
 8007f7e:	9304      	str	r3, [sp, #16]
 8007f80:	4253      	negs	r3, r2
 8007f82:	9307      	str	r3, [sp, #28]
 8007f84:	2300      	movs	r3, #0
 8007f86:	930a      	str	r3, [sp, #40]	; 0x28
 8007f88:	e7bf      	b.n	8007f0a <_dtoa_r+0x1da>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	9308      	str	r3, [sp, #32]
 8007f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	dc55      	bgt.n	8008040 <_dtoa_r+0x310>
 8007f94:	2301      	movs	r3, #1
 8007f96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f9e:	e00c      	b.n	8007fba <_dtoa_r+0x28a>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e7f3      	b.n	8007f8c <_dtoa_r+0x25c>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fa8:	9308      	str	r3, [sp, #32]
 8007faa:	9b00      	ldr	r3, [sp, #0]
 8007fac:	4413      	add	r3, r2
 8007fae:	9302      	str	r3, [sp, #8]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	9303      	str	r3, [sp, #12]
 8007fb6:	bfb8      	it	lt
 8007fb8:	2301      	movlt	r3, #1
 8007fba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	6042      	str	r2, [r0, #4]
 8007fc0:	2204      	movs	r2, #4
 8007fc2:	f102 0614 	add.w	r6, r2, #20
 8007fc6:	429e      	cmp	r6, r3
 8007fc8:	6841      	ldr	r1, [r0, #4]
 8007fca:	d93d      	bls.n	8008048 <_dtoa_r+0x318>
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f000 fcc9 	bl	8008964 <_Balloc>
 8007fd2:	9001      	str	r0, [sp, #4]
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d13b      	bne.n	8008050 <_dtoa_r+0x320>
 8007fd8:	4b11      	ldr	r3, [pc, #68]	; (8008020 <_dtoa_r+0x2f0>)
 8007fda:	4602      	mov	r2, r0
 8007fdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007fe0:	e6c0      	b.n	8007d64 <_dtoa_r+0x34>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e7df      	b.n	8007fa6 <_dtoa_r+0x276>
 8007fe6:	bf00      	nop
 8007fe8:	636f4361 	.word	0x636f4361
 8007fec:	3fd287a7 	.word	0x3fd287a7
 8007ff0:	8b60c8b3 	.word	0x8b60c8b3
 8007ff4:	3fc68a28 	.word	0x3fc68a28
 8007ff8:	509f79fb 	.word	0x509f79fb
 8007ffc:	3fd34413 	.word	0x3fd34413
 8008000:	0800aa8b 	.word	0x0800aa8b
 8008004:	0800aaa2 	.word	0x0800aaa2
 8008008:	7ff00000 	.word	0x7ff00000
 800800c:	0800aa87 	.word	0x0800aa87
 8008010:	0800aa7e 	.word	0x0800aa7e
 8008014:	0800ac82 	.word	0x0800ac82
 8008018:	3ff80000 	.word	0x3ff80000
 800801c:	0800ab98 	.word	0x0800ab98
 8008020:	0800aafd 	.word	0x0800aafd
 8008024:	2501      	movs	r5, #1
 8008026:	2300      	movs	r3, #0
 8008028:	9306      	str	r3, [sp, #24]
 800802a:	9508      	str	r5, [sp, #32]
 800802c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008030:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008034:	2200      	movs	r2, #0
 8008036:	2312      	movs	r3, #18
 8008038:	e7b0      	b.n	8007f9c <_dtoa_r+0x26c>
 800803a:	2301      	movs	r3, #1
 800803c:	9308      	str	r3, [sp, #32]
 800803e:	e7f5      	b.n	800802c <_dtoa_r+0x2fc>
 8008040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008042:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008046:	e7b8      	b.n	8007fba <_dtoa_r+0x28a>
 8008048:	3101      	adds	r1, #1
 800804a:	6041      	str	r1, [r0, #4]
 800804c:	0052      	lsls	r2, r2, #1
 800804e:	e7b8      	b.n	8007fc2 <_dtoa_r+0x292>
 8008050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008052:	9a01      	ldr	r2, [sp, #4]
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	9b03      	ldr	r3, [sp, #12]
 8008058:	2b0e      	cmp	r3, #14
 800805a:	f200 809d 	bhi.w	8008198 <_dtoa_r+0x468>
 800805e:	2d00      	cmp	r5, #0
 8008060:	f000 809a 	beq.w	8008198 <_dtoa_r+0x468>
 8008064:	9b00      	ldr	r3, [sp, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	dd32      	ble.n	80080d0 <_dtoa_r+0x3a0>
 800806a:	4ab7      	ldr	r2, [pc, #732]	; (8008348 <_dtoa_r+0x618>)
 800806c:	f003 030f 	and.w	r3, r3, #15
 8008070:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008074:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008078:	9b00      	ldr	r3, [sp, #0]
 800807a:	05d8      	lsls	r0, r3, #23
 800807c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008080:	d516      	bpl.n	80080b0 <_dtoa_r+0x380>
 8008082:	4bb2      	ldr	r3, [pc, #712]	; (800834c <_dtoa_r+0x61c>)
 8008084:	ec51 0b19 	vmov	r0, r1, d9
 8008088:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800808c:	f7f8 fbde 	bl	800084c <__aeabi_ddiv>
 8008090:	f007 070f 	and.w	r7, r7, #15
 8008094:	4682      	mov	sl, r0
 8008096:	468b      	mov	fp, r1
 8008098:	2503      	movs	r5, #3
 800809a:	4eac      	ldr	r6, [pc, #688]	; (800834c <_dtoa_r+0x61c>)
 800809c:	b957      	cbnz	r7, 80080b4 <_dtoa_r+0x384>
 800809e:	4642      	mov	r2, r8
 80080a0:	464b      	mov	r3, r9
 80080a2:	4650      	mov	r0, sl
 80080a4:	4659      	mov	r1, fp
 80080a6:	f7f8 fbd1 	bl	800084c <__aeabi_ddiv>
 80080aa:	4682      	mov	sl, r0
 80080ac:	468b      	mov	fp, r1
 80080ae:	e028      	b.n	8008102 <_dtoa_r+0x3d2>
 80080b0:	2502      	movs	r5, #2
 80080b2:	e7f2      	b.n	800809a <_dtoa_r+0x36a>
 80080b4:	07f9      	lsls	r1, r7, #31
 80080b6:	d508      	bpl.n	80080ca <_dtoa_r+0x39a>
 80080b8:	4640      	mov	r0, r8
 80080ba:	4649      	mov	r1, r9
 80080bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080c0:	f7f8 fa9a 	bl	80005f8 <__aeabi_dmul>
 80080c4:	3501      	adds	r5, #1
 80080c6:	4680      	mov	r8, r0
 80080c8:	4689      	mov	r9, r1
 80080ca:	107f      	asrs	r7, r7, #1
 80080cc:	3608      	adds	r6, #8
 80080ce:	e7e5      	b.n	800809c <_dtoa_r+0x36c>
 80080d0:	f000 809b 	beq.w	800820a <_dtoa_r+0x4da>
 80080d4:	9b00      	ldr	r3, [sp, #0]
 80080d6:	4f9d      	ldr	r7, [pc, #628]	; (800834c <_dtoa_r+0x61c>)
 80080d8:	425e      	negs	r6, r3
 80080da:	4b9b      	ldr	r3, [pc, #620]	; (8008348 <_dtoa_r+0x618>)
 80080dc:	f006 020f 	and.w	r2, r6, #15
 80080e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	ec51 0b19 	vmov	r0, r1, d9
 80080ec:	f7f8 fa84 	bl	80005f8 <__aeabi_dmul>
 80080f0:	1136      	asrs	r6, r6, #4
 80080f2:	4682      	mov	sl, r0
 80080f4:	468b      	mov	fp, r1
 80080f6:	2300      	movs	r3, #0
 80080f8:	2502      	movs	r5, #2
 80080fa:	2e00      	cmp	r6, #0
 80080fc:	d17a      	bne.n	80081f4 <_dtoa_r+0x4c4>
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1d3      	bne.n	80080aa <_dtoa_r+0x37a>
 8008102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 8082 	beq.w	800820e <_dtoa_r+0x4de>
 800810a:	4b91      	ldr	r3, [pc, #580]	; (8008350 <_dtoa_r+0x620>)
 800810c:	2200      	movs	r2, #0
 800810e:	4650      	mov	r0, sl
 8008110:	4659      	mov	r1, fp
 8008112:	f7f8 fce3 	bl	8000adc <__aeabi_dcmplt>
 8008116:	2800      	cmp	r0, #0
 8008118:	d079      	beq.n	800820e <_dtoa_r+0x4de>
 800811a:	9b03      	ldr	r3, [sp, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d076      	beq.n	800820e <_dtoa_r+0x4de>
 8008120:	9b02      	ldr	r3, [sp, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	dd36      	ble.n	8008194 <_dtoa_r+0x464>
 8008126:	9b00      	ldr	r3, [sp, #0]
 8008128:	4650      	mov	r0, sl
 800812a:	4659      	mov	r1, fp
 800812c:	1e5f      	subs	r7, r3, #1
 800812e:	2200      	movs	r2, #0
 8008130:	4b88      	ldr	r3, [pc, #544]	; (8008354 <_dtoa_r+0x624>)
 8008132:	f7f8 fa61 	bl	80005f8 <__aeabi_dmul>
 8008136:	9e02      	ldr	r6, [sp, #8]
 8008138:	4682      	mov	sl, r0
 800813a:	468b      	mov	fp, r1
 800813c:	3501      	adds	r5, #1
 800813e:	4628      	mov	r0, r5
 8008140:	f7f8 f9f0 	bl	8000524 <__aeabi_i2d>
 8008144:	4652      	mov	r2, sl
 8008146:	465b      	mov	r3, fp
 8008148:	f7f8 fa56 	bl	80005f8 <__aeabi_dmul>
 800814c:	4b82      	ldr	r3, [pc, #520]	; (8008358 <_dtoa_r+0x628>)
 800814e:	2200      	movs	r2, #0
 8008150:	f7f8 f89c 	bl	800028c <__adddf3>
 8008154:	46d0      	mov	r8, sl
 8008156:	46d9      	mov	r9, fp
 8008158:	4682      	mov	sl, r0
 800815a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800815e:	2e00      	cmp	r6, #0
 8008160:	d158      	bne.n	8008214 <_dtoa_r+0x4e4>
 8008162:	4b7e      	ldr	r3, [pc, #504]	; (800835c <_dtoa_r+0x62c>)
 8008164:	2200      	movs	r2, #0
 8008166:	4640      	mov	r0, r8
 8008168:	4649      	mov	r1, r9
 800816a:	f7f8 f88d 	bl	8000288 <__aeabi_dsub>
 800816e:	4652      	mov	r2, sl
 8008170:	465b      	mov	r3, fp
 8008172:	4680      	mov	r8, r0
 8008174:	4689      	mov	r9, r1
 8008176:	f7f8 fccf 	bl	8000b18 <__aeabi_dcmpgt>
 800817a:	2800      	cmp	r0, #0
 800817c:	f040 8295 	bne.w	80086aa <_dtoa_r+0x97a>
 8008180:	4652      	mov	r2, sl
 8008182:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008186:	4640      	mov	r0, r8
 8008188:	4649      	mov	r1, r9
 800818a:	f7f8 fca7 	bl	8000adc <__aeabi_dcmplt>
 800818e:	2800      	cmp	r0, #0
 8008190:	f040 8289 	bne.w	80086a6 <_dtoa_r+0x976>
 8008194:	ec5b ab19 	vmov	sl, fp, d9
 8008198:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800819a:	2b00      	cmp	r3, #0
 800819c:	f2c0 8148 	blt.w	8008430 <_dtoa_r+0x700>
 80081a0:	9a00      	ldr	r2, [sp, #0]
 80081a2:	2a0e      	cmp	r2, #14
 80081a4:	f300 8144 	bgt.w	8008430 <_dtoa_r+0x700>
 80081a8:	4b67      	ldr	r3, [pc, #412]	; (8008348 <_dtoa_r+0x618>)
 80081aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f280 80d5 	bge.w	8008364 <_dtoa_r+0x634>
 80081ba:	9b03      	ldr	r3, [sp, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f300 80d1 	bgt.w	8008364 <_dtoa_r+0x634>
 80081c2:	f040 826f 	bne.w	80086a4 <_dtoa_r+0x974>
 80081c6:	4b65      	ldr	r3, [pc, #404]	; (800835c <_dtoa_r+0x62c>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	4640      	mov	r0, r8
 80081cc:	4649      	mov	r1, r9
 80081ce:	f7f8 fa13 	bl	80005f8 <__aeabi_dmul>
 80081d2:	4652      	mov	r2, sl
 80081d4:	465b      	mov	r3, fp
 80081d6:	f7f8 fc95 	bl	8000b04 <__aeabi_dcmpge>
 80081da:	9e03      	ldr	r6, [sp, #12]
 80081dc:	4637      	mov	r7, r6
 80081de:	2800      	cmp	r0, #0
 80081e0:	f040 8245 	bne.w	800866e <_dtoa_r+0x93e>
 80081e4:	9d01      	ldr	r5, [sp, #4]
 80081e6:	2331      	movs	r3, #49	; 0x31
 80081e8:	f805 3b01 	strb.w	r3, [r5], #1
 80081ec:	9b00      	ldr	r3, [sp, #0]
 80081ee:	3301      	adds	r3, #1
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	e240      	b.n	8008676 <_dtoa_r+0x946>
 80081f4:	07f2      	lsls	r2, r6, #31
 80081f6:	d505      	bpl.n	8008204 <_dtoa_r+0x4d4>
 80081f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081fc:	f7f8 f9fc 	bl	80005f8 <__aeabi_dmul>
 8008200:	3501      	adds	r5, #1
 8008202:	2301      	movs	r3, #1
 8008204:	1076      	asrs	r6, r6, #1
 8008206:	3708      	adds	r7, #8
 8008208:	e777      	b.n	80080fa <_dtoa_r+0x3ca>
 800820a:	2502      	movs	r5, #2
 800820c:	e779      	b.n	8008102 <_dtoa_r+0x3d2>
 800820e:	9f00      	ldr	r7, [sp, #0]
 8008210:	9e03      	ldr	r6, [sp, #12]
 8008212:	e794      	b.n	800813e <_dtoa_r+0x40e>
 8008214:	9901      	ldr	r1, [sp, #4]
 8008216:	4b4c      	ldr	r3, [pc, #304]	; (8008348 <_dtoa_r+0x618>)
 8008218:	4431      	add	r1, r6
 800821a:	910d      	str	r1, [sp, #52]	; 0x34
 800821c:	9908      	ldr	r1, [sp, #32]
 800821e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008222:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008226:	2900      	cmp	r1, #0
 8008228:	d043      	beq.n	80082b2 <_dtoa_r+0x582>
 800822a:	494d      	ldr	r1, [pc, #308]	; (8008360 <_dtoa_r+0x630>)
 800822c:	2000      	movs	r0, #0
 800822e:	f7f8 fb0d 	bl	800084c <__aeabi_ddiv>
 8008232:	4652      	mov	r2, sl
 8008234:	465b      	mov	r3, fp
 8008236:	f7f8 f827 	bl	8000288 <__aeabi_dsub>
 800823a:	9d01      	ldr	r5, [sp, #4]
 800823c:	4682      	mov	sl, r0
 800823e:	468b      	mov	fp, r1
 8008240:	4649      	mov	r1, r9
 8008242:	4640      	mov	r0, r8
 8008244:	f7f8 fc88 	bl	8000b58 <__aeabi_d2iz>
 8008248:	4606      	mov	r6, r0
 800824a:	f7f8 f96b 	bl	8000524 <__aeabi_i2d>
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	4640      	mov	r0, r8
 8008254:	4649      	mov	r1, r9
 8008256:	f7f8 f817 	bl	8000288 <__aeabi_dsub>
 800825a:	3630      	adds	r6, #48	; 0x30
 800825c:	f805 6b01 	strb.w	r6, [r5], #1
 8008260:	4652      	mov	r2, sl
 8008262:	465b      	mov	r3, fp
 8008264:	4680      	mov	r8, r0
 8008266:	4689      	mov	r9, r1
 8008268:	f7f8 fc38 	bl	8000adc <__aeabi_dcmplt>
 800826c:	2800      	cmp	r0, #0
 800826e:	d163      	bne.n	8008338 <_dtoa_r+0x608>
 8008270:	4642      	mov	r2, r8
 8008272:	464b      	mov	r3, r9
 8008274:	4936      	ldr	r1, [pc, #216]	; (8008350 <_dtoa_r+0x620>)
 8008276:	2000      	movs	r0, #0
 8008278:	f7f8 f806 	bl	8000288 <__aeabi_dsub>
 800827c:	4652      	mov	r2, sl
 800827e:	465b      	mov	r3, fp
 8008280:	f7f8 fc2c 	bl	8000adc <__aeabi_dcmplt>
 8008284:	2800      	cmp	r0, #0
 8008286:	f040 80b5 	bne.w	80083f4 <_dtoa_r+0x6c4>
 800828a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800828c:	429d      	cmp	r5, r3
 800828e:	d081      	beq.n	8008194 <_dtoa_r+0x464>
 8008290:	4b30      	ldr	r3, [pc, #192]	; (8008354 <_dtoa_r+0x624>)
 8008292:	2200      	movs	r2, #0
 8008294:	4650      	mov	r0, sl
 8008296:	4659      	mov	r1, fp
 8008298:	f7f8 f9ae 	bl	80005f8 <__aeabi_dmul>
 800829c:	4b2d      	ldr	r3, [pc, #180]	; (8008354 <_dtoa_r+0x624>)
 800829e:	4682      	mov	sl, r0
 80082a0:	468b      	mov	fp, r1
 80082a2:	4640      	mov	r0, r8
 80082a4:	4649      	mov	r1, r9
 80082a6:	2200      	movs	r2, #0
 80082a8:	f7f8 f9a6 	bl	80005f8 <__aeabi_dmul>
 80082ac:	4680      	mov	r8, r0
 80082ae:	4689      	mov	r9, r1
 80082b0:	e7c6      	b.n	8008240 <_dtoa_r+0x510>
 80082b2:	4650      	mov	r0, sl
 80082b4:	4659      	mov	r1, fp
 80082b6:	f7f8 f99f 	bl	80005f8 <__aeabi_dmul>
 80082ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082bc:	9d01      	ldr	r5, [sp, #4]
 80082be:	930f      	str	r3, [sp, #60]	; 0x3c
 80082c0:	4682      	mov	sl, r0
 80082c2:	468b      	mov	fp, r1
 80082c4:	4649      	mov	r1, r9
 80082c6:	4640      	mov	r0, r8
 80082c8:	f7f8 fc46 	bl	8000b58 <__aeabi_d2iz>
 80082cc:	4606      	mov	r6, r0
 80082ce:	f7f8 f929 	bl	8000524 <__aeabi_i2d>
 80082d2:	3630      	adds	r6, #48	; 0x30
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	4640      	mov	r0, r8
 80082da:	4649      	mov	r1, r9
 80082dc:	f7f7 ffd4 	bl	8000288 <__aeabi_dsub>
 80082e0:	f805 6b01 	strb.w	r6, [r5], #1
 80082e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082e6:	429d      	cmp	r5, r3
 80082e8:	4680      	mov	r8, r0
 80082ea:	4689      	mov	r9, r1
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	d124      	bne.n	800833c <_dtoa_r+0x60c>
 80082f2:	4b1b      	ldr	r3, [pc, #108]	; (8008360 <_dtoa_r+0x630>)
 80082f4:	4650      	mov	r0, sl
 80082f6:	4659      	mov	r1, fp
 80082f8:	f7f7 ffc8 	bl	800028c <__adddf3>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	4640      	mov	r0, r8
 8008302:	4649      	mov	r1, r9
 8008304:	f7f8 fc08 	bl	8000b18 <__aeabi_dcmpgt>
 8008308:	2800      	cmp	r0, #0
 800830a:	d173      	bne.n	80083f4 <_dtoa_r+0x6c4>
 800830c:	4652      	mov	r2, sl
 800830e:	465b      	mov	r3, fp
 8008310:	4913      	ldr	r1, [pc, #76]	; (8008360 <_dtoa_r+0x630>)
 8008312:	2000      	movs	r0, #0
 8008314:	f7f7 ffb8 	bl	8000288 <__aeabi_dsub>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	4640      	mov	r0, r8
 800831e:	4649      	mov	r1, r9
 8008320:	f7f8 fbdc 	bl	8000adc <__aeabi_dcmplt>
 8008324:	2800      	cmp	r0, #0
 8008326:	f43f af35 	beq.w	8008194 <_dtoa_r+0x464>
 800832a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800832c:	1e6b      	subs	r3, r5, #1
 800832e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008330:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008334:	2b30      	cmp	r3, #48	; 0x30
 8008336:	d0f8      	beq.n	800832a <_dtoa_r+0x5fa>
 8008338:	9700      	str	r7, [sp, #0]
 800833a:	e049      	b.n	80083d0 <_dtoa_r+0x6a0>
 800833c:	4b05      	ldr	r3, [pc, #20]	; (8008354 <_dtoa_r+0x624>)
 800833e:	f7f8 f95b 	bl	80005f8 <__aeabi_dmul>
 8008342:	4680      	mov	r8, r0
 8008344:	4689      	mov	r9, r1
 8008346:	e7bd      	b.n	80082c4 <_dtoa_r+0x594>
 8008348:	0800ab98 	.word	0x0800ab98
 800834c:	0800ab70 	.word	0x0800ab70
 8008350:	3ff00000 	.word	0x3ff00000
 8008354:	40240000 	.word	0x40240000
 8008358:	401c0000 	.word	0x401c0000
 800835c:	40140000 	.word	0x40140000
 8008360:	3fe00000 	.word	0x3fe00000
 8008364:	9d01      	ldr	r5, [sp, #4]
 8008366:	4656      	mov	r6, sl
 8008368:	465f      	mov	r7, fp
 800836a:	4642      	mov	r2, r8
 800836c:	464b      	mov	r3, r9
 800836e:	4630      	mov	r0, r6
 8008370:	4639      	mov	r1, r7
 8008372:	f7f8 fa6b 	bl	800084c <__aeabi_ddiv>
 8008376:	f7f8 fbef 	bl	8000b58 <__aeabi_d2iz>
 800837a:	4682      	mov	sl, r0
 800837c:	f7f8 f8d2 	bl	8000524 <__aeabi_i2d>
 8008380:	4642      	mov	r2, r8
 8008382:	464b      	mov	r3, r9
 8008384:	f7f8 f938 	bl	80005f8 <__aeabi_dmul>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	4630      	mov	r0, r6
 800838e:	4639      	mov	r1, r7
 8008390:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008394:	f7f7 ff78 	bl	8000288 <__aeabi_dsub>
 8008398:	f805 6b01 	strb.w	r6, [r5], #1
 800839c:	9e01      	ldr	r6, [sp, #4]
 800839e:	9f03      	ldr	r7, [sp, #12]
 80083a0:	1bae      	subs	r6, r5, r6
 80083a2:	42b7      	cmp	r7, r6
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	d135      	bne.n	8008416 <_dtoa_r+0x6e6>
 80083aa:	f7f7 ff6f 	bl	800028c <__adddf3>
 80083ae:	4642      	mov	r2, r8
 80083b0:	464b      	mov	r3, r9
 80083b2:	4606      	mov	r6, r0
 80083b4:	460f      	mov	r7, r1
 80083b6:	f7f8 fbaf 	bl	8000b18 <__aeabi_dcmpgt>
 80083ba:	b9d0      	cbnz	r0, 80083f2 <_dtoa_r+0x6c2>
 80083bc:	4642      	mov	r2, r8
 80083be:	464b      	mov	r3, r9
 80083c0:	4630      	mov	r0, r6
 80083c2:	4639      	mov	r1, r7
 80083c4:	f7f8 fb80 	bl	8000ac8 <__aeabi_dcmpeq>
 80083c8:	b110      	cbz	r0, 80083d0 <_dtoa_r+0x6a0>
 80083ca:	f01a 0f01 	tst.w	sl, #1
 80083ce:	d110      	bne.n	80083f2 <_dtoa_r+0x6c2>
 80083d0:	4620      	mov	r0, r4
 80083d2:	ee18 1a10 	vmov	r1, s16
 80083d6:	f000 fb05 	bl	80089e4 <_Bfree>
 80083da:	2300      	movs	r3, #0
 80083dc:	9800      	ldr	r0, [sp, #0]
 80083de:	702b      	strb	r3, [r5, #0]
 80083e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083e2:	3001      	adds	r0, #1
 80083e4:	6018      	str	r0, [r3, #0]
 80083e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f43f acf1 	beq.w	8007dd0 <_dtoa_r+0xa0>
 80083ee:	601d      	str	r5, [r3, #0]
 80083f0:	e4ee      	b.n	8007dd0 <_dtoa_r+0xa0>
 80083f2:	9f00      	ldr	r7, [sp, #0]
 80083f4:	462b      	mov	r3, r5
 80083f6:	461d      	mov	r5, r3
 80083f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083fc:	2a39      	cmp	r2, #57	; 0x39
 80083fe:	d106      	bne.n	800840e <_dtoa_r+0x6de>
 8008400:	9a01      	ldr	r2, [sp, #4]
 8008402:	429a      	cmp	r2, r3
 8008404:	d1f7      	bne.n	80083f6 <_dtoa_r+0x6c6>
 8008406:	9901      	ldr	r1, [sp, #4]
 8008408:	2230      	movs	r2, #48	; 0x30
 800840a:	3701      	adds	r7, #1
 800840c:	700a      	strb	r2, [r1, #0]
 800840e:	781a      	ldrb	r2, [r3, #0]
 8008410:	3201      	adds	r2, #1
 8008412:	701a      	strb	r2, [r3, #0]
 8008414:	e790      	b.n	8008338 <_dtoa_r+0x608>
 8008416:	4ba6      	ldr	r3, [pc, #664]	; (80086b0 <_dtoa_r+0x980>)
 8008418:	2200      	movs	r2, #0
 800841a:	f7f8 f8ed 	bl	80005f8 <__aeabi_dmul>
 800841e:	2200      	movs	r2, #0
 8008420:	2300      	movs	r3, #0
 8008422:	4606      	mov	r6, r0
 8008424:	460f      	mov	r7, r1
 8008426:	f7f8 fb4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800842a:	2800      	cmp	r0, #0
 800842c:	d09d      	beq.n	800836a <_dtoa_r+0x63a>
 800842e:	e7cf      	b.n	80083d0 <_dtoa_r+0x6a0>
 8008430:	9a08      	ldr	r2, [sp, #32]
 8008432:	2a00      	cmp	r2, #0
 8008434:	f000 80d7 	beq.w	80085e6 <_dtoa_r+0x8b6>
 8008438:	9a06      	ldr	r2, [sp, #24]
 800843a:	2a01      	cmp	r2, #1
 800843c:	f300 80ba 	bgt.w	80085b4 <_dtoa_r+0x884>
 8008440:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008442:	2a00      	cmp	r2, #0
 8008444:	f000 80b2 	beq.w	80085ac <_dtoa_r+0x87c>
 8008448:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800844c:	9e07      	ldr	r6, [sp, #28]
 800844e:	9d04      	ldr	r5, [sp, #16]
 8008450:	9a04      	ldr	r2, [sp, #16]
 8008452:	441a      	add	r2, r3
 8008454:	9204      	str	r2, [sp, #16]
 8008456:	9a05      	ldr	r2, [sp, #20]
 8008458:	2101      	movs	r1, #1
 800845a:	441a      	add	r2, r3
 800845c:	4620      	mov	r0, r4
 800845e:	9205      	str	r2, [sp, #20]
 8008460:	f000 fb78 	bl	8008b54 <__i2b>
 8008464:	4607      	mov	r7, r0
 8008466:	2d00      	cmp	r5, #0
 8008468:	dd0c      	ble.n	8008484 <_dtoa_r+0x754>
 800846a:	9b05      	ldr	r3, [sp, #20]
 800846c:	2b00      	cmp	r3, #0
 800846e:	dd09      	ble.n	8008484 <_dtoa_r+0x754>
 8008470:	42ab      	cmp	r3, r5
 8008472:	9a04      	ldr	r2, [sp, #16]
 8008474:	bfa8      	it	ge
 8008476:	462b      	movge	r3, r5
 8008478:	1ad2      	subs	r2, r2, r3
 800847a:	9204      	str	r2, [sp, #16]
 800847c:	9a05      	ldr	r2, [sp, #20]
 800847e:	1aed      	subs	r5, r5, r3
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	9305      	str	r3, [sp, #20]
 8008484:	9b07      	ldr	r3, [sp, #28]
 8008486:	b31b      	cbz	r3, 80084d0 <_dtoa_r+0x7a0>
 8008488:	9b08      	ldr	r3, [sp, #32]
 800848a:	2b00      	cmp	r3, #0
 800848c:	f000 80af 	beq.w	80085ee <_dtoa_r+0x8be>
 8008490:	2e00      	cmp	r6, #0
 8008492:	dd13      	ble.n	80084bc <_dtoa_r+0x78c>
 8008494:	4639      	mov	r1, r7
 8008496:	4632      	mov	r2, r6
 8008498:	4620      	mov	r0, r4
 800849a:	f000 fc1b 	bl	8008cd4 <__pow5mult>
 800849e:	ee18 2a10 	vmov	r2, s16
 80084a2:	4601      	mov	r1, r0
 80084a4:	4607      	mov	r7, r0
 80084a6:	4620      	mov	r0, r4
 80084a8:	f000 fb6a 	bl	8008b80 <__multiply>
 80084ac:	ee18 1a10 	vmov	r1, s16
 80084b0:	4680      	mov	r8, r0
 80084b2:	4620      	mov	r0, r4
 80084b4:	f000 fa96 	bl	80089e4 <_Bfree>
 80084b8:	ee08 8a10 	vmov	s16, r8
 80084bc:	9b07      	ldr	r3, [sp, #28]
 80084be:	1b9a      	subs	r2, r3, r6
 80084c0:	d006      	beq.n	80084d0 <_dtoa_r+0x7a0>
 80084c2:	ee18 1a10 	vmov	r1, s16
 80084c6:	4620      	mov	r0, r4
 80084c8:	f000 fc04 	bl	8008cd4 <__pow5mult>
 80084cc:	ee08 0a10 	vmov	s16, r0
 80084d0:	2101      	movs	r1, #1
 80084d2:	4620      	mov	r0, r4
 80084d4:	f000 fb3e 	bl	8008b54 <__i2b>
 80084d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084da:	2b00      	cmp	r3, #0
 80084dc:	4606      	mov	r6, r0
 80084de:	f340 8088 	ble.w	80085f2 <_dtoa_r+0x8c2>
 80084e2:	461a      	mov	r2, r3
 80084e4:	4601      	mov	r1, r0
 80084e6:	4620      	mov	r0, r4
 80084e8:	f000 fbf4 	bl	8008cd4 <__pow5mult>
 80084ec:	9b06      	ldr	r3, [sp, #24]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	4606      	mov	r6, r0
 80084f2:	f340 8081 	ble.w	80085f8 <_dtoa_r+0x8c8>
 80084f6:	f04f 0800 	mov.w	r8, #0
 80084fa:	6933      	ldr	r3, [r6, #16]
 80084fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008500:	6918      	ldr	r0, [r3, #16]
 8008502:	f000 fad7 	bl	8008ab4 <__hi0bits>
 8008506:	f1c0 0020 	rsb	r0, r0, #32
 800850a:	9b05      	ldr	r3, [sp, #20]
 800850c:	4418      	add	r0, r3
 800850e:	f010 001f 	ands.w	r0, r0, #31
 8008512:	f000 8092 	beq.w	800863a <_dtoa_r+0x90a>
 8008516:	f1c0 0320 	rsb	r3, r0, #32
 800851a:	2b04      	cmp	r3, #4
 800851c:	f340 808a 	ble.w	8008634 <_dtoa_r+0x904>
 8008520:	f1c0 001c 	rsb	r0, r0, #28
 8008524:	9b04      	ldr	r3, [sp, #16]
 8008526:	4403      	add	r3, r0
 8008528:	9304      	str	r3, [sp, #16]
 800852a:	9b05      	ldr	r3, [sp, #20]
 800852c:	4403      	add	r3, r0
 800852e:	4405      	add	r5, r0
 8008530:	9305      	str	r3, [sp, #20]
 8008532:	9b04      	ldr	r3, [sp, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	dd07      	ble.n	8008548 <_dtoa_r+0x818>
 8008538:	ee18 1a10 	vmov	r1, s16
 800853c:	461a      	mov	r2, r3
 800853e:	4620      	mov	r0, r4
 8008540:	f000 fc22 	bl	8008d88 <__lshift>
 8008544:	ee08 0a10 	vmov	s16, r0
 8008548:	9b05      	ldr	r3, [sp, #20]
 800854a:	2b00      	cmp	r3, #0
 800854c:	dd05      	ble.n	800855a <_dtoa_r+0x82a>
 800854e:	4631      	mov	r1, r6
 8008550:	461a      	mov	r2, r3
 8008552:	4620      	mov	r0, r4
 8008554:	f000 fc18 	bl	8008d88 <__lshift>
 8008558:	4606      	mov	r6, r0
 800855a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800855c:	2b00      	cmp	r3, #0
 800855e:	d06e      	beq.n	800863e <_dtoa_r+0x90e>
 8008560:	ee18 0a10 	vmov	r0, s16
 8008564:	4631      	mov	r1, r6
 8008566:	f000 fc7f 	bl	8008e68 <__mcmp>
 800856a:	2800      	cmp	r0, #0
 800856c:	da67      	bge.n	800863e <_dtoa_r+0x90e>
 800856e:	9b00      	ldr	r3, [sp, #0]
 8008570:	3b01      	subs	r3, #1
 8008572:	ee18 1a10 	vmov	r1, s16
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	220a      	movs	r2, #10
 800857a:	2300      	movs	r3, #0
 800857c:	4620      	mov	r0, r4
 800857e:	f000 fa53 	bl	8008a28 <__multadd>
 8008582:	9b08      	ldr	r3, [sp, #32]
 8008584:	ee08 0a10 	vmov	s16, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 81b1 	beq.w	80088f0 <_dtoa_r+0xbc0>
 800858e:	2300      	movs	r3, #0
 8008590:	4639      	mov	r1, r7
 8008592:	220a      	movs	r2, #10
 8008594:	4620      	mov	r0, r4
 8008596:	f000 fa47 	bl	8008a28 <__multadd>
 800859a:	9b02      	ldr	r3, [sp, #8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	4607      	mov	r7, r0
 80085a0:	f300 808e 	bgt.w	80086c0 <_dtoa_r+0x990>
 80085a4:	9b06      	ldr	r3, [sp, #24]
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	dc51      	bgt.n	800864e <_dtoa_r+0x91e>
 80085aa:	e089      	b.n	80086c0 <_dtoa_r+0x990>
 80085ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085b2:	e74b      	b.n	800844c <_dtoa_r+0x71c>
 80085b4:	9b03      	ldr	r3, [sp, #12]
 80085b6:	1e5e      	subs	r6, r3, #1
 80085b8:	9b07      	ldr	r3, [sp, #28]
 80085ba:	42b3      	cmp	r3, r6
 80085bc:	bfbf      	itttt	lt
 80085be:	9b07      	ldrlt	r3, [sp, #28]
 80085c0:	9607      	strlt	r6, [sp, #28]
 80085c2:	1af2      	sublt	r2, r6, r3
 80085c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80085c6:	bfb6      	itet	lt
 80085c8:	189b      	addlt	r3, r3, r2
 80085ca:	1b9e      	subge	r6, r3, r6
 80085cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80085ce:	9b03      	ldr	r3, [sp, #12]
 80085d0:	bfb8      	it	lt
 80085d2:	2600      	movlt	r6, #0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	bfb7      	itett	lt
 80085d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80085dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80085e0:	1a9d      	sublt	r5, r3, r2
 80085e2:	2300      	movlt	r3, #0
 80085e4:	e734      	b.n	8008450 <_dtoa_r+0x720>
 80085e6:	9e07      	ldr	r6, [sp, #28]
 80085e8:	9d04      	ldr	r5, [sp, #16]
 80085ea:	9f08      	ldr	r7, [sp, #32]
 80085ec:	e73b      	b.n	8008466 <_dtoa_r+0x736>
 80085ee:	9a07      	ldr	r2, [sp, #28]
 80085f0:	e767      	b.n	80084c2 <_dtoa_r+0x792>
 80085f2:	9b06      	ldr	r3, [sp, #24]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	dc18      	bgt.n	800862a <_dtoa_r+0x8fa>
 80085f8:	f1ba 0f00 	cmp.w	sl, #0
 80085fc:	d115      	bne.n	800862a <_dtoa_r+0x8fa>
 80085fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008602:	b993      	cbnz	r3, 800862a <_dtoa_r+0x8fa>
 8008604:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008608:	0d1b      	lsrs	r3, r3, #20
 800860a:	051b      	lsls	r3, r3, #20
 800860c:	b183      	cbz	r3, 8008630 <_dtoa_r+0x900>
 800860e:	9b04      	ldr	r3, [sp, #16]
 8008610:	3301      	adds	r3, #1
 8008612:	9304      	str	r3, [sp, #16]
 8008614:	9b05      	ldr	r3, [sp, #20]
 8008616:	3301      	adds	r3, #1
 8008618:	9305      	str	r3, [sp, #20]
 800861a:	f04f 0801 	mov.w	r8, #1
 800861e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008620:	2b00      	cmp	r3, #0
 8008622:	f47f af6a 	bne.w	80084fa <_dtoa_r+0x7ca>
 8008626:	2001      	movs	r0, #1
 8008628:	e76f      	b.n	800850a <_dtoa_r+0x7da>
 800862a:	f04f 0800 	mov.w	r8, #0
 800862e:	e7f6      	b.n	800861e <_dtoa_r+0x8ee>
 8008630:	4698      	mov	r8, r3
 8008632:	e7f4      	b.n	800861e <_dtoa_r+0x8ee>
 8008634:	f43f af7d 	beq.w	8008532 <_dtoa_r+0x802>
 8008638:	4618      	mov	r0, r3
 800863a:	301c      	adds	r0, #28
 800863c:	e772      	b.n	8008524 <_dtoa_r+0x7f4>
 800863e:	9b03      	ldr	r3, [sp, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	dc37      	bgt.n	80086b4 <_dtoa_r+0x984>
 8008644:	9b06      	ldr	r3, [sp, #24]
 8008646:	2b02      	cmp	r3, #2
 8008648:	dd34      	ble.n	80086b4 <_dtoa_r+0x984>
 800864a:	9b03      	ldr	r3, [sp, #12]
 800864c:	9302      	str	r3, [sp, #8]
 800864e:	9b02      	ldr	r3, [sp, #8]
 8008650:	b96b      	cbnz	r3, 800866e <_dtoa_r+0x93e>
 8008652:	4631      	mov	r1, r6
 8008654:	2205      	movs	r2, #5
 8008656:	4620      	mov	r0, r4
 8008658:	f000 f9e6 	bl	8008a28 <__multadd>
 800865c:	4601      	mov	r1, r0
 800865e:	4606      	mov	r6, r0
 8008660:	ee18 0a10 	vmov	r0, s16
 8008664:	f000 fc00 	bl	8008e68 <__mcmp>
 8008668:	2800      	cmp	r0, #0
 800866a:	f73f adbb 	bgt.w	80081e4 <_dtoa_r+0x4b4>
 800866e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008670:	9d01      	ldr	r5, [sp, #4]
 8008672:	43db      	mvns	r3, r3
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	f04f 0800 	mov.w	r8, #0
 800867a:	4631      	mov	r1, r6
 800867c:	4620      	mov	r0, r4
 800867e:	f000 f9b1 	bl	80089e4 <_Bfree>
 8008682:	2f00      	cmp	r7, #0
 8008684:	f43f aea4 	beq.w	80083d0 <_dtoa_r+0x6a0>
 8008688:	f1b8 0f00 	cmp.w	r8, #0
 800868c:	d005      	beq.n	800869a <_dtoa_r+0x96a>
 800868e:	45b8      	cmp	r8, r7
 8008690:	d003      	beq.n	800869a <_dtoa_r+0x96a>
 8008692:	4641      	mov	r1, r8
 8008694:	4620      	mov	r0, r4
 8008696:	f000 f9a5 	bl	80089e4 <_Bfree>
 800869a:	4639      	mov	r1, r7
 800869c:	4620      	mov	r0, r4
 800869e:	f000 f9a1 	bl	80089e4 <_Bfree>
 80086a2:	e695      	b.n	80083d0 <_dtoa_r+0x6a0>
 80086a4:	2600      	movs	r6, #0
 80086a6:	4637      	mov	r7, r6
 80086a8:	e7e1      	b.n	800866e <_dtoa_r+0x93e>
 80086aa:	9700      	str	r7, [sp, #0]
 80086ac:	4637      	mov	r7, r6
 80086ae:	e599      	b.n	80081e4 <_dtoa_r+0x4b4>
 80086b0:	40240000 	.word	0x40240000
 80086b4:	9b08      	ldr	r3, [sp, #32]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f000 80ca 	beq.w	8008850 <_dtoa_r+0xb20>
 80086bc:	9b03      	ldr	r3, [sp, #12]
 80086be:	9302      	str	r3, [sp, #8]
 80086c0:	2d00      	cmp	r5, #0
 80086c2:	dd05      	ble.n	80086d0 <_dtoa_r+0x9a0>
 80086c4:	4639      	mov	r1, r7
 80086c6:	462a      	mov	r2, r5
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 fb5d 	bl	8008d88 <__lshift>
 80086ce:	4607      	mov	r7, r0
 80086d0:	f1b8 0f00 	cmp.w	r8, #0
 80086d4:	d05b      	beq.n	800878e <_dtoa_r+0xa5e>
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	4620      	mov	r0, r4
 80086da:	f000 f943 	bl	8008964 <_Balloc>
 80086de:	4605      	mov	r5, r0
 80086e0:	b928      	cbnz	r0, 80086ee <_dtoa_r+0x9be>
 80086e2:	4b87      	ldr	r3, [pc, #540]	; (8008900 <_dtoa_r+0xbd0>)
 80086e4:	4602      	mov	r2, r0
 80086e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80086ea:	f7ff bb3b 	b.w	8007d64 <_dtoa_r+0x34>
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	3202      	adds	r2, #2
 80086f2:	0092      	lsls	r2, r2, #2
 80086f4:	f107 010c 	add.w	r1, r7, #12
 80086f8:	300c      	adds	r0, #12
 80086fa:	f000 f925 	bl	8008948 <memcpy>
 80086fe:	2201      	movs	r2, #1
 8008700:	4629      	mov	r1, r5
 8008702:	4620      	mov	r0, r4
 8008704:	f000 fb40 	bl	8008d88 <__lshift>
 8008708:	9b01      	ldr	r3, [sp, #4]
 800870a:	f103 0901 	add.w	r9, r3, #1
 800870e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008712:	4413      	add	r3, r2
 8008714:	9305      	str	r3, [sp, #20]
 8008716:	f00a 0301 	and.w	r3, sl, #1
 800871a:	46b8      	mov	r8, r7
 800871c:	9304      	str	r3, [sp, #16]
 800871e:	4607      	mov	r7, r0
 8008720:	4631      	mov	r1, r6
 8008722:	ee18 0a10 	vmov	r0, s16
 8008726:	f7ff fa77 	bl	8007c18 <quorem>
 800872a:	4641      	mov	r1, r8
 800872c:	9002      	str	r0, [sp, #8]
 800872e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008732:	ee18 0a10 	vmov	r0, s16
 8008736:	f000 fb97 	bl	8008e68 <__mcmp>
 800873a:	463a      	mov	r2, r7
 800873c:	9003      	str	r0, [sp, #12]
 800873e:	4631      	mov	r1, r6
 8008740:	4620      	mov	r0, r4
 8008742:	f000 fbad 	bl	8008ea0 <__mdiff>
 8008746:	68c2      	ldr	r2, [r0, #12]
 8008748:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800874c:	4605      	mov	r5, r0
 800874e:	bb02      	cbnz	r2, 8008792 <_dtoa_r+0xa62>
 8008750:	4601      	mov	r1, r0
 8008752:	ee18 0a10 	vmov	r0, s16
 8008756:	f000 fb87 	bl	8008e68 <__mcmp>
 800875a:	4602      	mov	r2, r0
 800875c:	4629      	mov	r1, r5
 800875e:	4620      	mov	r0, r4
 8008760:	9207      	str	r2, [sp, #28]
 8008762:	f000 f93f 	bl	80089e4 <_Bfree>
 8008766:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800876a:	ea43 0102 	orr.w	r1, r3, r2
 800876e:	9b04      	ldr	r3, [sp, #16]
 8008770:	430b      	orrs	r3, r1
 8008772:	464d      	mov	r5, r9
 8008774:	d10f      	bne.n	8008796 <_dtoa_r+0xa66>
 8008776:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800877a:	d02a      	beq.n	80087d2 <_dtoa_r+0xaa2>
 800877c:	9b03      	ldr	r3, [sp, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	dd02      	ble.n	8008788 <_dtoa_r+0xa58>
 8008782:	9b02      	ldr	r3, [sp, #8]
 8008784:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008788:	f88b a000 	strb.w	sl, [fp]
 800878c:	e775      	b.n	800867a <_dtoa_r+0x94a>
 800878e:	4638      	mov	r0, r7
 8008790:	e7ba      	b.n	8008708 <_dtoa_r+0x9d8>
 8008792:	2201      	movs	r2, #1
 8008794:	e7e2      	b.n	800875c <_dtoa_r+0xa2c>
 8008796:	9b03      	ldr	r3, [sp, #12]
 8008798:	2b00      	cmp	r3, #0
 800879a:	db04      	blt.n	80087a6 <_dtoa_r+0xa76>
 800879c:	9906      	ldr	r1, [sp, #24]
 800879e:	430b      	orrs	r3, r1
 80087a0:	9904      	ldr	r1, [sp, #16]
 80087a2:	430b      	orrs	r3, r1
 80087a4:	d122      	bne.n	80087ec <_dtoa_r+0xabc>
 80087a6:	2a00      	cmp	r2, #0
 80087a8:	ddee      	ble.n	8008788 <_dtoa_r+0xa58>
 80087aa:	ee18 1a10 	vmov	r1, s16
 80087ae:	2201      	movs	r2, #1
 80087b0:	4620      	mov	r0, r4
 80087b2:	f000 fae9 	bl	8008d88 <__lshift>
 80087b6:	4631      	mov	r1, r6
 80087b8:	ee08 0a10 	vmov	s16, r0
 80087bc:	f000 fb54 	bl	8008e68 <__mcmp>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	dc03      	bgt.n	80087cc <_dtoa_r+0xa9c>
 80087c4:	d1e0      	bne.n	8008788 <_dtoa_r+0xa58>
 80087c6:	f01a 0f01 	tst.w	sl, #1
 80087ca:	d0dd      	beq.n	8008788 <_dtoa_r+0xa58>
 80087cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80087d0:	d1d7      	bne.n	8008782 <_dtoa_r+0xa52>
 80087d2:	2339      	movs	r3, #57	; 0x39
 80087d4:	f88b 3000 	strb.w	r3, [fp]
 80087d8:	462b      	mov	r3, r5
 80087da:	461d      	mov	r5, r3
 80087dc:	3b01      	subs	r3, #1
 80087de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80087e2:	2a39      	cmp	r2, #57	; 0x39
 80087e4:	d071      	beq.n	80088ca <_dtoa_r+0xb9a>
 80087e6:	3201      	adds	r2, #1
 80087e8:	701a      	strb	r2, [r3, #0]
 80087ea:	e746      	b.n	800867a <_dtoa_r+0x94a>
 80087ec:	2a00      	cmp	r2, #0
 80087ee:	dd07      	ble.n	8008800 <_dtoa_r+0xad0>
 80087f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80087f4:	d0ed      	beq.n	80087d2 <_dtoa_r+0xaa2>
 80087f6:	f10a 0301 	add.w	r3, sl, #1
 80087fa:	f88b 3000 	strb.w	r3, [fp]
 80087fe:	e73c      	b.n	800867a <_dtoa_r+0x94a>
 8008800:	9b05      	ldr	r3, [sp, #20]
 8008802:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008806:	4599      	cmp	r9, r3
 8008808:	d047      	beq.n	800889a <_dtoa_r+0xb6a>
 800880a:	ee18 1a10 	vmov	r1, s16
 800880e:	2300      	movs	r3, #0
 8008810:	220a      	movs	r2, #10
 8008812:	4620      	mov	r0, r4
 8008814:	f000 f908 	bl	8008a28 <__multadd>
 8008818:	45b8      	cmp	r8, r7
 800881a:	ee08 0a10 	vmov	s16, r0
 800881e:	f04f 0300 	mov.w	r3, #0
 8008822:	f04f 020a 	mov.w	r2, #10
 8008826:	4641      	mov	r1, r8
 8008828:	4620      	mov	r0, r4
 800882a:	d106      	bne.n	800883a <_dtoa_r+0xb0a>
 800882c:	f000 f8fc 	bl	8008a28 <__multadd>
 8008830:	4680      	mov	r8, r0
 8008832:	4607      	mov	r7, r0
 8008834:	f109 0901 	add.w	r9, r9, #1
 8008838:	e772      	b.n	8008720 <_dtoa_r+0x9f0>
 800883a:	f000 f8f5 	bl	8008a28 <__multadd>
 800883e:	4639      	mov	r1, r7
 8008840:	4680      	mov	r8, r0
 8008842:	2300      	movs	r3, #0
 8008844:	220a      	movs	r2, #10
 8008846:	4620      	mov	r0, r4
 8008848:	f000 f8ee 	bl	8008a28 <__multadd>
 800884c:	4607      	mov	r7, r0
 800884e:	e7f1      	b.n	8008834 <_dtoa_r+0xb04>
 8008850:	9b03      	ldr	r3, [sp, #12]
 8008852:	9302      	str	r3, [sp, #8]
 8008854:	9d01      	ldr	r5, [sp, #4]
 8008856:	ee18 0a10 	vmov	r0, s16
 800885a:	4631      	mov	r1, r6
 800885c:	f7ff f9dc 	bl	8007c18 <quorem>
 8008860:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008864:	9b01      	ldr	r3, [sp, #4]
 8008866:	f805 ab01 	strb.w	sl, [r5], #1
 800886a:	1aea      	subs	r2, r5, r3
 800886c:	9b02      	ldr	r3, [sp, #8]
 800886e:	4293      	cmp	r3, r2
 8008870:	dd09      	ble.n	8008886 <_dtoa_r+0xb56>
 8008872:	ee18 1a10 	vmov	r1, s16
 8008876:	2300      	movs	r3, #0
 8008878:	220a      	movs	r2, #10
 800887a:	4620      	mov	r0, r4
 800887c:	f000 f8d4 	bl	8008a28 <__multadd>
 8008880:	ee08 0a10 	vmov	s16, r0
 8008884:	e7e7      	b.n	8008856 <_dtoa_r+0xb26>
 8008886:	9b02      	ldr	r3, [sp, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	bfc8      	it	gt
 800888c:	461d      	movgt	r5, r3
 800888e:	9b01      	ldr	r3, [sp, #4]
 8008890:	bfd8      	it	le
 8008892:	2501      	movle	r5, #1
 8008894:	441d      	add	r5, r3
 8008896:	f04f 0800 	mov.w	r8, #0
 800889a:	ee18 1a10 	vmov	r1, s16
 800889e:	2201      	movs	r2, #1
 80088a0:	4620      	mov	r0, r4
 80088a2:	f000 fa71 	bl	8008d88 <__lshift>
 80088a6:	4631      	mov	r1, r6
 80088a8:	ee08 0a10 	vmov	s16, r0
 80088ac:	f000 fadc 	bl	8008e68 <__mcmp>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	dc91      	bgt.n	80087d8 <_dtoa_r+0xaa8>
 80088b4:	d102      	bne.n	80088bc <_dtoa_r+0xb8c>
 80088b6:	f01a 0f01 	tst.w	sl, #1
 80088ba:	d18d      	bne.n	80087d8 <_dtoa_r+0xaa8>
 80088bc:	462b      	mov	r3, r5
 80088be:	461d      	mov	r5, r3
 80088c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088c4:	2a30      	cmp	r2, #48	; 0x30
 80088c6:	d0fa      	beq.n	80088be <_dtoa_r+0xb8e>
 80088c8:	e6d7      	b.n	800867a <_dtoa_r+0x94a>
 80088ca:	9a01      	ldr	r2, [sp, #4]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d184      	bne.n	80087da <_dtoa_r+0xaaa>
 80088d0:	9b00      	ldr	r3, [sp, #0]
 80088d2:	3301      	adds	r3, #1
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	2331      	movs	r3, #49	; 0x31
 80088d8:	7013      	strb	r3, [r2, #0]
 80088da:	e6ce      	b.n	800867a <_dtoa_r+0x94a>
 80088dc:	4b09      	ldr	r3, [pc, #36]	; (8008904 <_dtoa_r+0xbd4>)
 80088de:	f7ff ba95 	b.w	8007e0c <_dtoa_r+0xdc>
 80088e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f47f aa6e 	bne.w	8007dc6 <_dtoa_r+0x96>
 80088ea:	4b07      	ldr	r3, [pc, #28]	; (8008908 <_dtoa_r+0xbd8>)
 80088ec:	f7ff ba8e 	b.w	8007e0c <_dtoa_r+0xdc>
 80088f0:	9b02      	ldr	r3, [sp, #8]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	dcae      	bgt.n	8008854 <_dtoa_r+0xb24>
 80088f6:	9b06      	ldr	r3, [sp, #24]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	f73f aea8 	bgt.w	800864e <_dtoa_r+0x91e>
 80088fe:	e7a9      	b.n	8008854 <_dtoa_r+0xb24>
 8008900:	0800aafd 	.word	0x0800aafd
 8008904:	0800ac81 	.word	0x0800ac81
 8008908:	0800aa7e 	.word	0x0800aa7e

0800890c <_localeconv_r>:
 800890c:	4800      	ldr	r0, [pc, #0]	; (8008910 <_localeconv_r+0x4>)
 800890e:	4770      	bx	lr
 8008910:	20000160 	.word	0x20000160

08008914 <_lseek_r>:
 8008914:	b538      	push	{r3, r4, r5, lr}
 8008916:	4d07      	ldr	r5, [pc, #28]	; (8008934 <_lseek_r+0x20>)
 8008918:	4604      	mov	r4, r0
 800891a:	4608      	mov	r0, r1
 800891c:	4611      	mov	r1, r2
 800891e:	2200      	movs	r2, #0
 8008920:	602a      	str	r2, [r5, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	f7f9 fdb4 	bl	8002490 <_lseek>
 8008928:	1c43      	adds	r3, r0, #1
 800892a:	d102      	bne.n	8008932 <_lseek_r+0x1e>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	b103      	cbz	r3, 8008932 <_lseek_r+0x1e>
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	20000590 	.word	0x20000590

08008938 <malloc>:
 8008938:	4b02      	ldr	r3, [pc, #8]	; (8008944 <malloc+0xc>)
 800893a:	4601      	mov	r1, r0
 800893c:	6818      	ldr	r0, [r3, #0]
 800893e:	f000 bc17 	b.w	8009170 <_malloc_r>
 8008942:	bf00      	nop
 8008944:	2000000c 	.word	0x2000000c

08008948 <memcpy>:
 8008948:	440a      	add	r2, r1
 800894a:	4291      	cmp	r1, r2
 800894c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008950:	d100      	bne.n	8008954 <memcpy+0xc>
 8008952:	4770      	bx	lr
 8008954:	b510      	push	{r4, lr}
 8008956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800895a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800895e:	4291      	cmp	r1, r2
 8008960:	d1f9      	bne.n	8008956 <memcpy+0xe>
 8008962:	bd10      	pop	{r4, pc}

08008964 <_Balloc>:
 8008964:	b570      	push	{r4, r5, r6, lr}
 8008966:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008968:	4604      	mov	r4, r0
 800896a:	460d      	mov	r5, r1
 800896c:	b976      	cbnz	r6, 800898c <_Balloc+0x28>
 800896e:	2010      	movs	r0, #16
 8008970:	f7ff ffe2 	bl	8008938 <malloc>
 8008974:	4602      	mov	r2, r0
 8008976:	6260      	str	r0, [r4, #36]	; 0x24
 8008978:	b920      	cbnz	r0, 8008984 <_Balloc+0x20>
 800897a:	4b18      	ldr	r3, [pc, #96]	; (80089dc <_Balloc+0x78>)
 800897c:	4818      	ldr	r0, [pc, #96]	; (80089e0 <_Balloc+0x7c>)
 800897e:	2166      	movs	r1, #102	; 0x66
 8008980:	f001 fa76 	bl	8009e70 <__assert_func>
 8008984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008988:	6006      	str	r6, [r0, #0]
 800898a:	60c6      	str	r6, [r0, #12]
 800898c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800898e:	68f3      	ldr	r3, [r6, #12]
 8008990:	b183      	cbz	r3, 80089b4 <_Balloc+0x50>
 8008992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800899a:	b9b8      	cbnz	r0, 80089cc <_Balloc+0x68>
 800899c:	2101      	movs	r1, #1
 800899e:	fa01 f605 	lsl.w	r6, r1, r5
 80089a2:	1d72      	adds	r2, r6, #5
 80089a4:	0092      	lsls	r2, r2, #2
 80089a6:	4620      	mov	r0, r4
 80089a8:	f000 fb60 	bl	800906c <_calloc_r>
 80089ac:	b160      	cbz	r0, 80089c8 <_Balloc+0x64>
 80089ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089b2:	e00e      	b.n	80089d2 <_Balloc+0x6e>
 80089b4:	2221      	movs	r2, #33	; 0x21
 80089b6:	2104      	movs	r1, #4
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 fb57 	bl	800906c <_calloc_r>
 80089be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089c0:	60f0      	str	r0, [r6, #12]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e4      	bne.n	8008992 <_Balloc+0x2e>
 80089c8:	2000      	movs	r0, #0
 80089ca:	bd70      	pop	{r4, r5, r6, pc}
 80089cc:	6802      	ldr	r2, [r0, #0]
 80089ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089d2:	2300      	movs	r3, #0
 80089d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089d8:	e7f7      	b.n	80089ca <_Balloc+0x66>
 80089da:	bf00      	nop
 80089dc:	0800aa8b 	.word	0x0800aa8b
 80089e0:	0800ab0e 	.word	0x0800ab0e

080089e4 <_Bfree>:
 80089e4:	b570      	push	{r4, r5, r6, lr}
 80089e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089e8:	4605      	mov	r5, r0
 80089ea:	460c      	mov	r4, r1
 80089ec:	b976      	cbnz	r6, 8008a0c <_Bfree+0x28>
 80089ee:	2010      	movs	r0, #16
 80089f0:	f7ff ffa2 	bl	8008938 <malloc>
 80089f4:	4602      	mov	r2, r0
 80089f6:	6268      	str	r0, [r5, #36]	; 0x24
 80089f8:	b920      	cbnz	r0, 8008a04 <_Bfree+0x20>
 80089fa:	4b09      	ldr	r3, [pc, #36]	; (8008a20 <_Bfree+0x3c>)
 80089fc:	4809      	ldr	r0, [pc, #36]	; (8008a24 <_Bfree+0x40>)
 80089fe:	218a      	movs	r1, #138	; 0x8a
 8008a00:	f001 fa36 	bl	8009e70 <__assert_func>
 8008a04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a08:	6006      	str	r6, [r0, #0]
 8008a0a:	60c6      	str	r6, [r0, #12]
 8008a0c:	b13c      	cbz	r4, 8008a1e <_Bfree+0x3a>
 8008a0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a10:	6862      	ldr	r2, [r4, #4]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a18:	6021      	str	r1, [r4, #0]
 8008a1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a1e:	bd70      	pop	{r4, r5, r6, pc}
 8008a20:	0800aa8b 	.word	0x0800aa8b
 8008a24:	0800ab0e 	.word	0x0800ab0e

08008a28 <__multadd>:
 8008a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a2c:	690d      	ldr	r5, [r1, #16]
 8008a2e:	4607      	mov	r7, r0
 8008a30:	460c      	mov	r4, r1
 8008a32:	461e      	mov	r6, r3
 8008a34:	f101 0c14 	add.w	ip, r1, #20
 8008a38:	2000      	movs	r0, #0
 8008a3a:	f8dc 3000 	ldr.w	r3, [ip]
 8008a3e:	b299      	uxth	r1, r3
 8008a40:	fb02 6101 	mla	r1, r2, r1, r6
 8008a44:	0c1e      	lsrs	r6, r3, #16
 8008a46:	0c0b      	lsrs	r3, r1, #16
 8008a48:	fb02 3306 	mla	r3, r2, r6, r3
 8008a4c:	b289      	uxth	r1, r1
 8008a4e:	3001      	adds	r0, #1
 8008a50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a54:	4285      	cmp	r5, r0
 8008a56:	f84c 1b04 	str.w	r1, [ip], #4
 8008a5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a5e:	dcec      	bgt.n	8008a3a <__multadd+0x12>
 8008a60:	b30e      	cbz	r6, 8008aa6 <__multadd+0x7e>
 8008a62:	68a3      	ldr	r3, [r4, #8]
 8008a64:	42ab      	cmp	r3, r5
 8008a66:	dc19      	bgt.n	8008a9c <__multadd+0x74>
 8008a68:	6861      	ldr	r1, [r4, #4]
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	3101      	adds	r1, #1
 8008a6e:	f7ff ff79 	bl	8008964 <_Balloc>
 8008a72:	4680      	mov	r8, r0
 8008a74:	b928      	cbnz	r0, 8008a82 <__multadd+0x5a>
 8008a76:	4602      	mov	r2, r0
 8008a78:	4b0c      	ldr	r3, [pc, #48]	; (8008aac <__multadd+0x84>)
 8008a7a:	480d      	ldr	r0, [pc, #52]	; (8008ab0 <__multadd+0x88>)
 8008a7c:	21b5      	movs	r1, #181	; 0xb5
 8008a7e:	f001 f9f7 	bl	8009e70 <__assert_func>
 8008a82:	6922      	ldr	r2, [r4, #16]
 8008a84:	3202      	adds	r2, #2
 8008a86:	f104 010c 	add.w	r1, r4, #12
 8008a8a:	0092      	lsls	r2, r2, #2
 8008a8c:	300c      	adds	r0, #12
 8008a8e:	f7ff ff5b 	bl	8008948 <memcpy>
 8008a92:	4621      	mov	r1, r4
 8008a94:	4638      	mov	r0, r7
 8008a96:	f7ff ffa5 	bl	80089e4 <_Bfree>
 8008a9a:	4644      	mov	r4, r8
 8008a9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008aa0:	3501      	adds	r5, #1
 8008aa2:	615e      	str	r6, [r3, #20]
 8008aa4:	6125      	str	r5, [r4, #16]
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aac:	0800aafd 	.word	0x0800aafd
 8008ab0:	0800ab0e 	.word	0x0800ab0e

08008ab4 <__hi0bits>:
 8008ab4:	0c03      	lsrs	r3, r0, #16
 8008ab6:	041b      	lsls	r3, r3, #16
 8008ab8:	b9d3      	cbnz	r3, 8008af0 <__hi0bits+0x3c>
 8008aba:	0400      	lsls	r0, r0, #16
 8008abc:	2310      	movs	r3, #16
 8008abe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ac2:	bf04      	itt	eq
 8008ac4:	0200      	lsleq	r0, r0, #8
 8008ac6:	3308      	addeq	r3, #8
 8008ac8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008acc:	bf04      	itt	eq
 8008ace:	0100      	lsleq	r0, r0, #4
 8008ad0:	3304      	addeq	r3, #4
 8008ad2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ad6:	bf04      	itt	eq
 8008ad8:	0080      	lsleq	r0, r0, #2
 8008ada:	3302      	addeq	r3, #2
 8008adc:	2800      	cmp	r0, #0
 8008ade:	db05      	blt.n	8008aec <__hi0bits+0x38>
 8008ae0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ae4:	f103 0301 	add.w	r3, r3, #1
 8008ae8:	bf08      	it	eq
 8008aea:	2320      	moveq	r3, #32
 8008aec:	4618      	mov	r0, r3
 8008aee:	4770      	bx	lr
 8008af0:	2300      	movs	r3, #0
 8008af2:	e7e4      	b.n	8008abe <__hi0bits+0xa>

08008af4 <__lo0bits>:
 8008af4:	6803      	ldr	r3, [r0, #0]
 8008af6:	f013 0207 	ands.w	r2, r3, #7
 8008afa:	4601      	mov	r1, r0
 8008afc:	d00b      	beq.n	8008b16 <__lo0bits+0x22>
 8008afe:	07da      	lsls	r2, r3, #31
 8008b00:	d423      	bmi.n	8008b4a <__lo0bits+0x56>
 8008b02:	0798      	lsls	r0, r3, #30
 8008b04:	bf49      	itett	mi
 8008b06:	085b      	lsrmi	r3, r3, #1
 8008b08:	089b      	lsrpl	r3, r3, #2
 8008b0a:	2001      	movmi	r0, #1
 8008b0c:	600b      	strmi	r3, [r1, #0]
 8008b0e:	bf5c      	itt	pl
 8008b10:	600b      	strpl	r3, [r1, #0]
 8008b12:	2002      	movpl	r0, #2
 8008b14:	4770      	bx	lr
 8008b16:	b298      	uxth	r0, r3
 8008b18:	b9a8      	cbnz	r0, 8008b46 <__lo0bits+0x52>
 8008b1a:	0c1b      	lsrs	r3, r3, #16
 8008b1c:	2010      	movs	r0, #16
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	b90a      	cbnz	r2, 8008b26 <__lo0bits+0x32>
 8008b22:	3008      	adds	r0, #8
 8008b24:	0a1b      	lsrs	r3, r3, #8
 8008b26:	071a      	lsls	r2, r3, #28
 8008b28:	bf04      	itt	eq
 8008b2a:	091b      	lsreq	r3, r3, #4
 8008b2c:	3004      	addeq	r0, #4
 8008b2e:	079a      	lsls	r2, r3, #30
 8008b30:	bf04      	itt	eq
 8008b32:	089b      	lsreq	r3, r3, #2
 8008b34:	3002      	addeq	r0, #2
 8008b36:	07da      	lsls	r2, r3, #31
 8008b38:	d403      	bmi.n	8008b42 <__lo0bits+0x4e>
 8008b3a:	085b      	lsrs	r3, r3, #1
 8008b3c:	f100 0001 	add.w	r0, r0, #1
 8008b40:	d005      	beq.n	8008b4e <__lo0bits+0x5a>
 8008b42:	600b      	str	r3, [r1, #0]
 8008b44:	4770      	bx	lr
 8008b46:	4610      	mov	r0, r2
 8008b48:	e7e9      	b.n	8008b1e <__lo0bits+0x2a>
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	4770      	bx	lr
 8008b4e:	2020      	movs	r0, #32
 8008b50:	4770      	bx	lr
	...

08008b54 <__i2b>:
 8008b54:	b510      	push	{r4, lr}
 8008b56:	460c      	mov	r4, r1
 8008b58:	2101      	movs	r1, #1
 8008b5a:	f7ff ff03 	bl	8008964 <_Balloc>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	b928      	cbnz	r0, 8008b6e <__i2b+0x1a>
 8008b62:	4b05      	ldr	r3, [pc, #20]	; (8008b78 <__i2b+0x24>)
 8008b64:	4805      	ldr	r0, [pc, #20]	; (8008b7c <__i2b+0x28>)
 8008b66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008b6a:	f001 f981 	bl	8009e70 <__assert_func>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	6144      	str	r4, [r0, #20]
 8008b72:	6103      	str	r3, [r0, #16]
 8008b74:	bd10      	pop	{r4, pc}
 8008b76:	bf00      	nop
 8008b78:	0800aafd 	.word	0x0800aafd
 8008b7c:	0800ab0e 	.word	0x0800ab0e

08008b80 <__multiply>:
 8008b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b84:	4691      	mov	r9, r2
 8008b86:	690a      	ldr	r2, [r1, #16]
 8008b88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	bfb8      	it	lt
 8008b90:	460b      	movlt	r3, r1
 8008b92:	460c      	mov	r4, r1
 8008b94:	bfbc      	itt	lt
 8008b96:	464c      	movlt	r4, r9
 8008b98:	4699      	movlt	r9, r3
 8008b9a:	6927      	ldr	r7, [r4, #16]
 8008b9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ba0:	68a3      	ldr	r3, [r4, #8]
 8008ba2:	6861      	ldr	r1, [r4, #4]
 8008ba4:	eb07 060a 	add.w	r6, r7, sl
 8008ba8:	42b3      	cmp	r3, r6
 8008baa:	b085      	sub	sp, #20
 8008bac:	bfb8      	it	lt
 8008bae:	3101      	addlt	r1, #1
 8008bb0:	f7ff fed8 	bl	8008964 <_Balloc>
 8008bb4:	b930      	cbnz	r0, 8008bc4 <__multiply+0x44>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	4b44      	ldr	r3, [pc, #272]	; (8008ccc <__multiply+0x14c>)
 8008bba:	4845      	ldr	r0, [pc, #276]	; (8008cd0 <__multiply+0x150>)
 8008bbc:	f240 115d 	movw	r1, #349	; 0x15d
 8008bc0:	f001 f956 	bl	8009e70 <__assert_func>
 8008bc4:	f100 0514 	add.w	r5, r0, #20
 8008bc8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008bcc:	462b      	mov	r3, r5
 8008bce:	2200      	movs	r2, #0
 8008bd0:	4543      	cmp	r3, r8
 8008bd2:	d321      	bcc.n	8008c18 <__multiply+0x98>
 8008bd4:	f104 0314 	add.w	r3, r4, #20
 8008bd8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008bdc:	f109 0314 	add.w	r3, r9, #20
 8008be0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008be4:	9202      	str	r2, [sp, #8]
 8008be6:	1b3a      	subs	r2, r7, r4
 8008be8:	3a15      	subs	r2, #21
 8008bea:	f022 0203 	bic.w	r2, r2, #3
 8008bee:	3204      	adds	r2, #4
 8008bf0:	f104 0115 	add.w	r1, r4, #21
 8008bf4:	428f      	cmp	r7, r1
 8008bf6:	bf38      	it	cc
 8008bf8:	2204      	movcc	r2, #4
 8008bfa:	9201      	str	r2, [sp, #4]
 8008bfc:	9a02      	ldr	r2, [sp, #8]
 8008bfe:	9303      	str	r3, [sp, #12]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d80c      	bhi.n	8008c1e <__multiply+0x9e>
 8008c04:	2e00      	cmp	r6, #0
 8008c06:	dd03      	ble.n	8008c10 <__multiply+0x90>
 8008c08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d05a      	beq.n	8008cc6 <__multiply+0x146>
 8008c10:	6106      	str	r6, [r0, #16]
 8008c12:	b005      	add	sp, #20
 8008c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c18:	f843 2b04 	str.w	r2, [r3], #4
 8008c1c:	e7d8      	b.n	8008bd0 <__multiply+0x50>
 8008c1e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c22:	f1ba 0f00 	cmp.w	sl, #0
 8008c26:	d024      	beq.n	8008c72 <__multiply+0xf2>
 8008c28:	f104 0e14 	add.w	lr, r4, #20
 8008c2c:	46a9      	mov	r9, r5
 8008c2e:	f04f 0c00 	mov.w	ip, #0
 8008c32:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c36:	f8d9 1000 	ldr.w	r1, [r9]
 8008c3a:	fa1f fb82 	uxth.w	fp, r2
 8008c3e:	b289      	uxth	r1, r1
 8008c40:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c48:	f8d9 2000 	ldr.w	r2, [r9]
 8008c4c:	4461      	add	r1, ip
 8008c4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c52:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c5a:	b289      	uxth	r1, r1
 8008c5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c60:	4577      	cmp	r7, lr
 8008c62:	f849 1b04 	str.w	r1, [r9], #4
 8008c66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c6a:	d8e2      	bhi.n	8008c32 <__multiply+0xb2>
 8008c6c:	9a01      	ldr	r2, [sp, #4]
 8008c6e:	f845 c002 	str.w	ip, [r5, r2]
 8008c72:	9a03      	ldr	r2, [sp, #12]
 8008c74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c78:	3304      	adds	r3, #4
 8008c7a:	f1b9 0f00 	cmp.w	r9, #0
 8008c7e:	d020      	beq.n	8008cc2 <__multiply+0x142>
 8008c80:	6829      	ldr	r1, [r5, #0]
 8008c82:	f104 0c14 	add.w	ip, r4, #20
 8008c86:	46ae      	mov	lr, r5
 8008c88:	f04f 0a00 	mov.w	sl, #0
 8008c8c:	f8bc b000 	ldrh.w	fp, [ip]
 8008c90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008c94:	fb09 220b 	mla	r2, r9, fp, r2
 8008c98:	4492      	add	sl, r2
 8008c9a:	b289      	uxth	r1, r1
 8008c9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008ca0:	f84e 1b04 	str.w	r1, [lr], #4
 8008ca4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008ca8:	f8be 1000 	ldrh.w	r1, [lr]
 8008cac:	0c12      	lsrs	r2, r2, #16
 8008cae:	fb09 1102 	mla	r1, r9, r2, r1
 8008cb2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008cb6:	4567      	cmp	r7, ip
 8008cb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008cbc:	d8e6      	bhi.n	8008c8c <__multiply+0x10c>
 8008cbe:	9a01      	ldr	r2, [sp, #4]
 8008cc0:	50a9      	str	r1, [r5, r2]
 8008cc2:	3504      	adds	r5, #4
 8008cc4:	e79a      	b.n	8008bfc <__multiply+0x7c>
 8008cc6:	3e01      	subs	r6, #1
 8008cc8:	e79c      	b.n	8008c04 <__multiply+0x84>
 8008cca:	bf00      	nop
 8008ccc:	0800aafd 	.word	0x0800aafd
 8008cd0:	0800ab0e 	.word	0x0800ab0e

08008cd4 <__pow5mult>:
 8008cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd8:	4615      	mov	r5, r2
 8008cda:	f012 0203 	ands.w	r2, r2, #3
 8008cde:	4606      	mov	r6, r0
 8008ce0:	460f      	mov	r7, r1
 8008ce2:	d007      	beq.n	8008cf4 <__pow5mult+0x20>
 8008ce4:	4c25      	ldr	r4, [pc, #148]	; (8008d7c <__pow5mult+0xa8>)
 8008ce6:	3a01      	subs	r2, #1
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cee:	f7ff fe9b 	bl	8008a28 <__multadd>
 8008cf2:	4607      	mov	r7, r0
 8008cf4:	10ad      	asrs	r5, r5, #2
 8008cf6:	d03d      	beq.n	8008d74 <__pow5mult+0xa0>
 8008cf8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008cfa:	b97c      	cbnz	r4, 8008d1c <__pow5mult+0x48>
 8008cfc:	2010      	movs	r0, #16
 8008cfe:	f7ff fe1b 	bl	8008938 <malloc>
 8008d02:	4602      	mov	r2, r0
 8008d04:	6270      	str	r0, [r6, #36]	; 0x24
 8008d06:	b928      	cbnz	r0, 8008d14 <__pow5mult+0x40>
 8008d08:	4b1d      	ldr	r3, [pc, #116]	; (8008d80 <__pow5mult+0xac>)
 8008d0a:	481e      	ldr	r0, [pc, #120]	; (8008d84 <__pow5mult+0xb0>)
 8008d0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008d10:	f001 f8ae 	bl	8009e70 <__assert_func>
 8008d14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d18:	6004      	str	r4, [r0, #0]
 8008d1a:	60c4      	str	r4, [r0, #12]
 8008d1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d24:	b94c      	cbnz	r4, 8008d3a <__pow5mult+0x66>
 8008d26:	f240 2171 	movw	r1, #625	; 0x271
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f7ff ff12 	bl	8008b54 <__i2b>
 8008d30:	2300      	movs	r3, #0
 8008d32:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d36:	4604      	mov	r4, r0
 8008d38:	6003      	str	r3, [r0, #0]
 8008d3a:	f04f 0900 	mov.w	r9, #0
 8008d3e:	07eb      	lsls	r3, r5, #31
 8008d40:	d50a      	bpl.n	8008d58 <__pow5mult+0x84>
 8008d42:	4639      	mov	r1, r7
 8008d44:	4622      	mov	r2, r4
 8008d46:	4630      	mov	r0, r6
 8008d48:	f7ff ff1a 	bl	8008b80 <__multiply>
 8008d4c:	4639      	mov	r1, r7
 8008d4e:	4680      	mov	r8, r0
 8008d50:	4630      	mov	r0, r6
 8008d52:	f7ff fe47 	bl	80089e4 <_Bfree>
 8008d56:	4647      	mov	r7, r8
 8008d58:	106d      	asrs	r5, r5, #1
 8008d5a:	d00b      	beq.n	8008d74 <__pow5mult+0xa0>
 8008d5c:	6820      	ldr	r0, [r4, #0]
 8008d5e:	b938      	cbnz	r0, 8008d70 <__pow5mult+0x9c>
 8008d60:	4622      	mov	r2, r4
 8008d62:	4621      	mov	r1, r4
 8008d64:	4630      	mov	r0, r6
 8008d66:	f7ff ff0b 	bl	8008b80 <__multiply>
 8008d6a:	6020      	str	r0, [r4, #0]
 8008d6c:	f8c0 9000 	str.w	r9, [r0]
 8008d70:	4604      	mov	r4, r0
 8008d72:	e7e4      	b.n	8008d3e <__pow5mult+0x6a>
 8008d74:	4638      	mov	r0, r7
 8008d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d7a:	bf00      	nop
 8008d7c:	0800ac60 	.word	0x0800ac60
 8008d80:	0800aa8b 	.word	0x0800aa8b
 8008d84:	0800ab0e 	.word	0x0800ab0e

08008d88 <__lshift>:
 8008d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	6849      	ldr	r1, [r1, #4]
 8008d90:	6923      	ldr	r3, [r4, #16]
 8008d92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d96:	68a3      	ldr	r3, [r4, #8]
 8008d98:	4607      	mov	r7, r0
 8008d9a:	4691      	mov	r9, r2
 8008d9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008da0:	f108 0601 	add.w	r6, r8, #1
 8008da4:	42b3      	cmp	r3, r6
 8008da6:	db0b      	blt.n	8008dc0 <__lshift+0x38>
 8008da8:	4638      	mov	r0, r7
 8008daa:	f7ff fddb 	bl	8008964 <_Balloc>
 8008dae:	4605      	mov	r5, r0
 8008db0:	b948      	cbnz	r0, 8008dc6 <__lshift+0x3e>
 8008db2:	4602      	mov	r2, r0
 8008db4:	4b2a      	ldr	r3, [pc, #168]	; (8008e60 <__lshift+0xd8>)
 8008db6:	482b      	ldr	r0, [pc, #172]	; (8008e64 <__lshift+0xdc>)
 8008db8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008dbc:	f001 f858 	bl	8009e70 <__assert_func>
 8008dc0:	3101      	adds	r1, #1
 8008dc2:	005b      	lsls	r3, r3, #1
 8008dc4:	e7ee      	b.n	8008da4 <__lshift+0x1c>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f100 0114 	add.w	r1, r0, #20
 8008dcc:	f100 0210 	add.w	r2, r0, #16
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	4553      	cmp	r3, sl
 8008dd4:	db37      	blt.n	8008e46 <__lshift+0xbe>
 8008dd6:	6920      	ldr	r0, [r4, #16]
 8008dd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ddc:	f104 0314 	add.w	r3, r4, #20
 8008de0:	f019 091f 	ands.w	r9, r9, #31
 8008de4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008de8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008dec:	d02f      	beq.n	8008e4e <__lshift+0xc6>
 8008dee:	f1c9 0e20 	rsb	lr, r9, #32
 8008df2:	468a      	mov	sl, r1
 8008df4:	f04f 0c00 	mov.w	ip, #0
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	fa02 f209 	lsl.w	r2, r2, r9
 8008dfe:	ea42 020c 	orr.w	r2, r2, ip
 8008e02:	f84a 2b04 	str.w	r2, [sl], #4
 8008e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e0a:	4298      	cmp	r0, r3
 8008e0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008e10:	d8f2      	bhi.n	8008df8 <__lshift+0x70>
 8008e12:	1b03      	subs	r3, r0, r4
 8008e14:	3b15      	subs	r3, #21
 8008e16:	f023 0303 	bic.w	r3, r3, #3
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	f104 0215 	add.w	r2, r4, #21
 8008e20:	4290      	cmp	r0, r2
 8008e22:	bf38      	it	cc
 8008e24:	2304      	movcc	r3, #4
 8008e26:	f841 c003 	str.w	ip, [r1, r3]
 8008e2a:	f1bc 0f00 	cmp.w	ip, #0
 8008e2e:	d001      	beq.n	8008e34 <__lshift+0xac>
 8008e30:	f108 0602 	add.w	r6, r8, #2
 8008e34:	3e01      	subs	r6, #1
 8008e36:	4638      	mov	r0, r7
 8008e38:	612e      	str	r6, [r5, #16]
 8008e3a:	4621      	mov	r1, r4
 8008e3c:	f7ff fdd2 	bl	80089e4 <_Bfree>
 8008e40:	4628      	mov	r0, r5
 8008e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e46:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	e7c1      	b.n	8008dd2 <__lshift+0x4a>
 8008e4e:	3904      	subs	r1, #4
 8008e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e54:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e58:	4298      	cmp	r0, r3
 8008e5a:	d8f9      	bhi.n	8008e50 <__lshift+0xc8>
 8008e5c:	e7ea      	b.n	8008e34 <__lshift+0xac>
 8008e5e:	bf00      	nop
 8008e60:	0800aafd 	.word	0x0800aafd
 8008e64:	0800ab0e 	.word	0x0800ab0e

08008e68 <__mcmp>:
 8008e68:	b530      	push	{r4, r5, lr}
 8008e6a:	6902      	ldr	r2, [r0, #16]
 8008e6c:	690c      	ldr	r4, [r1, #16]
 8008e6e:	1b12      	subs	r2, r2, r4
 8008e70:	d10e      	bne.n	8008e90 <__mcmp+0x28>
 8008e72:	f100 0314 	add.w	r3, r0, #20
 8008e76:	3114      	adds	r1, #20
 8008e78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e88:	42a5      	cmp	r5, r4
 8008e8a:	d003      	beq.n	8008e94 <__mcmp+0x2c>
 8008e8c:	d305      	bcc.n	8008e9a <__mcmp+0x32>
 8008e8e:	2201      	movs	r2, #1
 8008e90:	4610      	mov	r0, r2
 8008e92:	bd30      	pop	{r4, r5, pc}
 8008e94:	4283      	cmp	r3, r0
 8008e96:	d3f3      	bcc.n	8008e80 <__mcmp+0x18>
 8008e98:	e7fa      	b.n	8008e90 <__mcmp+0x28>
 8008e9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e9e:	e7f7      	b.n	8008e90 <__mcmp+0x28>

08008ea0 <__mdiff>:
 8008ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea4:	460c      	mov	r4, r1
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	4620      	mov	r0, r4
 8008eac:	4690      	mov	r8, r2
 8008eae:	f7ff ffdb 	bl	8008e68 <__mcmp>
 8008eb2:	1e05      	subs	r5, r0, #0
 8008eb4:	d110      	bne.n	8008ed8 <__mdiff+0x38>
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f7ff fd53 	bl	8008964 <_Balloc>
 8008ebe:	b930      	cbnz	r0, 8008ece <__mdiff+0x2e>
 8008ec0:	4b3a      	ldr	r3, [pc, #232]	; (8008fac <__mdiff+0x10c>)
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	f240 2132 	movw	r1, #562	; 0x232
 8008ec8:	4839      	ldr	r0, [pc, #228]	; (8008fb0 <__mdiff+0x110>)
 8008eca:	f000 ffd1 	bl	8009e70 <__assert_func>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed8:	bfa4      	itt	ge
 8008eda:	4643      	movge	r3, r8
 8008edc:	46a0      	movge	r8, r4
 8008ede:	4630      	mov	r0, r6
 8008ee0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ee4:	bfa6      	itte	ge
 8008ee6:	461c      	movge	r4, r3
 8008ee8:	2500      	movge	r5, #0
 8008eea:	2501      	movlt	r5, #1
 8008eec:	f7ff fd3a 	bl	8008964 <_Balloc>
 8008ef0:	b920      	cbnz	r0, 8008efc <__mdiff+0x5c>
 8008ef2:	4b2e      	ldr	r3, [pc, #184]	; (8008fac <__mdiff+0x10c>)
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008efa:	e7e5      	b.n	8008ec8 <__mdiff+0x28>
 8008efc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f00:	6926      	ldr	r6, [r4, #16]
 8008f02:	60c5      	str	r5, [r0, #12]
 8008f04:	f104 0914 	add.w	r9, r4, #20
 8008f08:	f108 0514 	add.w	r5, r8, #20
 8008f0c:	f100 0e14 	add.w	lr, r0, #20
 8008f10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008f14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f18:	f108 0210 	add.w	r2, r8, #16
 8008f1c:	46f2      	mov	sl, lr
 8008f1e:	2100      	movs	r1, #0
 8008f20:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f28:	fa1f f883 	uxth.w	r8, r3
 8008f2c:	fa11 f18b 	uxtah	r1, r1, fp
 8008f30:	0c1b      	lsrs	r3, r3, #16
 8008f32:	eba1 0808 	sub.w	r8, r1, r8
 8008f36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f3e:	fa1f f888 	uxth.w	r8, r8
 8008f42:	1419      	asrs	r1, r3, #16
 8008f44:	454e      	cmp	r6, r9
 8008f46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f4a:	f84a 3b04 	str.w	r3, [sl], #4
 8008f4e:	d8e7      	bhi.n	8008f20 <__mdiff+0x80>
 8008f50:	1b33      	subs	r3, r6, r4
 8008f52:	3b15      	subs	r3, #21
 8008f54:	f023 0303 	bic.w	r3, r3, #3
 8008f58:	3304      	adds	r3, #4
 8008f5a:	3415      	adds	r4, #21
 8008f5c:	42a6      	cmp	r6, r4
 8008f5e:	bf38      	it	cc
 8008f60:	2304      	movcc	r3, #4
 8008f62:	441d      	add	r5, r3
 8008f64:	4473      	add	r3, lr
 8008f66:	469e      	mov	lr, r3
 8008f68:	462e      	mov	r6, r5
 8008f6a:	4566      	cmp	r6, ip
 8008f6c:	d30e      	bcc.n	8008f8c <__mdiff+0xec>
 8008f6e:	f10c 0203 	add.w	r2, ip, #3
 8008f72:	1b52      	subs	r2, r2, r5
 8008f74:	f022 0203 	bic.w	r2, r2, #3
 8008f78:	3d03      	subs	r5, #3
 8008f7a:	45ac      	cmp	ip, r5
 8008f7c:	bf38      	it	cc
 8008f7e:	2200      	movcc	r2, #0
 8008f80:	441a      	add	r2, r3
 8008f82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008f86:	b17b      	cbz	r3, 8008fa8 <__mdiff+0x108>
 8008f88:	6107      	str	r7, [r0, #16]
 8008f8a:	e7a3      	b.n	8008ed4 <__mdiff+0x34>
 8008f8c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008f90:	fa11 f288 	uxtah	r2, r1, r8
 8008f94:	1414      	asrs	r4, r2, #16
 8008f96:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008f9a:	b292      	uxth	r2, r2
 8008f9c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008fa0:	f84e 2b04 	str.w	r2, [lr], #4
 8008fa4:	1421      	asrs	r1, r4, #16
 8008fa6:	e7e0      	b.n	8008f6a <__mdiff+0xca>
 8008fa8:	3f01      	subs	r7, #1
 8008faa:	e7ea      	b.n	8008f82 <__mdiff+0xe2>
 8008fac:	0800aafd 	.word	0x0800aafd
 8008fb0:	0800ab0e 	.word	0x0800ab0e

08008fb4 <__d2b>:
 8008fb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fb8:	4689      	mov	r9, r1
 8008fba:	2101      	movs	r1, #1
 8008fbc:	ec57 6b10 	vmov	r6, r7, d0
 8008fc0:	4690      	mov	r8, r2
 8008fc2:	f7ff fccf 	bl	8008964 <_Balloc>
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	b930      	cbnz	r0, 8008fd8 <__d2b+0x24>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	4b25      	ldr	r3, [pc, #148]	; (8009064 <__d2b+0xb0>)
 8008fce:	4826      	ldr	r0, [pc, #152]	; (8009068 <__d2b+0xb4>)
 8008fd0:	f240 310a 	movw	r1, #778	; 0x30a
 8008fd4:	f000 ff4c 	bl	8009e70 <__assert_func>
 8008fd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008fdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fe0:	bb35      	cbnz	r5, 8009030 <__d2b+0x7c>
 8008fe2:	2e00      	cmp	r6, #0
 8008fe4:	9301      	str	r3, [sp, #4]
 8008fe6:	d028      	beq.n	800903a <__d2b+0x86>
 8008fe8:	4668      	mov	r0, sp
 8008fea:	9600      	str	r6, [sp, #0]
 8008fec:	f7ff fd82 	bl	8008af4 <__lo0bits>
 8008ff0:	9900      	ldr	r1, [sp, #0]
 8008ff2:	b300      	cbz	r0, 8009036 <__d2b+0x82>
 8008ff4:	9a01      	ldr	r2, [sp, #4]
 8008ff6:	f1c0 0320 	rsb	r3, r0, #32
 8008ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffe:	430b      	orrs	r3, r1
 8009000:	40c2      	lsrs	r2, r0
 8009002:	6163      	str	r3, [r4, #20]
 8009004:	9201      	str	r2, [sp, #4]
 8009006:	9b01      	ldr	r3, [sp, #4]
 8009008:	61a3      	str	r3, [r4, #24]
 800900a:	2b00      	cmp	r3, #0
 800900c:	bf14      	ite	ne
 800900e:	2202      	movne	r2, #2
 8009010:	2201      	moveq	r2, #1
 8009012:	6122      	str	r2, [r4, #16]
 8009014:	b1d5      	cbz	r5, 800904c <__d2b+0x98>
 8009016:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800901a:	4405      	add	r5, r0
 800901c:	f8c9 5000 	str.w	r5, [r9]
 8009020:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009024:	f8c8 0000 	str.w	r0, [r8]
 8009028:	4620      	mov	r0, r4
 800902a:	b003      	add	sp, #12
 800902c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009030:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009034:	e7d5      	b.n	8008fe2 <__d2b+0x2e>
 8009036:	6161      	str	r1, [r4, #20]
 8009038:	e7e5      	b.n	8009006 <__d2b+0x52>
 800903a:	a801      	add	r0, sp, #4
 800903c:	f7ff fd5a 	bl	8008af4 <__lo0bits>
 8009040:	9b01      	ldr	r3, [sp, #4]
 8009042:	6163      	str	r3, [r4, #20]
 8009044:	2201      	movs	r2, #1
 8009046:	6122      	str	r2, [r4, #16]
 8009048:	3020      	adds	r0, #32
 800904a:	e7e3      	b.n	8009014 <__d2b+0x60>
 800904c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009050:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009054:	f8c9 0000 	str.w	r0, [r9]
 8009058:	6918      	ldr	r0, [r3, #16]
 800905a:	f7ff fd2b 	bl	8008ab4 <__hi0bits>
 800905e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009062:	e7df      	b.n	8009024 <__d2b+0x70>
 8009064:	0800aafd 	.word	0x0800aafd
 8009068:	0800ab0e 	.word	0x0800ab0e

0800906c <_calloc_r>:
 800906c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800906e:	fba1 2402 	umull	r2, r4, r1, r2
 8009072:	b94c      	cbnz	r4, 8009088 <_calloc_r+0x1c>
 8009074:	4611      	mov	r1, r2
 8009076:	9201      	str	r2, [sp, #4]
 8009078:	f000 f87a 	bl	8009170 <_malloc_r>
 800907c:	9a01      	ldr	r2, [sp, #4]
 800907e:	4605      	mov	r5, r0
 8009080:	b930      	cbnz	r0, 8009090 <_calloc_r+0x24>
 8009082:	4628      	mov	r0, r5
 8009084:	b003      	add	sp, #12
 8009086:	bd30      	pop	{r4, r5, pc}
 8009088:	220c      	movs	r2, #12
 800908a:	6002      	str	r2, [r0, #0]
 800908c:	2500      	movs	r5, #0
 800908e:	e7f8      	b.n	8009082 <_calloc_r+0x16>
 8009090:	4621      	mov	r1, r4
 8009092:	f7fe f887 	bl	80071a4 <memset>
 8009096:	e7f4      	b.n	8009082 <_calloc_r+0x16>

08009098 <_free_r>:
 8009098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800909a:	2900      	cmp	r1, #0
 800909c:	d044      	beq.n	8009128 <_free_r+0x90>
 800909e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090a2:	9001      	str	r0, [sp, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f1a1 0404 	sub.w	r4, r1, #4
 80090aa:	bfb8      	it	lt
 80090ac:	18e4      	addlt	r4, r4, r3
 80090ae:	f001 f8f5 	bl	800a29c <__malloc_lock>
 80090b2:	4a1e      	ldr	r2, [pc, #120]	; (800912c <_free_r+0x94>)
 80090b4:	9801      	ldr	r0, [sp, #4]
 80090b6:	6813      	ldr	r3, [r2, #0]
 80090b8:	b933      	cbnz	r3, 80090c8 <_free_r+0x30>
 80090ba:	6063      	str	r3, [r4, #4]
 80090bc:	6014      	str	r4, [r2, #0]
 80090be:	b003      	add	sp, #12
 80090c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090c4:	f001 b8f0 	b.w	800a2a8 <__malloc_unlock>
 80090c8:	42a3      	cmp	r3, r4
 80090ca:	d908      	bls.n	80090de <_free_r+0x46>
 80090cc:	6825      	ldr	r5, [r4, #0]
 80090ce:	1961      	adds	r1, r4, r5
 80090d0:	428b      	cmp	r3, r1
 80090d2:	bf01      	itttt	eq
 80090d4:	6819      	ldreq	r1, [r3, #0]
 80090d6:	685b      	ldreq	r3, [r3, #4]
 80090d8:	1949      	addeq	r1, r1, r5
 80090da:	6021      	streq	r1, [r4, #0]
 80090dc:	e7ed      	b.n	80090ba <_free_r+0x22>
 80090de:	461a      	mov	r2, r3
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	b10b      	cbz	r3, 80090e8 <_free_r+0x50>
 80090e4:	42a3      	cmp	r3, r4
 80090e6:	d9fa      	bls.n	80090de <_free_r+0x46>
 80090e8:	6811      	ldr	r1, [r2, #0]
 80090ea:	1855      	adds	r5, r2, r1
 80090ec:	42a5      	cmp	r5, r4
 80090ee:	d10b      	bne.n	8009108 <_free_r+0x70>
 80090f0:	6824      	ldr	r4, [r4, #0]
 80090f2:	4421      	add	r1, r4
 80090f4:	1854      	adds	r4, r2, r1
 80090f6:	42a3      	cmp	r3, r4
 80090f8:	6011      	str	r1, [r2, #0]
 80090fa:	d1e0      	bne.n	80090be <_free_r+0x26>
 80090fc:	681c      	ldr	r4, [r3, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	6053      	str	r3, [r2, #4]
 8009102:	4421      	add	r1, r4
 8009104:	6011      	str	r1, [r2, #0]
 8009106:	e7da      	b.n	80090be <_free_r+0x26>
 8009108:	d902      	bls.n	8009110 <_free_r+0x78>
 800910a:	230c      	movs	r3, #12
 800910c:	6003      	str	r3, [r0, #0]
 800910e:	e7d6      	b.n	80090be <_free_r+0x26>
 8009110:	6825      	ldr	r5, [r4, #0]
 8009112:	1961      	adds	r1, r4, r5
 8009114:	428b      	cmp	r3, r1
 8009116:	bf04      	itt	eq
 8009118:	6819      	ldreq	r1, [r3, #0]
 800911a:	685b      	ldreq	r3, [r3, #4]
 800911c:	6063      	str	r3, [r4, #4]
 800911e:	bf04      	itt	eq
 8009120:	1949      	addeq	r1, r1, r5
 8009122:	6021      	streq	r1, [r4, #0]
 8009124:	6054      	str	r4, [r2, #4]
 8009126:	e7ca      	b.n	80090be <_free_r+0x26>
 8009128:	b003      	add	sp, #12
 800912a:	bd30      	pop	{r4, r5, pc}
 800912c:	20000588 	.word	0x20000588

08009130 <sbrk_aligned>:
 8009130:	b570      	push	{r4, r5, r6, lr}
 8009132:	4e0e      	ldr	r6, [pc, #56]	; (800916c <sbrk_aligned+0x3c>)
 8009134:	460c      	mov	r4, r1
 8009136:	6831      	ldr	r1, [r6, #0]
 8009138:	4605      	mov	r5, r0
 800913a:	b911      	cbnz	r1, 8009142 <sbrk_aligned+0x12>
 800913c:	f000 fd1e 	bl	8009b7c <_sbrk_r>
 8009140:	6030      	str	r0, [r6, #0]
 8009142:	4621      	mov	r1, r4
 8009144:	4628      	mov	r0, r5
 8009146:	f000 fd19 	bl	8009b7c <_sbrk_r>
 800914a:	1c43      	adds	r3, r0, #1
 800914c:	d00a      	beq.n	8009164 <sbrk_aligned+0x34>
 800914e:	1cc4      	adds	r4, r0, #3
 8009150:	f024 0403 	bic.w	r4, r4, #3
 8009154:	42a0      	cmp	r0, r4
 8009156:	d007      	beq.n	8009168 <sbrk_aligned+0x38>
 8009158:	1a21      	subs	r1, r4, r0
 800915a:	4628      	mov	r0, r5
 800915c:	f000 fd0e 	bl	8009b7c <_sbrk_r>
 8009160:	3001      	adds	r0, #1
 8009162:	d101      	bne.n	8009168 <sbrk_aligned+0x38>
 8009164:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009168:	4620      	mov	r0, r4
 800916a:	bd70      	pop	{r4, r5, r6, pc}
 800916c:	2000058c 	.word	0x2000058c

08009170 <_malloc_r>:
 8009170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009174:	1ccd      	adds	r5, r1, #3
 8009176:	f025 0503 	bic.w	r5, r5, #3
 800917a:	3508      	adds	r5, #8
 800917c:	2d0c      	cmp	r5, #12
 800917e:	bf38      	it	cc
 8009180:	250c      	movcc	r5, #12
 8009182:	2d00      	cmp	r5, #0
 8009184:	4607      	mov	r7, r0
 8009186:	db01      	blt.n	800918c <_malloc_r+0x1c>
 8009188:	42a9      	cmp	r1, r5
 800918a:	d905      	bls.n	8009198 <_malloc_r+0x28>
 800918c:	230c      	movs	r3, #12
 800918e:	603b      	str	r3, [r7, #0]
 8009190:	2600      	movs	r6, #0
 8009192:	4630      	mov	r0, r6
 8009194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009198:	4e2e      	ldr	r6, [pc, #184]	; (8009254 <_malloc_r+0xe4>)
 800919a:	f001 f87f 	bl	800a29c <__malloc_lock>
 800919e:	6833      	ldr	r3, [r6, #0]
 80091a0:	461c      	mov	r4, r3
 80091a2:	bb34      	cbnz	r4, 80091f2 <_malloc_r+0x82>
 80091a4:	4629      	mov	r1, r5
 80091a6:	4638      	mov	r0, r7
 80091a8:	f7ff ffc2 	bl	8009130 <sbrk_aligned>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	4604      	mov	r4, r0
 80091b0:	d14d      	bne.n	800924e <_malloc_r+0xde>
 80091b2:	6834      	ldr	r4, [r6, #0]
 80091b4:	4626      	mov	r6, r4
 80091b6:	2e00      	cmp	r6, #0
 80091b8:	d140      	bne.n	800923c <_malloc_r+0xcc>
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	4631      	mov	r1, r6
 80091be:	4638      	mov	r0, r7
 80091c0:	eb04 0803 	add.w	r8, r4, r3
 80091c4:	f000 fcda 	bl	8009b7c <_sbrk_r>
 80091c8:	4580      	cmp	r8, r0
 80091ca:	d13a      	bne.n	8009242 <_malloc_r+0xd2>
 80091cc:	6821      	ldr	r1, [r4, #0]
 80091ce:	3503      	adds	r5, #3
 80091d0:	1a6d      	subs	r5, r5, r1
 80091d2:	f025 0503 	bic.w	r5, r5, #3
 80091d6:	3508      	adds	r5, #8
 80091d8:	2d0c      	cmp	r5, #12
 80091da:	bf38      	it	cc
 80091dc:	250c      	movcc	r5, #12
 80091de:	4629      	mov	r1, r5
 80091e0:	4638      	mov	r0, r7
 80091e2:	f7ff ffa5 	bl	8009130 <sbrk_aligned>
 80091e6:	3001      	adds	r0, #1
 80091e8:	d02b      	beq.n	8009242 <_malloc_r+0xd2>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	442b      	add	r3, r5
 80091ee:	6023      	str	r3, [r4, #0]
 80091f0:	e00e      	b.n	8009210 <_malloc_r+0xa0>
 80091f2:	6822      	ldr	r2, [r4, #0]
 80091f4:	1b52      	subs	r2, r2, r5
 80091f6:	d41e      	bmi.n	8009236 <_malloc_r+0xc6>
 80091f8:	2a0b      	cmp	r2, #11
 80091fa:	d916      	bls.n	800922a <_malloc_r+0xba>
 80091fc:	1961      	adds	r1, r4, r5
 80091fe:	42a3      	cmp	r3, r4
 8009200:	6025      	str	r5, [r4, #0]
 8009202:	bf18      	it	ne
 8009204:	6059      	strne	r1, [r3, #4]
 8009206:	6863      	ldr	r3, [r4, #4]
 8009208:	bf08      	it	eq
 800920a:	6031      	streq	r1, [r6, #0]
 800920c:	5162      	str	r2, [r4, r5]
 800920e:	604b      	str	r3, [r1, #4]
 8009210:	4638      	mov	r0, r7
 8009212:	f104 060b 	add.w	r6, r4, #11
 8009216:	f001 f847 	bl	800a2a8 <__malloc_unlock>
 800921a:	f026 0607 	bic.w	r6, r6, #7
 800921e:	1d23      	adds	r3, r4, #4
 8009220:	1af2      	subs	r2, r6, r3
 8009222:	d0b6      	beq.n	8009192 <_malloc_r+0x22>
 8009224:	1b9b      	subs	r3, r3, r6
 8009226:	50a3      	str	r3, [r4, r2]
 8009228:	e7b3      	b.n	8009192 <_malloc_r+0x22>
 800922a:	6862      	ldr	r2, [r4, #4]
 800922c:	42a3      	cmp	r3, r4
 800922e:	bf0c      	ite	eq
 8009230:	6032      	streq	r2, [r6, #0]
 8009232:	605a      	strne	r2, [r3, #4]
 8009234:	e7ec      	b.n	8009210 <_malloc_r+0xa0>
 8009236:	4623      	mov	r3, r4
 8009238:	6864      	ldr	r4, [r4, #4]
 800923a:	e7b2      	b.n	80091a2 <_malloc_r+0x32>
 800923c:	4634      	mov	r4, r6
 800923e:	6876      	ldr	r6, [r6, #4]
 8009240:	e7b9      	b.n	80091b6 <_malloc_r+0x46>
 8009242:	230c      	movs	r3, #12
 8009244:	603b      	str	r3, [r7, #0]
 8009246:	4638      	mov	r0, r7
 8009248:	f001 f82e 	bl	800a2a8 <__malloc_unlock>
 800924c:	e7a1      	b.n	8009192 <_malloc_r+0x22>
 800924e:	6025      	str	r5, [r4, #0]
 8009250:	e7de      	b.n	8009210 <_malloc_r+0xa0>
 8009252:	bf00      	nop
 8009254:	20000588 	.word	0x20000588

08009258 <__ssputs_r>:
 8009258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800925c:	688e      	ldr	r6, [r1, #8]
 800925e:	429e      	cmp	r6, r3
 8009260:	4682      	mov	sl, r0
 8009262:	460c      	mov	r4, r1
 8009264:	4690      	mov	r8, r2
 8009266:	461f      	mov	r7, r3
 8009268:	d838      	bhi.n	80092dc <__ssputs_r+0x84>
 800926a:	898a      	ldrh	r2, [r1, #12]
 800926c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009270:	d032      	beq.n	80092d8 <__ssputs_r+0x80>
 8009272:	6825      	ldr	r5, [r4, #0]
 8009274:	6909      	ldr	r1, [r1, #16]
 8009276:	eba5 0901 	sub.w	r9, r5, r1
 800927a:	6965      	ldr	r5, [r4, #20]
 800927c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009280:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009284:	3301      	adds	r3, #1
 8009286:	444b      	add	r3, r9
 8009288:	106d      	asrs	r5, r5, #1
 800928a:	429d      	cmp	r5, r3
 800928c:	bf38      	it	cc
 800928e:	461d      	movcc	r5, r3
 8009290:	0553      	lsls	r3, r2, #21
 8009292:	d531      	bpl.n	80092f8 <__ssputs_r+0xa0>
 8009294:	4629      	mov	r1, r5
 8009296:	f7ff ff6b 	bl	8009170 <_malloc_r>
 800929a:	4606      	mov	r6, r0
 800929c:	b950      	cbnz	r0, 80092b4 <__ssputs_r+0x5c>
 800929e:	230c      	movs	r3, #12
 80092a0:	f8ca 3000 	str.w	r3, [sl]
 80092a4:	89a3      	ldrh	r3, [r4, #12]
 80092a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092aa:	81a3      	strh	r3, [r4, #12]
 80092ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b4:	6921      	ldr	r1, [r4, #16]
 80092b6:	464a      	mov	r2, r9
 80092b8:	f7ff fb46 	bl	8008948 <memcpy>
 80092bc:	89a3      	ldrh	r3, [r4, #12]
 80092be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092c6:	81a3      	strh	r3, [r4, #12]
 80092c8:	6126      	str	r6, [r4, #16]
 80092ca:	6165      	str	r5, [r4, #20]
 80092cc:	444e      	add	r6, r9
 80092ce:	eba5 0509 	sub.w	r5, r5, r9
 80092d2:	6026      	str	r6, [r4, #0]
 80092d4:	60a5      	str	r5, [r4, #8]
 80092d6:	463e      	mov	r6, r7
 80092d8:	42be      	cmp	r6, r7
 80092da:	d900      	bls.n	80092de <__ssputs_r+0x86>
 80092dc:	463e      	mov	r6, r7
 80092de:	6820      	ldr	r0, [r4, #0]
 80092e0:	4632      	mov	r2, r6
 80092e2:	4641      	mov	r1, r8
 80092e4:	f000 ffc0 	bl	800a268 <memmove>
 80092e8:	68a3      	ldr	r3, [r4, #8]
 80092ea:	1b9b      	subs	r3, r3, r6
 80092ec:	60a3      	str	r3, [r4, #8]
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	4433      	add	r3, r6
 80092f2:	6023      	str	r3, [r4, #0]
 80092f4:	2000      	movs	r0, #0
 80092f6:	e7db      	b.n	80092b0 <__ssputs_r+0x58>
 80092f8:	462a      	mov	r2, r5
 80092fa:	f000 ffdb 	bl	800a2b4 <_realloc_r>
 80092fe:	4606      	mov	r6, r0
 8009300:	2800      	cmp	r0, #0
 8009302:	d1e1      	bne.n	80092c8 <__ssputs_r+0x70>
 8009304:	6921      	ldr	r1, [r4, #16]
 8009306:	4650      	mov	r0, sl
 8009308:	f7ff fec6 	bl	8009098 <_free_r>
 800930c:	e7c7      	b.n	800929e <__ssputs_r+0x46>
	...

08009310 <_svfiprintf_r>:
 8009310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009314:	4698      	mov	r8, r3
 8009316:	898b      	ldrh	r3, [r1, #12]
 8009318:	061b      	lsls	r3, r3, #24
 800931a:	b09d      	sub	sp, #116	; 0x74
 800931c:	4607      	mov	r7, r0
 800931e:	460d      	mov	r5, r1
 8009320:	4614      	mov	r4, r2
 8009322:	d50e      	bpl.n	8009342 <_svfiprintf_r+0x32>
 8009324:	690b      	ldr	r3, [r1, #16]
 8009326:	b963      	cbnz	r3, 8009342 <_svfiprintf_r+0x32>
 8009328:	2140      	movs	r1, #64	; 0x40
 800932a:	f7ff ff21 	bl	8009170 <_malloc_r>
 800932e:	6028      	str	r0, [r5, #0]
 8009330:	6128      	str	r0, [r5, #16]
 8009332:	b920      	cbnz	r0, 800933e <_svfiprintf_r+0x2e>
 8009334:	230c      	movs	r3, #12
 8009336:	603b      	str	r3, [r7, #0]
 8009338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800933c:	e0d1      	b.n	80094e2 <_svfiprintf_r+0x1d2>
 800933e:	2340      	movs	r3, #64	; 0x40
 8009340:	616b      	str	r3, [r5, #20]
 8009342:	2300      	movs	r3, #0
 8009344:	9309      	str	r3, [sp, #36]	; 0x24
 8009346:	2320      	movs	r3, #32
 8009348:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800934c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009350:	2330      	movs	r3, #48	; 0x30
 8009352:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80094fc <_svfiprintf_r+0x1ec>
 8009356:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800935a:	f04f 0901 	mov.w	r9, #1
 800935e:	4623      	mov	r3, r4
 8009360:	469a      	mov	sl, r3
 8009362:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009366:	b10a      	cbz	r2, 800936c <_svfiprintf_r+0x5c>
 8009368:	2a25      	cmp	r2, #37	; 0x25
 800936a:	d1f9      	bne.n	8009360 <_svfiprintf_r+0x50>
 800936c:	ebba 0b04 	subs.w	fp, sl, r4
 8009370:	d00b      	beq.n	800938a <_svfiprintf_r+0x7a>
 8009372:	465b      	mov	r3, fp
 8009374:	4622      	mov	r2, r4
 8009376:	4629      	mov	r1, r5
 8009378:	4638      	mov	r0, r7
 800937a:	f7ff ff6d 	bl	8009258 <__ssputs_r>
 800937e:	3001      	adds	r0, #1
 8009380:	f000 80aa 	beq.w	80094d8 <_svfiprintf_r+0x1c8>
 8009384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009386:	445a      	add	r2, fp
 8009388:	9209      	str	r2, [sp, #36]	; 0x24
 800938a:	f89a 3000 	ldrb.w	r3, [sl]
 800938e:	2b00      	cmp	r3, #0
 8009390:	f000 80a2 	beq.w	80094d8 <_svfiprintf_r+0x1c8>
 8009394:	2300      	movs	r3, #0
 8009396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800939a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800939e:	f10a 0a01 	add.w	sl, sl, #1
 80093a2:	9304      	str	r3, [sp, #16]
 80093a4:	9307      	str	r3, [sp, #28]
 80093a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093aa:	931a      	str	r3, [sp, #104]	; 0x68
 80093ac:	4654      	mov	r4, sl
 80093ae:	2205      	movs	r2, #5
 80093b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093b4:	4851      	ldr	r0, [pc, #324]	; (80094fc <_svfiprintf_r+0x1ec>)
 80093b6:	f7f6 ff13 	bl	80001e0 <memchr>
 80093ba:	9a04      	ldr	r2, [sp, #16]
 80093bc:	b9d8      	cbnz	r0, 80093f6 <_svfiprintf_r+0xe6>
 80093be:	06d0      	lsls	r0, r2, #27
 80093c0:	bf44      	itt	mi
 80093c2:	2320      	movmi	r3, #32
 80093c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093c8:	0711      	lsls	r1, r2, #28
 80093ca:	bf44      	itt	mi
 80093cc:	232b      	movmi	r3, #43	; 0x2b
 80093ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093d2:	f89a 3000 	ldrb.w	r3, [sl]
 80093d6:	2b2a      	cmp	r3, #42	; 0x2a
 80093d8:	d015      	beq.n	8009406 <_svfiprintf_r+0xf6>
 80093da:	9a07      	ldr	r2, [sp, #28]
 80093dc:	4654      	mov	r4, sl
 80093de:	2000      	movs	r0, #0
 80093e0:	f04f 0c0a 	mov.w	ip, #10
 80093e4:	4621      	mov	r1, r4
 80093e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093ea:	3b30      	subs	r3, #48	; 0x30
 80093ec:	2b09      	cmp	r3, #9
 80093ee:	d94e      	bls.n	800948e <_svfiprintf_r+0x17e>
 80093f0:	b1b0      	cbz	r0, 8009420 <_svfiprintf_r+0x110>
 80093f2:	9207      	str	r2, [sp, #28]
 80093f4:	e014      	b.n	8009420 <_svfiprintf_r+0x110>
 80093f6:	eba0 0308 	sub.w	r3, r0, r8
 80093fa:	fa09 f303 	lsl.w	r3, r9, r3
 80093fe:	4313      	orrs	r3, r2
 8009400:	9304      	str	r3, [sp, #16]
 8009402:	46a2      	mov	sl, r4
 8009404:	e7d2      	b.n	80093ac <_svfiprintf_r+0x9c>
 8009406:	9b03      	ldr	r3, [sp, #12]
 8009408:	1d19      	adds	r1, r3, #4
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	9103      	str	r1, [sp, #12]
 800940e:	2b00      	cmp	r3, #0
 8009410:	bfbb      	ittet	lt
 8009412:	425b      	neglt	r3, r3
 8009414:	f042 0202 	orrlt.w	r2, r2, #2
 8009418:	9307      	strge	r3, [sp, #28]
 800941a:	9307      	strlt	r3, [sp, #28]
 800941c:	bfb8      	it	lt
 800941e:	9204      	strlt	r2, [sp, #16]
 8009420:	7823      	ldrb	r3, [r4, #0]
 8009422:	2b2e      	cmp	r3, #46	; 0x2e
 8009424:	d10c      	bne.n	8009440 <_svfiprintf_r+0x130>
 8009426:	7863      	ldrb	r3, [r4, #1]
 8009428:	2b2a      	cmp	r3, #42	; 0x2a
 800942a:	d135      	bne.n	8009498 <_svfiprintf_r+0x188>
 800942c:	9b03      	ldr	r3, [sp, #12]
 800942e:	1d1a      	adds	r2, r3, #4
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	9203      	str	r2, [sp, #12]
 8009434:	2b00      	cmp	r3, #0
 8009436:	bfb8      	it	lt
 8009438:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800943c:	3402      	adds	r4, #2
 800943e:	9305      	str	r3, [sp, #20]
 8009440:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800950c <_svfiprintf_r+0x1fc>
 8009444:	7821      	ldrb	r1, [r4, #0]
 8009446:	2203      	movs	r2, #3
 8009448:	4650      	mov	r0, sl
 800944a:	f7f6 fec9 	bl	80001e0 <memchr>
 800944e:	b140      	cbz	r0, 8009462 <_svfiprintf_r+0x152>
 8009450:	2340      	movs	r3, #64	; 0x40
 8009452:	eba0 000a 	sub.w	r0, r0, sl
 8009456:	fa03 f000 	lsl.w	r0, r3, r0
 800945a:	9b04      	ldr	r3, [sp, #16]
 800945c:	4303      	orrs	r3, r0
 800945e:	3401      	adds	r4, #1
 8009460:	9304      	str	r3, [sp, #16]
 8009462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009466:	4826      	ldr	r0, [pc, #152]	; (8009500 <_svfiprintf_r+0x1f0>)
 8009468:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800946c:	2206      	movs	r2, #6
 800946e:	f7f6 feb7 	bl	80001e0 <memchr>
 8009472:	2800      	cmp	r0, #0
 8009474:	d038      	beq.n	80094e8 <_svfiprintf_r+0x1d8>
 8009476:	4b23      	ldr	r3, [pc, #140]	; (8009504 <_svfiprintf_r+0x1f4>)
 8009478:	bb1b      	cbnz	r3, 80094c2 <_svfiprintf_r+0x1b2>
 800947a:	9b03      	ldr	r3, [sp, #12]
 800947c:	3307      	adds	r3, #7
 800947e:	f023 0307 	bic.w	r3, r3, #7
 8009482:	3308      	adds	r3, #8
 8009484:	9303      	str	r3, [sp, #12]
 8009486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009488:	4433      	add	r3, r6
 800948a:	9309      	str	r3, [sp, #36]	; 0x24
 800948c:	e767      	b.n	800935e <_svfiprintf_r+0x4e>
 800948e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009492:	460c      	mov	r4, r1
 8009494:	2001      	movs	r0, #1
 8009496:	e7a5      	b.n	80093e4 <_svfiprintf_r+0xd4>
 8009498:	2300      	movs	r3, #0
 800949a:	3401      	adds	r4, #1
 800949c:	9305      	str	r3, [sp, #20]
 800949e:	4619      	mov	r1, r3
 80094a0:	f04f 0c0a 	mov.w	ip, #10
 80094a4:	4620      	mov	r0, r4
 80094a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094aa:	3a30      	subs	r2, #48	; 0x30
 80094ac:	2a09      	cmp	r2, #9
 80094ae:	d903      	bls.n	80094b8 <_svfiprintf_r+0x1a8>
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d0c5      	beq.n	8009440 <_svfiprintf_r+0x130>
 80094b4:	9105      	str	r1, [sp, #20]
 80094b6:	e7c3      	b.n	8009440 <_svfiprintf_r+0x130>
 80094b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80094bc:	4604      	mov	r4, r0
 80094be:	2301      	movs	r3, #1
 80094c0:	e7f0      	b.n	80094a4 <_svfiprintf_r+0x194>
 80094c2:	ab03      	add	r3, sp, #12
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	462a      	mov	r2, r5
 80094c8:	4b0f      	ldr	r3, [pc, #60]	; (8009508 <_svfiprintf_r+0x1f8>)
 80094ca:	a904      	add	r1, sp, #16
 80094cc:	4638      	mov	r0, r7
 80094ce:	f7fd ff11 	bl	80072f4 <_printf_float>
 80094d2:	1c42      	adds	r2, r0, #1
 80094d4:	4606      	mov	r6, r0
 80094d6:	d1d6      	bne.n	8009486 <_svfiprintf_r+0x176>
 80094d8:	89ab      	ldrh	r3, [r5, #12]
 80094da:	065b      	lsls	r3, r3, #25
 80094dc:	f53f af2c 	bmi.w	8009338 <_svfiprintf_r+0x28>
 80094e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094e2:	b01d      	add	sp, #116	; 0x74
 80094e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e8:	ab03      	add	r3, sp, #12
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	462a      	mov	r2, r5
 80094ee:	4b06      	ldr	r3, [pc, #24]	; (8009508 <_svfiprintf_r+0x1f8>)
 80094f0:	a904      	add	r1, sp, #16
 80094f2:	4638      	mov	r0, r7
 80094f4:	f7fe f9a2 	bl	800783c <_printf_i>
 80094f8:	e7eb      	b.n	80094d2 <_svfiprintf_r+0x1c2>
 80094fa:	bf00      	nop
 80094fc:	0800ac6c 	.word	0x0800ac6c
 8009500:	0800ac76 	.word	0x0800ac76
 8009504:	080072f5 	.word	0x080072f5
 8009508:	08009259 	.word	0x08009259
 800950c:	0800ac72 	.word	0x0800ac72

08009510 <_sungetc_r>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	1c4b      	adds	r3, r1, #1
 8009514:	4614      	mov	r4, r2
 8009516:	d103      	bne.n	8009520 <_sungetc_r+0x10>
 8009518:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800951c:	4628      	mov	r0, r5
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	8993      	ldrh	r3, [r2, #12]
 8009522:	f023 0320 	bic.w	r3, r3, #32
 8009526:	8193      	strh	r3, [r2, #12]
 8009528:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800952a:	6852      	ldr	r2, [r2, #4]
 800952c:	b2cd      	uxtb	r5, r1
 800952e:	b18b      	cbz	r3, 8009554 <_sungetc_r+0x44>
 8009530:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009532:	4293      	cmp	r3, r2
 8009534:	dd08      	ble.n	8009548 <_sungetc_r+0x38>
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	1e5a      	subs	r2, r3, #1
 800953a:	6022      	str	r2, [r4, #0]
 800953c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009540:	6863      	ldr	r3, [r4, #4]
 8009542:	3301      	adds	r3, #1
 8009544:	6063      	str	r3, [r4, #4]
 8009546:	e7e9      	b.n	800951c <_sungetc_r+0xc>
 8009548:	4621      	mov	r1, r4
 800954a:	f000 fc57 	bl	8009dfc <__submore>
 800954e:	2800      	cmp	r0, #0
 8009550:	d0f1      	beq.n	8009536 <_sungetc_r+0x26>
 8009552:	e7e1      	b.n	8009518 <_sungetc_r+0x8>
 8009554:	6921      	ldr	r1, [r4, #16]
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	b151      	cbz	r1, 8009570 <_sungetc_r+0x60>
 800955a:	4299      	cmp	r1, r3
 800955c:	d208      	bcs.n	8009570 <_sungetc_r+0x60>
 800955e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009562:	42a9      	cmp	r1, r5
 8009564:	d104      	bne.n	8009570 <_sungetc_r+0x60>
 8009566:	3b01      	subs	r3, #1
 8009568:	3201      	adds	r2, #1
 800956a:	6023      	str	r3, [r4, #0]
 800956c:	6062      	str	r2, [r4, #4]
 800956e:	e7d5      	b.n	800951c <_sungetc_r+0xc>
 8009570:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009578:	6363      	str	r3, [r4, #52]	; 0x34
 800957a:	2303      	movs	r3, #3
 800957c:	63a3      	str	r3, [r4, #56]	; 0x38
 800957e:	4623      	mov	r3, r4
 8009580:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	2301      	movs	r3, #1
 8009588:	e7dc      	b.n	8009544 <_sungetc_r+0x34>

0800958a <__ssrefill_r>:
 800958a:	b510      	push	{r4, lr}
 800958c:	460c      	mov	r4, r1
 800958e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009590:	b169      	cbz	r1, 80095ae <__ssrefill_r+0x24>
 8009592:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009596:	4299      	cmp	r1, r3
 8009598:	d001      	beq.n	800959e <__ssrefill_r+0x14>
 800959a:	f7ff fd7d 	bl	8009098 <_free_r>
 800959e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095a0:	6063      	str	r3, [r4, #4]
 80095a2:	2000      	movs	r0, #0
 80095a4:	6360      	str	r0, [r4, #52]	; 0x34
 80095a6:	b113      	cbz	r3, 80095ae <__ssrefill_r+0x24>
 80095a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80095aa:	6023      	str	r3, [r4, #0]
 80095ac:	bd10      	pop	{r4, pc}
 80095ae:	6923      	ldr	r3, [r4, #16]
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	2300      	movs	r3, #0
 80095b4:	6063      	str	r3, [r4, #4]
 80095b6:	89a3      	ldrh	r3, [r4, #12]
 80095b8:	f043 0320 	orr.w	r3, r3, #32
 80095bc:	81a3      	strh	r3, [r4, #12]
 80095be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095c2:	e7f3      	b.n	80095ac <__ssrefill_r+0x22>

080095c4 <__ssvfiscanf_r>:
 80095c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c8:	460c      	mov	r4, r1
 80095ca:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80095ce:	2100      	movs	r1, #0
 80095d0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80095d4:	49a6      	ldr	r1, [pc, #664]	; (8009870 <__ssvfiscanf_r+0x2ac>)
 80095d6:	91a0      	str	r1, [sp, #640]	; 0x280
 80095d8:	f10d 0804 	add.w	r8, sp, #4
 80095dc:	49a5      	ldr	r1, [pc, #660]	; (8009874 <__ssvfiscanf_r+0x2b0>)
 80095de:	4fa6      	ldr	r7, [pc, #664]	; (8009878 <__ssvfiscanf_r+0x2b4>)
 80095e0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800987c <__ssvfiscanf_r+0x2b8>
 80095e4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80095e8:	4606      	mov	r6, r0
 80095ea:	91a1      	str	r1, [sp, #644]	; 0x284
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	7813      	ldrb	r3, [r2, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 815a 	beq.w	80098aa <__ssvfiscanf_r+0x2e6>
 80095f6:	5dd9      	ldrb	r1, [r3, r7]
 80095f8:	f011 0108 	ands.w	r1, r1, #8
 80095fc:	f102 0501 	add.w	r5, r2, #1
 8009600:	d019      	beq.n	8009636 <__ssvfiscanf_r+0x72>
 8009602:	6863      	ldr	r3, [r4, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	dd0f      	ble.n	8009628 <__ssvfiscanf_r+0x64>
 8009608:	6823      	ldr	r3, [r4, #0]
 800960a:	781a      	ldrb	r2, [r3, #0]
 800960c:	5cba      	ldrb	r2, [r7, r2]
 800960e:	0712      	lsls	r2, r2, #28
 8009610:	d401      	bmi.n	8009616 <__ssvfiscanf_r+0x52>
 8009612:	462a      	mov	r2, r5
 8009614:	e7eb      	b.n	80095ee <__ssvfiscanf_r+0x2a>
 8009616:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009618:	3201      	adds	r2, #1
 800961a:	9245      	str	r2, [sp, #276]	; 0x114
 800961c:	6862      	ldr	r2, [r4, #4]
 800961e:	3301      	adds	r3, #1
 8009620:	3a01      	subs	r2, #1
 8009622:	6062      	str	r2, [r4, #4]
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	e7ec      	b.n	8009602 <__ssvfiscanf_r+0x3e>
 8009628:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800962a:	4621      	mov	r1, r4
 800962c:	4630      	mov	r0, r6
 800962e:	4798      	blx	r3
 8009630:	2800      	cmp	r0, #0
 8009632:	d0e9      	beq.n	8009608 <__ssvfiscanf_r+0x44>
 8009634:	e7ed      	b.n	8009612 <__ssvfiscanf_r+0x4e>
 8009636:	2b25      	cmp	r3, #37	; 0x25
 8009638:	d012      	beq.n	8009660 <__ssvfiscanf_r+0x9c>
 800963a:	469a      	mov	sl, r3
 800963c:	6863      	ldr	r3, [r4, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	f340 8091 	ble.w	8009766 <__ssvfiscanf_r+0x1a2>
 8009644:	6822      	ldr	r2, [r4, #0]
 8009646:	7813      	ldrb	r3, [r2, #0]
 8009648:	4553      	cmp	r3, sl
 800964a:	f040 812e 	bne.w	80098aa <__ssvfiscanf_r+0x2e6>
 800964e:	6863      	ldr	r3, [r4, #4]
 8009650:	3b01      	subs	r3, #1
 8009652:	6063      	str	r3, [r4, #4]
 8009654:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009656:	3201      	adds	r2, #1
 8009658:	3301      	adds	r3, #1
 800965a:	6022      	str	r2, [r4, #0]
 800965c:	9345      	str	r3, [sp, #276]	; 0x114
 800965e:	e7d8      	b.n	8009612 <__ssvfiscanf_r+0x4e>
 8009660:	9141      	str	r1, [sp, #260]	; 0x104
 8009662:	9143      	str	r1, [sp, #268]	; 0x10c
 8009664:	7853      	ldrb	r3, [r2, #1]
 8009666:	2b2a      	cmp	r3, #42	; 0x2a
 8009668:	bf02      	ittt	eq
 800966a:	2310      	moveq	r3, #16
 800966c:	1c95      	addeq	r5, r2, #2
 800966e:	9341      	streq	r3, [sp, #260]	; 0x104
 8009670:	220a      	movs	r2, #10
 8009672:	46aa      	mov	sl, r5
 8009674:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009678:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800967c:	2b09      	cmp	r3, #9
 800967e:	d91d      	bls.n	80096bc <__ssvfiscanf_r+0xf8>
 8009680:	487e      	ldr	r0, [pc, #504]	; (800987c <__ssvfiscanf_r+0x2b8>)
 8009682:	2203      	movs	r2, #3
 8009684:	f7f6 fdac 	bl	80001e0 <memchr>
 8009688:	b140      	cbz	r0, 800969c <__ssvfiscanf_r+0xd8>
 800968a:	2301      	movs	r3, #1
 800968c:	eba0 0009 	sub.w	r0, r0, r9
 8009690:	fa03 f000 	lsl.w	r0, r3, r0
 8009694:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009696:	4318      	orrs	r0, r3
 8009698:	9041      	str	r0, [sp, #260]	; 0x104
 800969a:	4655      	mov	r5, sl
 800969c:	f815 3b01 	ldrb.w	r3, [r5], #1
 80096a0:	2b78      	cmp	r3, #120	; 0x78
 80096a2:	d806      	bhi.n	80096b2 <__ssvfiscanf_r+0xee>
 80096a4:	2b57      	cmp	r3, #87	; 0x57
 80096a6:	d810      	bhi.n	80096ca <__ssvfiscanf_r+0x106>
 80096a8:	2b25      	cmp	r3, #37	; 0x25
 80096aa:	d0c6      	beq.n	800963a <__ssvfiscanf_r+0x76>
 80096ac:	d856      	bhi.n	800975c <__ssvfiscanf_r+0x198>
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d064      	beq.n	800977c <__ssvfiscanf_r+0x1b8>
 80096b2:	2303      	movs	r3, #3
 80096b4:	9347      	str	r3, [sp, #284]	; 0x11c
 80096b6:	230a      	movs	r3, #10
 80096b8:	9342      	str	r3, [sp, #264]	; 0x108
 80096ba:	e071      	b.n	80097a0 <__ssvfiscanf_r+0x1dc>
 80096bc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80096be:	fb02 1103 	mla	r1, r2, r3, r1
 80096c2:	3930      	subs	r1, #48	; 0x30
 80096c4:	9143      	str	r1, [sp, #268]	; 0x10c
 80096c6:	4655      	mov	r5, sl
 80096c8:	e7d3      	b.n	8009672 <__ssvfiscanf_r+0xae>
 80096ca:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80096ce:	2a20      	cmp	r2, #32
 80096d0:	d8ef      	bhi.n	80096b2 <__ssvfiscanf_r+0xee>
 80096d2:	a101      	add	r1, pc, #4	; (adr r1, 80096d8 <__ssvfiscanf_r+0x114>)
 80096d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80096d8:	0800978b 	.word	0x0800978b
 80096dc:	080096b3 	.word	0x080096b3
 80096e0:	080096b3 	.word	0x080096b3
 80096e4:	080097e9 	.word	0x080097e9
 80096e8:	080096b3 	.word	0x080096b3
 80096ec:	080096b3 	.word	0x080096b3
 80096f0:	080096b3 	.word	0x080096b3
 80096f4:	080096b3 	.word	0x080096b3
 80096f8:	080096b3 	.word	0x080096b3
 80096fc:	080096b3 	.word	0x080096b3
 8009700:	080096b3 	.word	0x080096b3
 8009704:	080097ff 	.word	0x080097ff
 8009708:	080097d5 	.word	0x080097d5
 800970c:	08009763 	.word	0x08009763
 8009710:	08009763 	.word	0x08009763
 8009714:	08009763 	.word	0x08009763
 8009718:	080096b3 	.word	0x080096b3
 800971c:	080097d9 	.word	0x080097d9
 8009720:	080096b3 	.word	0x080096b3
 8009724:	080096b3 	.word	0x080096b3
 8009728:	080096b3 	.word	0x080096b3
 800972c:	080096b3 	.word	0x080096b3
 8009730:	0800980f 	.word	0x0800980f
 8009734:	080097e1 	.word	0x080097e1
 8009738:	08009783 	.word	0x08009783
 800973c:	080096b3 	.word	0x080096b3
 8009740:	080096b3 	.word	0x080096b3
 8009744:	0800980b 	.word	0x0800980b
 8009748:	080096b3 	.word	0x080096b3
 800974c:	080097d5 	.word	0x080097d5
 8009750:	080096b3 	.word	0x080096b3
 8009754:	080096b3 	.word	0x080096b3
 8009758:	0800978b 	.word	0x0800978b
 800975c:	3b45      	subs	r3, #69	; 0x45
 800975e:	2b02      	cmp	r3, #2
 8009760:	d8a7      	bhi.n	80096b2 <__ssvfiscanf_r+0xee>
 8009762:	2305      	movs	r3, #5
 8009764:	e01b      	b.n	800979e <__ssvfiscanf_r+0x1da>
 8009766:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009768:	4621      	mov	r1, r4
 800976a:	4630      	mov	r0, r6
 800976c:	4798      	blx	r3
 800976e:	2800      	cmp	r0, #0
 8009770:	f43f af68 	beq.w	8009644 <__ssvfiscanf_r+0x80>
 8009774:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009776:	2800      	cmp	r0, #0
 8009778:	f040 808d 	bne.w	8009896 <__ssvfiscanf_r+0x2d2>
 800977c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009780:	e08f      	b.n	80098a2 <__ssvfiscanf_r+0x2de>
 8009782:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009784:	f042 0220 	orr.w	r2, r2, #32
 8009788:	9241      	str	r2, [sp, #260]	; 0x104
 800978a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800978c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009790:	9241      	str	r2, [sp, #260]	; 0x104
 8009792:	2210      	movs	r2, #16
 8009794:	2b6f      	cmp	r3, #111	; 0x6f
 8009796:	9242      	str	r2, [sp, #264]	; 0x108
 8009798:	bf34      	ite	cc
 800979a:	2303      	movcc	r3, #3
 800979c:	2304      	movcs	r3, #4
 800979e:	9347      	str	r3, [sp, #284]	; 0x11c
 80097a0:	6863      	ldr	r3, [r4, #4]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	dd42      	ble.n	800982c <__ssvfiscanf_r+0x268>
 80097a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80097a8:	0659      	lsls	r1, r3, #25
 80097aa:	d404      	bmi.n	80097b6 <__ssvfiscanf_r+0x1f2>
 80097ac:	6823      	ldr	r3, [r4, #0]
 80097ae:	781a      	ldrb	r2, [r3, #0]
 80097b0:	5cba      	ldrb	r2, [r7, r2]
 80097b2:	0712      	lsls	r2, r2, #28
 80097b4:	d441      	bmi.n	800983a <__ssvfiscanf_r+0x276>
 80097b6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	dc50      	bgt.n	800985e <__ssvfiscanf_r+0x29a>
 80097bc:	466b      	mov	r3, sp
 80097be:	4622      	mov	r2, r4
 80097c0:	a941      	add	r1, sp, #260	; 0x104
 80097c2:	4630      	mov	r0, r6
 80097c4:	f000 f876 	bl	80098b4 <_scanf_chars>
 80097c8:	2801      	cmp	r0, #1
 80097ca:	d06e      	beq.n	80098aa <__ssvfiscanf_r+0x2e6>
 80097cc:	2802      	cmp	r0, #2
 80097ce:	f47f af20 	bne.w	8009612 <__ssvfiscanf_r+0x4e>
 80097d2:	e7cf      	b.n	8009774 <__ssvfiscanf_r+0x1b0>
 80097d4:	220a      	movs	r2, #10
 80097d6:	e7dd      	b.n	8009794 <__ssvfiscanf_r+0x1d0>
 80097d8:	2300      	movs	r3, #0
 80097da:	9342      	str	r3, [sp, #264]	; 0x108
 80097dc:	2303      	movs	r3, #3
 80097de:	e7de      	b.n	800979e <__ssvfiscanf_r+0x1da>
 80097e0:	2308      	movs	r3, #8
 80097e2:	9342      	str	r3, [sp, #264]	; 0x108
 80097e4:	2304      	movs	r3, #4
 80097e6:	e7da      	b.n	800979e <__ssvfiscanf_r+0x1da>
 80097e8:	4629      	mov	r1, r5
 80097ea:	4640      	mov	r0, r8
 80097ec:	f000 f9d6 	bl	8009b9c <__sccl>
 80097f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80097f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097f6:	9341      	str	r3, [sp, #260]	; 0x104
 80097f8:	4605      	mov	r5, r0
 80097fa:	2301      	movs	r3, #1
 80097fc:	e7cf      	b.n	800979e <__ssvfiscanf_r+0x1da>
 80097fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009804:	9341      	str	r3, [sp, #260]	; 0x104
 8009806:	2300      	movs	r3, #0
 8009808:	e7c9      	b.n	800979e <__ssvfiscanf_r+0x1da>
 800980a:	2302      	movs	r3, #2
 800980c:	e7c7      	b.n	800979e <__ssvfiscanf_r+0x1da>
 800980e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009810:	06c3      	lsls	r3, r0, #27
 8009812:	f53f aefe 	bmi.w	8009612 <__ssvfiscanf_r+0x4e>
 8009816:	9b00      	ldr	r3, [sp, #0]
 8009818:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800981a:	1d19      	adds	r1, r3, #4
 800981c:	9100      	str	r1, [sp, #0]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f010 0f01 	tst.w	r0, #1
 8009824:	bf14      	ite	ne
 8009826:	801a      	strhne	r2, [r3, #0]
 8009828:	601a      	streq	r2, [r3, #0]
 800982a:	e6f2      	b.n	8009612 <__ssvfiscanf_r+0x4e>
 800982c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800982e:	4621      	mov	r1, r4
 8009830:	4630      	mov	r0, r6
 8009832:	4798      	blx	r3
 8009834:	2800      	cmp	r0, #0
 8009836:	d0b6      	beq.n	80097a6 <__ssvfiscanf_r+0x1e2>
 8009838:	e79c      	b.n	8009774 <__ssvfiscanf_r+0x1b0>
 800983a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800983c:	3201      	adds	r2, #1
 800983e:	9245      	str	r2, [sp, #276]	; 0x114
 8009840:	6862      	ldr	r2, [r4, #4]
 8009842:	3a01      	subs	r2, #1
 8009844:	2a00      	cmp	r2, #0
 8009846:	6062      	str	r2, [r4, #4]
 8009848:	dd02      	ble.n	8009850 <__ssvfiscanf_r+0x28c>
 800984a:	3301      	adds	r3, #1
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	e7ad      	b.n	80097ac <__ssvfiscanf_r+0x1e8>
 8009850:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009852:	4621      	mov	r1, r4
 8009854:	4630      	mov	r0, r6
 8009856:	4798      	blx	r3
 8009858:	2800      	cmp	r0, #0
 800985a:	d0a7      	beq.n	80097ac <__ssvfiscanf_r+0x1e8>
 800985c:	e78a      	b.n	8009774 <__ssvfiscanf_r+0x1b0>
 800985e:	2b04      	cmp	r3, #4
 8009860:	dc0e      	bgt.n	8009880 <__ssvfiscanf_r+0x2bc>
 8009862:	466b      	mov	r3, sp
 8009864:	4622      	mov	r2, r4
 8009866:	a941      	add	r1, sp, #260	; 0x104
 8009868:	4630      	mov	r0, r6
 800986a:	f000 f87d 	bl	8009968 <_scanf_i>
 800986e:	e7ab      	b.n	80097c8 <__ssvfiscanf_r+0x204>
 8009870:	08009511 	.word	0x08009511
 8009874:	0800958b 	.word	0x0800958b
 8009878:	0800acd5 	.word	0x0800acd5
 800987c:	0800ac72 	.word	0x0800ac72
 8009880:	4b0b      	ldr	r3, [pc, #44]	; (80098b0 <__ssvfiscanf_r+0x2ec>)
 8009882:	2b00      	cmp	r3, #0
 8009884:	f43f aec5 	beq.w	8009612 <__ssvfiscanf_r+0x4e>
 8009888:	466b      	mov	r3, sp
 800988a:	4622      	mov	r2, r4
 800988c:	a941      	add	r1, sp, #260	; 0x104
 800988e:	4630      	mov	r0, r6
 8009890:	f3af 8000 	nop.w
 8009894:	e798      	b.n	80097c8 <__ssvfiscanf_r+0x204>
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	f013 0f40 	tst.w	r3, #64	; 0x40
 800989c:	bf18      	it	ne
 800989e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80098a2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80098a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098aa:	9844      	ldr	r0, [sp, #272]	; 0x110
 80098ac:	e7f9      	b.n	80098a2 <__ssvfiscanf_r+0x2de>
 80098ae:	bf00      	nop
 80098b0:	00000000 	.word	0x00000000

080098b4 <_scanf_chars>:
 80098b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098b8:	4615      	mov	r5, r2
 80098ba:	688a      	ldr	r2, [r1, #8]
 80098bc:	4680      	mov	r8, r0
 80098be:	460c      	mov	r4, r1
 80098c0:	b932      	cbnz	r2, 80098d0 <_scanf_chars+0x1c>
 80098c2:	698a      	ldr	r2, [r1, #24]
 80098c4:	2a00      	cmp	r2, #0
 80098c6:	bf0c      	ite	eq
 80098c8:	2201      	moveq	r2, #1
 80098ca:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80098ce:	608a      	str	r2, [r1, #8]
 80098d0:	6822      	ldr	r2, [r4, #0]
 80098d2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009964 <_scanf_chars+0xb0>
 80098d6:	06d1      	lsls	r1, r2, #27
 80098d8:	bf5f      	itttt	pl
 80098da:	681a      	ldrpl	r2, [r3, #0]
 80098dc:	1d11      	addpl	r1, r2, #4
 80098de:	6019      	strpl	r1, [r3, #0]
 80098e0:	6816      	ldrpl	r6, [r2, #0]
 80098e2:	2700      	movs	r7, #0
 80098e4:	69a0      	ldr	r0, [r4, #24]
 80098e6:	b188      	cbz	r0, 800990c <_scanf_chars+0x58>
 80098e8:	2801      	cmp	r0, #1
 80098ea:	d107      	bne.n	80098fc <_scanf_chars+0x48>
 80098ec:	682a      	ldr	r2, [r5, #0]
 80098ee:	7811      	ldrb	r1, [r2, #0]
 80098f0:	6962      	ldr	r2, [r4, #20]
 80098f2:	5c52      	ldrb	r2, [r2, r1]
 80098f4:	b952      	cbnz	r2, 800990c <_scanf_chars+0x58>
 80098f6:	2f00      	cmp	r7, #0
 80098f8:	d031      	beq.n	800995e <_scanf_chars+0xaa>
 80098fa:	e022      	b.n	8009942 <_scanf_chars+0x8e>
 80098fc:	2802      	cmp	r0, #2
 80098fe:	d120      	bne.n	8009942 <_scanf_chars+0x8e>
 8009900:	682b      	ldr	r3, [r5, #0]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009908:	071b      	lsls	r3, r3, #28
 800990a:	d41a      	bmi.n	8009942 <_scanf_chars+0x8e>
 800990c:	6823      	ldr	r3, [r4, #0]
 800990e:	06da      	lsls	r2, r3, #27
 8009910:	bf5e      	ittt	pl
 8009912:	682b      	ldrpl	r3, [r5, #0]
 8009914:	781b      	ldrbpl	r3, [r3, #0]
 8009916:	f806 3b01 	strbpl.w	r3, [r6], #1
 800991a:	682a      	ldr	r2, [r5, #0]
 800991c:	686b      	ldr	r3, [r5, #4]
 800991e:	3201      	adds	r2, #1
 8009920:	602a      	str	r2, [r5, #0]
 8009922:	68a2      	ldr	r2, [r4, #8]
 8009924:	3b01      	subs	r3, #1
 8009926:	3a01      	subs	r2, #1
 8009928:	606b      	str	r3, [r5, #4]
 800992a:	3701      	adds	r7, #1
 800992c:	60a2      	str	r2, [r4, #8]
 800992e:	b142      	cbz	r2, 8009942 <_scanf_chars+0x8e>
 8009930:	2b00      	cmp	r3, #0
 8009932:	dcd7      	bgt.n	80098e4 <_scanf_chars+0x30>
 8009934:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009938:	4629      	mov	r1, r5
 800993a:	4640      	mov	r0, r8
 800993c:	4798      	blx	r3
 800993e:	2800      	cmp	r0, #0
 8009940:	d0d0      	beq.n	80098e4 <_scanf_chars+0x30>
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	f013 0310 	ands.w	r3, r3, #16
 8009948:	d105      	bne.n	8009956 <_scanf_chars+0xa2>
 800994a:	68e2      	ldr	r2, [r4, #12]
 800994c:	3201      	adds	r2, #1
 800994e:	60e2      	str	r2, [r4, #12]
 8009950:	69a2      	ldr	r2, [r4, #24]
 8009952:	b102      	cbz	r2, 8009956 <_scanf_chars+0xa2>
 8009954:	7033      	strb	r3, [r6, #0]
 8009956:	6923      	ldr	r3, [r4, #16]
 8009958:	443b      	add	r3, r7
 800995a:	6123      	str	r3, [r4, #16]
 800995c:	2000      	movs	r0, #0
 800995e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009962:	bf00      	nop
 8009964:	0800acd5 	.word	0x0800acd5

08009968 <_scanf_i>:
 8009968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996c:	4698      	mov	r8, r3
 800996e:	4b76      	ldr	r3, [pc, #472]	; (8009b48 <_scanf_i+0x1e0>)
 8009970:	460c      	mov	r4, r1
 8009972:	4682      	mov	sl, r0
 8009974:	4616      	mov	r6, r2
 8009976:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800997a:	b087      	sub	sp, #28
 800997c:	ab03      	add	r3, sp, #12
 800997e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009982:	4b72      	ldr	r3, [pc, #456]	; (8009b4c <_scanf_i+0x1e4>)
 8009984:	69a1      	ldr	r1, [r4, #24]
 8009986:	4a72      	ldr	r2, [pc, #456]	; (8009b50 <_scanf_i+0x1e8>)
 8009988:	2903      	cmp	r1, #3
 800998a:	bf18      	it	ne
 800998c:	461a      	movne	r2, r3
 800998e:	68a3      	ldr	r3, [r4, #8]
 8009990:	9201      	str	r2, [sp, #4]
 8009992:	1e5a      	subs	r2, r3, #1
 8009994:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009998:	bf88      	it	hi
 800999a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800999e:	4627      	mov	r7, r4
 80099a0:	bf82      	ittt	hi
 80099a2:	eb03 0905 	addhi.w	r9, r3, r5
 80099a6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80099aa:	60a3      	strhi	r3, [r4, #8]
 80099ac:	f857 3b1c 	ldr.w	r3, [r7], #28
 80099b0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80099b4:	bf98      	it	ls
 80099b6:	f04f 0900 	movls.w	r9, #0
 80099ba:	6023      	str	r3, [r4, #0]
 80099bc:	463d      	mov	r5, r7
 80099be:	f04f 0b00 	mov.w	fp, #0
 80099c2:	6831      	ldr	r1, [r6, #0]
 80099c4:	ab03      	add	r3, sp, #12
 80099c6:	7809      	ldrb	r1, [r1, #0]
 80099c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80099cc:	2202      	movs	r2, #2
 80099ce:	f7f6 fc07 	bl	80001e0 <memchr>
 80099d2:	b328      	cbz	r0, 8009a20 <_scanf_i+0xb8>
 80099d4:	f1bb 0f01 	cmp.w	fp, #1
 80099d8:	d159      	bne.n	8009a8e <_scanf_i+0x126>
 80099da:	6862      	ldr	r2, [r4, #4]
 80099dc:	b92a      	cbnz	r2, 80099ea <_scanf_i+0x82>
 80099de:	6822      	ldr	r2, [r4, #0]
 80099e0:	2308      	movs	r3, #8
 80099e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099e6:	6063      	str	r3, [r4, #4]
 80099e8:	6022      	str	r2, [r4, #0]
 80099ea:	6822      	ldr	r2, [r4, #0]
 80099ec:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80099f0:	6022      	str	r2, [r4, #0]
 80099f2:	68a2      	ldr	r2, [r4, #8]
 80099f4:	1e51      	subs	r1, r2, #1
 80099f6:	60a1      	str	r1, [r4, #8]
 80099f8:	b192      	cbz	r2, 8009a20 <_scanf_i+0xb8>
 80099fa:	6832      	ldr	r2, [r6, #0]
 80099fc:	1c51      	adds	r1, r2, #1
 80099fe:	6031      	str	r1, [r6, #0]
 8009a00:	7812      	ldrb	r2, [r2, #0]
 8009a02:	f805 2b01 	strb.w	r2, [r5], #1
 8009a06:	6872      	ldr	r2, [r6, #4]
 8009a08:	3a01      	subs	r2, #1
 8009a0a:	2a00      	cmp	r2, #0
 8009a0c:	6072      	str	r2, [r6, #4]
 8009a0e:	dc07      	bgt.n	8009a20 <_scanf_i+0xb8>
 8009a10:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009a14:	4631      	mov	r1, r6
 8009a16:	4650      	mov	r0, sl
 8009a18:	4790      	blx	r2
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	f040 8085 	bne.w	8009b2a <_scanf_i+0x1c2>
 8009a20:	f10b 0b01 	add.w	fp, fp, #1
 8009a24:	f1bb 0f03 	cmp.w	fp, #3
 8009a28:	d1cb      	bne.n	80099c2 <_scanf_i+0x5a>
 8009a2a:	6863      	ldr	r3, [r4, #4]
 8009a2c:	b90b      	cbnz	r3, 8009a32 <_scanf_i+0xca>
 8009a2e:	230a      	movs	r3, #10
 8009a30:	6063      	str	r3, [r4, #4]
 8009a32:	6863      	ldr	r3, [r4, #4]
 8009a34:	4947      	ldr	r1, [pc, #284]	; (8009b54 <_scanf_i+0x1ec>)
 8009a36:	6960      	ldr	r0, [r4, #20]
 8009a38:	1ac9      	subs	r1, r1, r3
 8009a3a:	f000 f8af 	bl	8009b9c <__sccl>
 8009a3e:	f04f 0b00 	mov.w	fp, #0
 8009a42:	68a3      	ldr	r3, [r4, #8]
 8009a44:	6822      	ldr	r2, [r4, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d03d      	beq.n	8009ac6 <_scanf_i+0x15e>
 8009a4a:	6831      	ldr	r1, [r6, #0]
 8009a4c:	6960      	ldr	r0, [r4, #20]
 8009a4e:	f891 c000 	ldrb.w	ip, [r1]
 8009a52:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d035      	beq.n	8009ac6 <_scanf_i+0x15e>
 8009a5a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009a5e:	d124      	bne.n	8009aaa <_scanf_i+0x142>
 8009a60:	0510      	lsls	r0, r2, #20
 8009a62:	d522      	bpl.n	8009aaa <_scanf_i+0x142>
 8009a64:	f10b 0b01 	add.w	fp, fp, #1
 8009a68:	f1b9 0f00 	cmp.w	r9, #0
 8009a6c:	d003      	beq.n	8009a76 <_scanf_i+0x10e>
 8009a6e:	3301      	adds	r3, #1
 8009a70:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009a74:	60a3      	str	r3, [r4, #8]
 8009a76:	6873      	ldr	r3, [r6, #4]
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	6073      	str	r3, [r6, #4]
 8009a7e:	dd1b      	ble.n	8009ab8 <_scanf_i+0x150>
 8009a80:	6833      	ldr	r3, [r6, #0]
 8009a82:	3301      	adds	r3, #1
 8009a84:	6033      	str	r3, [r6, #0]
 8009a86:	68a3      	ldr	r3, [r4, #8]
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	60a3      	str	r3, [r4, #8]
 8009a8c:	e7d9      	b.n	8009a42 <_scanf_i+0xda>
 8009a8e:	f1bb 0f02 	cmp.w	fp, #2
 8009a92:	d1ae      	bne.n	80099f2 <_scanf_i+0x8a>
 8009a94:	6822      	ldr	r2, [r4, #0]
 8009a96:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009a9a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009a9e:	d1bf      	bne.n	8009a20 <_scanf_i+0xb8>
 8009aa0:	2310      	movs	r3, #16
 8009aa2:	6063      	str	r3, [r4, #4]
 8009aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009aa8:	e7a2      	b.n	80099f0 <_scanf_i+0x88>
 8009aaa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009aae:	6022      	str	r2, [r4, #0]
 8009ab0:	780b      	ldrb	r3, [r1, #0]
 8009ab2:	f805 3b01 	strb.w	r3, [r5], #1
 8009ab6:	e7de      	b.n	8009a76 <_scanf_i+0x10e>
 8009ab8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009abc:	4631      	mov	r1, r6
 8009abe:	4650      	mov	r0, sl
 8009ac0:	4798      	blx	r3
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	d0df      	beq.n	8009a86 <_scanf_i+0x11e>
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	05db      	lsls	r3, r3, #23
 8009aca:	d50d      	bpl.n	8009ae8 <_scanf_i+0x180>
 8009acc:	42bd      	cmp	r5, r7
 8009ace:	d909      	bls.n	8009ae4 <_scanf_i+0x17c>
 8009ad0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009ad4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ad8:	4632      	mov	r2, r6
 8009ada:	4650      	mov	r0, sl
 8009adc:	4798      	blx	r3
 8009ade:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009ae2:	464d      	mov	r5, r9
 8009ae4:	42bd      	cmp	r5, r7
 8009ae6:	d02d      	beq.n	8009b44 <_scanf_i+0x1dc>
 8009ae8:	6822      	ldr	r2, [r4, #0]
 8009aea:	f012 0210 	ands.w	r2, r2, #16
 8009aee:	d113      	bne.n	8009b18 <_scanf_i+0x1b0>
 8009af0:	702a      	strb	r2, [r5, #0]
 8009af2:	6863      	ldr	r3, [r4, #4]
 8009af4:	9e01      	ldr	r6, [sp, #4]
 8009af6:	4639      	mov	r1, r7
 8009af8:	4650      	mov	r0, sl
 8009afa:	47b0      	blx	r6
 8009afc:	6821      	ldr	r1, [r4, #0]
 8009afe:	f8d8 3000 	ldr.w	r3, [r8]
 8009b02:	f011 0f20 	tst.w	r1, #32
 8009b06:	d013      	beq.n	8009b30 <_scanf_i+0x1c8>
 8009b08:	1d1a      	adds	r2, r3, #4
 8009b0a:	f8c8 2000 	str.w	r2, [r8]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6018      	str	r0, [r3, #0]
 8009b12:	68e3      	ldr	r3, [r4, #12]
 8009b14:	3301      	adds	r3, #1
 8009b16:	60e3      	str	r3, [r4, #12]
 8009b18:	1bed      	subs	r5, r5, r7
 8009b1a:	44ab      	add	fp, r5
 8009b1c:	6925      	ldr	r5, [r4, #16]
 8009b1e:	445d      	add	r5, fp
 8009b20:	6125      	str	r5, [r4, #16]
 8009b22:	2000      	movs	r0, #0
 8009b24:	b007      	add	sp, #28
 8009b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b2a:	f04f 0b00 	mov.w	fp, #0
 8009b2e:	e7ca      	b.n	8009ac6 <_scanf_i+0x15e>
 8009b30:	1d1a      	adds	r2, r3, #4
 8009b32:	f8c8 2000 	str.w	r2, [r8]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f011 0f01 	tst.w	r1, #1
 8009b3c:	bf14      	ite	ne
 8009b3e:	8018      	strhne	r0, [r3, #0]
 8009b40:	6018      	streq	r0, [r3, #0]
 8009b42:	e7e6      	b.n	8009b12 <_scanf_i+0x1aa>
 8009b44:	2001      	movs	r0, #1
 8009b46:	e7ed      	b.n	8009b24 <_scanf_i+0x1bc>
 8009b48:	0800aa24 	.word	0x0800aa24
 8009b4c:	08009df9 	.word	0x08009df9
 8009b50:	08009d11 	.word	0x08009d11
 8009b54:	0800ac96 	.word	0x0800ac96

08009b58 <_read_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4d07      	ldr	r5, [pc, #28]	; (8009b78 <_read_r+0x20>)
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	4608      	mov	r0, r1
 8009b60:	4611      	mov	r1, r2
 8009b62:	2200      	movs	r2, #0
 8009b64:	602a      	str	r2, [r5, #0]
 8009b66:	461a      	mov	r2, r3
 8009b68:	f7f8 fc32 	bl	80023d0 <_read>
 8009b6c:	1c43      	adds	r3, r0, #1
 8009b6e:	d102      	bne.n	8009b76 <_read_r+0x1e>
 8009b70:	682b      	ldr	r3, [r5, #0]
 8009b72:	b103      	cbz	r3, 8009b76 <_read_r+0x1e>
 8009b74:	6023      	str	r3, [r4, #0]
 8009b76:	bd38      	pop	{r3, r4, r5, pc}
 8009b78:	20000590 	.word	0x20000590

08009b7c <_sbrk_r>:
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	4d06      	ldr	r5, [pc, #24]	; (8009b98 <_sbrk_r+0x1c>)
 8009b80:	2300      	movs	r3, #0
 8009b82:	4604      	mov	r4, r0
 8009b84:	4608      	mov	r0, r1
 8009b86:	602b      	str	r3, [r5, #0]
 8009b88:	f7f8 fc90 	bl	80024ac <_sbrk>
 8009b8c:	1c43      	adds	r3, r0, #1
 8009b8e:	d102      	bne.n	8009b96 <_sbrk_r+0x1a>
 8009b90:	682b      	ldr	r3, [r5, #0]
 8009b92:	b103      	cbz	r3, 8009b96 <_sbrk_r+0x1a>
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	bd38      	pop	{r3, r4, r5, pc}
 8009b98:	20000590 	.word	0x20000590

08009b9c <__sccl>:
 8009b9c:	b570      	push	{r4, r5, r6, lr}
 8009b9e:	780b      	ldrb	r3, [r1, #0]
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	2b5e      	cmp	r3, #94	; 0x5e
 8009ba4:	bf0b      	itete	eq
 8009ba6:	784b      	ldrbeq	r3, [r1, #1]
 8009ba8:	1c48      	addne	r0, r1, #1
 8009baa:	1c88      	addeq	r0, r1, #2
 8009bac:	2200      	movne	r2, #0
 8009bae:	bf08      	it	eq
 8009bb0:	2201      	moveq	r2, #1
 8009bb2:	1e61      	subs	r1, r4, #1
 8009bb4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009bb8:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009bbc:	42a9      	cmp	r1, r5
 8009bbe:	d1fb      	bne.n	8009bb8 <__sccl+0x1c>
 8009bc0:	b90b      	cbnz	r3, 8009bc6 <__sccl+0x2a>
 8009bc2:	3801      	subs	r0, #1
 8009bc4:	bd70      	pop	{r4, r5, r6, pc}
 8009bc6:	f082 0201 	eor.w	r2, r2, #1
 8009bca:	54e2      	strb	r2, [r4, r3]
 8009bcc:	4605      	mov	r5, r0
 8009bce:	4628      	mov	r0, r5
 8009bd0:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009bd4:	292d      	cmp	r1, #45	; 0x2d
 8009bd6:	d006      	beq.n	8009be6 <__sccl+0x4a>
 8009bd8:	295d      	cmp	r1, #93	; 0x5d
 8009bda:	d0f3      	beq.n	8009bc4 <__sccl+0x28>
 8009bdc:	b909      	cbnz	r1, 8009be2 <__sccl+0x46>
 8009bde:	4628      	mov	r0, r5
 8009be0:	e7f0      	b.n	8009bc4 <__sccl+0x28>
 8009be2:	460b      	mov	r3, r1
 8009be4:	e7f1      	b.n	8009bca <__sccl+0x2e>
 8009be6:	786e      	ldrb	r6, [r5, #1]
 8009be8:	2e5d      	cmp	r6, #93	; 0x5d
 8009bea:	d0fa      	beq.n	8009be2 <__sccl+0x46>
 8009bec:	42b3      	cmp	r3, r6
 8009bee:	dcf8      	bgt.n	8009be2 <__sccl+0x46>
 8009bf0:	3502      	adds	r5, #2
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	3101      	adds	r1, #1
 8009bf6:	428e      	cmp	r6, r1
 8009bf8:	5462      	strb	r2, [r4, r1]
 8009bfa:	dcfb      	bgt.n	8009bf4 <__sccl+0x58>
 8009bfc:	1af1      	subs	r1, r6, r3
 8009bfe:	3901      	subs	r1, #1
 8009c00:	1c58      	adds	r0, r3, #1
 8009c02:	42b3      	cmp	r3, r6
 8009c04:	bfa8      	it	ge
 8009c06:	2100      	movge	r1, #0
 8009c08:	1843      	adds	r3, r0, r1
 8009c0a:	e7e0      	b.n	8009bce <__sccl+0x32>

08009c0c <_strtol_l.constprop.0>:
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c12:	d001      	beq.n	8009c18 <_strtol_l.constprop.0+0xc>
 8009c14:	2b24      	cmp	r3, #36	; 0x24
 8009c16:	d906      	bls.n	8009c26 <_strtol_l.constprop.0+0x1a>
 8009c18:	f7fd fa9a 	bl	8007150 <__errno>
 8009c1c:	2316      	movs	r3, #22
 8009c1e:	6003      	str	r3, [r0, #0]
 8009c20:	2000      	movs	r0, #0
 8009c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c26:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009d0c <_strtol_l.constprop.0+0x100>
 8009c2a:	460d      	mov	r5, r1
 8009c2c:	462e      	mov	r6, r5
 8009c2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c32:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009c36:	f017 0708 	ands.w	r7, r7, #8
 8009c3a:	d1f7      	bne.n	8009c2c <_strtol_l.constprop.0+0x20>
 8009c3c:	2c2d      	cmp	r4, #45	; 0x2d
 8009c3e:	d132      	bne.n	8009ca6 <_strtol_l.constprop.0+0x9a>
 8009c40:	782c      	ldrb	r4, [r5, #0]
 8009c42:	2701      	movs	r7, #1
 8009c44:	1cb5      	adds	r5, r6, #2
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d05b      	beq.n	8009d02 <_strtol_l.constprop.0+0xf6>
 8009c4a:	2b10      	cmp	r3, #16
 8009c4c:	d109      	bne.n	8009c62 <_strtol_l.constprop.0+0x56>
 8009c4e:	2c30      	cmp	r4, #48	; 0x30
 8009c50:	d107      	bne.n	8009c62 <_strtol_l.constprop.0+0x56>
 8009c52:	782c      	ldrb	r4, [r5, #0]
 8009c54:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009c58:	2c58      	cmp	r4, #88	; 0x58
 8009c5a:	d14d      	bne.n	8009cf8 <_strtol_l.constprop.0+0xec>
 8009c5c:	786c      	ldrb	r4, [r5, #1]
 8009c5e:	2310      	movs	r3, #16
 8009c60:	3502      	adds	r5, #2
 8009c62:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009c66:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009c6a:	f04f 0c00 	mov.w	ip, #0
 8009c6e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009c72:	4666      	mov	r6, ip
 8009c74:	fb03 8a19 	mls	sl, r3, r9, r8
 8009c78:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009c7c:	f1be 0f09 	cmp.w	lr, #9
 8009c80:	d816      	bhi.n	8009cb0 <_strtol_l.constprop.0+0xa4>
 8009c82:	4674      	mov	r4, lr
 8009c84:	42a3      	cmp	r3, r4
 8009c86:	dd24      	ble.n	8009cd2 <_strtol_l.constprop.0+0xc6>
 8009c88:	f1bc 0f00 	cmp.w	ip, #0
 8009c8c:	db1e      	blt.n	8009ccc <_strtol_l.constprop.0+0xc0>
 8009c8e:	45b1      	cmp	r9, r6
 8009c90:	d31c      	bcc.n	8009ccc <_strtol_l.constprop.0+0xc0>
 8009c92:	d101      	bne.n	8009c98 <_strtol_l.constprop.0+0x8c>
 8009c94:	45a2      	cmp	sl, r4
 8009c96:	db19      	blt.n	8009ccc <_strtol_l.constprop.0+0xc0>
 8009c98:	fb06 4603 	mla	r6, r6, r3, r4
 8009c9c:	f04f 0c01 	mov.w	ip, #1
 8009ca0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ca4:	e7e8      	b.n	8009c78 <_strtol_l.constprop.0+0x6c>
 8009ca6:	2c2b      	cmp	r4, #43	; 0x2b
 8009ca8:	bf04      	itt	eq
 8009caa:	782c      	ldrbeq	r4, [r5, #0]
 8009cac:	1cb5      	addeq	r5, r6, #2
 8009cae:	e7ca      	b.n	8009c46 <_strtol_l.constprop.0+0x3a>
 8009cb0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009cb4:	f1be 0f19 	cmp.w	lr, #25
 8009cb8:	d801      	bhi.n	8009cbe <_strtol_l.constprop.0+0xb2>
 8009cba:	3c37      	subs	r4, #55	; 0x37
 8009cbc:	e7e2      	b.n	8009c84 <_strtol_l.constprop.0+0x78>
 8009cbe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009cc2:	f1be 0f19 	cmp.w	lr, #25
 8009cc6:	d804      	bhi.n	8009cd2 <_strtol_l.constprop.0+0xc6>
 8009cc8:	3c57      	subs	r4, #87	; 0x57
 8009cca:	e7db      	b.n	8009c84 <_strtol_l.constprop.0+0x78>
 8009ccc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009cd0:	e7e6      	b.n	8009ca0 <_strtol_l.constprop.0+0x94>
 8009cd2:	f1bc 0f00 	cmp.w	ip, #0
 8009cd6:	da05      	bge.n	8009ce4 <_strtol_l.constprop.0+0xd8>
 8009cd8:	2322      	movs	r3, #34	; 0x22
 8009cda:	6003      	str	r3, [r0, #0]
 8009cdc:	4646      	mov	r6, r8
 8009cde:	b942      	cbnz	r2, 8009cf2 <_strtol_l.constprop.0+0xe6>
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	e79e      	b.n	8009c22 <_strtol_l.constprop.0+0x16>
 8009ce4:	b107      	cbz	r7, 8009ce8 <_strtol_l.constprop.0+0xdc>
 8009ce6:	4276      	negs	r6, r6
 8009ce8:	2a00      	cmp	r2, #0
 8009cea:	d0f9      	beq.n	8009ce0 <_strtol_l.constprop.0+0xd4>
 8009cec:	f1bc 0f00 	cmp.w	ip, #0
 8009cf0:	d000      	beq.n	8009cf4 <_strtol_l.constprop.0+0xe8>
 8009cf2:	1e69      	subs	r1, r5, #1
 8009cf4:	6011      	str	r1, [r2, #0]
 8009cf6:	e7f3      	b.n	8009ce0 <_strtol_l.constprop.0+0xd4>
 8009cf8:	2430      	movs	r4, #48	; 0x30
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1b1      	bne.n	8009c62 <_strtol_l.constprop.0+0x56>
 8009cfe:	2308      	movs	r3, #8
 8009d00:	e7af      	b.n	8009c62 <_strtol_l.constprop.0+0x56>
 8009d02:	2c30      	cmp	r4, #48	; 0x30
 8009d04:	d0a5      	beq.n	8009c52 <_strtol_l.constprop.0+0x46>
 8009d06:	230a      	movs	r3, #10
 8009d08:	e7ab      	b.n	8009c62 <_strtol_l.constprop.0+0x56>
 8009d0a:	bf00      	nop
 8009d0c:	0800acd5 	.word	0x0800acd5

08009d10 <_strtol_r>:
 8009d10:	f7ff bf7c 	b.w	8009c0c <_strtol_l.constprop.0>

08009d14 <_strtoul_l.constprop.0>:
 8009d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d18:	4f36      	ldr	r7, [pc, #216]	; (8009df4 <_strtoul_l.constprop.0+0xe0>)
 8009d1a:	4686      	mov	lr, r0
 8009d1c:	460d      	mov	r5, r1
 8009d1e:	4628      	mov	r0, r5
 8009d20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d24:	5de6      	ldrb	r6, [r4, r7]
 8009d26:	f016 0608 	ands.w	r6, r6, #8
 8009d2a:	d1f8      	bne.n	8009d1e <_strtoul_l.constprop.0+0xa>
 8009d2c:	2c2d      	cmp	r4, #45	; 0x2d
 8009d2e:	d12f      	bne.n	8009d90 <_strtoul_l.constprop.0+0x7c>
 8009d30:	782c      	ldrb	r4, [r5, #0]
 8009d32:	2601      	movs	r6, #1
 8009d34:	1c85      	adds	r5, r0, #2
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d057      	beq.n	8009dea <_strtoul_l.constprop.0+0xd6>
 8009d3a:	2b10      	cmp	r3, #16
 8009d3c:	d109      	bne.n	8009d52 <_strtoul_l.constprop.0+0x3e>
 8009d3e:	2c30      	cmp	r4, #48	; 0x30
 8009d40:	d107      	bne.n	8009d52 <_strtoul_l.constprop.0+0x3e>
 8009d42:	7828      	ldrb	r0, [r5, #0]
 8009d44:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009d48:	2858      	cmp	r0, #88	; 0x58
 8009d4a:	d149      	bne.n	8009de0 <_strtoul_l.constprop.0+0xcc>
 8009d4c:	786c      	ldrb	r4, [r5, #1]
 8009d4e:	2310      	movs	r3, #16
 8009d50:	3502      	adds	r5, #2
 8009d52:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009d56:	2700      	movs	r7, #0
 8009d58:	fbb8 f8f3 	udiv	r8, r8, r3
 8009d5c:	fb03 f908 	mul.w	r9, r3, r8
 8009d60:	ea6f 0909 	mvn.w	r9, r9
 8009d64:	4638      	mov	r0, r7
 8009d66:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009d6a:	f1bc 0f09 	cmp.w	ip, #9
 8009d6e:	d814      	bhi.n	8009d9a <_strtoul_l.constprop.0+0x86>
 8009d70:	4664      	mov	r4, ip
 8009d72:	42a3      	cmp	r3, r4
 8009d74:	dd22      	ble.n	8009dbc <_strtoul_l.constprop.0+0xa8>
 8009d76:	2f00      	cmp	r7, #0
 8009d78:	db1d      	blt.n	8009db6 <_strtoul_l.constprop.0+0xa2>
 8009d7a:	4580      	cmp	r8, r0
 8009d7c:	d31b      	bcc.n	8009db6 <_strtoul_l.constprop.0+0xa2>
 8009d7e:	d101      	bne.n	8009d84 <_strtoul_l.constprop.0+0x70>
 8009d80:	45a1      	cmp	r9, r4
 8009d82:	db18      	blt.n	8009db6 <_strtoul_l.constprop.0+0xa2>
 8009d84:	fb00 4003 	mla	r0, r0, r3, r4
 8009d88:	2701      	movs	r7, #1
 8009d8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d8e:	e7ea      	b.n	8009d66 <_strtoul_l.constprop.0+0x52>
 8009d90:	2c2b      	cmp	r4, #43	; 0x2b
 8009d92:	bf04      	itt	eq
 8009d94:	782c      	ldrbeq	r4, [r5, #0]
 8009d96:	1c85      	addeq	r5, r0, #2
 8009d98:	e7cd      	b.n	8009d36 <_strtoul_l.constprop.0+0x22>
 8009d9a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009d9e:	f1bc 0f19 	cmp.w	ip, #25
 8009da2:	d801      	bhi.n	8009da8 <_strtoul_l.constprop.0+0x94>
 8009da4:	3c37      	subs	r4, #55	; 0x37
 8009da6:	e7e4      	b.n	8009d72 <_strtoul_l.constprop.0+0x5e>
 8009da8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009dac:	f1bc 0f19 	cmp.w	ip, #25
 8009db0:	d804      	bhi.n	8009dbc <_strtoul_l.constprop.0+0xa8>
 8009db2:	3c57      	subs	r4, #87	; 0x57
 8009db4:	e7dd      	b.n	8009d72 <_strtoul_l.constprop.0+0x5e>
 8009db6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009dba:	e7e6      	b.n	8009d8a <_strtoul_l.constprop.0+0x76>
 8009dbc:	2f00      	cmp	r7, #0
 8009dbe:	da07      	bge.n	8009dd0 <_strtoul_l.constprop.0+0xbc>
 8009dc0:	2322      	movs	r3, #34	; 0x22
 8009dc2:	f8ce 3000 	str.w	r3, [lr]
 8009dc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dca:	b932      	cbnz	r2, 8009dda <_strtoul_l.constprop.0+0xc6>
 8009dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dd0:	b106      	cbz	r6, 8009dd4 <_strtoul_l.constprop.0+0xc0>
 8009dd2:	4240      	negs	r0, r0
 8009dd4:	2a00      	cmp	r2, #0
 8009dd6:	d0f9      	beq.n	8009dcc <_strtoul_l.constprop.0+0xb8>
 8009dd8:	b107      	cbz	r7, 8009ddc <_strtoul_l.constprop.0+0xc8>
 8009dda:	1e69      	subs	r1, r5, #1
 8009ddc:	6011      	str	r1, [r2, #0]
 8009dde:	e7f5      	b.n	8009dcc <_strtoul_l.constprop.0+0xb8>
 8009de0:	2430      	movs	r4, #48	; 0x30
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1b5      	bne.n	8009d52 <_strtoul_l.constprop.0+0x3e>
 8009de6:	2308      	movs	r3, #8
 8009de8:	e7b3      	b.n	8009d52 <_strtoul_l.constprop.0+0x3e>
 8009dea:	2c30      	cmp	r4, #48	; 0x30
 8009dec:	d0a9      	beq.n	8009d42 <_strtoul_l.constprop.0+0x2e>
 8009dee:	230a      	movs	r3, #10
 8009df0:	e7af      	b.n	8009d52 <_strtoul_l.constprop.0+0x3e>
 8009df2:	bf00      	nop
 8009df4:	0800acd5 	.word	0x0800acd5

08009df8 <_strtoul_r>:
 8009df8:	f7ff bf8c 	b.w	8009d14 <_strtoul_l.constprop.0>

08009dfc <__submore>:
 8009dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e00:	460c      	mov	r4, r1
 8009e02:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e08:	4299      	cmp	r1, r3
 8009e0a:	d11d      	bne.n	8009e48 <__submore+0x4c>
 8009e0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009e10:	f7ff f9ae 	bl	8009170 <_malloc_r>
 8009e14:	b918      	cbnz	r0, 8009e1e <__submore+0x22>
 8009e16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e22:	63a3      	str	r3, [r4, #56]	; 0x38
 8009e24:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009e28:	6360      	str	r0, [r4, #52]	; 0x34
 8009e2a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009e2e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009e32:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009e36:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009e3a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009e3e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009e42:	6020      	str	r0, [r4, #0]
 8009e44:	2000      	movs	r0, #0
 8009e46:	e7e8      	b.n	8009e1a <__submore+0x1e>
 8009e48:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009e4a:	0077      	lsls	r7, r6, #1
 8009e4c:	463a      	mov	r2, r7
 8009e4e:	f000 fa31 	bl	800a2b4 <_realloc_r>
 8009e52:	4605      	mov	r5, r0
 8009e54:	2800      	cmp	r0, #0
 8009e56:	d0de      	beq.n	8009e16 <__submore+0x1a>
 8009e58:	eb00 0806 	add.w	r8, r0, r6
 8009e5c:	4601      	mov	r1, r0
 8009e5e:	4632      	mov	r2, r6
 8009e60:	4640      	mov	r0, r8
 8009e62:	f7fe fd71 	bl	8008948 <memcpy>
 8009e66:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009e6a:	f8c4 8000 	str.w	r8, [r4]
 8009e6e:	e7e9      	b.n	8009e44 <__submore+0x48>

08009e70 <__assert_func>:
 8009e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e72:	4614      	mov	r4, r2
 8009e74:	461a      	mov	r2, r3
 8009e76:	4b09      	ldr	r3, [pc, #36]	; (8009e9c <__assert_func+0x2c>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4605      	mov	r5, r0
 8009e7c:	68d8      	ldr	r0, [r3, #12]
 8009e7e:	b14c      	cbz	r4, 8009e94 <__assert_func+0x24>
 8009e80:	4b07      	ldr	r3, [pc, #28]	; (8009ea0 <__assert_func+0x30>)
 8009e82:	9100      	str	r1, [sp, #0]
 8009e84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e88:	4906      	ldr	r1, [pc, #24]	; (8009ea4 <__assert_func+0x34>)
 8009e8a:	462b      	mov	r3, r5
 8009e8c:	f000 f9a6 	bl	800a1dc <fiprintf>
 8009e90:	f000 fc66 	bl	800a760 <abort>
 8009e94:	4b04      	ldr	r3, [pc, #16]	; (8009ea8 <__assert_func+0x38>)
 8009e96:	461c      	mov	r4, r3
 8009e98:	e7f3      	b.n	8009e82 <__assert_func+0x12>
 8009e9a:	bf00      	nop
 8009e9c:	2000000c 	.word	0x2000000c
 8009ea0:	0800ac98 	.word	0x0800ac98
 8009ea4:	0800aca5 	.word	0x0800aca5
 8009ea8:	0800acd3 	.word	0x0800acd3

08009eac <__sflush_r>:
 8009eac:	898a      	ldrh	r2, [r1, #12]
 8009eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	0710      	lsls	r0, r2, #28
 8009eb6:	460c      	mov	r4, r1
 8009eb8:	d458      	bmi.n	8009f6c <__sflush_r+0xc0>
 8009eba:	684b      	ldr	r3, [r1, #4]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	dc05      	bgt.n	8009ecc <__sflush_r+0x20>
 8009ec0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	dc02      	bgt.n	8009ecc <__sflush_r+0x20>
 8009ec6:	2000      	movs	r0, #0
 8009ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ecc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ece:	2e00      	cmp	r6, #0
 8009ed0:	d0f9      	beq.n	8009ec6 <__sflush_r+0x1a>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ed8:	682f      	ldr	r7, [r5, #0]
 8009eda:	602b      	str	r3, [r5, #0]
 8009edc:	d032      	beq.n	8009f44 <__sflush_r+0x98>
 8009ede:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ee0:	89a3      	ldrh	r3, [r4, #12]
 8009ee2:	075a      	lsls	r2, r3, #29
 8009ee4:	d505      	bpl.n	8009ef2 <__sflush_r+0x46>
 8009ee6:	6863      	ldr	r3, [r4, #4]
 8009ee8:	1ac0      	subs	r0, r0, r3
 8009eea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009eec:	b10b      	cbz	r3, 8009ef2 <__sflush_r+0x46>
 8009eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ef0:	1ac0      	subs	r0, r0, r3
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ef8:	6a21      	ldr	r1, [r4, #32]
 8009efa:	4628      	mov	r0, r5
 8009efc:	47b0      	blx	r6
 8009efe:	1c43      	adds	r3, r0, #1
 8009f00:	89a3      	ldrh	r3, [r4, #12]
 8009f02:	d106      	bne.n	8009f12 <__sflush_r+0x66>
 8009f04:	6829      	ldr	r1, [r5, #0]
 8009f06:	291d      	cmp	r1, #29
 8009f08:	d82c      	bhi.n	8009f64 <__sflush_r+0xb8>
 8009f0a:	4a2a      	ldr	r2, [pc, #168]	; (8009fb4 <__sflush_r+0x108>)
 8009f0c:	40ca      	lsrs	r2, r1
 8009f0e:	07d6      	lsls	r6, r2, #31
 8009f10:	d528      	bpl.n	8009f64 <__sflush_r+0xb8>
 8009f12:	2200      	movs	r2, #0
 8009f14:	6062      	str	r2, [r4, #4]
 8009f16:	04d9      	lsls	r1, r3, #19
 8009f18:	6922      	ldr	r2, [r4, #16]
 8009f1a:	6022      	str	r2, [r4, #0]
 8009f1c:	d504      	bpl.n	8009f28 <__sflush_r+0x7c>
 8009f1e:	1c42      	adds	r2, r0, #1
 8009f20:	d101      	bne.n	8009f26 <__sflush_r+0x7a>
 8009f22:	682b      	ldr	r3, [r5, #0]
 8009f24:	b903      	cbnz	r3, 8009f28 <__sflush_r+0x7c>
 8009f26:	6560      	str	r0, [r4, #84]	; 0x54
 8009f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f2a:	602f      	str	r7, [r5, #0]
 8009f2c:	2900      	cmp	r1, #0
 8009f2e:	d0ca      	beq.n	8009ec6 <__sflush_r+0x1a>
 8009f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f34:	4299      	cmp	r1, r3
 8009f36:	d002      	beq.n	8009f3e <__sflush_r+0x92>
 8009f38:	4628      	mov	r0, r5
 8009f3a:	f7ff f8ad 	bl	8009098 <_free_r>
 8009f3e:	2000      	movs	r0, #0
 8009f40:	6360      	str	r0, [r4, #52]	; 0x34
 8009f42:	e7c1      	b.n	8009ec8 <__sflush_r+0x1c>
 8009f44:	6a21      	ldr	r1, [r4, #32]
 8009f46:	2301      	movs	r3, #1
 8009f48:	4628      	mov	r0, r5
 8009f4a:	47b0      	blx	r6
 8009f4c:	1c41      	adds	r1, r0, #1
 8009f4e:	d1c7      	bne.n	8009ee0 <__sflush_r+0x34>
 8009f50:	682b      	ldr	r3, [r5, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d0c4      	beq.n	8009ee0 <__sflush_r+0x34>
 8009f56:	2b1d      	cmp	r3, #29
 8009f58:	d001      	beq.n	8009f5e <__sflush_r+0xb2>
 8009f5a:	2b16      	cmp	r3, #22
 8009f5c:	d101      	bne.n	8009f62 <__sflush_r+0xb6>
 8009f5e:	602f      	str	r7, [r5, #0]
 8009f60:	e7b1      	b.n	8009ec6 <__sflush_r+0x1a>
 8009f62:	89a3      	ldrh	r3, [r4, #12]
 8009f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f68:	81a3      	strh	r3, [r4, #12]
 8009f6a:	e7ad      	b.n	8009ec8 <__sflush_r+0x1c>
 8009f6c:	690f      	ldr	r7, [r1, #16]
 8009f6e:	2f00      	cmp	r7, #0
 8009f70:	d0a9      	beq.n	8009ec6 <__sflush_r+0x1a>
 8009f72:	0793      	lsls	r3, r2, #30
 8009f74:	680e      	ldr	r6, [r1, #0]
 8009f76:	bf08      	it	eq
 8009f78:	694b      	ldreq	r3, [r1, #20]
 8009f7a:	600f      	str	r7, [r1, #0]
 8009f7c:	bf18      	it	ne
 8009f7e:	2300      	movne	r3, #0
 8009f80:	eba6 0807 	sub.w	r8, r6, r7
 8009f84:	608b      	str	r3, [r1, #8]
 8009f86:	f1b8 0f00 	cmp.w	r8, #0
 8009f8a:	dd9c      	ble.n	8009ec6 <__sflush_r+0x1a>
 8009f8c:	6a21      	ldr	r1, [r4, #32]
 8009f8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f90:	4643      	mov	r3, r8
 8009f92:	463a      	mov	r2, r7
 8009f94:	4628      	mov	r0, r5
 8009f96:	47b0      	blx	r6
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	dc06      	bgt.n	8009faa <__sflush_r+0xfe>
 8009f9c:	89a3      	ldrh	r3, [r4, #12]
 8009f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fa2:	81a3      	strh	r3, [r4, #12]
 8009fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fa8:	e78e      	b.n	8009ec8 <__sflush_r+0x1c>
 8009faa:	4407      	add	r7, r0
 8009fac:	eba8 0800 	sub.w	r8, r8, r0
 8009fb0:	e7e9      	b.n	8009f86 <__sflush_r+0xda>
 8009fb2:	bf00      	nop
 8009fb4:	20400001 	.word	0x20400001

08009fb8 <_fflush_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	690b      	ldr	r3, [r1, #16]
 8009fbc:	4605      	mov	r5, r0
 8009fbe:	460c      	mov	r4, r1
 8009fc0:	b913      	cbnz	r3, 8009fc8 <_fflush_r+0x10>
 8009fc2:	2500      	movs	r5, #0
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	bd38      	pop	{r3, r4, r5, pc}
 8009fc8:	b118      	cbz	r0, 8009fd2 <_fflush_r+0x1a>
 8009fca:	6983      	ldr	r3, [r0, #24]
 8009fcc:	b90b      	cbnz	r3, 8009fd2 <_fflush_r+0x1a>
 8009fce:	f000 f887 	bl	800a0e0 <__sinit>
 8009fd2:	4b14      	ldr	r3, [pc, #80]	; (800a024 <_fflush_r+0x6c>)
 8009fd4:	429c      	cmp	r4, r3
 8009fd6:	d11b      	bne.n	800a010 <_fflush_r+0x58>
 8009fd8:	686c      	ldr	r4, [r5, #4]
 8009fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d0ef      	beq.n	8009fc2 <_fflush_r+0xa>
 8009fe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fe4:	07d0      	lsls	r0, r2, #31
 8009fe6:	d404      	bmi.n	8009ff2 <_fflush_r+0x3a>
 8009fe8:	0599      	lsls	r1, r3, #22
 8009fea:	d402      	bmi.n	8009ff2 <_fflush_r+0x3a>
 8009fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fee:	f000 f927 	bl	800a240 <__retarget_lock_acquire_recursive>
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	4621      	mov	r1, r4
 8009ff6:	f7ff ff59 	bl	8009eac <__sflush_r>
 8009ffa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ffc:	07da      	lsls	r2, r3, #31
 8009ffe:	4605      	mov	r5, r0
 800a000:	d4e0      	bmi.n	8009fc4 <_fflush_r+0xc>
 800a002:	89a3      	ldrh	r3, [r4, #12]
 800a004:	059b      	lsls	r3, r3, #22
 800a006:	d4dd      	bmi.n	8009fc4 <_fflush_r+0xc>
 800a008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a00a:	f000 f91a 	bl	800a242 <__retarget_lock_release_recursive>
 800a00e:	e7d9      	b.n	8009fc4 <_fflush_r+0xc>
 800a010:	4b05      	ldr	r3, [pc, #20]	; (800a028 <_fflush_r+0x70>)
 800a012:	429c      	cmp	r4, r3
 800a014:	d101      	bne.n	800a01a <_fflush_r+0x62>
 800a016:	68ac      	ldr	r4, [r5, #8]
 800a018:	e7df      	b.n	8009fda <_fflush_r+0x22>
 800a01a:	4b04      	ldr	r3, [pc, #16]	; (800a02c <_fflush_r+0x74>)
 800a01c:	429c      	cmp	r4, r3
 800a01e:	bf08      	it	eq
 800a020:	68ec      	ldreq	r4, [r5, #12]
 800a022:	e7da      	b.n	8009fda <_fflush_r+0x22>
 800a024:	0800adf8 	.word	0x0800adf8
 800a028:	0800ae18 	.word	0x0800ae18
 800a02c:	0800add8 	.word	0x0800add8

0800a030 <std>:
 800a030:	2300      	movs	r3, #0
 800a032:	b510      	push	{r4, lr}
 800a034:	4604      	mov	r4, r0
 800a036:	e9c0 3300 	strd	r3, r3, [r0]
 800a03a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a03e:	6083      	str	r3, [r0, #8]
 800a040:	8181      	strh	r1, [r0, #12]
 800a042:	6643      	str	r3, [r0, #100]	; 0x64
 800a044:	81c2      	strh	r2, [r0, #14]
 800a046:	6183      	str	r3, [r0, #24]
 800a048:	4619      	mov	r1, r3
 800a04a:	2208      	movs	r2, #8
 800a04c:	305c      	adds	r0, #92	; 0x5c
 800a04e:	f7fd f8a9 	bl	80071a4 <memset>
 800a052:	4b05      	ldr	r3, [pc, #20]	; (800a068 <std+0x38>)
 800a054:	6263      	str	r3, [r4, #36]	; 0x24
 800a056:	4b05      	ldr	r3, [pc, #20]	; (800a06c <std+0x3c>)
 800a058:	62a3      	str	r3, [r4, #40]	; 0x28
 800a05a:	4b05      	ldr	r3, [pc, #20]	; (800a070 <std+0x40>)
 800a05c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a05e:	4b05      	ldr	r3, [pc, #20]	; (800a074 <std+0x44>)
 800a060:	6224      	str	r4, [r4, #32]
 800a062:	6323      	str	r3, [r4, #48]	; 0x30
 800a064:	bd10      	pop	{r4, pc}
 800a066:	bf00      	nop
 800a068:	08007b21 	.word	0x08007b21
 800a06c:	08007b47 	.word	0x08007b47
 800a070:	08007b7f 	.word	0x08007b7f
 800a074:	08007ba3 	.word	0x08007ba3

0800a078 <_cleanup_r>:
 800a078:	4901      	ldr	r1, [pc, #4]	; (800a080 <_cleanup_r+0x8>)
 800a07a:	f000 b8c1 	b.w	800a200 <_fwalk_reent>
 800a07e:	bf00      	nop
 800a080:	08009fb9 	.word	0x08009fb9

0800a084 <__sfmoreglue>:
 800a084:	b570      	push	{r4, r5, r6, lr}
 800a086:	2268      	movs	r2, #104	; 0x68
 800a088:	1e4d      	subs	r5, r1, #1
 800a08a:	4355      	muls	r5, r2
 800a08c:	460e      	mov	r6, r1
 800a08e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a092:	f7ff f86d 	bl	8009170 <_malloc_r>
 800a096:	4604      	mov	r4, r0
 800a098:	b140      	cbz	r0, 800a0ac <__sfmoreglue+0x28>
 800a09a:	2100      	movs	r1, #0
 800a09c:	e9c0 1600 	strd	r1, r6, [r0]
 800a0a0:	300c      	adds	r0, #12
 800a0a2:	60a0      	str	r0, [r4, #8]
 800a0a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a0a8:	f7fd f87c 	bl	80071a4 <memset>
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	bd70      	pop	{r4, r5, r6, pc}

0800a0b0 <__sfp_lock_acquire>:
 800a0b0:	4801      	ldr	r0, [pc, #4]	; (800a0b8 <__sfp_lock_acquire+0x8>)
 800a0b2:	f000 b8c5 	b.w	800a240 <__retarget_lock_acquire_recursive>
 800a0b6:	bf00      	nop
 800a0b8:	20000595 	.word	0x20000595

0800a0bc <__sfp_lock_release>:
 800a0bc:	4801      	ldr	r0, [pc, #4]	; (800a0c4 <__sfp_lock_release+0x8>)
 800a0be:	f000 b8c0 	b.w	800a242 <__retarget_lock_release_recursive>
 800a0c2:	bf00      	nop
 800a0c4:	20000595 	.word	0x20000595

0800a0c8 <__sinit_lock_acquire>:
 800a0c8:	4801      	ldr	r0, [pc, #4]	; (800a0d0 <__sinit_lock_acquire+0x8>)
 800a0ca:	f000 b8b9 	b.w	800a240 <__retarget_lock_acquire_recursive>
 800a0ce:	bf00      	nop
 800a0d0:	20000596 	.word	0x20000596

0800a0d4 <__sinit_lock_release>:
 800a0d4:	4801      	ldr	r0, [pc, #4]	; (800a0dc <__sinit_lock_release+0x8>)
 800a0d6:	f000 b8b4 	b.w	800a242 <__retarget_lock_release_recursive>
 800a0da:	bf00      	nop
 800a0dc:	20000596 	.word	0x20000596

0800a0e0 <__sinit>:
 800a0e0:	b510      	push	{r4, lr}
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	f7ff fff0 	bl	800a0c8 <__sinit_lock_acquire>
 800a0e8:	69a3      	ldr	r3, [r4, #24]
 800a0ea:	b11b      	cbz	r3, 800a0f4 <__sinit+0x14>
 800a0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0f0:	f7ff bff0 	b.w	800a0d4 <__sinit_lock_release>
 800a0f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a0f8:	6523      	str	r3, [r4, #80]	; 0x50
 800a0fa:	4b13      	ldr	r3, [pc, #76]	; (800a148 <__sinit+0x68>)
 800a0fc:	4a13      	ldr	r2, [pc, #76]	; (800a14c <__sinit+0x6c>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	62a2      	str	r2, [r4, #40]	; 0x28
 800a102:	42a3      	cmp	r3, r4
 800a104:	bf04      	itt	eq
 800a106:	2301      	moveq	r3, #1
 800a108:	61a3      	streq	r3, [r4, #24]
 800a10a:	4620      	mov	r0, r4
 800a10c:	f000 f820 	bl	800a150 <__sfp>
 800a110:	6060      	str	r0, [r4, #4]
 800a112:	4620      	mov	r0, r4
 800a114:	f000 f81c 	bl	800a150 <__sfp>
 800a118:	60a0      	str	r0, [r4, #8]
 800a11a:	4620      	mov	r0, r4
 800a11c:	f000 f818 	bl	800a150 <__sfp>
 800a120:	2200      	movs	r2, #0
 800a122:	60e0      	str	r0, [r4, #12]
 800a124:	2104      	movs	r1, #4
 800a126:	6860      	ldr	r0, [r4, #4]
 800a128:	f7ff ff82 	bl	800a030 <std>
 800a12c:	68a0      	ldr	r0, [r4, #8]
 800a12e:	2201      	movs	r2, #1
 800a130:	2109      	movs	r1, #9
 800a132:	f7ff ff7d 	bl	800a030 <std>
 800a136:	68e0      	ldr	r0, [r4, #12]
 800a138:	2202      	movs	r2, #2
 800a13a:	2112      	movs	r1, #18
 800a13c:	f7ff ff78 	bl	800a030 <std>
 800a140:	2301      	movs	r3, #1
 800a142:	61a3      	str	r3, [r4, #24]
 800a144:	e7d2      	b.n	800a0ec <__sinit+0xc>
 800a146:	bf00      	nop
 800a148:	0800aa48 	.word	0x0800aa48
 800a14c:	0800a079 	.word	0x0800a079

0800a150 <__sfp>:
 800a150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a152:	4607      	mov	r7, r0
 800a154:	f7ff ffac 	bl	800a0b0 <__sfp_lock_acquire>
 800a158:	4b1e      	ldr	r3, [pc, #120]	; (800a1d4 <__sfp+0x84>)
 800a15a:	681e      	ldr	r6, [r3, #0]
 800a15c:	69b3      	ldr	r3, [r6, #24]
 800a15e:	b913      	cbnz	r3, 800a166 <__sfp+0x16>
 800a160:	4630      	mov	r0, r6
 800a162:	f7ff ffbd 	bl	800a0e0 <__sinit>
 800a166:	3648      	adds	r6, #72	; 0x48
 800a168:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a16c:	3b01      	subs	r3, #1
 800a16e:	d503      	bpl.n	800a178 <__sfp+0x28>
 800a170:	6833      	ldr	r3, [r6, #0]
 800a172:	b30b      	cbz	r3, 800a1b8 <__sfp+0x68>
 800a174:	6836      	ldr	r6, [r6, #0]
 800a176:	e7f7      	b.n	800a168 <__sfp+0x18>
 800a178:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a17c:	b9d5      	cbnz	r5, 800a1b4 <__sfp+0x64>
 800a17e:	4b16      	ldr	r3, [pc, #88]	; (800a1d8 <__sfp+0x88>)
 800a180:	60e3      	str	r3, [r4, #12]
 800a182:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a186:	6665      	str	r5, [r4, #100]	; 0x64
 800a188:	f000 f859 	bl	800a23e <__retarget_lock_init_recursive>
 800a18c:	f7ff ff96 	bl	800a0bc <__sfp_lock_release>
 800a190:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a194:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a198:	6025      	str	r5, [r4, #0]
 800a19a:	61a5      	str	r5, [r4, #24]
 800a19c:	2208      	movs	r2, #8
 800a19e:	4629      	mov	r1, r5
 800a1a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a1a4:	f7fc fffe 	bl	80071a4 <memset>
 800a1a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a1ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1b4:	3468      	adds	r4, #104	; 0x68
 800a1b6:	e7d9      	b.n	800a16c <__sfp+0x1c>
 800a1b8:	2104      	movs	r1, #4
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	f7ff ff62 	bl	800a084 <__sfmoreglue>
 800a1c0:	4604      	mov	r4, r0
 800a1c2:	6030      	str	r0, [r6, #0]
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d1d5      	bne.n	800a174 <__sfp+0x24>
 800a1c8:	f7ff ff78 	bl	800a0bc <__sfp_lock_release>
 800a1cc:	230c      	movs	r3, #12
 800a1ce:	603b      	str	r3, [r7, #0]
 800a1d0:	e7ee      	b.n	800a1b0 <__sfp+0x60>
 800a1d2:	bf00      	nop
 800a1d4:	0800aa48 	.word	0x0800aa48
 800a1d8:	ffff0001 	.word	0xffff0001

0800a1dc <fiprintf>:
 800a1dc:	b40e      	push	{r1, r2, r3}
 800a1de:	b503      	push	{r0, r1, lr}
 800a1e0:	4601      	mov	r1, r0
 800a1e2:	ab03      	add	r3, sp, #12
 800a1e4:	4805      	ldr	r0, [pc, #20]	; (800a1fc <fiprintf+0x20>)
 800a1e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ea:	6800      	ldr	r0, [r0, #0]
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	f000 f8b9 	bl	800a364 <_vfiprintf_r>
 800a1f2:	b002      	add	sp, #8
 800a1f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1f8:	b003      	add	sp, #12
 800a1fa:	4770      	bx	lr
 800a1fc:	2000000c 	.word	0x2000000c

0800a200 <_fwalk_reent>:
 800a200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a204:	4606      	mov	r6, r0
 800a206:	4688      	mov	r8, r1
 800a208:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a20c:	2700      	movs	r7, #0
 800a20e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a212:	f1b9 0901 	subs.w	r9, r9, #1
 800a216:	d505      	bpl.n	800a224 <_fwalk_reent+0x24>
 800a218:	6824      	ldr	r4, [r4, #0]
 800a21a:	2c00      	cmp	r4, #0
 800a21c:	d1f7      	bne.n	800a20e <_fwalk_reent+0xe>
 800a21e:	4638      	mov	r0, r7
 800a220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a224:	89ab      	ldrh	r3, [r5, #12]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d907      	bls.n	800a23a <_fwalk_reent+0x3a>
 800a22a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a22e:	3301      	adds	r3, #1
 800a230:	d003      	beq.n	800a23a <_fwalk_reent+0x3a>
 800a232:	4629      	mov	r1, r5
 800a234:	4630      	mov	r0, r6
 800a236:	47c0      	blx	r8
 800a238:	4307      	orrs	r7, r0
 800a23a:	3568      	adds	r5, #104	; 0x68
 800a23c:	e7e9      	b.n	800a212 <_fwalk_reent+0x12>

0800a23e <__retarget_lock_init_recursive>:
 800a23e:	4770      	bx	lr

0800a240 <__retarget_lock_acquire_recursive>:
 800a240:	4770      	bx	lr

0800a242 <__retarget_lock_release_recursive>:
 800a242:	4770      	bx	lr

0800a244 <__ascii_mbtowc>:
 800a244:	b082      	sub	sp, #8
 800a246:	b901      	cbnz	r1, 800a24a <__ascii_mbtowc+0x6>
 800a248:	a901      	add	r1, sp, #4
 800a24a:	b142      	cbz	r2, 800a25e <__ascii_mbtowc+0x1a>
 800a24c:	b14b      	cbz	r3, 800a262 <__ascii_mbtowc+0x1e>
 800a24e:	7813      	ldrb	r3, [r2, #0]
 800a250:	600b      	str	r3, [r1, #0]
 800a252:	7812      	ldrb	r2, [r2, #0]
 800a254:	1e10      	subs	r0, r2, #0
 800a256:	bf18      	it	ne
 800a258:	2001      	movne	r0, #1
 800a25a:	b002      	add	sp, #8
 800a25c:	4770      	bx	lr
 800a25e:	4610      	mov	r0, r2
 800a260:	e7fb      	b.n	800a25a <__ascii_mbtowc+0x16>
 800a262:	f06f 0001 	mvn.w	r0, #1
 800a266:	e7f8      	b.n	800a25a <__ascii_mbtowc+0x16>

0800a268 <memmove>:
 800a268:	4288      	cmp	r0, r1
 800a26a:	b510      	push	{r4, lr}
 800a26c:	eb01 0402 	add.w	r4, r1, r2
 800a270:	d902      	bls.n	800a278 <memmove+0x10>
 800a272:	4284      	cmp	r4, r0
 800a274:	4623      	mov	r3, r4
 800a276:	d807      	bhi.n	800a288 <memmove+0x20>
 800a278:	1e43      	subs	r3, r0, #1
 800a27a:	42a1      	cmp	r1, r4
 800a27c:	d008      	beq.n	800a290 <memmove+0x28>
 800a27e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a282:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a286:	e7f8      	b.n	800a27a <memmove+0x12>
 800a288:	4402      	add	r2, r0
 800a28a:	4601      	mov	r1, r0
 800a28c:	428a      	cmp	r2, r1
 800a28e:	d100      	bne.n	800a292 <memmove+0x2a>
 800a290:	bd10      	pop	{r4, pc}
 800a292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a296:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a29a:	e7f7      	b.n	800a28c <memmove+0x24>

0800a29c <__malloc_lock>:
 800a29c:	4801      	ldr	r0, [pc, #4]	; (800a2a4 <__malloc_lock+0x8>)
 800a29e:	f7ff bfcf 	b.w	800a240 <__retarget_lock_acquire_recursive>
 800a2a2:	bf00      	nop
 800a2a4:	20000594 	.word	0x20000594

0800a2a8 <__malloc_unlock>:
 800a2a8:	4801      	ldr	r0, [pc, #4]	; (800a2b0 <__malloc_unlock+0x8>)
 800a2aa:	f7ff bfca 	b.w	800a242 <__retarget_lock_release_recursive>
 800a2ae:	bf00      	nop
 800a2b0:	20000594 	.word	0x20000594

0800a2b4 <_realloc_r>:
 800a2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b8:	4680      	mov	r8, r0
 800a2ba:	4614      	mov	r4, r2
 800a2bc:	460e      	mov	r6, r1
 800a2be:	b921      	cbnz	r1, 800a2ca <_realloc_r+0x16>
 800a2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	f7fe bf53 	b.w	8009170 <_malloc_r>
 800a2ca:	b92a      	cbnz	r2, 800a2d8 <_realloc_r+0x24>
 800a2cc:	f7fe fee4 	bl	8009098 <_free_r>
 800a2d0:	4625      	mov	r5, r4
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d8:	f000 faae 	bl	800a838 <_malloc_usable_size_r>
 800a2dc:	4284      	cmp	r4, r0
 800a2de:	4607      	mov	r7, r0
 800a2e0:	d802      	bhi.n	800a2e8 <_realloc_r+0x34>
 800a2e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2e6:	d812      	bhi.n	800a30e <_realloc_r+0x5a>
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	4640      	mov	r0, r8
 800a2ec:	f7fe ff40 	bl	8009170 <_malloc_r>
 800a2f0:	4605      	mov	r5, r0
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	d0ed      	beq.n	800a2d2 <_realloc_r+0x1e>
 800a2f6:	42bc      	cmp	r4, r7
 800a2f8:	4622      	mov	r2, r4
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	bf28      	it	cs
 800a2fe:	463a      	movcs	r2, r7
 800a300:	f7fe fb22 	bl	8008948 <memcpy>
 800a304:	4631      	mov	r1, r6
 800a306:	4640      	mov	r0, r8
 800a308:	f7fe fec6 	bl	8009098 <_free_r>
 800a30c:	e7e1      	b.n	800a2d2 <_realloc_r+0x1e>
 800a30e:	4635      	mov	r5, r6
 800a310:	e7df      	b.n	800a2d2 <_realloc_r+0x1e>

0800a312 <__sfputc_r>:
 800a312:	6893      	ldr	r3, [r2, #8]
 800a314:	3b01      	subs	r3, #1
 800a316:	2b00      	cmp	r3, #0
 800a318:	b410      	push	{r4}
 800a31a:	6093      	str	r3, [r2, #8]
 800a31c:	da08      	bge.n	800a330 <__sfputc_r+0x1e>
 800a31e:	6994      	ldr	r4, [r2, #24]
 800a320:	42a3      	cmp	r3, r4
 800a322:	db01      	blt.n	800a328 <__sfputc_r+0x16>
 800a324:	290a      	cmp	r1, #10
 800a326:	d103      	bne.n	800a330 <__sfputc_r+0x1e>
 800a328:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a32c:	f000 b94a 	b.w	800a5c4 <__swbuf_r>
 800a330:	6813      	ldr	r3, [r2, #0]
 800a332:	1c58      	adds	r0, r3, #1
 800a334:	6010      	str	r0, [r2, #0]
 800a336:	7019      	strb	r1, [r3, #0]
 800a338:	4608      	mov	r0, r1
 800a33a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <__sfputs_r>:
 800a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a342:	4606      	mov	r6, r0
 800a344:	460f      	mov	r7, r1
 800a346:	4614      	mov	r4, r2
 800a348:	18d5      	adds	r5, r2, r3
 800a34a:	42ac      	cmp	r4, r5
 800a34c:	d101      	bne.n	800a352 <__sfputs_r+0x12>
 800a34e:	2000      	movs	r0, #0
 800a350:	e007      	b.n	800a362 <__sfputs_r+0x22>
 800a352:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a356:	463a      	mov	r2, r7
 800a358:	4630      	mov	r0, r6
 800a35a:	f7ff ffda 	bl	800a312 <__sfputc_r>
 800a35e:	1c43      	adds	r3, r0, #1
 800a360:	d1f3      	bne.n	800a34a <__sfputs_r+0xa>
 800a362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a364 <_vfiprintf_r>:
 800a364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a368:	460d      	mov	r5, r1
 800a36a:	b09d      	sub	sp, #116	; 0x74
 800a36c:	4614      	mov	r4, r2
 800a36e:	4698      	mov	r8, r3
 800a370:	4606      	mov	r6, r0
 800a372:	b118      	cbz	r0, 800a37c <_vfiprintf_r+0x18>
 800a374:	6983      	ldr	r3, [r0, #24]
 800a376:	b90b      	cbnz	r3, 800a37c <_vfiprintf_r+0x18>
 800a378:	f7ff feb2 	bl	800a0e0 <__sinit>
 800a37c:	4b89      	ldr	r3, [pc, #548]	; (800a5a4 <_vfiprintf_r+0x240>)
 800a37e:	429d      	cmp	r5, r3
 800a380:	d11b      	bne.n	800a3ba <_vfiprintf_r+0x56>
 800a382:	6875      	ldr	r5, [r6, #4]
 800a384:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a386:	07d9      	lsls	r1, r3, #31
 800a388:	d405      	bmi.n	800a396 <_vfiprintf_r+0x32>
 800a38a:	89ab      	ldrh	r3, [r5, #12]
 800a38c:	059a      	lsls	r2, r3, #22
 800a38e:	d402      	bmi.n	800a396 <_vfiprintf_r+0x32>
 800a390:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a392:	f7ff ff55 	bl	800a240 <__retarget_lock_acquire_recursive>
 800a396:	89ab      	ldrh	r3, [r5, #12]
 800a398:	071b      	lsls	r3, r3, #28
 800a39a:	d501      	bpl.n	800a3a0 <_vfiprintf_r+0x3c>
 800a39c:	692b      	ldr	r3, [r5, #16]
 800a39e:	b9eb      	cbnz	r3, 800a3dc <_vfiprintf_r+0x78>
 800a3a0:	4629      	mov	r1, r5
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f000 f96e 	bl	800a684 <__swsetup_r>
 800a3a8:	b1c0      	cbz	r0, 800a3dc <_vfiprintf_r+0x78>
 800a3aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3ac:	07dc      	lsls	r4, r3, #31
 800a3ae:	d50e      	bpl.n	800a3ce <_vfiprintf_r+0x6a>
 800a3b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3b4:	b01d      	add	sp, #116	; 0x74
 800a3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ba:	4b7b      	ldr	r3, [pc, #492]	; (800a5a8 <_vfiprintf_r+0x244>)
 800a3bc:	429d      	cmp	r5, r3
 800a3be:	d101      	bne.n	800a3c4 <_vfiprintf_r+0x60>
 800a3c0:	68b5      	ldr	r5, [r6, #8]
 800a3c2:	e7df      	b.n	800a384 <_vfiprintf_r+0x20>
 800a3c4:	4b79      	ldr	r3, [pc, #484]	; (800a5ac <_vfiprintf_r+0x248>)
 800a3c6:	429d      	cmp	r5, r3
 800a3c8:	bf08      	it	eq
 800a3ca:	68f5      	ldreq	r5, [r6, #12]
 800a3cc:	e7da      	b.n	800a384 <_vfiprintf_r+0x20>
 800a3ce:	89ab      	ldrh	r3, [r5, #12]
 800a3d0:	0598      	lsls	r0, r3, #22
 800a3d2:	d4ed      	bmi.n	800a3b0 <_vfiprintf_r+0x4c>
 800a3d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3d6:	f7ff ff34 	bl	800a242 <__retarget_lock_release_recursive>
 800a3da:	e7e9      	b.n	800a3b0 <_vfiprintf_r+0x4c>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	9309      	str	r3, [sp, #36]	; 0x24
 800a3e0:	2320      	movs	r3, #32
 800a3e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3ea:	2330      	movs	r3, #48	; 0x30
 800a3ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a5b0 <_vfiprintf_r+0x24c>
 800a3f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3f4:	f04f 0901 	mov.w	r9, #1
 800a3f8:	4623      	mov	r3, r4
 800a3fa:	469a      	mov	sl, r3
 800a3fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a400:	b10a      	cbz	r2, 800a406 <_vfiprintf_r+0xa2>
 800a402:	2a25      	cmp	r2, #37	; 0x25
 800a404:	d1f9      	bne.n	800a3fa <_vfiprintf_r+0x96>
 800a406:	ebba 0b04 	subs.w	fp, sl, r4
 800a40a:	d00b      	beq.n	800a424 <_vfiprintf_r+0xc0>
 800a40c:	465b      	mov	r3, fp
 800a40e:	4622      	mov	r2, r4
 800a410:	4629      	mov	r1, r5
 800a412:	4630      	mov	r0, r6
 800a414:	f7ff ff94 	bl	800a340 <__sfputs_r>
 800a418:	3001      	adds	r0, #1
 800a41a:	f000 80aa 	beq.w	800a572 <_vfiprintf_r+0x20e>
 800a41e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a420:	445a      	add	r2, fp
 800a422:	9209      	str	r2, [sp, #36]	; 0x24
 800a424:	f89a 3000 	ldrb.w	r3, [sl]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f000 80a2 	beq.w	800a572 <_vfiprintf_r+0x20e>
 800a42e:	2300      	movs	r3, #0
 800a430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a438:	f10a 0a01 	add.w	sl, sl, #1
 800a43c:	9304      	str	r3, [sp, #16]
 800a43e:	9307      	str	r3, [sp, #28]
 800a440:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a444:	931a      	str	r3, [sp, #104]	; 0x68
 800a446:	4654      	mov	r4, sl
 800a448:	2205      	movs	r2, #5
 800a44a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a44e:	4858      	ldr	r0, [pc, #352]	; (800a5b0 <_vfiprintf_r+0x24c>)
 800a450:	f7f5 fec6 	bl	80001e0 <memchr>
 800a454:	9a04      	ldr	r2, [sp, #16]
 800a456:	b9d8      	cbnz	r0, 800a490 <_vfiprintf_r+0x12c>
 800a458:	06d1      	lsls	r1, r2, #27
 800a45a:	bf44      	itt	mi
 800a45c:	2320      	movmi	r3, #32
 800a45e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a462:	0713      	lsls	r3, r2, #28
 800a464:	bf44      	itt	mi
 800a466:	232b      	movmi	r3, #43	; 0x2b
 800a468:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a46c:	f89a 3000 	ldrb.w	r3, [sl]
 800a470:	2b2a      	cmp	r3, #42	; 0x2a
 800a472:	d015      	beq.n	800a4a0 <_vfiprintf_r+0x13c>
 800a474:	9a07      	ldr	r2, [sp, #28]
 800a476:	4654      	mov	r4, sl
 800a478:	2000      	movs	r0, #0
 800a47a:	f04f 0c0a 	mov.w	ip, #10
 800a47e:	4621      	mov	r1, r4
 800a480:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a484:	3b30      	subs	r3, #48	; 0x30
 800a486:	2b09      	cmp	r3, #9
 800a488:	d94e      	bls.n	800a528 <_vfiprintf_r+0x1c4>
 800a48a:	b1b0      	cbz	r0, 800a4ba <_vfiprintf_r+0x156>
 800a48c:	9207      	str	r2, [sp, #28]
 800a48e:	e014      	b.n	800a4ba <_vfiprintf_r+0x156>
 800a490:	eba0 0308 	sub.w	r3, r0, r8
 800a494:	fa09 f303 	lsl.w	r3, r9, r3
 800a498:	4313      	orrs	r3, r2
 800a49a:	9304      	str	r3, [sp, #16]
 800a49c:	46a2      	mov	sl, r4
 800a49e:	e7d2      	b.n	800a446 <_vfiprintf_r+0xe2>
 800a4a0:	9b03      	ldr	r3, [sp, #12]
 800a4a2:	1d19      	adds	r1, r3, #4
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	9103      	str	r1, [sp, #12]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	bfbb      	ittet	lt
 800a4ac:	425b      	neglt	r3, r3
 800a4ae:	f042 0202 	orrlt.w	r2, r2, #2
 800a4b2:	9307      	strge	r3, [sp, #28]
 800a4b4:	9307      	strlt	r3, [sp, #28]
 800a4b6:	bfb8      	it	lt
 800a4b8:	9204      	strlt	r2, [sp, #16]
 800a4ba:	7823      	ldrb	r3, [r4, #0]
 800a4bc:	2b2e      	cmp	r3, #46	; 0x2e
 800a4be:	d10c      	bne.n	800a4da <_vfiprintf_r+0x176>
 800a4c0:	7863      	ldrb	r3, [r4, #1]
 800a4c2:	2b2a      	cmp	r3, #42	; 0x2a
 800a4c4:	d135      	bne.n	800a532 <_vfiprintf_r+0x1ce>
 800a4c6:	9b03      	ldr	r3, [sp, #12]
 800a4c8:	1d1a      	adds	r2, r3, #4
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	9203      	str	r2, [sp, #12]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	bfb8      	it	lt
 800a4d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a4d6:	3402      	adds	r4, #2
 800a4d8:	9305      	str	r3, [sp, #20]
 800a4da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a5c0 <_vfiprintf_r+0x25c>
 800a4de:	7821      	ldrb	r1, [r4, #0]
 800a4e0:	2203      	movs	r2, #3
 800a4e2:	4650      	mov	r0, sl
 800a4e4:	f7f5 fe7c 	bl	80001e0 <memchr>
 800a4e8:	b140      	cbz	r0, 800a4fc <_vfiprintf_r+0x198>
 800a4ea:	2340      	movs	r3, #64	; 0x40
 800a4ec:	eba0 000a 	sub.w	r0, r0, sl
 800a4f0:	fa03 f000 	lsl.w	r0, r3, r0
 800a4f4:	9b04      	ldr	r3, [sp, #16]
 800a4f6:	4303      	orrs	r3, r0
 800a4f8:	3401      	adds	r4, #1
 800a4fa:	9304      	str	r3, [sp, #16]
 800a4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a500:	482c      	ldr	r0, [pc, #176]	; (800a5b4 <_vfiprintf_r+0x250>)
 800a502:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a506:	2206      	movs	r2, #6
 800a508:	f7f5 fe6a 	bl	80001e0 <memchr>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d03f      	beq.n	800a590 <_vfiprintf_r+0x22c>
 800a510:	4b29      	ldr	r3, [pc, #164]	; (800a5b8 <_vfiprintf_r+0x254>)
 800a512:	bb1b      	cbnz	r3, 800a55c <_vfiprintf_r+0x1f8>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	3307      	adds	r3, #7
 800a518:	f023 0307 	bic.w	r3, r3, #7
 800a51c:	3308      	adds	r3, #8
 800a51e:	9303      	str	r3, [sp, #12]
 800a520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a522:	443b      	add	r3, r7
 800a524:	9309      	str	r3, [sp, #36]	; 0x24
 800a526:	e767      	b.n	800a3f8 <_vfiprintf_r+0x94>
 800a528:	fb0c 3202 	mla	r2, ip, r2, r3
 800a52c:	460c      	mov	r4, r1
 800a52e:	2001      	movs	r0, #1
 800a530:	e7a5      	b.n	800a47e <_vfiprintf_r+0x11a>
 800a532:	2300      	movs	r3, #0
 800a534:	3401      	adds	r4, #1
 800a536:	9305      	str	r3, [sp, #20]
 800a538:	4619      	mov	r1, r3
 800a53a:	f04f 0c0a 	mov.w	ip, #10
 800a53e:	4620      	mov	r0, r4
 800a540:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a544:	3a30      	subs	r2, #48	; 0x30
 800a546:	2a09      	cmp	r2, #9
 800a548:	d903      	bls.n	800a552 <_vfiprintf_r+0x1ee>
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d0c5      	beq.n	800a4da <_vfiprintf_r+0x176>
 800a54e:	9105      	str	r1, [sp, #20]
 800a550:	e7c3      	b.n	800a4da <_vfiprintf_r+0x176>
 800a552:	fb0c 2101 	mla	r1, ip, r1, r2
 800a556:	4604      	mov	r4, r0
 800a558:	2301      	movs	r3, #1
 800a55a:	e7f0      	b.n	800a53e <_vfiprintf_r+0x1da>
 800a55c:	ab03      	add	r3, sp, #12
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	462a      	mov	r2, r5
 800a562:	4b16      	ldr	r3, [pc, #88]	; (800a5bc <_vfiprintf_r+0x258>)
 800a564:	a904      	add	r1, sp, #16
 800a566:	4630      	mov	r0, r6
 800a568:	f7fc fec4 	bl	80072f4 <_printf_float>
 800a56c:	4607      	mov	r7, r0
 800a56e:	1c78      	adds	r0, r7, #1
 800a570:	d1d6      	bne.n	800a520 <_vfiprintf_r+0x1bc>
 800a572:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a574:	07d9      	lsls	r1, r3, #31
 800a576:	d405      	bmi.n	800a584 <_vfiprintf_r+0x220>
 800a578:	89ab      	ldrh	r3, [r5, #12]
 800a57a:	059a      	lsls	r2, r3, #22
 800a57c:	d402      	bmi.n	800a584 <_vfiprintf_r+0x220>
 800a57e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a580:	f7ff fe5f 	bl	800a242 <__retarget_lock_release_recursive>
 800a584:	89ab      	ldrh	r3, [r5, #12]
 800a586:	065b      	lsls	r3, r3, #25
 800a588:	f53f af12 	bmi.w	800a3b0 <_vfiprintf_r+0x4c>
 800a58c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a58e:	e711      	b.n	800a3b4 <_vfiprintf_r+0x50>
 800a590:	ab03      	add	r3, sp, #12
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	462a      	mov	r2, r5
 800a596:	4b09      	ldr	r3, [pc, #36]	; (800a5bc <_vfiprintf_r+0x258>)
 800a598:	a904      	add	r1, sp, #16
 800a59a:	4630      	mov	r0, r6
 800a59c:	f7fd f94e 	bl	800783c <_printf_i>
 800a5a0:	e7e4      	b.n	800a56c <_vfiprintf_r+0x208>
 800a5a2:	bf00      	nop
 800a5a4:	0800adf8 	.word	0x0800adf8
 800a5a8:	0800ae18 	.word	0x0800ae18
 800a5ac:	0800add8 	.word	0x0800add8
 800a5b0:	0800ac6c 	.word	0x0800ac6c
 800a5b4:	0800ac76 	.word	0x0800ac76
 800a5b8:	080072f5 	.word	0x080072f5
 800a5bc:	0800a341 	.word	0x0800a341
 800a5c0:	0800ac72 	.word	0x0800ac72

0800a5c4 <__swbuf_r>:
 800a5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c6:	460e      	mov	r6, r1
 800a5c8:	4614      	mov	r4, r2
 800a5ca:	4605      	mov	r5, r0
 800a5cc:	b118      	cbz	r0, 800a5d6 <__swbuf_r+0x12>
 800a5ce:	6983      	ldr	r3, [r0, #24]
 800a5d0:	b90b      	cbnz	r3, 800a5d6 <__swbuf_r+0x12>
 800a5d2:	f7ff fd85 	bl	800a0e0 <__sinit>
 800a5d6:	4b21      	ldr	r3, [pc, #132]	; (800a65c <__swbuf_r+0x98>)
 800a5d8:	429c      	cmp	r4, r3
 800a5da:	d12b      	bne.n	800a634 <__swbuf_r+0x70>
 800a5dc:	686c      	ldr	r4, [r5, #4]
 800a5de:	69a3      	ldr	r3, [r4, #24]
 800a5e0:	60a3      	str	r3, [r4, #8]
 800a5e2:	89a3      	ldrh	r3, [r4, #12]
 800a5e4:	071a      	lsls	r2, r3, #28
 800a5e6:	d52f      	bpl.n	800a648 <__swbuf_r+0x84>
 800a5e8:	6923      	ldr	r3, [r4, #16]
 800a5ea:	b36b      	cbz	r3, 800a648 <__swbuf_r+0x84>
 800a5ec:	6923      	ldr	r3, [r4, #16]
 800a5ee:	6820      	ldr	r0, [r4, #0]
 800a5f0:	1ac0      	subs	r0, r0, r3
 800a5f2:	6963      	ldr	r3, [r4, #20]
 800a5f4:	b2f6      	uxtb	r6, r6
 800a5f6:	4283      	cmp	r3, r0
 800a5f8:	4637      	mov	r7, r6
 800a5fa:	dc04      	bgt.n	800a606 <__swbuf_r+0x42>
 800a5fc:	4621      	mov	r1, r4
 800a5fe:	4628      	mov	r0, r5
 800a600:	f7ff fcda 	bl	8009fb8 <_fflush_r>
 800a604:	bb30      	cbnz	r0, 800a654 <__swbuf_r+0x90>
 800a606:	68a3      	ldr	r3, [r4, #8]
 800a608:	3b01      	subs	r3, #1
 800a60a:	60a3      	str	r3, [r4, #8]
 800a60c:	6823      	ldr	r3, [r4, #0]
 800a60e:	1c5a      	adds	r2, r3, #1
 800a610:	6022      	str	r2, [r4, #0]
 800a612:	701e      	strb	r6, [r3, #0]
 800a614:	6963      	ldr	r3, [r4, #20]
 800a616:	3001      	adds	r0, #1
 800a618:	4283      	cmp	r3, r0
 800a61a:	d004      	beq.n	800a626 <__swbuf_r+0x62>
 800a61c:	89a3      	ldrh	r3, [r4, #12]
 800a61e:	07db      	lsls	r3, r3, #31
 800a620:	d506      	bpl.n	800a630 <__swbuf_r+0x6c>
 800a622:	2e0a      	cmp	r6, #10
 800a624:	d104      	bne.n	800a630 <__swbuf_r+0x6c>
 800a626:	4621      	mov	r1, r4
 800a628:	4628      	mov	r0, r5
 800a62a:	f7ff fcc5 	bl	8009fb8 <_fflush_r>
 800a62e:	b988      	cbnz	r0, 800a654 <__swbuf_r+0x90>
 800a630:	4638      	mov	r0, r7
 800a632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a634:	4b0a      	ldr	r3, [pc, #40]	; (800a660 <__swbuf_r+0x9c>)
 800a636:	429c      	cmp	r4, r3
 800a638:	d101      	bne.n	800a63e <__swbuf_r+0x7a>
 800a63a:	68ac      	ldr	r4, [r5, #8]
 800a63c:	e7cf      	b.n	800a5de <__swbuf_r+0x1a>
 800a63e:	4b09      	ldr	r3, [pc, #36]	; (800a664 <__swbuf_r+0xa0>)
 800a640:	429c      	cmp	r4, r3
 800a642:	bf08      	it	eq
 800a644:	68ec      	ldreq	r4, [r5, #12]
 800a646:	e7ca      	b.n	800a5de <__swbuf_r+0x1a>
 800a648:	4621      	mov	r1, r4
 800a64a:	4628      	mov	r0, r5
 800a64c:	f000 f81a 	bl	800a684 <__swsetup_r>
 800a650:	2800      	cmp	r0, #0
 800a652:	d0cb      	beq.n	800a5ec <__swbuf_r+0x28>
 800a654:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a658:	e7ea      	b.n	800a630 <__swbuf_r+0x6c>
 800a65a:	bf00      	nop
 800a65c:	0800adf8 	.word	0x0800adf8
 800a660:	0800ae18 	.word	0x0800ae18
 800a664:	0800add8 	.word	0x0800add8

0800a668 <__ascii_wctomb>:
 800a668:	b149      	cbz	r1, 800a67e <__ascii_wctomb+0x16>
 800a66a:	2aff      	cmp	r2, #255	; 0xff
 800a66c:	bf85      	ittet	hi
 800a66e:	238a      	movhi	r3, #138	; 0x8a
 800a670:	6003      	strhi	r3, [r0, #0]
 800a672:	700a      	strbls	r2, [r1, #0]
 800a674:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a678:	bf98      	it	ls
 800a67a:	2001      	movls	r0, #1
 800a67c:	4770      	bx	lr
 800a67e:	4608      	mov	r0, r1
 800a680:	4770      	bx	lr
	...

0800a684 <__swsetup_r>:
 800a684:	4b32      	ldr	r3, [pc, #200]	; (800a750 <__swsetup_r+0xcc>)
 800a686:	b570      	push	{r4, r5, r6, lr}
 800a688:	681d      	ldr	r5, [r3, #0]
 800a68a:	4606      	mov	r6, r0
 800a68c:	460c      	mov	r4, r1
 800a68e:	b125      	cbz	r5, 800a69a <__swsetup_r+0x16>
 800a690:	69ab      	ldr	r3, [r5, #24]
 800a692:	b913      	cbnz	r3, 800a69a <__swsetup_r+0x16>
 800a694:	4628      	mov	r0, r5
 800a696:	f7ff fd23 	bl	800a0e0 <__sinit>
 800a69a:	4b2e      	ldr	r3, [pc, #184]	; (800a754 <__swsetup_r+0xd0>)
 800a69c:	429c      	cmp	r4, r3
 800a69e:	d10f      	bne.n	800a6c0 <__swsetup_r+0x3c>
 800a6a0:	686c      	ldr	r4, [r5, #4]
 800a6a2:	89a3      	ldrh	r3, [r4, #12]
 800a6a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6a8:	0719      	lsls	r1, r3, #28
 800a6aa:	d42c      	bmi.n	800a706 <__swsetup_r+0x82>
 800a6ac:	06dd      	lsls	r5, r3, #27
 800a6ae:	d411      	bmi.n	800a6d4 <__swsetup_r+0x50>
 800a6b0:	2309      	movs	r3, #9
 800a6b2:	6033      	str	r3, [r6, #0]
 800a6b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6be:	e03e      	b.n	800a73e <__swsetup_r+0xba>
 800a6c0:	4b25      	ldr	r3, [pc, #148]	; (800a758 <__swsetup_r+0xd4>)
 800a6c2:	429c      	cmp	r4, r3
 800a6c4:	d101      	bne.n	800a6ca <__swsetup_r+0x46>
 800a6c6:	68ac      	ldr	r4, [r5, #8]
 800a6c8:	e7eb      	b.n	800a6a2 <__swsetup_r+0x1e>
 800a6ca:	4b24      	ldr	r3, [pc, #144]	; (800a75c <__swsetup_r+0xd8>)
 800a6cc:	429c      	cmp	r4, r3
 800a6ce:	bf08      	it	eq
 800a6d0:	68ec      	ldreq	r4, [r5, #12]
 800a6d2:	e7e6      	b.n	800a6a2 <__swsetup_r+0x1e>
 800a6d4:	0758      	lsls	r0, r3, #29
 800a6d6:	d512      	bpl.n	800a6fe <__swsetup_r+0x7a>
 800a6d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6da:	b141      	cbz	r1, 800a6ee <__swsetup_r+0x6a>
 800a6dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6e0:	4299      	cmp	r1, r3
 800a6e2:	d002      	beq.n	800a6ea <__swsetup_r+0x66>
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	f7fe fcd7 	bl	8009098 <_free_r>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	6363      	str	r3, [r4, #52]	; 0x34
 800a6ee:	89a3      	ldrh	r3, [r4, #12]
 800a6f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6f4:	81a3      	strh	r3, [r4, #12]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	6063      	str	r3, [r4, #4]
 800a6fa:	6923      	ldr	r3, [r4, #16]
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	89a3      	ldrh	r3, [r4, #12]
 800a700:	f043 0308 	orr.w	r3, r3, #8
 800a704:	81a3      	strh	r3, [r4, #12]
 800a706:	6923      	ldr	r3, [r4, #16]
 800a708:	b94b      	cbnz	r3, 800a71e <__swsetup_r+0x9a>
 800a70a:	89a3      	ldrh	r3, [r4, #12]
 800a70c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a714:	d003      	beq.n	800a71e <__swsetup_r+0x9a>
 800a716:	4621      	mov	r1, r4
 800a718:	4630      	mov	r0, r6
 800a71a:	f000 f84d 	bl	800a7b8 <__smakebuf_r>
 800a71e:	89a0      	ldrh	r0, [r4, #12]
 800a720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a724:	f010 0301 	ands.w	r3, r0, #1
 800a728:	d00a      	beq.n	800a740 <__swsetup_r+0xbc>
 800a72a:	2300      	movs	r3, #0
 800a72c:	60a3      	str	r3, [r4, #8]
 800a72e:	6963      	ldr	r3, [r4, #20]
 800a730:	425b      	negs	r3, r3
 800a732:	61a3      	str	r3, [r4, #24]
 800a734:	6923      	ldr	r3, [r4, #16]
 800a736:	b943      	cbnz	r3, 800a74a <__swsetup_r+0xc6>
 800a738:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a73c:	d1ba      	bne.n	800a6b4 <__swsetup_r+0x30>
 800a73e:	bd70      	pop	{r4, r5, r6, pc}
 800a740:	0781      	lsls	r1, r0, #30
 800a742:	bf58      	it	pl
 800a744:	6963      	ldrpl	r3, [r4, #20]
 800a746:	60a3      	str	r3, [r4, #8]
 800a748:	e7f4      	b.n	800a734 <__swsetup_r+0xb0>
 800a74a:	2000      	movs	r0, #0
 800a74c:	e7f7      	b.n	800a73e <__swsetup_r+0xba>
 800a74e:	bf00      	nop
 800a750:	2000000c 	.word	0x2000000c
 800a754:	0800adf8 	.word	0x0800adf8
 800a758:	0800ae18 	.word	0x0800ae18
 800a75c:	0800add8 	.word	0x0800add8

0800a760 <abort>:
 800a760:	b508      	push	{r3, lr}
 800a762:	2006      	movs	r0, #6
 800a764:	f000 f898 	bl	800a898 <raise>
 800a768:	2001      	movs	r0, #1
 800a76a:	f7f7 fe27 	bl	80023bc <_exit>

0800a76e <__swhatbuf_r>:
 800a76e:	b570      	push	{r4, r5, r6, lr}
 800a770:	460e      	mov	r6, r1
 800a772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a776:	2900      	cmp	r1, #0
 800a778:	b096      	sub	sp, #88	; 0x58
 800a77a:	4614      	mov	r4, r2
 800a77c:	461d      	mov	r5, r3
 800a77e:	da08      	bge.n	800a792 <__swhatbuf_r+0x24>
 800a780:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	602a      	str	r2, [r5, #0]
 800a788:	061a      	lsls	r2, r3, #24
 800a78a:	d410      	bmi.n	800a7ae <__swhatbuf_r+0x40>
 800a78c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a790:	e00e      	b.n	800a7b0 <__swhatbuf_r+0x42>
 800a792:	466a      	mov	r2, sp
 800a794:	f000 f89c 	bl	800a8d0 <_fstat_r>
 800a798:	2800      	cmp	r0, #0
 800a79a:	dbf1      	blt.n	800a780 <__swhatbuf_r+0x12>
 800a79c:	9a01      	ldr	r2, [sp, #4]
 800a79e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7a6:	425a      	negs	r2, r3
 800a7a8:	415a      	adcs	r2, r3
 800a7aa:	602a      	str	r2, [r5, #0]
 800a7ac:	e7ee      	b.n	800a78c <__swhatbuf_r+0x1e>
 800a7ae:	2340      	movs	r3, #64	; 0x40
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	6023      	str	r3, [r4, #0]
 800a7b4:	b016      	add	sp, #88	; 0x58
 800a7b6:	bd70      	pop	{r4, r5, r6, pc}

0800a7b8 <__smakebuf_r>:
 800a7b8:	898b      	ldrh	r3, [r1, #12]
 800a7ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7bc:	079d      	lsls	r5, r3, #30
 800a7be:	4606      	mov	r6, r0
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	d507      	bpl.n	800a7d4 <__smakebuf_r+0x1c>
 800a7c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	6123      	str	r3, [r4, #16]
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	6163      	str	r3, [r4, #20]
 800a7d0:	b002      	add	sp, #8
 800a7d2:	bd70      	pop	{r4, r5, r6, pc}
 800a7d4:	ab01      	add	r3, sp, #4
 800a7d6:	466a      	mov	r2, sp
 800a7d8:	f7ff ffc9 	bl	800a76e <__swhatbuf_r>
 800a7dc:	9900      	ldr	r1, [sp, #0]
 800a7de:	4605      	mov	r5, r0
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f7fe fcc5 	bl	8009170 <_malloc_r>
 800a7e6:	b948      	cbnz	r0, 800a7fc <__smakebuf_r+0x44>
 800a7e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7ec:	059a      	lsls	r2, r3, #22
 800a7ee:	d4ef      	bmi.n	800a7d0 <__smakebuf_r+0x18>
 800a7f0:	f023 0303 	bic.w	r3, r3, #3
 800a7f4:	f043 0302 	orr.w	r3, r3, #2
 800a7f8:	81a3      	strh	r3, [r4, #12]
 800a7fa:	e7e3      	b.n	800a7c4 <__smakebuf_r+0xc>
 800a7fc:	4b0d      	ldr	r3, [pc, #52]	; (800a834 <__smakebuf_r+0x7c>)
 800a7fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	6020      	str	r0, [r4, #0]
 800a804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a808:	81a3      	strh	r3, [r4, #12]
 800a80a:	9b00      	ldr	r3, [sp, #0]
 800a80c:	6163      	str	r3, [r4, #20]
 800a80e:	9b01      	ldr	r3, [sp, #4]
 800a810:	6120      	str	r0, [r4, #16]
 800a812:	b15b      	cbz	r3, 800a82c <__smakebuf_r+0x74>
 800a814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a818:	4630      	mov	r0, r6
 800a81a:	f000 f86b 	bl	800a8f4 <_isatty_r>
 800a81e:	b128      	cbz	r0, 800a82c <__smakebuf_r+0x74>
 800a820:	89a3      	ldrh	r3, [r4, #12]
 800a822:	f023 0303 	bic.w	r3, r3, #3
 800a826:	f043 0301 	orr.w	r3, r3, #1
 800a82a:	81a3      	strh	r3, [r4, #12]
 800a82c:	89a0      	ldrh	r0, [r4, #12]
 800a82e:	4305      	orrs	r5, r0
 800a830:	81a5      	strh	r5, [r4, #12]
 800a832:	e7cd      	b.n	800a7d0 <__smakebuf_r+0x18>
 800a834:	0800a079 	.word	0x0800a079

0800a838 <_malloc_usable_size_r>:
 800a838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a83c:	1f18      	subs	r0, r3, #4
 800a83e:	2b00      	cmp	r3, #0
 800a840:	bfbc      	itt	lt
 800a842:	580b      	ldrlt	r3, [r1, r0]
 800a844:	18c0      	addlt	r0, r0, r3
 800a846:	4770      	bx	lr

0800a848 <_raise_r>:
 800a848:	291f      	cmp	r1, #31
 800a84a:	b538      	push	{r3, r4, r5, lr}
 800a84c:	4604      	mov	r4, r0
 800a84e:	460d      	mov	r5, r1
 800a850:	d904      	bls.n	800a85c <_raise_r+0x14>
 800a852:	2316      	movs	r3, #22
 800a854:	6003      	str	r3, [r0, #0]
 800a856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a85a:	bd38      	pop	{r3, r4, r5, pc}
 800a85c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a85e:	b112      	cbz	r2, 800a866 <_raise_r+0x1e>
 800a860:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a864:	b94b      	cbnz	r3, 800a87a <_raise_r+0x32>
 800a866:	4620      	mov	r0, r4
 800a868:	f000 f830 	bl	800a8cc <_getpid_r>
 800a86c:	462a      	mov	r2, r5
 800a86e:	4601      	mov	r1, r0
 800a870:	4620      	mov	r0, r4
 800a872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a876:	f000 b817 	b.w	800a8a8 <_kill_r>
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d00a      	beq.n	800a894 <_raise_r+0x4c>
 800a87e:	1c59      	adds	r1, r3, #1
 800a880:	d103      	bne.n	800a88a <_raise_r+0x42>
 800a882:	2316      	movs	r3, #22
 800a884:	6003      	str	r3, [r0, #0]
 800a886:	2001      	movs	r0, #1
 800a888:	e7e7      	b.n	800a85a <_raise_r+0x12>
 800a88a:	2400      	movs	r4, #0
 800a88c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a890:	4628      	mov	r0, r5
 800a892:	4798      	blx	r3
 800a894:	2000      	movs	r0, #0
 800a896:	e7e0      	b.n	800a85a <_raise_r+0x12>

0800a898 <raise>:
 800a898:	4b02      	ldr	r3, [pc, #8]	; (800a8a4 <raise+0xc>)
 800a89a:	4601      	mov	r1, r0
 800a89c:	6818      	ldr	r0, [r3, #0]
 800a89e:	f7ff bfd3 	b.w	800a848 <_raise_r>
 800a8a2:	bf00      	nop
 800a8a4:	2000000c 	.word	0x2000000c

0800a8a8 <_kill_r>:
 800a8a8:	b538      	push	{r3, r4, r5, lr}
 800a8aa:	4d07      	ldr	r5, [pc, #28]	; (800a8c8 <_kill_r+0x20>)
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	4608      	mov	r0, r1
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	602b      	str	r3, [r5, #0]
 800a8b6:	f7f7 fd71 	bl	800239c <_kill>
 800a8ba:	1c43      	adds	r3, r0, #1
 800a8bc:	d102      	bne.n	800a8c4 <_kill_r+0x1c>
 800a8be:	682b      	ldr	r3, [r5, #0]
 800a8c0:	b103      	cbz	r3, 800a8c4 <_kill_r+0x1c>
 800a8c2:	6023      	str	r3, [r4, #0]
 800a8c4:	bd38      	pop	{r3, r4, r5, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20000590 	.word	0x20000590

0800a8cc <_getpid_r>:
 800a8cc:	f7f7 bd5e 	b.w	800238c <_getpid>

0800a8d0 <_fstat_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	4d07      	ldr	r5, [pc, #28]	; (800a8f0 <_fstat_r+0x20>)
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	4608      	mov	r0, r1
 800a8da:	4611      	mov	r1, r2
 800a8dc:	602b      	str	r3, [r5, #0]
 800a8de:	f7f7 fdbc 	bl	800245a <_fstat>
 800a8e2:	1c43      	adds	r3, r0, #1
 800a8e4:	d102      	bne.n	800a8ec <_fstat_r+0x1c>
 800a8e6:	682b      	ldr	r3, [r5, #0]
 800a8e8:	b103      	cbz	r3, 800a8ec <_fstat_r+0x1c>
 800a8ea:	6023      	str	r3, [r4, #0]
 800a8ec:	bd38      	pop	{r3, r4, r5, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20000590 	.word	0x20000590

0800a8f4 <_isatty_r>:
 800a8f4:	b538      	push	{r3, r4, r5, lr}
 800a8f6:	4d06      	ldr	r5, [pc, #24]	; (800a910 <_isatty_r+0x1c>)
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	4608      	mov	r0, r1
 800a8fe:	602b      	str	r3, [r5, #0]
 800a900:	f7f7 fdbb 	bl	800247a <_isatty>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d102      	bne.n	800a90e <_isatty_r+0x1a>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	b103      	cbz	r3, 800a90e <_isatty_r+0x1a>
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	bd38      	pop	{r3, r4, r5, pc}
 800a910:	20000590 	.word	0x20000590

0800a914 <_init>:
 800a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a916:	bf00      	nop
 800a918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a91a:	bc08      	pop	{r3}
 800a91c:	469e      	mov	lr, r3
 800a91e:	4770      	bx	lr

0800a920 <_fini>:
 800a920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a922:	bf00      	nop
 800a924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a926:	bc08      	pop	{r3}
 800a928:	469e      	mov	lr, r3
 800a92a:	4770      	bx	lr
