
LEDA-F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08008148  08008148  00018148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008574  08008574  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008574  08008574  00018574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800857c  0800857c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800857c  0800857c  0001857c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008580  08008580  00018580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000220  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003fc  200003fc  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011805  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020cf  00000000  00000000  00031a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  00033ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb8  00000000  00000000  00034b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023506  00000000  00000000  00035b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b5d  00000000  00000000  00059006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db433  00000000  00000000  0006bb63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00146f96  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058a0  00000000  00000000  00146fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008130 	.word	0x08008130

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008130 	.word	0x08008130

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MPU6050_Init>:


//==========ACELEROMETRO==========//

void MPU6050_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	9302      	str	r3, [sp, #8]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	1dfb      	adds	r3, r7, #7
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2301      	movs	r3, #1
 8000f62:	2275      	movs	r2, #117	; 0x75
 8000f64:	21d0      	movs	r1, #208	; 0xd0
 8000f66:	4823      	ldr	r0, [pc, #140]	; (8000ff4 <MPU6050_Init+0xa8>)
 8000f68:	f002 f94c 	bl	8003204 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b68      	cmp	r3, #104	; 0x68
 8000f70:	d13b      	bne.n	8000fea <MPU6050_Init+0x9e>
	{
		Data = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7a:	9302      	str	r3, [sp, #8]
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	1dbb      	adds	r3, r7, #6
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2301      	movs	r3, #1
 8000f86:	226b      	movs	r2, #107	; 0x6b
 8000f88:	21d0      	movs	r1, #208	; 0xd0
 8000f8a:	481a      	ldr	r0, [pc, #104]	; (8000ff4 <MPU6050_Init+0xa8>)
 8000f8c:	f002 f840 	bl	8003010 <HAL_I2C_Mem_Write>

		Data = 0x07;
 8000f90:	2307      	movs	r3, #7
 8000f92:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	1dbb      	adds	r3, r7, #6
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	2219      	movs	r2, #25
 8000fa6:	21d0      	movs	r1, #208	; 0xd0
 8000fa8:	4812      	ldr	r0, [pc, #72]	; (8000ff4 <MPU6050_Init+0xa8>)
 8000faa:	f002 f831 	bl	8003010 <HAL_I2C_Mem_Write>

		Data = 0x00;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	9302      	str	r3, [sp, #8]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	1dbb      	adds	r3, r7, #6
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	221c      	movs	r2, #28
 8000fc4:	21d0      	movs	r1, #208	; 0xd0
 8000fc6:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <MPU6050_Init+0xa8>)
 8000fc8:	f002 f822 	bl	8003010 <HAL_I2C_Mem_Write>

		Data = 0x00;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	1dbb      	adds	r3, r7, #6
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	221b      	movs	r2, #27
 8000fe2:	21d0      	movs	r1, #208	; 0xd0
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <MPU6050_Init+0xa8>)
 8000fe6:	f002 f813 	bl	8003010 <HAL_I2C_Mem_Write>
	}

}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000240 	.word	0x20000240

08000ff8 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	int16_t Accel_X_RAW = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	81fb      	strh	r3, [r7, #14]
	int16_t Accel_Y_RAW = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	81bb      	strh	r3, [r7, #12]
	int16_t Accel_Z_RAW = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	9302      	str	r3, [sp, #8]
 8001010:	2306      	movs	r3, #6
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	223b      	movs	r2, #59	; 0x3b
 800101c:	21d0      	movs	r1, #208	; 0xd0
 800101e:	4853      	ldr	r0, [pc, #332]	; (800116c <MPU6050_Read_Accel+0x174>)
 8001020:	f002 f8f0 	bl	8003204 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001024:	793b      	ldrb	r3, [r7, #4]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	797b      	ldrb	r3, [r7, #5]
 800102c:	b21b      	sxth	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	81fb      	strh	r3, [r7, #14]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b21a      	sxth	r2, r3
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	b21b      	sxth	r3, r3
 800103c:	4313      	orrs	r3, r2
 800103e:	81bb      	strh	r3, [r7, #12]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001040:	7a3b      	ldrb	r3, [r7, #8]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	7a7b      	ldrb	r3, [r7, #9]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	817b      	strh	r3, [r7, #10]

	MPU6050.ax = ((float)Accel_X_RAW/16384.0)*10;
 800104e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105a:	ee17 0a90 	vmov	r0, s15
 800105e:	f7ff fa73 	bl	8000548 <__aeabi_f2d>
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	4b42      	ldr	r3, [pc, #264]	; (8001170 <MPU6050_Read_Accel+0x178>)
 8001068:	f7ff fbf0 	bl	800084c <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	4b3e      	ldr	r3, [pc, #248]	; (8001174 <MPU6050_Read_Accel+0x17c>)
 800107a:	f7ff fabd 	bl	80005f8 <__aeabi_dmul>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	f7ff fd8f 	bl	8000ba8 <__aeabi_d2f>
 800108a:	4603      	mov	r3, r0
 800108c:	4a3a      	ldr	r2, [pc, #232]	; (8001178 <MPU6050_Read_Accel+0x180>)
 800108e:	6013      	str	r3, [r2, #0]
	MPU6050.ay = ((float)Accel_Y_RAW/16384.0)*10;
 8001090:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109c:	ee17 0a90 	vmov	r0, s15
 80010a0:	f7ff fa52 	bl	8000548 <__aeabi_f2d>
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4b31      	ldr	r3, [pc, #196]	; (8001170 <MPU6050_Read_Accel+0x178>)
 80010aa:	f7ff fbcf 	bl	800084c <__aeabi_ddiv>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <MPU6050_Read_Accel+0x17c>)
 80010bc:	f7ff fa9c 	bl	80005f8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fd6e 	bl	8000ba8 <__aeabi_d2f>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a2a      	ldr	r2, [pc, #168]	; (8001178 <MPU6050_Read_Accel+0x180>)
 80010d0:	6053      	str	r3, [r2, #4]
	MPU6050.az = ((float)Accel_Z_RAW/16384.0)*10;
 80010d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010de:	ee17 0a90 	vmov	r0, s15
 80010e2:	f7ff fa31 	bl	8000548 <__aeabi_f2d>
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	4b21      	ldr	r3, [pc, #132]	; (8001170 <MPU6050_Read_Accel+0x178>)
 80010ec:	f7ff fbae 	bl	800084c <__aeabi_ddiv>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <MPU6050_Read_Accel+0x17c>)
 80010fe:	f7ff fa7b 	bl	80005f8 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fd4d 	bl	8000ba8 <__aeabi_d2f>
 800110e:	4603      	mov	r3, r0
 8001110:	4a19      	ldr	r2, [pc, #100]	; (8001178 <MPU6050_Read_Accel+0x180>)
 8001112:	6093      	str	r3, [r2, #8]

	average.ax = mvAx(MPU6050.ax, numberOfIterations);
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <MPU6050_Read_Accel+0x180>)
 8001116:	edd3 7a00 	vldr	s15, [r3]
 800111a:	200a      	movs	r0, #10
 800111c:	eeb0 0a67 	vmov.f32	s0, s15
 8001120:	f000 f9aa 	bl	8001478 <mvAx>
 8001124:	eef0 7a40 	vmov.f32	s15, s0
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <MPU6050_Read_Accel+0x184>)
 800112a:	edc3 7a00 	vstr	s15, [r3]
	average.ay = mvAy(MPU6050.ay, numberOfIterations);
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MPU6050_Read_Accel+0x180>)
 8001130:	edd3 7a01 	vldr	s15, [r3, #4]
 8001134:	200a      	movs	r0, #10
 8001136:	eeb0 0a67 	vmov.f32	s0, s15
 800113a:	f000 f9e9 	bl	8001510 <mvAy>
 800113e:	eef0 7a40 	vmov.f32	s15, s0
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MPU6050_Read_Accel+0x184>)
 8001144:	edc3 7a01 	vstr	s15, [r3, #4]
	average.az = mvAy(MPU6050.az, numberOfIterations);
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MPU6050_Read_Accel+0x180>)
 800114a:	edd3 7a02 	vldr	s15, [r3, #8]
 800114e:	200a      	movs	r0, #10
 8001150:	eeb0 0a67 	vmov.f32	s0, s15
 8001154:	f000 f9dc 	bl	8001510 <mvAy>
 8001158:	eef0 7a40 	vmov.f32	s15, s0
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <MPU6050_Read_Accel+0x184>)
 800115e:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000240 	.word	0x20000240
 8001170:	40d00000 	.word	0x40d00000
 8001174:	40240000 	.word	0x40240000
 8001178:	20000364 	.word	0x20000364
 800117c:	2000037c 	.word	0x2000037c

08001180 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro  (void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	int16_t Gyro_X_RAW = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	81fb      	strh	r3, [r7, #14]
	int16_t Gyro_Y_RAW = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	81bb      	strh	r3, [r7, #12]
	int16_t Gyro_Z_RAW = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	2306      	movs	r3, #6
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2301      	movs	r3, #1
 80011a2:	2243      	movs	r2, #67	; 0x43
 80011a4:	21d0      	movs	r1, #208	; 0xd0
 80011a6:	4821      	ldr	r0, [pc, #132]	; (800122c <MPU6050_Read_Gyro+0xac>)
 80011a8:	f002 f82c 	bl	8003204 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80011ac:	793b      	ldrb	r3, [r7, #4]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	797b      	ldrb	r3, [r7, #5]
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	81fb      	strh	r3, [r7, #14]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21a      	sxth	r2, r3
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	4313      	orrs	r3, r2
 80011c6:	81bb      	strh	r3, [r7, #12]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80011c8:	7a3b      	ldrb	r3, [r7, #8]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	7a7b      	ldrb	r3, [r7, #9]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	817b      	strh	r3, [r7, #10]

	MPU6050.gx = (float)Gyro_X_RAW/131.0;
 80011d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e2:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001230 <MPU6050_Read_Gyro+0xb0>
 80011e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MPU6050_Read_Gyro+0xb4>)
 80011ec:	edc3 7a03 	vstr	s15, [r3, #12]
	MPU6050.gy = (float)Gyro_Y_RAW/131.0;
 80011f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001230 <MPU6050_Read_Gyro+0xb0>
 8001200:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MPU6050_Read_Gyro+0xb4>)
 8001206:	edc3 7a04 	vstr	s15, [r3, #16]
	MPU6050.gz = (float)Gyro_Z_RAW/131.0;
 800120a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001216:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001230 <MPU6050_Read_Gyro+0xb0>
 800121a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <MPU6050_Read_Gyro+0xb4>)
 8001220:	edc3 7a05 	vstr	s15, [r3, #20]

	//average.gx = mvGx(MPU6050.gx, numberOfIterations);
	//average.gy = mvGy(MPU6050.gy, numberOfIterations);
	//average.gz = mvGy(MPU6050.gz, numberOfIterations);

}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000240 	.word	0x20000240
 8001230:	43030000 	.word	0x43030000
 8001234:	20000364 	.word	0x20000364

08001238 <Nextion_SendString>:

//==========NEXTION==========//

void Nextion_SendString(char *ID,char *string)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	; 0x50
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	uint8_t Cmd_End[3] = {0xFF, 0xFF, 0xFF};
 8001242:	4a14      	ldr	r2, [pc, #80]	; (8001294 <Nextion_SendString+0x5c>)
 8001244:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001248:	6812      	ldr	r2, [r2, #0]
 800124a:	4611      	mov	r1, r2
 800124c:	8019      	strh	r1, [r3, #0]
 800124e:	3302      	adds	r3, #2
 8001250:	0c12      	lsrs	r2, r2, #16
 8001252:	701a      	strb	r2, [r3, #0]

	char buf[64];

	sprintf(buf,"%s.txt=\"%s\"", ID, string);
 8001254:	f107 000c 	add.w	r0, r7, #12
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	490e      	ldr	r1, [pc, #56]	; (8001298 <Nextion_SendString+0x60>)
 800125e:	f004 fced 	bl	8005c3c <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 100);
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	4618      	mov	r0, r3
 8001268:	f7fe ffb2 	bl	80001d0 <strlen>
 800126c:	4603      	mov	r3, r0
 800126e:	b29a      	uxth	r2, r3
 8001270:	f107 010c 	add.w	r1, r7, #12
 8001274:	2364      	movs	r3, #100	; 0x64
 8001276:	4809      	ldr	r0, [pc, #36]	; (800129c <Nextion_SendString+0x64>)
 8001278:	f003 fccf 	bl	8004c1a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 10);
 800127c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001280:	230a      	movs	r3, #10
 8001282:	2203      	movs	r2, #3
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <Nextion_SendString+0x64>)
 8001286:	f003 fcc8 	bl	8004c1a <HAL_UART_Transmit>
}
 800128a:	bf00      	nop
 800128c:	3750      	adds	r7, #80	; 0x50
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	08008154 	.word	0x08008154
 8001298:	08008148 	.word	0x08008148
 800129c:	200002dc 	.word	0x200002dc

080012a0 <Nextion_Sendfloat>:
	sprintf(buf,"%d",var);
	Nextion_SendString(ID,buf);
}

void Nextion_Sendfloat(char *ID,float var)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b092      	sub	sp, #72	; 0x48
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	ed87 0a00 	vstr	s0, [r7]
	char buf[64];
	sprintf(buf,"%.2f",var);
 80012ac:	6838      	ldr	r0, [r7, #0]
 80012ae:	f7ff f94b 	bl	8000548 <__aeabi_f2d>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	f107 0008 	add.w	r0, r7, #8
 80012ba:	4906      	ldr	r1, [pc, #24]	; (80012d4 <Nextion_Sendfloat+0x34>)
 80012bc:	f004 fcbe 	bl	8005c3c <siprintf>
	Nextion_SendString(ID,buf);
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4619      	mov	r1, r3
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffb6 	bl	8001238 <Nextion_SendString>
}
 80012cc:	bf00      	nop
 80012ce:	3748      	adds	r7, #72	; 0x48
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	0800815c 	.word	0x0800815c

080012d8 <updateDisplay>:

void updateDisplay(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	Nextion_Sendfloat("ax", average.ax);
 80012dc:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <updateDisplay+0x7c>)
 80012de:	edd3 7a00 	vldr	s15, [r3]
 80012e2:	eeb0 0a67 	vmov.f32	s0, s15
 80012e6:	481c      	ldr	r0, [pc, #112]	; (8001358 <updateDisplay+0x80>)
 80012e8:	f7ff ffda 	bl	80012a0 <Nextion_Sendfloat>
	Nextion_Sendfloat("ay", average.ay);
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <updateDisplay+0x7c>)
 80012ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80012f2:	eeb0 0a67 	vmov.f32	s0, s15
 80012f6:	4819      	ldr	r0, [pc, #100]	; (800135c <updateDisplay+0x84>)
 80012f8:	f7ff ffd2 	bl	80012a0 <Nextion_Sendfloat>
	Nextion_Sendfloat("az", average.az);
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <updateDisplay+0x7c>)
 80012fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001302:	eeb0 0a67 	vmov.f32	s0, s15
 8001306:	4816      	ldr	r0, [pc, #88]	; (8001360 <updateDisplay+0x88>)
 8001308:	f7ff ffca 	bl	80012a0 <Nextion_Sendfloat>

	Nextion_Sendfloat("gx", MPU6050.gx);
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <updateDisplay+0x8c>)
 800130e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001312:	eeb0 0a67 	vmov.f32	s0, s15
 8001316:	4814      	ldr	r0, [pc, #80]	; (8001368 <updateDisplay+0x90>)
 8001318:	f7ff ffc2 	bl	80012a0 <Nextion_Sendfloat>
	Nextion_Sendfloat("gy", MPU6050.gy);
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <updateDisplay+0x8c>)
 800131e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	4811      	ldr	r0, [pc, #68]	; (800136c <updateDisplay+0x94>)
 8001328:	f7ff ffba 	bl	80012a0 <Nextion_Sendfloat>
	Nextion_Sendfloat("gz", MPU6050.gz);
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <updateDisplay+0x8c>)
 800132e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001332:	eeb0 0a67 	vmov.f32	s0, s15
 8001336:	480e      	ldr	r0, [pc, #56]	; (8001370 <updateDisplay+0x98>)
 8001338:	f7ff ffb2 	bl	80012a0 <Nextion_Sendfloat>

	//Nextion_Sendfloat("gx", average.gx);
	//Nextion_Sendfloat("gy", average.gy);
	//Nextion_Sendfloat("gz", average.gz);

	Nextion_Sendfloat("temp", ADC_Select_CHTemp());
 800133c:	f000 f81c 	bl	8001378 <ADC_Select_CHTemp>
 8001340:	eef0 7a40 	vmov.f32	s15, s0
 8001344:	eeb0 0a67 	vmov.f32	s0, s15
 8001348:	480a      	ldr	r0, [pc, #40]	; (8001374 <updateDisplay+0x9c>)
 800134a:	f7ff ffa9 	bl	80012a0 <Nextion_Sendfloat>
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000037c 	.word	0x2000037c
 8001358:	08008164 	.word	0x08008164
 800135c:	08008168 	.word	0x08008168
 8001360:	0800816c 	.word	0x0800816c
 8001364:	20000364 	.word	0x20000364
 8001368:	08008170 	.word	0x08008170
 800136c:	08008174 	.word	0x08008174
 8001370:	08008178 	.word	0x08008178
 8001374:	0800817c 	.word	0x0800817c

08001378 <ADC_Select_CHTemp>:

//==========TEMP==========//

float ADC_Select_CHTemp(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0

	float Temp = 0;
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

	uint16_t ADC_READING = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	827b      	strh	r3, [r7, #18]

	ADC_ChannelConfTypeDef sConfig = {0};
 8001388:	463b      	mov	r3, r7
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001394:	2310      	movs	r3, #16
 8001396:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001398:	2301      	movs	r3, #1
 800139a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	4833      	ldr	r0, [pc, #204]	; (8001470 <ADC_Select_CHTemp+0xf8>)
 80013a2:	f000 fff1 	bl	8002388 <HAL_ADC_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <ADC_Select_CHTemp+0x38>
	{
	  Error_Handler();
 80013ac:	f000 fb02 	bl	80019b4 <Error_Handler>
	}

	HAL_ADC_Start(&hadc1);
 80013b0:	482f      	ldr	r0, [pc, #188]	; (8001470 <ADC_Select_CHTemp+0xf8>)
 80013b2:	f000 fe4b 	bl	800204c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80013b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013ba:	482d      	ldr	r0, [pc, #180]	; (8001470 <ADC_Select_CHTemp+0xf8>)
 80013bc:	f000 ff4b 	bl	8002256 <HAL_ADC_PollForConversion>
	ADC_READING = HAL_ADC_GetValue(&hadc1);
 80013c0:	482b      	ldr	r0, [pc, #172]	; (8001470 <ADC_Select_CHTemp+0xf8>)
 80013c2:	f000 ffd3 	bl	800236c <HAL_ADC_GetValue>
 80013c6:	4603      	mov	r3, r0
 80013c8:	827b      	strh	r3, [r7, #18]
	HAL_ADC_Stop(&hadc1);
 80013ca:	4829      	ldr	r0, [pc, #164]	; (8001470 <ADC_Select_CHTemp+0xf8>)
 80013cc:	f000 ff10 	bl	80021f0 <HAL_ADC_Stop>

	Temp = ((3.3*ADC_READING/4095 - V25)/Avg_Slope)+25;
 80013d0:	8a7b      	ldrh	r3, [r7, #18]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f8a6 	bl	8000524 <__aeabi_i2d>
 80013d8:	a31d      	add	r3, pc, #116	; (adr r3, 8001450 <ADC_Select_CHTemp+0xd8>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7ff f90b 	bl	80005f8 <__aeabi_dmul>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	a31b      	add	r3, pc, #108	; (adr r3, 8001458 <ADC_Select_CHTemp+0xe0>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7ff fa2c 	bl	800084c <__aeabi_ddiv>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	a318      	add	r3, pc, #96	; (adr r3, 8001460 <ADC_Select_CHTemp+0xe8>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f7fe ff41 	bl	8000288 <__aeabi_dsub>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	a316      	add	r3, pc, #88	; (adr r3, 8001468 <ADC_Select_CHTemp+0xf0>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	f7ff fa1a 	bl	800084c <__aeabi_ddiv>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <ADC_Select_CHTemp+0xfc>)
 8001426:	f7fe ff31 	bl	800028c <__adddf3>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff fbb9 	bl	8000ba8 <__aeabi_d2f>
 8001436:	4603      	mov	r3, r0
 8001438:	617b      	str	r3, [r7, #20]

	return Temp;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	f3af 8000 	nop.w
 8001450:	66666666 	.word	0x66666666
 8001454:	400a6666 	.word	0x400a6666
 8001458:	00000000 	.word	0x00000000
 800145c:	40affe00 	.word	0x40affe00
 8001460:	851eb852 	.word	0x851eb852
 8001464:	3fe851eb 	.word	0x3fe851eb
 8001468:	47ae147b 	.word	0x47ae147b
 800146c:	3f647ae1 	.word	0x3f647ae1
 8001470:	200001f8 	.word	0x200001f8
 8001474:	40390000 	.word	0x40390000

08001478 <mvAx>:

//==========MATH==========//

float mvAx(float content, const int n)
{
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001482:	6038      	str	r0, [r7, #0]
	float acc = 0;
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	617b      	str	r3, [r7, #20]

	static float  numbersAx[numberOfIterations];

	for(int i= n-1; i>0; i--) numbersAx[i] = numbersAx[i-1]; //pay attention to n-1
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	3b01      	subs	r3, #1
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	e00d      	b.n	80014ae <mvAx+0x36>
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	3b01      	subs	r3, #1
 8001496:	4a1d      	ldr	r2, [pc, #116]	; (800150c <mvAx+0x94>)
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	491b      	ldr	r1, [pc, #108]	; (800150c <mvAx+0x94>)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	dcee      	bgt.n	8001492 <mvAx+0x1a>

	numbersAx[0] = content;
 80014b4:	4a15      	ldr	r2, [pc, #84]	; (800150c <mvAx+0x94>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6013      	str	r3, [r2, #0]

	for(int i=0; i<n; i++) acc += numbersAx[i];
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	e00e      	b.n	80014de <mvAx+0x66>
 80014c0:	4a12      	ldr	r2, [pc, #72]	; (800150c <mvAx+0x94>)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80014d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d4:	edc7 7a05 	vstr	s15, [r7, #20]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	3301      	adds	r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dbec      	blt.n	80014c0 <mvAx+0x48>

	return acc/n;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80014f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014f8:	eef0 7a66 	vmov.f32	s15, s13
}
 80014fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001500:	371c      	adds	r7, #28
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000394 	.word	0x20000394

08001510 <mvAy>:

float mvAy(float content, const int n)
{
 8001510:	b480      	push	{r7}
 8001512:	b087      	sub	sp, #28
 8001514:	af00      	add	r7, sp, #0
 8001516:	ed87 0a01 	vstr	s0, [r7, #4]
 800151a:	6038      	str	r0, [r7, #0]
	float acc = 0;
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	617b      	str	r3, [r7, #20]

	static float  numbersAy[numberOfIterations];

	for(int i= n-1; i>0; i--) numbersAy[i] = numbersAy[i-1]; //pay attention to n-1
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	3b01      	subs	r3, #1
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	e00d      	b.n	8001546 <mvAy+0x36>
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	3b01      	subs	r3, #1
 800152e:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <mvAy+0x94>)
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	491b      	ldr	r1, [pc, #108]	; (80015a4 <mvAy+0x94>)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	3b01      	subs	r3, #1
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	2b00      	cmp	r3, #0
 800154a:	dcee      	bgt.n	800152a <mvAy+0x1a>

	numbersAy[0] = content;
 800154c:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <mvAy+0x94>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]

	for(int i=0; i<n; i++) acc += numbersAy[i];
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	e00e      	b.n	8001576 <mvAy+0x66>
 8001558:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <mvAy+0x94>)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	ed97 7a05 	vldr	s14, [r7, #20]
 8001568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	3301      	adds	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	dbec      	blt.n	8001558 <mvAy+0x48>

	return acc/n;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	ee07 3a90 	vmov	s15, r3
 8001584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001588:	ed97 7a05 	vldr	s14, [r7, #20]
 800158c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001590:	eef0 7a66 	vmov.f32	s15, s13
}
 8001594:	eeb0 0a67 	vmov.f32	s0, s15
 8001598:	371c      	adds	r7, #28
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	200003bc 	.word	0x200003bc

080015a8 <invertLed>:
}

//==========MCU==========//

void invertLed(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80015ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b0:	4804      	ldr	r0, [pc, #16]	; (80015c4 <invertLed+0x1c>)
 80015b2:	f001 fbce 	bl	8002d52 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80015b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ba:	4802      	ldr	r0, [pc, #8]	; (80015c4 <invertLed+0x1c>)
 80015bc:	f001 fbc9 	bl	8002d52 <HAL_GPIO_TogglePin>
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021400 	.word	0x40021400

080015c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	if(htim==&htim14)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d107      	bne.n	80015e8 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		MPU6050_Read_Accel();
 80015d8:	f7ff fd0e 	bl	8000ff8 <MPU6050_Read_Accel>
		MPU6050_Read_Gyro();
 80015dc:	f7ff fdd0 	bl	8001180 <MPU6050_Read_Gyro>

		updateDisplay();
 80015e0:	f7ff fe7a 	bl	80012d8 <updateDisplay>

		invertLed();
 80015e4:	f7ff ffe0 	bl	80015a8 <invertLed>
	}
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000294 	.word	0x20000294

080015f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f8:	f000 fc4e 	bl	8001e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015fc:	f000 f818 	bl	8001630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001600:	f000 f978 	bl	80018f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001604:	f000 f8d0 	bl	80017a8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001608:	f000 f87c 	bl	8001704 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800160c:	f000 f91e 	bl	800184c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001610:	f000 f946 	bl	80018a0 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8001614:	f000 f8f6 	bl	8001804 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 8001618:	f7ff fc98 	bl	8000f4c <MPU6050_Init>
  HAL_TIM_Base_Start_IT(&htim14);
 800161c:	4803      	ldr	r0, [pc, #12]	; (800162c <main+0x38>)
 800161e:	f003 f85b 	bl	80046d8 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	HAL_Delay(1);
 8001622:	2001      	movs	r0, #1
 8001624:	f000 fcaa 	bl	8001f7c <HAL_Delay>
 8001628:	e7fb      	b.n	8001622 <main+0x2e>
 800162a:	bf00      	nop
 800162c:	20000294 	.word	0x20000294

08001630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b094      	sub	sp, #80	; 0x50
 8001634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001636:	f107 0320 	add.w	r3, r7, #32
 800163a:	2230      	movs	r2, #48	; 0x30
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f003 fe8a 	bl	8005358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001654:	2300      	movs	r3, #0
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <SystemClock_Config+0xcc>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	4a27      	ldr	r2, [pc, #156]	; (80016fc <SystemClock_Config+0xcc>)
 800165e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001662:	6413      	str	r3, [r2, #64]	; 0x40
 8001664:	4b25      	ldr	r3, [pc, #148]	; (80016fc <SystemClock_Config+0xcc>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001670:	2300      	movs	r3, #0
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <SystemClock_Config+0xd0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a21      	ldr	r2, [pc, #132]	; (8001700 <SystemClock_Config+0xd0>)
 800167a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <SystemClock_Config+0xd0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800168c:	2301      	movs	r3, #1
 800168e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001696:	2302      	movs	r3, #2
 8001698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800169a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800169e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016a0:	2304      	movs	r3, #4
 80016a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016a4:	23a8      	movs	r3, #168	; 0xa8
 80016a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016a8:	2302      	movs	r3, #2
 80016aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80016ac:	2306      	movs	r3, #6
 80016ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b0:	f107 0320 	add.w	r3, r7, #32
 80016b4:	4618      	mov	r0, r3
 80016b6:	f002 fb27 	bl	8003d08 <HAL_RCC_OscConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016c0:	f000 f978 	bl	80019b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c4:	230f      	movs	r3, #15
 80016c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c8:	2302      	movs	r3, #2
 80016ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	2105      	movs	r1, #5
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 fd88 	bl	80041f8 <HAL_RCC_ClockConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016ee:	f000 f961 	bl	80019b4 <Error_Handler>
  }
}
 80016f2:	bf00      	nop
 80016f4:	3750      	adds	r7, #80	; 0x50
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800
 8001700:	40007000 	.word	0x40007000

08001704 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800170a:	463b      	mov	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001716:	4b21      	ldr	r3, [pc, #132]	; (800179c <MX_ADC1_Init+0x98>)
 8001718:	4a21      	ldr	r2, [pc, #132]	; (80017a0 <MX_ADC1_Init+0x9c>)
 800171a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800171c:	4b1f      	ldr	r3, [pc, #124]	; (800179c <MX_ADC1_Init+0x98>)
 800171e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001722:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001724:	4b1d      	ldr	r3, [pc, #116]	; (800179c <MX_ADC1_Init+0x98>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800172a:	4b1c      	ldr	r3, [pc, #112]	; (800179c <MX_ADC1_Init+0x98>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001730:	4b1a      	ldr	r3, [pc, #104]	; (800179c <MX_ADC1_Init+0x98>)
 8001732:	2200      	movs	r2, #0
 8001734:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <MX_ADC1_Init+0x98>)
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <MX_ADC1_Init+0x98>)
 8001740:	2200      	movs	r2, #0
 8001742:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <MX_ADC1_Init+0x98>)
 8001746:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <MX_ADC1_Init+0xa0>)
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <MX_ADC1_Init+0x98>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_ADC1_Init+0x98>)
 8001752:	2201      	movs	r2, #1
 8001754:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_ADC1_Init+0x98>)
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_ADC1_Init+0x98>)
 8001760:	2201      	movs	r2, #1
 8001762:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001764:	480d      	ldr	r0, [pc, #52]	; (800179c <MX_ADC1_Init+0x98>)
 8001766:	f000 fc2d 	bl	8001fc4 <HAL_ADC_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001770:	f000 f920 	bl	80019b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001774:	2310      	movs	r3, #16
 8001776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001778:	2301      	movs	r3, #1
 800177a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001780:	463b      	mov	r3, r7
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_ADC1_Init+0x98>)
 8001786:	f000 fdff 	bl	8002388 <HAL_ADC_ConfigChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001790:	f000 f910 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200001f8 	.word	0x200001f8
 80017a0:	40012000 	.word	0x40012000
 80017a4:	0f000001 	.word	0x0f000001

080017a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017ae:	4a13      	ldr	r2, [pc, #76]	; (80017fc <MX_I2C1_Init+0x54>)
 80017b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017b4:	4a12      	ldr	r2, [pc, #72]	; (8001800 <MX_I2C1_Init+0x58>)
 80017b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017e6:	f001 facf 	bl	8002d88 <HAL_I2C_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017f0:	f000 f8e0 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000240 	.word	0x20000240
 80017fc:	40005400 	.word	0x40005400
 8001800:	000186a0 	.word	0x000186a0

08001804 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <MX_TIM14_Init+0x40>)
 800180a:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <MX_TIM14_Init+0x44>)
 800180c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16800-1;
 800180e:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <MX_TIM14_Init+0x40>)
 8001810:	f244 129f 	movw	r2, #16799	; 0x419f
 8001814:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <MX_TIM14_Init+0x40>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_TIM14_Init+0x40>)
 800181e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001822:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001824:	4b07      	ldr	r3, [pc, #28]	; (8001844 <MX_TIM14_Init+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <MX_TIM14_Init+0x40>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001830:	4804      	ldr	r0, [pc, #16]	; (8001844 <MX_TIM14_Init+0x40>)
 8001832:	f002 ff01 	bl	8004638 <HAL_TIM_Base_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 800183c:	f000 f8ba 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000294 	.word	0x20000294
 8001848:	40002000 	.word	0x40002000

0800184c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_USART1_UART_Init+0x4c>)
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <MX_USART1_UART_Init+0x50>)
 8001854:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <MX_USART1_UART_Init+0x4c>)
 8001858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800185c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <MX_USART1_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_USART1_UART_Init+0x4c>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <MX_USART1_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <MX_USART1_UART_Init+0x4c>)
 8001872:	220c      	movs	r2, #12
 8001874:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <MX_USART1_UART_Init+0x4c>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_USART1_UART_Init+0x4c>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_USART1_UART_Init+0x4c>)
 8001884:	f003 f97c 	bl	8004b80 <HAL_UART_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800188e:	f000 f891 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200002dc 	.word	0x200002dc
 800189c:	40011000 	.word	0x40011000

080018a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <MX_USART2_UART_Init+0x50>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018d8:	f003 f952 	bl	8004b80 <HAL_UART_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018e2:	f000 f867 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000320 	.word	0x20000320
 80018f0:	40004400 	.word	0x40004400

080018f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	4b27      	ldr	r3, [pc, #156]	; (80019ac <MX_GPIO_Init+0xb8>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a26      	ldr	r2, [pc, #152]	; (80019ac <MX_GPIO_Init+0xb8>)
 8001914:	f043 0320 	orr.w	r3, r3, #32
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <MX_GPIO_Init+0xb8>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0320 	and.w	r3, r3, #32
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <MX_GPIO_Init+0xb8>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a1f      	ldr	r2, [pc, #124]	; (80019ac <MX_GPIO_Init+0xb8>)
 8001930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <MX_GPIO_Init+0xb8>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <MX_GPIO_Init+0xb8>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a18      	ldr	r2, [pc, #96]	; (80019ac <MX_GPIO_Init+0xb8>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <MX_GPIO_Init+0xb8>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <MX_GPIO_Init+0xb8>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a11      	ldr	r2, [pc, #68]	; (80019ac <MX_GPIO_Init+0xb8>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <MX_GPIO_Init+0xb8>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001980:	480b      	ldr	r0, [pc, #44]	; (80019b0 <MX_GPIO_Init+0xbc>)
 8001982:	f001 f9cd 	bl	8002d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001986:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800198a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198c:	2301      	movs	r3, #1
 800198e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2300      	movs	r3, #0
 8001996:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4804      	ldr	r0, [pc, #16]	; (80019b0 <MX_GPIO_Init+0xbc>)
 80019a0:	f001 f822 	bl	80029e8 <HAL_GPIO_Init>

}
 80019a4:	bf00      	nop
 80019a6:	3728      	adds	r7, #40	; 0x28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40021400 	.word	0x40021400

080019b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b8:	b672      	cpsid	i
}
 80019ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019bc:	e7fe      	b.n	80019bc <Error_Handler+0x8>
	...

080019c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_MspInit+0x4c>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <HAL_MspInit+0x4c>)
 80019d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_MspInit+0x4c>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_MspInit+0x4c>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <HAL_MspInit+0x4c>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f0:	6413      	str	r3, [r2, #64]	; 0x40
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_MspInit+0x4c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800

08001a10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <HAL_ADC_MspInit+0x3c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d10d      	bne.n	8001a3e <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_ADC_MspInit+0x40>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <HAL_ADC_MspInit+0x40>)
 8001a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a30:	6453      	str	r3, [r2, #68]	; 0x44
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <HAL_ADC_MspInit+0x40>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40012000 	.word	0x40012000
 8001a50:	40023800 	.word	0x40023800

08001a54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <HAL_I2C_MspInit+0x84>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d12b      	bne.n	8001ace <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_I2C_MspInit+0x88>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a17      	ldr	r2, [pc, #92]	; (8001adc <HAL_I2C_MspInit+0x88>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_I2C_MspInit+0x88>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a92:	23c0      	movs	r3, #192	; 0xc0
 8001a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a96:	2312      	movs	r3, #18
 8001a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480c      	ldr	r0, [pc, #48]	; (8001ae0 <HAL_I2C_MspInit+0x8c>)
 8001aae:	f000 ff9b 	bl	80029e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_I2C_MspInit+0x88>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a08      	ldr	r2, [pc, #32]	; (8001adc <HAL_I2C_MspInit+0x88>)
 8001abc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_I2C_MspInit+0x88>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	3728      	adds	r7, #40	; 0x28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40005400 	.word	0x40005400
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020400 	.word	0x40020400

08001ae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <HAL_TIM_Base_MspInit+0x48>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d115      	bne.n	8001b22 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_TIM_Base_MspInit+0x4c>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a0c      	ldr	r2, [pc, #48]	; (8001b30 <HAL_TIM_Base_MspInit+0x4c>)
 8001b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_TIM_Base_MspInit+0x4c>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	202d      	movs	r0, #45	; 0x2d
 8001b18:	f000 ff2f 	bl	800297a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001b1c:	202d      	movs	r0, #45	; 0x2d
 8001b1e:	f000 ff48 	bl	80029b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40002000 	.word	0x40002000
 8001b30:	40023800 	.word	0x40023800

08001b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	; 0x30
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a32      	ldr	r2, [pc, #200]	; (8001c1c <HAL_UART_MspInit+0xe8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d12d      	bne.n	8001bb2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
 8001b5a:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a30      	ldr	r2, [pc, #192]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001b60:	f043 0310 	orr.w	r3, r3, #16
 8001b64:	6453      	str	r3, [r2, #68]	; 0x44
 8001b66:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a29      	ldr	r2, [pc, #164]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ba0:	2307      	movs	r3, #7
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	481e      	ldr	r0, [pc, #120]	; (8001c24 <HAL_UART_MspInit+0xf0>)
 8001bac:	f000 ff1c 	bl	80029e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bb0:	e030      	b.n	8001c14 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <HAL_UART_MspInit+0xf4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d12b      	bne.n	8001c14 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6413      	str	r3, [r2, #64]	; 0x40
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6313      	str	r3, [r2, #48]	; 0x30
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bf4:	230c      	movs	r3, #12
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c04:	2307      	movs	r3, #7
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4805      	ldr	r0, [pc, #20]	; (8001c24 <HAL_UART_MspInit+0xf0>)
 8001c10:	f000 feea 	bl	80029e8 <HAL_GPIO_Init>
}
 8001c14:	bf00      	nop
 8001c16:	3730      	adds	r7, #48	; 0x30
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40011000 	.word	0x40011000
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020000 	.word	0x40020000
 8001c28:	40004400 	.word	0x40004400

08001c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <NMI_Handler+0x4>

08001c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <HardFault_Handler+0x4>

08001c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <MemManage_Handler+0x4>

08001c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <BusFault_Handler+0x4>

08001c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <UsageFault_Handler+0x4>

08001c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c78:	f000 f960 	bl	8001f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001c86:	f002 fd97 	bl	80047b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000294 	.word	0x20000294

08001c94 <_getpid>:
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	2301      	movs	r3, #1
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <_kill>:
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	f003 fb29 	bl	8005304 <__errno>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2216      	movs	r2, #22
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <_exit>:
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ffe7 	bl	8001ca4 <_kill>
 8001cd6:	e7fe      	b.n	8001cd6 <_exit+0x12>

08001cd8 <_read>:
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	e00a      	b.n	8001d00 <_read+0x28>
 8001cea:	f3af 8000 	nop.w
 8001cee:	4601      	mov	r1, r0
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	60ba      	str	r2, [r7, #8]
 8001cf6:	b2ca      	uxtb	r2, r1
 8001cf8:	701a      	strb	r2, [r3, #0]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	dbf0      	blt.n	8001cea <_read+0x12>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <_write>:
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	e009      	b.n	8001d38 <_write+0x26>
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	60ba      	str	r2, [r7, #8]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f3af 8000 	nop.w
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3301      	adds	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	dbf1      	blt.n	8001d24 <_write+0x12>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <_close>:
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <_fstat>:
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	6039      	str	r1, [r7, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	2300      	movs	r3, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <_isatty>:
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <_lseek>:
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	2300      	movs	r3, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <_sbrk>:
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <_sbrk+0x5c>)
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <_sbrk+0x60>)
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d102      	bne.n	8001dd6 <_sbrk+0x22>
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <_sbrk+0x64>)
 8001dd2:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <_sbrk+0x68>)
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d207      	bcs.n	8001df4 <_sbrk+0x40>
 8001de4:	f003 fa8e 	bl	8005304 <__errno>
 8001de8:	4603      	mov	r3, r0
 8001dea:	220c      	movs	r2, #12
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001df2:	e009      	b.n	8001e08 <_sbrk+0x54>
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <_sbrk+0x64>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <_sbrk+0x64>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <_sbrk+0x64>)
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20020000 	.word	0x20020000
 8001e14:	00000400 	.word	0x00000400
 8001e18:	200003e4 	.word	0x200003e4
 8001e1c:	20000400 	.word	0x20000400

08001e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <SystemInit+0x20>)
 8001e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2a:	4a05      	ldr	r2, [pc, #20]	; (8001e40 <SystemInit+0x20>)
 8001e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <Reset_Handler>:
 8001e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e7c <LoopFillZerobss+0x12>
 8001e48:	480d      	ldr	r0, [pc, #52]	; (8001e80 <LoopFillZerobss+0x16>)
 8001e4a:	490e      	ldr	r1, [pc, #56]	; (8001e84 <LoopFillZerobss+0x1a>)
 8001e4c:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <LoopFillZerobss+0x1e>)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e002      	b.n	8001e58 <LoopCopyDataInit>

08001e52 <CopyDataInit>:
 8001e52:	58d4      	ldr	r4, [r2, r3]
 8001e54:	50c4      	str	r4, [r0, r3]
 8001e56:	3304      	adds	r3, #4

08001e58 <LoopCopyDataInit>:
 8001e58:	18c4      	adds	r4, r0, r3
 8001e5a:	428c      	cmp	r4, r1
 8001e5c:	d3f9      	bcc.n	8001e52 <CopyDataInit>
 8001e5e:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <LoopFillZerobss+0x22>)
 8001e60:	4c0b      	ldr	r4, [pc, #44]	; (8001e90 <LoopFillZerobss+0x26>)
 8001e62:	2300      	movs	r3, #0
 8001e64:	e001      	b.n	8001e6a <LoopFillZerobss>

08001e66 <FillZerobss>:
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	3204      	adds	r2, #4

08001e6a <LoopFillZerobss>:
 8001e6a:	42a2      	cmp	r2, r4
 8001e6c:	d3fb      	bcc.n	8001e66 <FillZerobss>
 8001e6e:	f7ff ffd7 	bl	8001e20 <SystemInit>
 8001e72:	f003 fa4d 	bl	8005310 <__libc_init_array>
 8001e76:	f7ff fbbd 	bl	80015f4 <main>
 8001e7a:	4770      	bx	lr
 8001e7c:	20020000 	.word	0x20020000
 8001e80:	20000000 	.word	0x20000000
 8001e84:	200001dc 	.word	0x200001dc
 8001e88:	08008584 	.word	0x08008584
 8001e8c:	200001dc 	.word	0x200001dc
 8001e90:	200003fc 	.word	0x200003fc

08001e94 <ADC_IRQHandler>:
 8001e94:	e7fe      	b.n	8001e94 <ADC_IRQHandler>
	...

08001e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <HAL_Init+0x40>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	; (8001ed8 <HAL_Init+0x40>)
 8001ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_Init+0x40>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <HAL_Init+0x40>)
 8001eae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <HAL_Init+0x40>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a07      	ldr	r2, [pc, #28]	; (8001ed8 <HAL_Init+0x40>)
 8001eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec0:	2003      	movs	r0, #3
 8001ec2:	f000 fd4f 	bl	8002964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ec6:	200f      	movs	r0, #15
 8001ec8:	f000 f808 	bl	8001edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ecc:	f7ff fd78 	bl	80019c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023c00 	.word	0x40023c00

08001edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_InitTick+0x54>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_InitTick+0x58>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	4619      	mov	r1, r3
 8001eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fd67 	bl	80029ce <HAL_SYSTICK_Config>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00e      	b.n	8001f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b0f      	cmp	r3, #15
 8001f0e:	d80a      	bhi.n	8001f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f10:	2200      	movs	r2, #0
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f18:	f000 fd2f 	bl	800297a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f1c:	4a06      	ldr	r2, [pc, #24]	; (8001f38 <HAL_InitTick+0x5c>)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	e000      	b.n	8001f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000008 	.word	0x20000008
 8001f38:	20000004 	.word	0x20000004

08001f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_IncTick+0x20>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_IncTick+0x24>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <HAL_IncTick+0x24>)
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000008 	.word	0x20000008
 8001f60:	200003e8 	.word	0x200003e8

08001f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return uwTick;
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_GetTick+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	200003e8 	.word	0x200003e8

08001f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff ffee 	bl	8001f64 <HAL_GetTick>
 8001f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f94:	d005      	beq.n	8001fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_Delay+0x44>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fa2:	bf00      	nop
 8001fa4:	f7ff ffde 	bl	8001f64 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d8f7      	bhi.n	8001fa4 <HAL_Delay+0x28>
  {
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000008 	.word	0x20000008

08001fc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e033      	b.n	8002042 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d109      	bne.n	8001ff6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fd14 	bl	8001a10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d118      	bne.n	8002034 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800200a:	f023 0302 	bic.w	r3, r3, #2
 800200e:	f043 0202 	orr.w	r2, r3, #2
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fad8 	bl	80025cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f023 0303 	bic.w	r3, r3, #3
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	641a      	str	r2, [r3, #64]	; 0x40
 8002032:	e001      	b.n	8002038 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002040:	7bfb      	ldrb	r3, [r7, #15]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_ADC_Start+0x1a>
 8002062:	2302      	movs	r3, #2
 8002064:	e0b2      	b.n	80021cc <HAL_ADC_Start+0x180>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b01      	cmp	r3, #1
 800207a:	d018      	beq.n	80020ae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800208c:	4b52      	ldr	r3, [pc, #328]	; (80021d8 <HAL_ADC_Start+0x18c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a52      	ldr	r2, [pc, #328]	; (80021dc <HAL_ADC_Start+0x190>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	0c9a      	lsrs	r2, r3, #18
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020a0:	e002      	b.n	80020a8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f9      	bne.n	80020a2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d17a      	bne.n	80021b2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020c4:	f023 0301 	bic.w	r3, r3, #1
 80020c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d007      	beq.n	80020ee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020fa:	d106      	bne.n	800210a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	f023 0206 	bic.w	r2, r3, #6
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	645a      	str	r2, [r3, #68]	; 0x44
 8002108:	e002      	b.n	8002110 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002118:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <HAL_ADC_Start+0x194>)
 800211a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002124:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	2b00      	cmp	r3, #0
 8002130:	d12a      	bne.n	8002188 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a2b      	ldr	r2, [pc, #172]	; (80021e4 <HAL_ADC_Start+0x198>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d015      	beq.n	8002168 <HAL_ADC_Start+0x11c>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <HAL_ADC_Start+0x19c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d105      	bne.n	8002152 <HAL_ADC_Start+0x106>
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <HAL_ADC_Start+0x194>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a25      	ldr	r2, [pc, #148]	; (80021ec <HAL_ADC_Start+0x1a0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d136      	bne.n	80021ca <HAL_ADC_Start+0x17e>
 800215c:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_ADC_Start+0x194>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	d130      	bne.n	80021ca <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d129      	bne.n	80021ca <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	e020      	b.n	80021ca <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <HAL_ADC_Start+0x198>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d11b      	bne.n	80021ca <HAL_ADC_Start+0x17e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d114      	bne.n	80021ca <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	e00b      	b.n	80021ca <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f043 0210 	orr.w	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f043 0201 	orr.w	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	20000000 	.word	0x20000000
 80021dc:	431bde83 	.word	0x431bde83
 80021e0:	40012300 	.word	0x40012300
 80021e4:	40012000 	.word	0x40012000
 80021e8:	40012100 	.word	0x40012100
 80021ec:	40012200 	.word	0x40012200

080021f0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_ADC_Stop+0x16>
 8002202:	2302      	movs	r3, #2
 8002204:	e021      	b.n	800224a <HAL_ADC_Stop+0x5a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0201 	bic.w	r2, r2, #1
 800221c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d109      	bne.n	8002240 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002234:	f023 0301 	bic.w	r3, r3, #1
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002272:	d113      	bne.n	800229c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800227e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002282:	d10b      	bne.n	800229c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f043 0220 	orr.w	r2, r3, #32
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e063      	b.n	8002364 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800229c:	f7ff fe62 	bl	8001f64 <HAL_GetTick>
 80022a0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022a2:	e021      	b.n	80022e8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022aa:	d01d      	beq.n	80022e8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d007      	beq.n	80022c2 <HAL_ADC_PollForConversion+0x6c>
 80022b2:	f7ff fe57 	bl	8001f64 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d212      	bcs.n	80022e8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d00b      	beq.n	80022e8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f043 0204 	orr.w	r2, r3, #4
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e03d      	b.n	8002364 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d1d6      	bne.n	80022a4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f06f 0212 	mvn.w	r2, #18
 80022fe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d123      	bne.n	8002362 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800231e:	2b00      	cmp	r3, #0
 8002320:	d11f      	bne.n	8002362 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800232c:	2b00      	cmp	r3, #0
 800232e:	d006      	beq.n	800233e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800233a:	2b00      	cmp	r3, #0
 800233c:	d111      	bne.n	8002362 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d105      	bne.n	8002362 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f043 0201 	orr.w	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x1c>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e105      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x228>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b09      	cmp	r3, #9
 80023b2:	d925      	bls.n	8002400 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68d9      	ldr	r1, [r3, #12]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	3b1e      	subs	r3, #30
 80023ca:	2207      	movs	r2, #7
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43da      	mvns	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	400a      	ands	r2, r1
 80023d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68d9      	ldr	r1, [r3, #12]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	4603      	mov	r3, r0
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4403      	add	r3, r0
 80023f2:	3b1e      	subs	r3, #30
 80023f4:	409a      	lsls	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	e022      	b.n	8002446 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6919      	ldr	r1, [r3, #16]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	2207      	movs	r2, #7
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	400a      	ands	r2, r1
 8002422:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6919      	ldr	r1, [r3, #16]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	4618      	mov	r0, r3
 8002436:	4603      	mov	r3, r0
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4403      	add	r3, r0
 800243c:	409a      	lsls	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b06      	cmp	r3, #6
 800244c:	d824      	bhi.n	8002498 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	3b05      	subs	r3, #5
 8002460:	221f      	movs	r2, #31
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	400a      	ands	r2, r1
 800246e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	4618      	mov	r0, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	3b05      	subs	r3, #5
 800248a:	fa00 f203 	lsl.w	r2, r0, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	635a      	str	r2, [r3, #52]	; 0x34
 8002496:	e04c      	b.n	8002532 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b0c      	cmp	r3, #12
 800249e:	d824      	bhi.n	80024ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	3b23      	subs	r3, #35	; 0x23
 80024b2:	221f      	movs	r2, #31
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43da      	mvns	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	400a      	ands	r2, r1
 80024c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	3b23      	subs	r3, #35	; 0x23
 80024dc:	fa00 f203 	lsl.w	r2, r0, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
 80024e8:	e023      	b.n	8002532 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	3b41      	subs	r3, #65	; 0x41
 80024fc:	221f      	movs	r2, #31
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43da      	mvns	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	400a      	ands	r2, r1
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	4618      	mov	r0, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	3b41      	subs	r3, #65	; 0x41
 8002526:	fa00 f203 	lsl.w	r2, r0, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002532:	4b22      	ldr	r3, [pc, #136]	; (80025bc <HAL_ADC_ConfigChannel+0x234>)
 8002534:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a21      	ldr	r2, [pc, #132]	; (80025c0 <HAL_ADC_ConfigChannel+0x238>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d109      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x1cc>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b12      	cmp	r3, #18
 8002546:	d105      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a19      	ldr	r2, [pc, #100]	; (80025c0 <HAL_ADC_ConfigChannel+0x238>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d123      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x21e>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b10      	cmp	r3, #16
 8002564:	d003      	beq.n	800256e <HAL_ADC_ConfigChannel+0x1e6>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b11      	cmp	r3, #17
 800256c:	d11b      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b10      	cmp	r3, #16
 8002580:	d111      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <HAL_ADC_ConfigChannel+0x23c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a10      	ldr	r2, [pc, #64]	; (80025c8 <HAL_ADC_ConfigChannel+0x240>)
 8002588:	fba2 2303 	umull	r2, r3, r2, r3
 800258c:	0c9a      	lsrs	r2, r3, #18
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002598:	e002      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	3b01      	subs	r3, #1
 800259e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f9      	bne.n	800259a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	40012300 	.word	0x40012300
 80025c0:	40012000 	.word	0x40012000
 80025c4:	20000000 	.word	0x20000000
 80025c8:	431bde83 	.word	0x431bde83

080025cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025d4:	4b79      	ldr	r3, [pc, #484]	; (80027bc <ADC_Init+0x1f0>)
 80025d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	431a      	orrs	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002600:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	021a      	lsls	r2, r3, #8
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002624:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6859      	ldr	r1, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002646:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6899      	ldr	r1, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265e:	4a58      	ldr	r2, [pc, #352]	; (80027c0 <ADC_Init+0x1f4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d022      	beq.n	80026aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002672:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6899      	ldr	r1, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002694:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6899      	ldr	r1, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	e00f      	b.n	80026ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0202 	bic.w	r2, r2, #2
 80026d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6899      	ldr	r1, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	7e1b      	ldrb	r3, [r3, #24]
 80026e4:	005a      	lsls	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d01b      	beq.n	8002730 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002706:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002716:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6859      	ldr	r1, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	3b01      	subs	r3, #1
 8002724:	035a      	lsls	r2, r3, #13
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	e007      	b.n	8002740 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800273e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800274e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	3b01      	subs	r3, #1
 800275c:	051a      	lsls	r2, r3, #20
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002774:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6899      	ldr	r1, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002782:	025a      	lsls	r2, r3, #9
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800279a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6899      	ldr	r1, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	029a      	lsls	r2, r3, #10
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	609a      	str	r2, [r3, #8]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	40012300 	.word	0x40012300
 80027c0:	0f000001 	.word	0x0f000001

080027c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <__NVIC_SetPriorityGrouping+0x44>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027e0:	4013      	ands	r3, r2
 80027e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027f6:	4a04      	ldr	r2, [pc, #16]	; (8002808 <__NVIC_SetPriorityGrouping+0x44>)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	60d3      	str	r3, [r2, #12]
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <__NVIC_GetPriorityGrouping+0x18>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	f003 0307 	and.w	r3, r3, #7
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	2b00      	cmp	r3, #0
 8002838:	db0b      	blt.n	8002852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	f003 021f 	and.w	r2, r3, #31
 8002840:	4907      	ldr	r1, [pc, #28]	; (8002860 <__NVIC_EnableIRQ+0x38>)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2001      	movs	r0, #1
 800284a:	fa00 f202 	lsl.w	r2, r0, r2
 800284e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000e100 	.word	0xe000e100

08002864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	6039      	str	r1, [r7, #0]
 800286e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002874:	2b00      	cmp	r3, #0
 8002876:	db0a      	blt.n	800288e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	490c      	ldr	r1, [pc, #48]	; (80028b0 <__NVIC_SetPriority+0x4c>)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	0112      	lsls	r2, r2, #4
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	440b      	add	r3, r1
 8002888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800288c:	e00a      	b.n	80028a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4908      	ldr	r1, [pc, #32]	; (80028b4 <__NVIC_SetPriority+0x50>)
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	3b04      	subs	r3, #4
 800289c:	0112      	lsls	r2, r2, #4
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	440b      	add	r3, r1
 80028a2:	761a      	strb	r2, [r3, #24]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000e100 	.word	0xe000e100
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	; 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f1c3 0307 	rsb	r3, r3, #7
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	bf28      	it	cs
 80028d6:	2304      	movcs	r3, #4
 80028d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3304      	adds	r3, #4
 80028de:	2b06      	cmp	r3, #6
 80028e0:	d902      	bls.n	80028e8 <NVIC_EncodePriority+0x30>
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3b03      	subs	r3, #3
 80028e6:	e000      	b.n	80028ea <NVIC_EncodePriority+0x32>
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43da      	mvns	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	401a      	ands	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002900:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	43d9      	mvns	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	4313      	orrs	r3, r2
         );
}
 8002912:	4618      	mov	r0, r3
 8002914:	3724      	adds	r7, #36	; 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002930:	d301      	bcc.n	8002936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002932:	2301      	movs	r3, #1
 8002934:	e00f      	b.n	8002956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <SysTick_Config+0x40>)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800293e:	210f      	movs	r1, #15
 8002940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002944:	f7ff ff8e 	bl	8002864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <SysTick_Config+0x40>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <SysTick_Config+0x40>)
 8002950:	2207      	movs	r2, #7
 8002952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	e000e010 	.word	0xe000e010

08002964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff ff29 	bl	80027c4 <__NVIC_SetPriorityGrouping>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800297a:	b580      	push	{r7, lr}
 800297c:	b086      	sub	sp, #24
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800298c:	f7ff ff3e 	bl	800280c <__NVIC_GetPriorityGrouping>
 8002990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	6978      	ldr	r0, [r7, #20]
 8002998:	f7ff ff8e 	bl	80028b8 <NVIC_EncodePriority>
 800299c:	4602      	mov	r2, r0
 800299e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff5d 	bl	8002864 <__NVIC_SetPriority>
}
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4603      	mov	r3, r0
 80029ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff31 	bl	8002828 <__NVIC_EnableIRQ>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff ffa2 	bl	8002920 <SysTick_Config>
 80029dc:	4603      	mov	r3, r0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	; 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	e16b      	b.n	8002cdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a04:	2201      	movs	r2, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	f040 815a 	bne.w	8002cd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d005      	beq.n	8002a3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d130      	bne.n	8002a9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	2203      	movs	r2, #3
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a70:	2201      	movs	r2, #1
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	f003 0201 	and.w	r2, r3, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d017      	beq.n	8002ad8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d123      	bne.n	8002b2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	08da      	lsrs	r2, r3, #3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3208      	adds	r2, #8
 8002aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	220f      	movs	r2, #15
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	08da      	lsrs	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3208      	adds	r2, #8
 8002b26:	69b9      	ldr	r1, [r7, #24]
 8002b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	2203      	movs	r2, #3
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0203 	and.w	r2, r3, #3
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80b4 	beq.w	8002cd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	4b60      	ldr	r3, [pc, #384]	; (8002cf4 <HAL_GPIO_Init+0x30c>)
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	4a5f      	ldr	r2, [pc, #380]	; (8002cf4 <HAL_GPIO_Init+0x30c>)
 8002b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b7e:	4b5d      	ldr	r3, [pc, #372]	; (8002cf4 <HAL_GPIO_Init+0x30c>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b8a:	4a5b      	ldr	r2, [pc, #364]	; (8002cf8 <HAL_GPIO_Init+0x310>)
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	3302      	adds	r3, #2
 8002b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	220f      	movs	r2, #15
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a52      	ldr	r2, [pc, #328]	; (8002cfc <HAL_GPIO_Init+0x314>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d02b      	beq.n	8002c0e <HAL_GPIO_Init+0x226>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a51      	ldr	r2, [pc, #324]	; (8002d00 <HAL_GPIO_Init+0x318>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d025      	beq.n	8002c0a <HAL_GPIO_Init+0x222>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a50      	ldr	r2, [pc, #320]	; (8002d04 <HAL_GPIO_Init+0x31c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01f      	beq.n	8002c06 <HAL_GPIO_Init+0x21e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4f      	ldr	r2, [pc, #316]	; (8002d08 <HAL_GPIO_Init+0x320>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d019      	beq.n	8002c02 <HAL_GPIO_Init+0x21a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a4e      	ldr	r2, [pc, #312]	; (8002d0c <HAL_GPIO_Init+0x324>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d013      	beq.n	8002bfe <HAL_GPIO_Init+0x216>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a4d      	ldr	r2, [pc, #308]	; (8002d10 <HAL_GPIO_Init+0x328>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00d      	beq.n	8002bfa <HAL_GPIO_Init+0x212>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a4c      	ldr	r2, [pc, #304]	; (8002d14 <HAL_GPIO_Init+0x32c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d007      	beq.n	8002bf6 <HAL_GPIO_Init+0x20e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a4b      	ldr	r2, [pc, #300]	; (8002d18 <HAL_GPIO_Init+0x330>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <HAL_GPIO_Init+0x20a>
 8002bee:	2307      	movs	r3, #7
 8002bf0:	e00e      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	e00c      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002bf6:	2306      	movs	r3, #6
 8002bf8:	e00a      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002bfa:	2305      	movs	r3, #5
 8002bfc:	e008      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002bfe:	2304      	movs	r3, #4
 8002c00:	e006      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002c02:	2303      	movs	r3, #3
 8002c04:	e004      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e002      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	f002 0203 	and.w	r2, r2, #3
 8002c16:	0092      	lsls	r2, r2, #2
 8002c18:	4093      	lsls	r3, r2
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c20:	4935      	ldr	r1, [pc, #212]	; (8002cf8 <HAL_GPIO_Init+0x310>)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	089b      	lsrs	r3, r3, #2
 8002c26:	3302      	adds	r3, #2
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c2e:	4b3b      	ldr	r3, [pc, #236]	; (8002d1c <HAL_GPIO_Init+0x334>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c52:	4a32      	ldr	r2, [pc, #200]	; (8002d1c <HAL_GPIO_Init+0x334>)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c58:	4b30      	ldr	r3, [pc, #192]	; (8002d1c <HAL_GPIO_Init+0x334>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c7c:	4a27      	ldr	r2, [pc, #156]	; (8002d1c <HAL_GPIO_Init+0x334>)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c82:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <HAL_GPIO_Init+0x334>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ca6:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <HAL_GPIO_Init+0x334>)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cac:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_GPIO_Init+0x334>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cd0:	4a12      	ldr	r2, [pc, #72]	; (8002d1c <HAL_GPIO_Init+0x334>)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b0f      	cmp	r3, #15
 8002ce0:	f67f ae90 	bls.w	8002a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	3724      	adds	r7, #36	; 0x24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40013800 	.word	0x40013800
 8002cfc:	40020000 	.word	0x40020000
 8002d00:	40020400 	.word	0x40020400
 8002d04:	40020800 	.word	0x40020800
 8002d08:	40020c00 	.word	0x40020c00
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40021400 	.word	0x40021400
 8002d14:	40021800 	.word	0x40021800
 8002d18:	40021c00 	.word	0x40021c00
 8002d1c:	40013c00 	.word	0x40013c00

08002d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	807b      	strh	r3, [r7, #2]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d30:	787b      	ldrb	r3, [r7, #1]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d36:	887a      	ldrh	r2, [r7, #2]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d3c:	e003      	b.n	8002d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d3e:	887b      	ldrh	r3, [r7, #2]
 8002d40:	041a      	lsls	r2, r3, #16
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	619a      	str	r2, [r3, #24]
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d64:	887a      	ldrh	r2, [r7, #2]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	041a      	lsls	r2, r3, #16
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	43d9      	mvns	r1, r3
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	400b      	ands	r3, r1
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	619a      	str	r2, [r3, #24]
}
 8002d7a:	bf00      	nop
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e12b      	b.n	8002ff2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe fe50 	bl	8001a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2224      	movs	r2, #36	; 0x24
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0201 	bic.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dec:	f001 fbfc 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8002df0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4a81      	ldr	r2, [pc, #516]	; (8002ffc <HAL_I2C_Init+0x274>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d807      	bhi.n	8002e0c <HAL_I2C_Init+0x84>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4a80      	ldr	r2, [pc, #512]	; (8003000 <HAL_I2C_Init+0x278>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	bf94      	ite	ls
 8002e04:	2301      	movls	r3, #1
 8002e06:	2300      	movhi	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e006      	b.n	8002e1a <HAL_I2C_Init+0x92>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4a7d      	ldr	r2, [pc, #500]	; (8003004 <HAL_I2C_Init+0x27c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	bf94      	ite	ls
 8002e14:	2301      	movls	r3, #1
 8002e16:	2300      	movhi	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e0e7      	b.n	8002ff2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4a78      	ldr	r2, [pc, #480]	; (8003008 <HAL_I2C_Init+0x280>)
 8002e26:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2a:	0c9b      	lsrs	r3, r3, #18
 8002e2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4a6a      	ldr	r2, [pc, #424]	; (8002ffc <HAL_I2C_Init+0x274>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d802      	bhi.n	8002e5c <HAL_I2C_Init+0xd4>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	e009      	b.n	8002e70 <HAL_I2C_Init+0xe8>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e62:	fb02 f303 	mul.w	r3, r2, r3
 8002e66:	4a69      	ldr	r2, [pc, #420]	; (800300c <HAL_I2C_Init+0x284>)
 8002e68:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6c:	099b      	lsrs	r3, r3, #6
 8002e6e:	3301      	adds	r3, #1
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	430b      	orrs	r3, r1
 8002e76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	495c      	ldr	r1, [pc, #368]	; (8002ffc <HAL_I2C_Init+0x274>)
 8002e8c:	428b      	cmp	r3, r1
 8002e8e:	d819      	bhi.n	8002ec4 <HAL_I2C_Init+0x13c>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1e59      	subs	r1, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e9e:	1c59      	adds	r1, r3, #1
 8002ea0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ea4:	400b      	ands	r3, r1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_I2C_Init+0x138>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1e59      	subs	r1, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebe:	e051      	b.n	8002f64 <HAL_I2C_Init+0x1dc>
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	e04f      	b.n	8002f64 <HAL_I2C_Init+0x1dc>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d111      	bne.n	8002ef0 <HAL_I2C_Init+0x168>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1e58      	subs	r0, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	440b      	add	r3, r1
 8002eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e012      	b.n	8002f16 <HAL_I2C_Init+0x18e>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1e58      	subs	r0, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	0099      	lsls	r1, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf0c      	ite	eq
 8002f10:	2301      	moveq	r3, #1
 8002f12:	2300      	movne	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Init+0x196>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e022      	b.n	8002f64 <HAL_I2C_Init+0x1dc>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10e      	bne.n	8002f44 <HAL_I2C_Init+0x1bc>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1e58      	subs	r0, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6859      	ldr	r1, [r3, #4]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	440b      	add	r3, r1
 8002f34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f38:	3301      	adds	r3, #1
 8002f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f42:	e00f      	b.n	8002f64 <HAL_I2C_Init+0x1dc>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1e58      	subs	r0, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	0099      	lsls	r1, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	6809      	ldr	r1, [r1, #0]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69da      	ldr	r2, [r3, #28]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6911      	ldr	r1, [r2, #16]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68d2      	ldr	r2, [r2, #12]
 8002f9e:	4311      	orrs	r1, r2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	000186a0 	.word	0x000186a0
 8003000:	001e847f 	.word	0x001e847f
 8003004:	003d08ff 	.word	0x003d08ff
 8003008:	431bde83 	.word	0x431bde83
 800300c:	10624dd3 	.word	0x10624dd3

08003010 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	4608      	mov	r0, r1
 800301a:	4611      	mov	r1, r2
 800301c:	461a      	mov	r2, r3
 800301e:	4603      	mov	r3, r0
 8003020:	817b      	strh	r3, [r7, #10]
 8003022:	460b      	mov	r3, r1
 8003024:	813b      	strh	r3, [r7, #8]
 8003026:	4613      	mov	r3, r2
 8003028:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800302a:	f7fe ff9b 	bl	8001f64 <HAL_GetTick>
 800302e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b20      	cmp	r3, #32
 800303a:	f040 80d9 	bne.w	80031f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	2319      	movs	r3, #25
 8003044:	2201      	movs	r2, #1
 8003046:	496d      	ldr	r1, [pc, #436]	; (80031fc <HAL_I2C_Mem_Write+0x1ec>)
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 fc7f 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003054:	2302      	movs	r3, #2
 8003056:	e0cc      	b.n	80031f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_I2C_Mem_Write+0x56>
 8003062:	2302      	movs	r3, #2
 8003064:	e0c5      	b.n	80031f2 <HAL_I2C_Mem_Write+0x1e2>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b01      	cmp	r3, #1
 800307a:	d007      	beq.n	800308c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800309a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2221      	movs	r2, #33	; 0x21
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2240      	movs	r2, #64	; 0x40
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a3a      	ldr	r2, [r7, #32]
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4a4d      	ldr	r2, [pc, #308]	; (8003200 <HAL_I2C_Mem_Write+0x1f0>)
 80030cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030ce:	88f8      	ldrh	r0, [r7, #6]
 80030d0:	893a      	ldrh	r2, [r7, #8]
 80030d2:	8979      	ldrh	r1, [r7, #10]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	4603      	mov	r3, r0
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fab6 	bl	8003650 <I2C_RequestMemoryWrite>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d052      	beq.n	8003190 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e081      	b.n	80031f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fd00 	bl	8003af8 <I2C_WaitOnTXEFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00d      	beq.n	800311a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	2b04      	cmp	r3, #4
 8003104:	d107      	bne.n	8003116 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003114:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e06b      	b.n	80031f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	781a      	ldrb	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b04      	cmp	r3, #4
 8003156:	d11b      	bne.n	8003190 <HAL_I2C_Mem_Write+0x180>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	2b00      	cmp	r3, #0
 800315e:	d017      	beq.n	8003190 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	781a      	ldrb	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1aa      	bne.n	80030ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 fcec 	bl	8003b7a <I2C_WaitOnBTFFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00d      	beq.n	80031c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d107      	bne.n	80031c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e016      	b.n	80031f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e000      	b.n	80031f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
  }
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	00100002 	.word	0x00100002
 8003200:	ffff0000 	.word	0xffff0000

08003204 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08c      	sub	sp, #48	; 0x30
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	4608      	mov	r0, r1
 800320e:	4611      	mov	r1, r2
 8003210:	461a      	mov	r2, r3
 8003212:	4603      	mov	r3, r0
 8003214:	817b      	strh	r3, [r7, #10]
 8003216:	460b      	mov	r3, r1
 8003218:	813b      	strh	r3, [r7, #8]
 800321a:	4613      	mov	r3, r2
 800321c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800321e:	f7fe fea1 	bl	8001f64 <HAL_GetTick>
 8003222:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b20      	cmp	r3, #32
 800322e:	f040 8208 	bne.w	8003642 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	2319      	movs	r3, #25
 8003238:	2201      	movs	r2, #1
 800323a:	497b      	ldr	r1, [pc, #492]	; (8003428 <HAL_I2C_Mem_Read+0x224>)
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fb85 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003248:	2302      	movs	r3, #2
 800324a:	e1fb      	b.n	8003644 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_I2C_Mem_Read+0x56>
 8003256:	2302      	movs	r3, #2
 8003258:	e1f4      	b.n	8003644 <HAL_I2C_Mem_Read+0x440>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b01      	cmp	r3, #1
 800326e:	d007      	beq.n	8003280 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800328e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2222      	movs	r2, #34	; 0x22
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2240      	movs	r2, #64	; 0x40
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80032b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4a5b      	ldr	r2, [pc, #364]	; (800342c <HAL_I2C_Mem_Read+0x228>)
 80032c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032c2:	88f8      	ldrh	r0, [r7, #6]
 80032c4:	893a      	ldrh	r2, [r7, #8]
 80032c6:	8979      	ldrh	r1, [r7, #10]
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	4603      	mov	r3, r0
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 fa52 	bl	800377c <I2C_RequestMemoryRead>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e1b0      	b.n	8003644 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d113      	bne.n	8003312 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ea:	2300      	movs	r3, #0
 80032ec:	623b      	str	r3, [r7, #32]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	623b      	str	r3, [r7, #32]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	623b      	str	r3, [r7, #32]
 80032fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	e184      	b.n	800361c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003316:	2b01      	cmp	r3, #1
 8003318:	d11b      	bne.n	8003352 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003328:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	e164      	b.n	800361c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003356:	2b02      	cmp	r3, #2
 8003358:	d11b      	bne.n	8003392 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003368:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003378:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	61bb      	str	r3, [r7, #24]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	e144      	b.n	800361c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033a8:	e138      	b.n	800361c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	f200 80f1 	bhi.w	8003596 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d123      	bne.n	8003404 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fc1b 	bl	8003bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e139      	b.n	8003644 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003402:	e10b      	b.n	800361c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003408:	2b02      	cmp	r3, #2
 800340a:	d14e      	bne.n	80034aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003412:	2200      	movs	r2, #0
 8003414:	4906      	ldr	r1, [pc, #24]	; (8003430 <HAL_I2C_Mem_Read+0x22c>)
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fa98 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d008      	beq.n	8003434 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e10e      	b.n	8003644 <HAL_I2C_Mem_Read+0x440>
 8003426:	bf00      	nop
 8003428:	00100002 	.word	0x00100002
 800342c:	ffff0000 	.word	0xffff0000
 8003430:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003442:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034a8:	e0b8      	b.n	800361c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b0:	2200      	movs	r2, #0
 80034b2:	4966      	ldr	r1, [pc, #408]	; (800364c <HAL_I2C_Mem_Read+0x448>)
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 fa49 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0bf      	b.n	8003644 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350c:	2200      	movs	r2, #0
 800350e:	494f      	ldr	r1, [pc, #316]	; (800364c <HAL_I2C_Mem_Read+0x448>)
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 fa1b 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e091      	b.n	8003644 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003594:	e042      	b.n	800361c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003598:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 fb2e 	bl	8003bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e04c      	b.n	8003644 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d118      	bne.n	800361c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003620:	2b00      	cmp	r3, #0
 8003622:	f47f aec2 	bne.w	80033aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003642:	2302      	movs	r3, #2
  }
}
 8003644:	4618      	mov	r0, r3
 8003646:	3728      	adds	r7, #40	; 0x28
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	00010004 	.word	0x00010004

08003650 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	4608      	mov	r0, r1
 800365a:	4611      	mov	r1, r2
 800365c:	461a      	mov	r2, r3
 800365e:	4603      	mov	r3, r0
 8003660:	817b      	strh	r3, [r7, #10]
 8003662:	460b      	mov	r3, r1
 8003664:	813b      	strh	r3, [r7, #8]
 8003666:	4613      	mov	r3, r2
 8003668:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003678:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	2200      	movs	r2, #0
 8003682:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f960 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00d      	beq.n	80036ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a0:	d103      	bne.n	80036aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e05f      	b.n	800376e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ae:	897b      	ldrh	r3, [r7, #10]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	461a      	mov	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	6a3a      	ldr	r2, [r7, #32]
 80036c2:	492d      	ldr	r1, [pc, #180]	; (8003778 <I2C_RequestMemoryWrite+0x128>)
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f998 	bl	80039fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e04c      	b.n	800376e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ec:	6a39      	ldr	r1, [r7, #32]
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fa02 	bl	8003af8 <I2C_WaitOnTXEFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00d      	beq.n	8003716 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d107      	bne.n	8003712 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003710:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e02b      	b.n	800376e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d105      	bne.n	8003728 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800371c:	893b      	ldrh	r3, [r7, #8]
 800371e:	b2da      	uxtb	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	611a      	str	r2, [r3, #16]
 8003726:	e021      	b.n	800376c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003728:	893b      	ldrh	r3, [r7, #8]
 800372a:	0a1b      	lsrs	r3, r3, #8
 800372c:	b29b      	uxth	r3, r3
 800372e:	b2da      	uxtb	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003738:	6a39      	ldr	r1, [r7, #32]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f9dc 	bl	8003af8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00d      	beq.n	8003762 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	2b04      	cmp	r3, #4
 800374c:	d107      	bne.n	800375e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e005      	b.n	800376e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003762:	893b      	ldrh	r3, [r7, #8]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	00010002 	.word	0x00010002

0800377c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af02      	add	r7, sp, #8
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	4608      	mov	r0, r1
 8003786:	4611      	mov	r1, r2
 8003788:	461a      	mov	r2, r3
 800378a:	4603      	mov	r3, r0
 800378c:	817b      	strh	r3, [r7, #10]
 800378e:	460b      	mov	r3, r1
 8003790:	813b      	strh	r3, [r7, #8]
 8003792:	4613      	mov	r3, r2
 8003794:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	2200      	movs	r2, #0
 80037be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f8c2 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00d      	beq.n	80037ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037dc:	d103      	bne.n	80037e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e0aa      	b.n	8003940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037ea:	897b      	ldrh	r3, [r7, #10]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	6a3a      	ldr	r2, [r7, #32]
 80037fe:	4952      	ldr	r1, [pc, #328]	; (8003948 <I2C_RequestMemoryRead+0x1cc>)
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f8fa 	bl	80039fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e097      	b.n	8003940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003828:	6a39      	ldr	r1, [r7, #32]
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f964 	bl	8003af8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00d      	beq.n	8003852 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	2b04      	cmp	r3, #4
 800383c:	d107      	bne.n	800384e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e076      	b.n	8003940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d105      	bne.n	8003864 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003858:	893b      	ldrh	r3, [r7, #8]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	611a      	str	r2, [r3, #16]
 8003862:	e021      	b.n	80038a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003864:	893b      	ldrh	r3, [r7, #8]
 8003866:	0a1b      	lsrs	r3, r3, #8
 8003868:	b29b      	uxth	r3, r3
 800386a:	b2da      	uxtb	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003874:	6a39      	ldr	r1, [r7, #32]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f93e 	bl	8003af8 <I2C_WaitOnTXEFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00d      	beq.n	800389e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	2b04      	cmp	r3, #4
 8003888:	d107      	bne.n	800389a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003898:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e050      	b.n	8003940 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800389e:	893b      	ldrh	r3, [r7, #8]
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038aa:	6a39      	ldr	r1, [r7, #32]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f923 	bl	8003af8 <I2C_WaitOnTXEFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00d      	beq.n	80038d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d107      	bne.n	80038d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e035      	b.n	8003940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f82b 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00d      	beq.n	8003918 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800390a:	d103      	bne.n	8003914 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003912:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e013      	b.n	8003940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003918:	897b      	ldrh	r3, [r7, #10]
 800391a:	b2db      	uxtb	r3, r3
 800391c:	f043 0301 	orr.w	r3, r3, #1
 8003920:	b2da      	uxtb	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	6a3a      	ldr	r2, [r7, #32]
 800392c:	4906      	ldr	r1, [pc, #24]	; (8003948 <I2C_RequestMemoryRead+0x1cc>)
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f863 	bl	80039fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	00010002 	.word	0x00010002

0800394c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	4613      	mov	r3, r2
 800395a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800395c:	e025      	b.n	80039aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003964:	d021      	beq.n	80039aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003966:	f7fe fafd 	bl	8001f64 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d302      	bcc.n	800397c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d116      	bne.n	80039aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f043 0220 	orr.w	r2, r3, #32
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e023      	b.n	80039f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	0c1b      	lsrs	r3, r3, #16
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d10d      	bne.n	80039d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	43da      	mvns	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4013      	ands	r3, r2
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bf0c      	ite	eq
 80039c6:	2301      	moveq	r3, #1
 80039c8:	2300      	movne	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	461a      	mov	r2, r3
 80039ce:	e00c      	b.n	80039ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	43da      	mvns	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4013      	ands	r3, r2
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	bf0c      	ite	eq
 80039e2:	2301      	moveq	r3, #1
 80039e4:	2300      	movne	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d0b6      	beq.n	800395e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a08:	e051      	b.n	8003aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a18:	d123      	bne.n	8003a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f043 0204 	orr.w	r2, r3, #4
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e046      	b.n	8003af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a68:	d021      	beq.n	8003aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6a:	f7fe fa7b 	bl	8001f64 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d302      	bcc.n	8003a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d116      	bne.n	8003aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	f043 0220 	orr.w	r2, r3, #32
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e020      	b.n	8003af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	0c1b      	lsrs	r3, r3, #16
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d10c      	bne.n	8003ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	bf14      	ite	ne
 8003aca:	2301      	movne	r3, #1
 8003acc:	2300      	moveq	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	e00b      	b.n	8003aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	43da      	mvns	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4013      	ands	r3, r2
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf14      	ite	ne
 8003ae4:	2301      	movne	r3, #1
 8003ae6:	2300      	moveq	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d18d      	bne.n	8003a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b04:	e02d      	b.n	8003b62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 f8ce 	bl	8003ca8 <I2C_IsAcknowledgeFailed>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e02d      	b.n	8003b72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b1c:	d021      	beq.n	8003b62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1e:	f7fe fa21 	bl	8001f64 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d302      	bcc.n	8003b34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d116      	bne.n	8003b62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f043 0220 	orr.w	r2, r3, #32
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e007      	b.n	8003b72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6c:	2b80      	cmp	r3, #128	; 0x80
 8003b6e:	d1ca      	bne.n	8003b06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b86:	e02d      	b.n	8003be4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 f88d 	bl	8003ca8 <I2C_IsAcknowledgeFailed>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e02d      	b.n	8003bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b9e:	d021      	beq.n	8003be4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba0:	f7fe f9e0 	bl	8001f64 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d302      	bcc.n	8003bb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d116      	bne.n	8003be4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	f043 0220 	orr.w	r2, r3, #32
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e007      	b.n	8003bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d1ca      	bne.n	8003b88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c08:	e042      	b.n	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d119      	bne.n	8003c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0210 	mvn.w	r2, #16
 8003c20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e029      	b.n	8003ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4c:	f7fe f98a 	bl	8001f64 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d302      	bcc.n	8003c62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d116      	bne.n	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	f043 0220 	orr.w	r2, r3, #32
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e007      	b.n	8003ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9a:	2b40      	cmp	r3, #64	; 0x40
 8003c9c:	d1b5      	bne.n	8003c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cbe:	d11b      	bne.n	8003cf8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	f043 0204 	orr.w	r2, r3, #4
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e267      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d075      	beq.n	8003e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d26:	4b88      	ldr	r3, [pc, #544]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d00c      	beq.n	8003d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d32:	4b85      	ldr	r3, [pc, #532]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d112      	bne.n	8003d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d3e:	4b82      	ldr	r3, [pc, #520]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d4a:	d10b      	bne.n	8003d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4c:	4b7e      	ldr	r3, [pc, #504]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d05b      	beq.n	8003e10 <HAL_RCC_OscConfig+0x108>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d157      	bne.n	8003e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e242      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d6c:	d106      	bne.n	8003d7c <HAL_RCC_OscConfig+0x74>
 8003d6e:	4b76      	ldr	r3, [pc, #472]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a75      	ldr	r2, [pc, #468]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e01d      	b.n	8003db8 <HAL_RCC_OscConfig+0xb0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d84:	d10c      	bne.n	8003da0 <HAL_RCC_OscConfig+0x98>
 8003d86:	4b70      	ldr	r3, [pc, #448]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a6f      	ldr	r2, [pc, #444]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4b6d      	ldr	r3, [pc, #436]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a6c      	ldr	r2, [pc, #432]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCC_OscConfig+0xb0>
 8003da0:	4b69      	ldr	r3, [pc, #420]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a68      	ldr	r2, [pc, #416]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	4b66      	ldr	r3, [pc, #408]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a65      	ldr	r2, [pc, #404]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d013      	beq.n	8003de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7fe f8d0 	bl	8001f64 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7fe f8cc 	bl	8001f64 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e207      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dda:	4b5b      	ldr	r3, [pc, #364]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0xc0>
 8003de6:	e014      	b.n	8003e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fe f8bc 	bl	8001f64 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df0:	f7fe f8b8 	bl	8001f64 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	; 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e1f3      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e02:	4b51      	ldr	r3, [pc, #324]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0xe8>
 8003e0e:	e000      	b.n	8003e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d063      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e1e:	4b4a      	ldr	r3, [pc, #296]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2a:	4b47      	ldr	r3, [pc, #284]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d11c      	bne.n	8003e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e36:	4b44      	ldr	r3, [pc, #272]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d116      	bne.n	8003e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e42:	4b41      	ldr	r3, [pc, #260]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_RCC_OscConfig+0x152>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d001      	beq.n	8003e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e1c7      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5a:	4b3b      	ldr	r3, [pc, #236]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4937      	ldr	r1, [pc, #220]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6e:	e03a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d020      	beq.n	8003eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e78:	4b34      	ldr	r3, [pc, #208]	; (8003f4c <HAL_RCC_OscConfig+0x244>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7e:	f7fe f871 	bl	8001f64 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e86:	f7fe f86d 	bl	8001f64 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e1a8      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e98:	4b2b      	ldr	r3, [pc, #172]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea4:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4925      	ldr	r1, [pc, #148]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	600b      	str	r3, [r1, #0]
 8003eb8:	e015      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eba:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <HAL_RCC_OscConfig+0x244>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fe f850 	bl	8001f64 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec8:	f7fe f84c 	bl	8001f64 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e187      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eda:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d036      	beq.n	8003f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d016      	beq.n	8003f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efa:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <HAL_RCC_OscConfig+0x248>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f00:	f7fe f830 	bl	8001f64 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f08:	f7fe f82c 	bl	8001f64 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e167      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x200>
 8003f26:	e01b      	b.n	8003f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f28:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <HAL_RCC_OscConfig+0x248>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2e:	f7fe f819 	bl	8001f64 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f34:	e00e      	b.n	8003f54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f36:	f7fe f815 	bl	8001f64 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d907      	bls.n	8003f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e150      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	42470000 	.word	0x42470000
 8003f50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f54:	4b88      	ldr	r3, [pc, #544]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1ea      	bne.n	8003f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8097 	beq.w	800409c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f72:	4b81      	ldr	r3, [pc, #516]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10f      	bne.n	8003f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	4b7d      	ldr	r3, [pc, #500]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	4a7c      	ldr	r2, [pc, #496]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f8e:	4b7a      	ldr	r3, [pc, #488]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9e:	4b77      	ldr	r3, [pc, #476]	; (800417c <HAL_RCC_OscConfig+0x474>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d118      	bne.n	8003fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003faa:	4b74      	ldr	r3, [pc, #464]	; (800417c <HAL_RCC_OscConfig+0x474>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a73      	ldr	r2, [pc, #460]	; (800417c <HAL_RCC_OscConfig+0x474>)
 8003fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fb6:	f7fd ffd5 	bl	8001f64 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbe:	f7fd ffd1 	bl	8001f64 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e10c      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd0:	4b6a      	ldr	r3, [pc, #424]	; (800417c <HAL_RCC_OscConfig+0x474>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d106      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x2ea>
 8003fe4:	4b64      	ldr	r3, [pc, #400]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe8:	4a63      	ldr	r2, [pc, #396]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff0:	e01c      	b.n	800402c <HAL_RCC_OscConfig+0x324>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b05      	cmp	r3, #5
 8003ff8:	d10c      	bne.n	8004014 <HAL_RCC_OscConfig+0x30c>
 8003ffa:	4b5f      	ldr	r3, [pc, #380]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	4a5e      	ldr	r2, [pc, #376]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004000:	f043 0304 	orr.w	r3, r3, #4
 8004004:	6713      	str	r3, [r2, #112]	; 0x70
 8004006:	4b5c      	ldr	r3, [pc, #368]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	4a5b      	ldr	r2, [pc, #364]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	6713      	str	r3, [r2, #112]	; 0x70
 8004012:	e00b      	b.n	800402c <HAL_RCC_OscConfig+0x324>
 8004014:	4b58      	ldr	r3, [pc, #352]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004018:	4a57      	ldr	r2, [pc, #348]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	6713      	str	r3, [r2, #112]	; 0x70
 8004020:	4b55      	ldr	r3, [pc, #340]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	4a54      	ldr	r2, [pc, #336]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004026:	f023 0304 	bic.w	r3, r3, #4
 800402a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d015      	beq.n	8004060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004034:	f7fd ff96 	bl	8001f64 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403a:	e00a      	b.n	8004052 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800403c:	f7fd ff92 	bl	8001f64 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	; 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e0cb      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004052:	4b49      	ldr	r3, [pc, #292]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0ee      	beq.n	800403c <HAL_RCC_OscConfig+0x334>
 800405e:	e014      	b.n	800408a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004060:	f7fd ff80 	bl	8001f64 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004066:	e00a      	b.n	800407e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004068:	f7fd ff7c 	bl	8001f64 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f241 3288 	movw	r2, #5000	; 0x1388
 8004076:	4293      	cmp	r3, r2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e0b5      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800407e:	4b3e      	ldr	r3, [pc, #248]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1ee      	bne.n	8004068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800408a:	7dfb      	ldrb	r3, [r7, #23]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d105      	bne.n	800409c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004090:	4b39      	ldr	r3, [pc, #228]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	4a38      	ldr	r2, [pc, #224]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 80a1 	beq.w	80041e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040a6:	4b34      	ldr	r3, [pc, #208]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d05c      	beq.n	800416c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d141      	bne.n	800413e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ba:	4b31      	ldr	r3, [pc, #196]	; (8004180 <HAL_RCC_OscConfig+0x478>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7fd ff50 	bl	8001f64 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fd ff4c 	bl	8001f64 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e087      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	4b27      	ldr	r3, [pc, #156]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69da      	ldr	r2, [r3, #28]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	019b      	lsls	r3, r3, #6
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	085b      	lsrs	r3, r3, #1
 80040fe:	3b01      	subs	r3, #1
 8004100:	041b      	lsls	r3, r3, #16
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	061b      	lsls	r3, r3, #24
 800410a:	491b      	ldr	r1, [pc, #108]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004110:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <HAL_RCC_OscConfig+0x478>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004116:	f7fd ff25 	bl	8001f64 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800411e:	f7fd ff21 	bl	8001f64 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e05c      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f0      	beq.n	800411e <HAL_RCC_OscConfig+0x416>
 800413c:	e054      	b.n	80041e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413e:	4b10      	ldr	r3, [pc, #64]	; (8004180 <HAL_RCC_OscConfig+0x478>)
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004144:	f7fd ff0e 	bl	8001f64 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800414c:	f7fd ff0a 	bl	8001f64 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e045      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x444>
 800416a:	e03d      	b.n	80041e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d107      	bne.n	8004184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e038      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
 8004178:	40023800 	.word	0x40023800
 800417c:	40007000 	.word	0x40007000
 8004180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004184:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <HAL_RCC_OscConfig+0x4ec>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d028      	beq.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d121      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d11a      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041b4:	4013      	ands	r3, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041bc:	4293      	cmp	r3, r2
 80041be:	d111      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	3b01      	subs	r3, #1
 80041ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d107      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40023800 	.word	0x40023800

080041f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0cc      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800420c:	4b68      	ldr	r3, [pc, #416]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d90c      	bls.n	8004234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	4b65      	ldr	r3, [pc, #404]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004222:	4b63      	ldr	r3, [pc, #396]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0b8      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d020      	beq.n	8004282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800424c:	4b59      	ldr	r3, [pc, #356]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	4a58      	ldr	r2, [pc, #352]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004264:	4b53      	ldr	r3, [pc, #332]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	4a52      	ldr	r2, [pc, #328]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800426e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004270:	4b50      	ldr	r3, [pc, #320]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	494d      	ldr	r1, [pc, #308]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d044      	beq.n	8004318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	4b47      	ldr	r3, [pc, #284]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d119      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e07f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d003      	beq.n	80042b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b6:	4b3f      	ldr	r3, [pc, #252]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e06f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c6:	4b3b      	ldr	r3, [pc, #236]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e067      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042d6:	4b37      	ldr	r3, [pc, #220]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f023 0203 	bic.w	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4934      	ldr	r1, [pc, #208]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042e8:	f7fd fe3c 	bl	8001f64 <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f0:	f7fd fe38 	bl	8001f64 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e04f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004306:	4b2b      	ldr	r3, [pc, #172]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 020c 	and.w	r2, r3, #12
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	429a      	cmp	r2, r3
 8004316:	d1eb      	bne.n	80042f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004318:	4b25      	ldr	r3, [pc, #148]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d20c      	bcs.n	8004340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004326:	4b22      	ldr	r3, [pc, #136]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800432e:	4b20      	ldr	r3, [pc, #128]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d001      	beq.n	8004340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e032      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800434c:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4916      	ldr	r1, [pc, #88]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	490e      	ldr	r1, [pc, #56]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800437e:	f000 f821 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 8004382:	4602      	mov	r2, r0
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	490a      	ldr	r1, [pc, #40]	; (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	5ccb      	ldrb	r3, [r1, r3]
 8004392:	fa22 f303 	lsr.w	r3, r2, r3
 8004396:	4a09      	ldr	r2, [pc, #36]	; (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800439a:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <HAL_RCC_ClockConfig+0x1c8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fd fd9c 	bl	8001edc <HAL_InitTick>

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40023c00 	.word	0x40023c00
 80043b4:	40023800 	.word	0x40023800
 80043b8:	08008184 	.word	0x08008184
 80043bc:	20000000 	.word	0x20000000
 80043c0:	20000004 	.word	0x20000004

080043c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c8:	b094      	sub	sp, #80	; 0x50
 80043ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	647b      	str	r3, [r7, #68]	; 0x44
 80043d0:	2300      	movs	r3, #0
 80043d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d4:	2300      	movs	r3, #0
 80043d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043dc:	4b79      	ldr	r3, [pc, #484]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 030c 	and.w	r3, r3, #12
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d00d      	beq.n	8004404 <HAL_RCC_GetSysClockFreq+0x40>
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	f200 80e1 	bhi.w	80045b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x34>
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_GetSysClockFreq+0x3a>
 80043f6:	e0db      	b.n	80045b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043f8:	4b73      	ldr	r3, [pc, #460]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80043fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80043fc:	e0db      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043fe:	4b73      	ldr	r3, [pc, #460]	; (80045cc <HAL_RCC_GetSysClockFreq+0x208>)
 8004400:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004402:	e0d8      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004404:	4b6f      	ldr	r3, [pc, #444]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800440c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800440e:	4b6d      	ldr	r3, [pc, #436]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d063      	beq.n	80044e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800441a:	4b6a      	ldr	r3, [pc, #424]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	099b      	lsrs	r3, r3, #6
 8004420:	2200      	movs	r2, #0
 8004422:	63bb      	str	r3, [r7, #56]	; 0x38
 8004424:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442c:	633b      	str	r3, [r7, #48]	; 0x30
 800442e:	2300      	movs	r3, #0
 8004430:	637b      	str	r3, [r7, #52]	; 0x34
 8004432:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004436:	4622      	mov	r2, r4
 8004438:	462b      	mov	r3, r5
 800443a:	f04f 0000 	mov.w	r0, #0
 800443e:	f04f 0100 	mov.w	r1, #0
 8004442:	0159      	lsls	r1, r3, #5
 8004444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004448:	0150      	lsls	r0, r2, #5
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4621      	mov	r1, r4
 8004450:	1a51      	subs	r1, r2, r1
 8004452:	6139      	str	r1, [r7, #16]
 8004454:	4629      	mov	r1, r5
 8004456:	eb63 0301 	sbc.w	r3, r3, r1
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004468:	4659      	mov	r1, fp
 800446a:	018b      	lsls	r3, r1, #6
 800446c:	4651      	mov	r1, sl
 800446e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004472:	4651      	mov	r1, sl
 8004474:	018a      	lsls	r2, r1, #6
 8004476:	4651      	mov	r1, sl
 8004478:	ebb2 0801 	subs.w	r8, r2, r1
 800447c:	4659      	mov	r1, fp
 800447e:	eb63 0901 	sbc.w	r9, r3, r1
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800448e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004496:	4690      	mov	r8, r2
 8004498:	4699      	mov	r9, r3
 800449a:	4623      	mov	r3, r4
 800449c:	eb18 0303 	adds.w	r3, r8, r3
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	462b      	mov	r3, r5
 80044a4:	eb49 0303 	adc.w	r3, r9, r3
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044b6:	4629      	mov	r1, r5
 80044b8:	024b      	lsls	r3, r1, #9
 80044ba:	4621      	mov	r1, r4
 80044bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044c0:	4621      	mov	r1, r4
 80044c2:	024a      	lsls	r2, r1, #9
 80044c4:	4610      	mov	r0, r2
 80044c6:	4619      	mov	r1, r3
 80044c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ca:	2200      	movs	r2, #0
 80044cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044d4:	f7fc fbb8 	bl	8000c48 <__aeabi_uldivmod>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4613      	mov	r3, r2
 80044de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e0:	e058      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e2:	4b38      	ldr	r3, [pc, #224]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	2200      	movs	r2, #0
 80044ea:	4618      	mov	r0, r3
 80044ec:	4611      	mov	r1, r2
 80044ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044f2:	623b      	str	r3, [r7, #32]
 80044f4:	2300      	movs	r3, #0
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
 80044f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044fc:	4642      	mov	r2, r8
 80044fe:	464b      	mov	r3, r9
 8004500:	f04f 0000 	mov.w	r0, #0
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	0159      	lsls	r1, r3, #5
 800450a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800450e:	0150      	lsls	r0, r2, #5
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4641      	mov	r1, r8
 8004516:	ebb2 0a01 	subs.w	sl, r2, r1
 800451a:	4649      	mov	r1, r9
 800451c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800452c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004530:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004534:	ebb2 040a 	subs.w	r4, r2, sl
 8004538:	eb63 050b 	sbc.w	r5, r3, fp
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	00eb      	lsls	r3, r5, #3
 8004546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800454a:	00e2      	lsls	r2, r4, #3
 800454c:	4614      	mov	r4, r2
 800454e:	461d      	mov	r5, r3
 8004550:	4643      	mov	r3, r8
 8004552:	18e3      	adds	r3, r4, r3
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	464b      	mov	r3, r9
 8004558:	eb45 0303 	adc.w	r3, r5, r3
 800455c:	607b      	str	r3, [r7, #4]
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800456a:	4629      	mov	r1, r5
 800456c:	028b      	lsls	r3, r1, #10
 800456e:	4621      	mov	r1, r4
 8004570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004574:	4621      	mov	r1, r4
 8004576:	028a      	lsls	r2, r1, #10
 8004578:	4610      	mov	r0, r2
 800457a:	4619      	mov	r1, r3
 800457c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800457e:	2200      	movs	r2, #0
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	61fa      	str	r2, [r7, #28]
 8004584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004588:	f7fc fb5e 	bl	8000c48 <__aeabi_uldivmod>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4613      	mov	r3, r2
 8004592:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004594:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	0c1b      	lsrs	r3, r3, #16
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	3301      	adds	r3, #1
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80045a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045ae:	e002      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045b0:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80045b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3750      	adds	r7, #80	; 0x50
 80045bc:	46bd      	mov	sp, r7
 80045be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800
 80045c8:	00f42400 	.word	0x00f42400
 80045cc:	007a1200 	.word	0x007a1200

080045d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d4:	4b03      	ldr	r3, [pc, #12]	; (80045e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045d6:	681b      	ldr	r3, [r3, #0]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000000 	.word	0x20000000

080045e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045ec:	f7ff fff0 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b05      	ldr	r3, [pc, #20]	; (8004608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	0a9b      	lsrs	r3, r3, #10
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	4903      	ldr	r1, [pc, #12]	; (800460c <HAL_RCC_GetPCLK1Freq+0x24>)
 80045fe:	5ccb      	ldrb	r3, [r1, r3]
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004604:	4618      	mov	r0, r3
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40023800 	.word	0x40023800
 800460c:	08008194 	.word	0x08008194

08004610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004614:	f7ff ffdc 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 8004618:	4602      	mov	r2, r0
 800461a:	4b05      	ldr	r3, [pc, #20]	; (8004630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	0b5b      	lsrs	r3, r3, #13
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	4903      	ldr	r1, [pc, #12]	; (8004634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004626:	5ccb      	ldrb	r3, [r1, r3]
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800462c:	4618      	mov	r0, r3
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40023800 	.word	0x40023800
 8004634:	08008194 	.word	0x08008194

08004638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e041      	b.n	80046ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fd fa40 	bl	8001ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3304      	adds	r3, #4
 8004674:	4619      	mov	r1, r3
 8004676:	4610      	mov	r0, r2
 8004678:	f000 f9ce 	bl	8004a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d001      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e04e      	b.n	800478e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a23      	ldr	r2, [pc, #140]	; (800479c <HAL_TIM_Base_Start_IT+0xc4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d022      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0x80>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471a:	d01d      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0x80>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a1f      	ldr	r2, [pc, #124]	; (80047a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d018      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0x80>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1e      	ldr	r2, [pc, #120]	; (80047a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d013      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0x80>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1c      	ldr	r2, [pc, #112]	; (80047a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00e      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0x80>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1b      	ldr	r2, [pc, #108]	; (80047ac <HAL_TIM_Base_Start_IT+0xd4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d009      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0x80>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0x80>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a18      	ldr	r2, [pc, #96]	; (80047b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d111      	bne.n	800477c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b06      	cmp	r3, #6
 8004768:	d010      	beq.n	800478c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477a:	e007      	b.n	800478c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40010000 	.word	0x40010000
 80047a0:	40000400 	.word	0x40000400
 80047a4:	40000800 	.word	0x40000800
 80047a8:	40000c00 	.word	0x40000c00
 80047ac:	40010400 	.word	0x40010400
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40001800 	.word	0x40001800

080047b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d122      	bne.n	8004814 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d11b      	bne.n	8004814 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f06f 0202 	mvn.w	r2, #2
 80047e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f8ee 	bl	80049dc <HAL_TIM_IC_CaptureCallback>
 8004800:	e005      	b.n	800480e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f8e0 	bl	80049c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f8f1 	bl	80049f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b04      	cmp	r3, #4
 8004820:	d122      	bne.n	8004868 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b04      	cmp	r3, #4
 800482e:	d11b      	bne.n	8004868 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0204 	mvn.w	r2, #4
 8004838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f8c4 	bl	80049dc <HAL_TIM_IC_CaptureCallback>
 8004854:	e005      	b.n	8004862 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f8b6 	bl	80049c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f8c7 	bl	80049f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b08      	cmp	r3, #8
 8004874:	d122      	bne.n	80048bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b08      	cmp	r3, #8
 8004882:	d11b      	bne.n	80048bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f06f 0208 	mvn.w	r2, #8
 800488c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2204      	movs	r2, #4
 8004892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f89a 	bl	80049dc <HAL_TIM_IC_CaptureCallback>
 80048a8:	e005      	b.n	80048b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f88c 	bl	80049c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f89d 	bl	80049f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	2b10      	cmp	r3, #16
 80048c8:	d122      	bne.n	8004910 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b10      	cmp	r3, #16
 80048d6:	d11b      	bne.n	8004910 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0210 	mvn.w	r2, #16
 80048e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2208      	movs	r2, #8
 80048e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f870 	bl	80049dc <HAL_TIM_IC_CaptureCallback>
 80048fc:	e005      	b.n	800490a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f862 	bl	80049c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f873 	bl	80049f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b01      	cmp	r3, #1
 800491c:	d10e      	bne.n	800493c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b01      	cmp	r3, #1
 800492a:	d107      	bne.n	800493c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f06f 0201 	mvn.w	r2, #1
 8004934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fc fe46 	bl	80015c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004946:	2b80      	cmp	r3, #128	; 0x80
 8004948:	d10e      	bne.n	8004968 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004954:	2b80      	cmp	r3, #128	; 0x80
 8004956:	d107      	bne.n	8004968 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f902 	bl	8004b6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004972:	2b40      	cmp	r3, #64	; 0x40
 8004974:	d10e      	bne.n	8004994 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004980:	2b40      	cmp	r3, #64	; 0x40
 8004982:	d107      	bne.n	8004994 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800498c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f838 	bl	8004a04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d10e      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d107      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0220 	mvn.w	r2, #32
 80049b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f8cc 	bl	8004b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049c0:	bf00      	nop
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a40      	ldr	r2, [pc, #256]	; (8004b2c <TIM_Base_SetConfig+0x114>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d013      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a36:	d00f      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a3d      	ldr	r2, [pc, #244]	; (8004b30 <TIM_Base_SetConfig+0x118>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00b      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a3c      	ldr	r2, [pc, #240]	; (8004b34 <TIM_Base_SetConfig+0x11c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d007      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a3b      	ldr	r2, [pc, #236]	; (8004b38 <TIM_Base_SetConfig+0x120>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a3a      	ldr	r2, [pc, #232]	; (8004b3c <TIM_Base_SetConfig+0x124>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d108      	bne.n	8004a6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a2f      	ldr	r2, [pc, #188]	; (8004b2c <TIM_Base_SetConfig+0x114>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d02b      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a78:	d027      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a2c      	ldr	r2, [pc, #176]	; (8004b30 <TIM_Base_SetConfig+0x118>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d023      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a2b      	ldr	r2, [pc, #172]	; (8004b34 <TIM_Base_SetConfig+0x11c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d01f      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a2a      	ldr	r2, [pc, #168]	; (8004b38 <TIM_Base_SetConfig+0x120>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d01b      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a29      	ldr	r2, [pc, #164]	; (8004b3c <TIM_Base_SetConfig+0x124>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d017      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a28      	ldr	r2, [pc, #160]	; (8004b40 <TIM_Base_SetConfig+0x128>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a27      	ldr	r2, [pc, #156]	; (8004b44 <TIM_Base_SetConfig+0x12c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00f      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a26      	ldr	r2, [pc, #152]	; (8004b48 <TIM_Base_SetConfig+0x130>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00b      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a25      	ldr	r2, [pc, #148]	; (8004b4c <TIM_Base_SetConfig+0x134>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d007      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a24      	ldr	r2, [pc, #144]	; (8004b50 <TIM_Base_SetConfig+0x138>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d003      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a23      	ldr	r2, [pc, #140]	; (8004b54 <TIM_Base_SetConfig+0x13c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d108      	bne.n	8004adc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a0a      	ldr	r2, [pc, #40]	; (8004b2c <TIM_Base_SetConfig+0x114>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d003      	beq.n	8004b10 <TIM_Base_SetConfig+0xf8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a0c      	ldr	r2, [pc, #48]	; (8004b3c <TIM_Base_SetConfig+0x124>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d103      	bne.n	8004b18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	615a      	str	r2, [r3, #20]
}
 8004b1e:	bf00      	nop
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40010000 	.word	0x40010000
 8004b30:	40000400 	.word	0x40000400
 8004b34:	40000800 	.word	0x40000800
 8004b38:	40000c00 	.word	0x40000c00
 8004b3c:	40010400 	.word	0x40010400
 8004b40:	40014000 	.word	0x40014000
 8004b44:	40014400 	.word	0x40014400
 8004b48:	40014800 	.word	0x40014800
 8004b4c:	40001800 	.word	0x40001800
 8004b50:	40001c00 	.word	0x40001c00
 8004b54:	40002000 	.word	0x40002000

08004b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e03f      	b.n	8004c12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fc ffc4 	bl	8001b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2224      	movs	r2, #36	; 0x24
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f929 	bl	8004e1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004be8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b08a      	sub	sp, #40	; 0x28
 8004c1e:	af02      	add	r7, sp, #8
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	603b      	str	r3, [r7, #0]
 8004c26:	4613      	mov	r3, r2
 8004c28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d17c      	bne.n	8004d34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_UART_Transmit+0x2c>
 8004c40:	88fb      	ldrh	r3, [r7, #6]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e075      	b.n	8004d36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_UART_Transmit+0x3e>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e06e      	b.n	8004d36 <HAL_UART_Transmit+0x11c>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2221      	movs	r2, #33	; 0x21
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c6e:	f7fd f979 	bl	8001f64 <HAL_GetTick>
 8004c72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	88fa      	ldrh	r2, [r7, #6]
 8004c78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	88fa      	ldrh	r2, [r7, #6]
 8004c7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c88:	d108      	bne.n	8004c9c <HAL_UART_Transmit+0x82>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d104      	bne.n	8004c9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	e003      	b.n	8004ca4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004cac:	e02a      	b.n	8004d04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2180      	movs	r1, #128	; 0x80
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 f840 	bl	8004d3e <UART_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e036      	b.n	8004d36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10b      	bne.n	8004ce6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	3302      	adds	r3, #2
 8004ce2:	61bb      	str	r3, [r7, #24]
 8004ce4:	e007      	b.n	8004cf6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	781a      	ldrb	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1cf      	bne.n	8004cae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2200      	movs	r2, #0
 8004d16:	2140      	movs	r1, #64	; 0x40
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 f810 	bl	8004d3e <UART_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e006      	b.n	8004d36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	e000      	b.n	8004d36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d34:	2302      	movs	r3, #2
  }
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b090      	sub	sp, #64	; 0x40
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	603b      	str	r3, [r7, #0]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4e:	e050      	b.n	8004df2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d56:	d04c      	beq.n	8004df2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x30>
 8004d5e:	f7fd f901 	bl	8001f64 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d241      	bcs.n	8004df2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	330c      	adds	r3, #12
 8004d74:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	330c      	adds	r3, #12
 8004d8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d8e:	637a      	str	r2, [r7, #52]	; 0x34
 8004d90:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e5      	bne.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3314      	adds	r3, #20
 8004da8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	613b      	str	r3, [r7, #16]
   return(result);
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f023 0301 	bic.w	r3, r3, #1
 8004db8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3314      	adds	r3, #20
 8004dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dc2:	623a      	str	r2, [r7, #32]
 8004dc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	69f9      	ldr	r1, [r7, #28]
 8004dc8:	6a3a      	ldr	r2, [r7, #32]
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e5      	bne.n	8004da2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e00f      	b.n	8004e12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	bf0c      	ite	eq
 8004e02:	2301      	moveq	r3, #1
 8004e04:	2300      	movne	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	79fb      	ldrb	r3, [r7, #7]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d09f      	beq.n	8004d50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3740      	adds	r7, #64	; 0x40
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e20:	b0c0      	sub	sp, #256	; 0x100
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e38:	68d9      	ldr	r1, [r3, #12]
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	ea40 0301 	orr.w	r3, r0, r1
 8004e44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e74:	f021 010c 	bic.w	r1, r1, #12
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e82:	430b      	orrs	r3, r1
 8004e84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e96:	6999      	ldr	r1, [r3, #24]
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	ea40 0301 	orr.w	r3, r0, r1
 8004ea2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4b8f      	ldr	r3, [pc, #572]	; (80050e8 <UART_SetConfig+0x2cc>)
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d005      	beq.n	8004ebc <UART_SetConfig+0xa0>
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4b8d      	ldr	r3, [pc, #564]	; (80050ec <UART_SetConfig+0x2d0>)
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d104      	bne.n	8004ec6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ebc:	f7ff fba8 	bl	8004610 <HAL_RCC_GetPCLK2Freq>
 8004ec0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ec4:	e003      	b.n	8004ece <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ec6:	f7ff fb8f 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8004eca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed8:	f040 810c 	bne.w	80050f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ee6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004eea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004eee:	4622      	mov	r2, r4
 8004ef0:	462b      	mov	r3, r5
 8004ef2:	1891      	adds	r1, r2, r2
 8004ef4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ef6:	415b      	adcs	r3, r3
 8004ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004efa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004efe:	4621      	mov	r1, r4
 8004f00:	eb12 0801 	adds.w	r8, r2, r1
 8004f04:	4629      	mov	r1, r5
 8004f06:	eb43 0901 	adc.w	r9, r3, r1
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f1e:	4690      	mov	r8, r2
 8004f20:	4699      	mov	r9, r3
 8004f22:	4623      	mov	r3, r4
 8004f24:	eb18 0303 	adds.w	r3, r8, r3
 8004f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f2c:	462b      	mov	r3, r5
 8004f2e:	eb49 0303 	adc.w	r3, r9, r3
 8004f32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	18db      	adds	r3, r3, r3
 8004f4e:	653b      	str	r3, [r7, #80]	; 0x50
 8004f50:	4613      	mov	r3, r2
 8004f52:	eb42 0303 	adc.w	r3, r2, r3
 8004f56:	657b      	str	r3, [r7, #84]	; 0x54
 8004f58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f60:	f7fb fe72 	bl	8000c48 <__aeabi_uldivmod>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4b61      	ldr	r3, [pc, #388]	; (80050f0 <UART_SetConfig+0x2d4>)
 8004f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	011c      	lsls	r4, r3, #4
 8004f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f84:	4642      	mov	r2, r8
 8004f86:	464b      	mov	r3, r9
 8004f88:	1891      	adds	r1, r2, r2
 8004f8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f8c:	415b      	adcs	r3, r3
 8004f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f94:	4641      	mov	r1, r8
 8004f96:	eb12 0a01 	adds.w	sl, r2, r1
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	eb43 0b01 	adc.w	fp, r3, r1
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fb4:	4692      	mov	sl, r2
 8004fb6:	469b      	mov	fp, r3
 8004fb8:	4643      	mov	r3, r8
 8004fba:	eb1a 0303 	adds.w	r3, sl, r3
 8004fbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	eb4b 0303 	adc.w	r3, fp, r3
 8004fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004fdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	18db      	adds	r3, r3, r3
 8004fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	eb42 0303 	adc.w	r3, r2, r3
 8004fec:	647b      	str	r3, [r7, #68]	; 0x44
 8004fee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ff2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ff6:	f7fb fe27 	bl	8000c48 <__aeabi_uldivmod>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4611      	mov	r1, r2
 8005000:	4b3b      	ldr	r3, [pc, #236]	; (80050f0 <UART_SetConfig+0x2d4>)
 8005002:	fba3 2301 	umull	r2, r3, r3, r1
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	2264      	movs	r2, #100	; 0x64
 800500a:	fb02 f303 	mul.w	r3, r2, r3
 800500e:	1acb      	subs	r3, r1, r3
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005016:	4b36      	ldr	r3, [pc, #216]	; (80050f0 <UART_SetConfig+0x2d4>)
 8005018:	fba3 2302 	umull	r2, r3, r3, r2
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005024:	441c      	add	r4, r3
 8005026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800502a:	2200      	movs	r2, #0
 800502c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005030:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005034:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005038:	4642      	mov	r2, r8
 800503a:	464b      	mov	r3, r9
 800503c:	1891      	adds	r1, r2, r2
 800503e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005040:	415b      	adcs	r3, r3
 8005042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005044:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005048:	4641      	mov	r1, r8
 800504a:	1851      	adds	r1, r2, r1
 800504c:	6339      	str	r1, [r7, #48]	; 0x30
 800504e:	4649      	mov	r1, r9
 8005050:	414b      	adcs	r3, r1
 8005052:	637b      	str	r3, [r7, #52]	; 0x34
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005060:	4659      	mov	r1, fp
 8005062:	00cb      	lsls	r3, r1, #3
 8005064:	4651      	mov	r1, sl
 8005066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800506a:	4651      	mov	r1, sl
 800506c:	00ca      	lsls	r2, r1, #3
 800506e:	4610      	mov	r0, r2
 8005070:	4619      	mov	r1, r3
 8005072:	4603      	mov	r3, r0
 8005074:	4642      	mov	r2, r8
 8005076:	189b      	adds	r3, r3, r2
 8005078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800507c:	464b      	mov	r3, r9
 800507e:	460a      	mov	r2, r1
 8005080:	eb42 0303 	adc.w	r3, r2, r3
 8005084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005094:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005098:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800509c:	460b      	mov	r3, r1
 800509e:	18db      	adds	r3, r3, r3
 80050a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a2:	4613      	mov	r3, r2
 80050a4:	eb42 0303 	adc.w	r3, r2, r3
 80050a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050b2:	f7fb fdc9 	bl	8000c48 <__aeabi_uldivmod>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4b0d      	ldr	r3, [pc, #52]	; (80050f0 <UART_SetConfig+0x2d4>)
 80050bc:	fba3 1302 	umull	r1, r3, r3, r2
 80050c0:	095b      	lsrs	r3, r3, #5
 80050c2:	2164      	movs	r1, #100	; 0x64
 80050c4:	fb01 f303 	mul.w	r3, r1, r3
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	3332      	adds	r3, #50	; 0x32
 80050ce:	4a08      	ldr	r2, [pc, #32]	; (80050f0 <UART_SetConfig+0x2d4>)
 80050d0:	fba2 2303 	umull	r2, r3, r2, r3
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	f003 0207 	and.w	r2, r3, #7
 80050da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4422      	add	r2, r4
 80050e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050e4:	e105      	b.n	80052f2 <UART_SetConfig+0x4d6>
 80050e6:	bf00      	nop
 80050e8:	40011000 	.word	0x40011000
 80050ec:	40011400 	.word	0x40011400
 80050f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050f8:	2200      	movs	r2, #0
 80050fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005102:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005106:	4642      	mov	r2, r8
 8005108:	464b      	mov	r3, r9
 800510a:	1891      	adds	r1, r2, r2
 800510c:	6239      	str	r1, [r7, #32]
 800510e:	415b      	adcs	r3, r3
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
 8005112:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005116:	4641      	mov	r1, r8
 8005118:	1854      	adds	r4, r2, r1
 800511a:	4649      	mov	r1, r9
 800511c:	eb43 0501 	adc.w	r5, r3, r1
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	00eb      	lsls	r3, r5, #3
 800512a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800512e:	00e2      	lsls	r2, r4, #3
 8005130:	4614      	mov	r4, r2
 8005132:	461d      	mov	r5, r3
 8005134:	4643      	mov	r3, r8
 8005136:	18e3      	adds	r3, r4, r3
 8005138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800513c:	464b      	mov	r3, r9
 800513e:	eb45 0303 	adc.w	r3, r5, r3
 8005142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005152:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005162:	4629      	mov	r1, r5
 8005164:	008b      	lsls	r3, r1, #2
 8005166:	4621      	mov	r1, r4
 8005168:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800516c:	4621      	mov	r1, r4
 800516e:	008a      	lsls	r2, r1, #2
 8005170:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005174:	f7fb fd68 	bl	8000c48 <__aeabi_uldivmod>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4b60      	ldr	r3, [pc, #384]	; (8005300 <UART_SetConfig+0x4e4>)
 800517e:	fba3 2302 	umull	r2, r3, r3, r2
 8005182:	095b      	lsrs	r3, r3, #5
 8005184:	011c      	lsls	r4, r3, #4
 8005186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800518a:	2200      	movs	r2, #0
 800518c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005190:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005194:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005198:	4642      	mov	r2, r8
 800519a:	464b      	mov	r3, r9
 800519c:	1891      	adds	r1, r2, r2
 800519e:	61b9      	str	r1, [r7, #24]
 80051a0:	415b      	adcs	r3, r3
 80051a2:	61fb      	str	r3, [r7, #28]
 80051a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051a8:	4641      	mov	r1, r8
 80051aa:	1851      	adds	r1, r2, r1
 80051ac:	6139      	str	r1, [r7, #16]
 80051ae:	4649      	mov	r1, r9
 80051b0:	414b      	adcs	r3, r1
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051c0:	4659      	mov	r1, fp
 80051c2:	00cb      	lsls	r3, r1, #3
 80051c4:	4651      	mov	r1, sl
 80051c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ca:	4651      	mov	r1, sl
 80051cc:	00ca      	lsls	r2, r1, #3
 80051ce:	4610      	mov	r0, r2
 80051d0:	4619      	mov	r1, r3
 80051d2:	4603      	mov	r3, r0
 80051d4:	4642      	mov	r2, r8
 80051d6:	189b      	adds	r3, r3, r2
 80051d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051dc:	464b      	mov	r3, r9
 80051de:	460a      	mov	r2, r1
 80051e0:	eb42 0303 	adc.w	r3, r2, r3
 80051e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80051f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005200:	4649      	mov	r1, r9
 8005202:	008b      	lsls	r3, r1, #2
 8005204:	4641      	mov	r1, r8
 8005206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800520a:	4641      	mov	r1, r8
 800520c:	008a      	lsls	r2, r1, #2
 800520e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005212:	f7fb fd19 	bl	8000c48 <__aeabi_uldivmod>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4b39      	ldr	r3, [pc, #228]	; (8005300 <UART_SetConfig+0x4e4>)
 800521c:	fba3 1302 	umull	r1, r3, r3, r2
 8005220:	095b      	lsrs	r3, r3, #5
 8005222:	2164      	movs	r1, #100	; 0x64
 8005224:	fb01 f303 	mul.w	r3, r1, r3
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	3332      	adds	r3, #50	; 0x32
 800522e:	4a34      	ldr	r2, [pc, #208]	; (8005300 <UART_SetConfig+0x4e4>)
 8005230:	fba2 2303 	umull	r2, r3, r2, r3
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800523a:	441c      	add	r4, r3
 800523c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005240:	2200      	movs	r2, #0
 8005242:	673b      	str	r3, [r7, #112]	; 0x70
 8005244:	677a      	str	r2, [r7, #116]	; 0x74
 8005246:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800524a:	4642      	mov	r2, r8
 800524c:	464b      	mov	r3, r9
 800524e:	1891      	adds	r1, r2, r2
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	415b      	adcs	r3, r3
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800525a:	4641      	mov	r1, r8
 800525c:	1851      	adds	r1, r2, r1
 800525e:	6039      	str	r1, [r7, #0]
 8005260:	4649      	mov	r1, r9
 8005262:	414b      	adcs	r3, r1
 8005264:	607b      	str	r3, [r7, #4]
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005272:	4659      	mov	r1, fp
 8005274:	00cb      	lsls	r3, r1, #3
 8005276:	4651      	mov	r1, sl
 8005278:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800527c:	4651      	mov	r1, sl
 800527e:	00ca      	lsls	r2, r1, #3
 8005280:	4610      	mov	r0, r2
 8005282:	4619      	mov	r1, r3
 8005284:	4603      	mov	r3, r0
 8005286:	4642      	mov	r2, r8
 8005288:	189b      	adds	r3, r3, r2
 800528a:	66bb      	str	r3, [r7, #104]	; 0x68
 800528c:	464b      	mov	r3, r9
 800528e:	460a      	mov	r2, r1
 8005290:	eb42 0303 	adc.w	r3, r2, r3
 8005294:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	663b      	str	r3, [r7, #96]	; 0x60
 80052a0:	667a      	str	r2, [r7, #100]	; 0x64
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80052ae:	4649      	mov	r1, r9
 80052b0:	008b      	lsls	r3, r1, #2
 80052b2:	4641      	mov	r1, r8
 80052b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052b8:	4641      	mov	r1, r8
 80052ba:	008a      	lsls	r2, r1, #2
 80052bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80052c0:	f7fb fcc2 	bl	8000c48 <__aeabi_uldivmod>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <UART_SetConfig+0x4e4>)
 80052ca:	fba3 1302 	umull	r1, r3, r3, r2
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	2164      	movs	r1, #100	; 0x64
 80052d2:	fb01 f303 	mul.w	r3, r1, r3
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	3332      	adds	r3, #50	; 0x32
 80052dc:	4a08      	ldr	r2, [pc, #32]	; (8005300 <UART_SetConfig+0x4e4>)
 80052de:	fba2 2303 	umull	r2, r3, r2, r3
 80052e2:	095b      	lsrs	r3, r3, #5
 80052e4:	f003 020f 	and.w	r2, r3, #15
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4422      	add	r2, r4
 80052f0:	609a      	str	r2, [r3, #8]
}
 80052f2:	bf00      	nop
 80052f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052f8:	46bd      	mov	sp, r7
 80052fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052fe:	bf00      	nop
 8005300:	51eb851f 	.word	0x51eb851f

08005304 <__errno>:
 8005304:	4b01      	ldr	r3, [pc, #4]	; (800530c <__errno+0x8>)
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	2000000c 	.word	0x2000000c

08005310 <__libc_init_array>:
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	4d0d      	ldr	r5, [pc, #52]	; (8005348 <__libc_init_array+0x38>)
 8005314:	4c0d      	ldr	r4, [pc, #52]	; (800534c <__libc_init_array+0x3c>)
 8005316:	1b64      	subs	r4, r4, r5
 8005318:	10a4      	asrs	r4, r4, #2
 800531a:	2600      	movs	r6, #0
 800531c:	42a6      	cmp	r6, r4
 800531e:	d109      	bne.n	8005334 <__libc_init_array+0x24>
 8005320:	4d0b      	ldr	r5, [pc, #44]	; (8005350 <__libc_init_array+0x40>)
 8005322:	4c0c      	ldr	r4, [pc, #48]	; (8005354 <__libc_init_array+0x44>)
 8005324:	f002 ff04 	bl	8008130 <_init>
 8005328:	1b64      	subs	r4, r4, r5
 800532a:	10a4      	asrs	r4, r4, #2
 800532c:	2600      	movs	r6, #0
 800532e:	42a6      	cmp	r6, r4
 8005330:	d105      	bne.n	800533e <__libc_init_array+0x2e>
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	f855 3b04 	ldr.w	r3, [r5], #4
 8005338:	4798      	blx	r3
 800533a:	3601      	adds	r6, #1
 800533c:	e7ee      	b.n	800531c <__libc_init_array+0xc>
 800533e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005342:	4798      	blx	r3
 8005344:	3601      	adds	r6, #1
 8005346:	e7f2      	b.n	800532e <__libc_init_array+0x1e>
 8005348:	0800857c 	.word	0x0800857c
 800534c:	0800857c 	.word	0x0800857c
 8005350:	0800857c 	.word	0x0800857c
 8005354:	08008580 	.word	0x08008580

08005358 <memset>:
 8005358:	4402      	add	r2, r0
 800535a:	4603      	mov	r3, r0
 800535c:	4293      	cmp	r3, r2
 800535e:	d100      	bne.n	8005362 <memset+0xa>
 8005360:	4770      	bx	lr
 8005362:	f803 1b01 	strb.w	r1, [r3], #1
 8005366:	e7f9      	b.n	800535c <memset+0x4>

08005368 <__cvt>:
 8005368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800536c:	ec55 4b10 	vmov	r4, r5, d0
 8005370:	2d00      	cmp	r5, #0
 8005372:	460e      	mov	r6, r1
 8005374:	4619      	mov	r1, r3
 8005376:	462b      	mov	r3, r5
 8005378:	bfbb      	ittet	lt
 800537a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800537e:	461d      	movlt	r5, r3
 8005380:	2300      	movge	r3, #0
 8005382:	232d      	movlt	r3, #45	; 0x2d
 8005384:	700b      	strb	r3, [r1, #0]
 8005386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005388:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800538c:	4691      	mov	r9, r2
 800538e:	f023 0820 	bic.w	r8, r3, #32
 8005392:	bfbc      	itt	lt
 8005394:	4622      	movlt	r2, r4
 8005396:	4614      	movlt	r4, r2
 8005398:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800539c:	d005      	beq.n	80053aa <__cvt+0x42>
 800539e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80053a2:	d100      	bne.n	80053a6 <__cvt+0x3e>
 80053a4:	3601      	adds	r6, #1
 80053a6:	2102      	movs	r1, #2
 80053a8:	e000      	b.n	80053ac <__cvt+0x44>
 80053aa:	2103      	movs	r1, #3
 80053ac:	ab03      	add	r3, sp, #12
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	ab02      	add	r3, sp, #8
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	ec45 4b10 	vmov	d0, r4, r5
 80053b8:	4653      	mov	r3, sl
 80053ba:	4632      	mov	r2, r6
 80053bc:	f000 fcec 	bl	8005d98 <_dtoa_r>
 80053c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80053c4:	4607      	mov	r7, r0
 80053c6:	d102      	bne.n	80053ce <__cvt+0x66>
 80053c8:	f019 0f01 	tst.w	r9, #1
 80053cc:	d022      	beq.n	8005414 <__cvt+0xac>
 80053ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053d2:	eb07 0906 	add.w	r9, r7, r6
 80053d6:	d110      	bne.n	80053fa <__cvt+0x92>
 80053d8:	783b      	ldrb	r3, [r7, #0]
 80053da:	2b30      	cmp	r3, #48	; 0x30
 80053dc:	d10a      	bne.n	80053f4 <__cvt+0x8c>
 80053de:	2200      	movs	r2, #0
 80053e0:	2300      	movs	r3, #0
 80053e2:	4620      	mov	r0, r4
 80053e4:	4629      	mov	r1, r5
 80053e6:	f7fb fb6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80053ea:	b918      	cbnz	r0, 80053f4 <__cvt+0x8c>
 80053ec:	f1c6 0601 	rsb	r6, r6, #1
 80053f0:	f8ca 6000 	str.w	r6, [sl]
 80053f4:	f8da 3000 	ldr.w	r3, [sl]
 80053f8:	4499      	add	r9, r3
 80053fa:	2200      	movs	r2, #0
 80053fc:	2300      	movs	r3, #0
 80053fe:	4620      	mov	r0, r4
 8005400:	4629      	mov	r1, r5
 8005402:	f7fb fb61 	bl	8000ac8 <__aeabi_dcmpeq>
 8005406:	b108      	cbz	r0, 800540c <__cvt+0xa4>
 8005408:	f8cd 900c 	str.w	r9, [sp, #12]
 800540c:	2230      	movs	r2, #48	; 0x30
 800540e:	9b03      	ldr	r3, [sp, #12]
 8005410:	454b      	cmp	r3, r9
 8005412:	d307      	bcc.n	8005424 <__cvt+0xbc>
 8005414:	9b03      	ldr	r3, [sp, #12]
 8005416:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005418:	1bdb      	subs	r3, r3, r7
 800541a:	4638      	mov	r0, r7
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	b004      	add	sp, #16
 8005420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005424:	1c59      	adds	r1, r3, #1
 8005426:	9103      	str	r1, [sp, #12]
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	e7f0      	b.n	800540e <__cvt+0xa6>

0800542c <__exponent>:
 800542c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800542e:	4603      	mov	r3, r0
 8005430:	2900      	cmp	r1, #0
 8005432:	bfb8      	it	lt
 8005434:	4249      	neglt	r1, r1
 8005436:	f803 2b02 	strb.w	r2, [r3], #2
 800543a:	bfb4      	ite	lt
 800543c:	222d      	movlt	r2, #45	; 0x2d
 800543e:	222b      	movge	r2, #43	; 0x2b
 8005440:	2909      	cmp	r1, #9
 8005442:	7042      	strb	r2, [r0, #1]
 8005444:	dd2a      	ble.n	800549c <__exponent+0x70>
 8005446:	f10d 0407 	add.w	r4, sp, #7
 800544a:	46a4      	mov	ip, r4
 800544c:	270a      	movs	r7, #10
 800544e:	46a6      	mov	lr, r4
 8005450:	460a      	mov	r2, r1
 8005452:	fb91 f6f7 	sdiv	r6, r1, r7
 8005456:	fb07 1516 	mls	r5, r7, r6, r1
 800545a:	3530      	adds	r5, #48	; 0x30
 800545c:	2a63      	cmp	r2, #99	; 0x63
 800545e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005462:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005466:	4631      	mov	r1, r6
 8005468:	dcf1      	bgt.n	800544e <__exponent+0x22>
 800546a:	3130      	adds	r1, #48	; 0x30
 800546c:	f1ae 0502 	sub.w	r5, lr, #2
 8005470:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005474:	1c44      	adds	r4, r0, #1
 8005476:	4629      	mov	r1, r5
 8005478:	4561      	cmp	r1, ip
 800547a:	d30a      	bcc.n	8005492 <__exponent+0x66>
 800547c:	f10d 0209 	add.w	r2, sp, #9
 8005480:	eba2 020e 	sub.w	r2, r2, lr
 8005484:	4565      	cmp	r5, ip
 8005486:	bf88      	it	hi
 8005488:	2200      	movhi	r2, #0
 800548a:	4413      	add	r3, r2
 800548c:	1a18      	subs	r0, r3, r0
 800548e:	b003      	add	sp, #12
 8005490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005492:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005496:	f804 2f01 	strb.w	r2, [r4, #1]!
 800549a:	e7ed      	b.n	8005478 <__exponent+0x4c>
 800549c:	2330      	movs	r3, #48	; 0x30
 800549e:	3130      	adds	r1, #48	; 0x30
 80054a0:	7083      	strb	r3, [r0, #2]
 80054a2:	70c1      	strb	r1, [r0, #3]
 80054a4:	1d03      	adds	r3, r0, #4
 80054a6:	e7f1      	b.n	800548c <__exponent+0x60>

080054a8 <_printf_float>:
 80054a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ac:	ed2d 8b02 	vpush	{d8}
 80054b0:	b08d      	sub	sp, #52	; 0x34
 80054b2:	460c      	mov	r4, r1
 80054b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80054b8:	4616      	mov	r6, r2
 80054ba:	461f      	mov	r7, r3
 80054bc:	4605      	mov	r5, r0
 80054be:	f001 fa59 	bl	8006974 <_localeconv_r>
 80054c2:	f8d0 a000 	ldr.w	sl, [r0]
 80054c6:	4650      	mov	r0, sl
 80054c8:	f7fa fe82 	bl	80001d0 <strlen>
 80054cc:	2300      	movs	r3, #0
 80054ce:	930a      	str	r3, [sp, #40]	; 0x28
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	9305      	str	r3, [sp, #20]
 80054d4:	f8d8 3000 	ldr.w	r3, [r8]
 80054d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80054dc:	3307      	adds	r3, #7
 80054de:	f023 0307 	bic.w	r3, r3, #7
 80054e2:	f103 0208 	add.w	r2, r3, #8
 80054e6:	f8c8 2000 	str.w	r2, [r8]
 80054ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80054f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80054f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80054fa:	9307      	str	r3, [sp, #28]
 80054fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8005500:	ee08 0a10 	vmov	s16, r0
 8005504:	4b9f      	ldr	r3, [pc, #636]	; (8005784 <_printf_float+0x2dc>)
 8005506:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800550a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800550e:	f7fb fb0d 	bl	8000b2c <__aeabi_dcmpun>
 8005512:	bb88      	cbnz	r0, 8005578 <_printf_float+0xd0>
 8005514:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005518:	4b9a      	ldr	r3, [pc, #616]	; (8005784 <_printf_float+0x2dc>)
 800551a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800551e:	f7fb fae7 	bl	8000af0 <__aeabi_dcmple>
 8005522:	bb48      	cbnz	r0, 8005578 <_printf_float+0xd0>
 8005524:	2200      	movs	r2, #0
 8005526:	2300      	movs	r3, #0
 8005528:	4640      	mov	r0, r8
 800552a:	4649      	mov	r1, r9
 800552c:	f7fb fad6 	bl	8000adc <__aeabi_dcmplt>
 8005530:	b110      	cbz	r0, 8005538 <_printf_float+0x90>
 8005532:	232d      	movs	r3, #45	; 0x2d
 8005534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005538:	4b93      	ldr	r3, [pc, #588]	; (8005788 <_printf_float+0x2e0>)
 800553a:	4894      	ldr	r0, [pc, #592]	; (800578c <_printf_float+0x2e4>)
 800553c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005540:	bf94      	ite	ls
 8005542:	4698      	movls	r8, r3
 8005544:	4680      	movhi	r8, r0
 8005546:	2303      	movs	r3, #3
 8005548:	6123      	str	r3, [r4, #16]
 800554a:	9b05      	ldr	r3, [sp, #20]
 800554c:	f023 0204 	bic.w	r2, r3, #4
 8005550:	6022      	str	r2, [r4, #0]
 8005552:	f04f 0900 	mov.w	r9, #0
 8005556:	9700      	str	r7, [sp, #0]
 8005558:	4633      	mov	r3, r6
 800555a:	aa0b      	add	r2, sp, #44	; 0x2c
 800555c:	4621      	mov	r1, r4
 800555e:	4628      	mov	r0, r5
 8005560:	f000 f9d8 	bl	8005914 <_printf_common>
 8005564:	3001      	adds	r0, #1
 8005566:	f040 8090 	bne.w	800568a <_printf_float+0x1e2>
 800556a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800556e:	b00d      	add	sp, #52	; 0x34
 8005570:	ecbd 8b02 	vpop	{d8}
 8005574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005578:	4642      	mov	r2, r8
 800557a:	464b      	mov	r3, r9
 800557c:	4640      	mov	r0, r8
 800557e:	4649      	mov	r1, r9
 8005580:	f7fb fad4 	bl	8000b2c <__aeabi_dcmpun>
 8005584:	b140      	cbz	r0, 8005598 <_printf_float+0xf0>
 8005586:	464b      	mov	r3, r9
 8005588:	2b00      	cmp	r3, #0
 800558a:	bfbc      	itt	lt
 800558c:	232d      	movlt	r3, #45	; 0x2d
 800558e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005592:	487f      	ldr	r0, [pc, #508]	; (8005790 <_printf_float+0x2e8>)
 8005594:	4b7f      	ldr	r3, [pc, #508]	; (8005794 <_printf_float+0x2ec>)
 8005596:	e7d1      	b.n	800553c <_printf_float+0x94>
 8005598:	6863      	ldr	r3, [r4, #4]
 800559a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800559e:	9206      	str	r2, [sp, #24]
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	d13f      	bne.n	8005624 <_printf_float+0x17c>
 80055a4:	2306      	movs	r3, #6
 80055a6:	6063      	str	r3, [r4, #4]
 80055a8:	9b05      	ldr	r3, [sp, #20]
 80055aa:	6861      	ldr	r1, [r4, #4]
 80055ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80055b0:	2300      	movs	r3, #0
 80055b2:	9303      	str	r3, [sp, #12]
 80055b4:	ab0a      	add	r3, sp, #40	; 0x28
 80055b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80055ba:	ab09      	add	r3, sp, #36	; 0x24
 80055bc:	ec49 8b10 	vmov	d0, r8, r9
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	6022      	str	r2, [r4, #0]
 80055c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80055c8:	4628      	mov	r0, r5
 80055ca:	f7ff fecd 	bl	8005368 <__cvt>
 80055ce:	9b06      	ldr	r3, [sp, #24]
 80055d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055d2:	2b47      	cmp	r3, #71	; 0x47
 80055d4:	4680      	mov	r8, r0
 80055d6:	d108      	bne.n	80055ea <_printf_float+0x142>
 80055d8:	1cc8      	adds	r0, r1, #3
 80055da:	db02      	blt.n	80055e2 <_printf_float+0x13a>
 80055dc:	6863      	ldr	r3, [r4, #4]
 80055de:	4299      	cmp	r1, r3
 80055e0:	dd41      	ble.n	8005666 <_printf_float+0x1be>
 80055e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80055e6:	fa5f fb8b 	uxtb.w	fp, fp
 80055ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80055ee:	d820      	bhi.n	8005632 <_printf_float+0x18a>
 80055f0:	3901      	subs	r1, #1
 80055f2:	465a      	mov	r2, fp
 80055f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80055f8:	9109      	str	r1, [sp, #36]	; 0x24
 80055fa:	f7ff ff17 	bl	800542c <__exponent>
 80055fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005600:	1813      	adds	r3, r2, r0
 8005602:	2a01      	cmp	r2, #1
 8005604:	4681      	mov	r9, r0
 8005606:	6123      	str	r3, [r4, #16]
 8005608:	dc02      	bgt.n	8005610 <_printf_float+0x168>
 800560a:	6822      	ldr	r2, [r4, #0]
 800560c:	07d2      	lsls	r2, r2, #31
 800560e:	d501      	bpl.n	8005614 <_printf_float+0x16c>
 8005610:	3301      	adds	r3, #1
 8005612:	6123      	str	r3, [r4, #16]
 8005614:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005618:	2b00      	cmp	r3, #0
 800561a:	d09c      	beq.n	8005556 <_printf_float+0xae>
 800561c:	232d      	movs	r3, #45	; 0x2d
 800561e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005622:	e798      	b.n	8005556 <_printf_float+0xae>
 8005624:	9a06      	ldr	r2, [sp, #24]
 8005626:	2a47      	cmp	r2, #71	; 0x47
 8005628:	d1be      	bne.n	80055a8 <_printf_float+0x100>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1bc      	bne.n	80055a8 <_printf_float+0x100>
 800562e:	2301      	movs	r3, #1
 8005630:	e7b9      	b.n	80055a6 <_printf_float+0xfe>
 8005632:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005636:	d118      	bne.n	800566a <_printf_float+0x1c2>
 8005638:	2900      	cmp	r1, #0
 800563a:	6863      	ldr	r3, [r4, #4]
 800563c:	dd0b      	ble.n	8005656 <_printf_float+0x1ae>
 800563e:	6121      	str	r1, [r4, #16]
 8005640:	b913      	cbnz	r3, 8005648 <_printf_float+0x1a0>
 8005642:	6822      	ldr	r2, [r4, #0]
 8005644:	07d0      	lsls	r0, r2, #31
 8005646:	d502      	bpl.n	800564e <_printf_float+0x1a6>
 8005648:	3301      	adds	r3, #1
 800564a:	440b      	add	r3, r1
 800564c:	6123      	str	r3, [r4, #16]
 800564e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005650:	f04f 0900 	mov.w	r9, #0
 8005654:	e7de      	b.n	8005614 <_printf_float+0x16c>
 8005656:	b913      	cbnz	r3, 800565e <_printf_float+0x1b6>
 8005658:	6822      	ldr	r2, [r4, #0]
 800565a:	07d2      	lsls	r2, r2, #31
 800565c:	d501      	bpl.n	8005662 <_printf_float+0x1ba>
 800565e:	3302      	adds	r3, #2
 8005660:	e7f4      	b.n	800564c <_printf_float+0x1a4>
 8005662:	2301      	movs	r3, #1
 8005664:	e7f2      	b.n	800564c <_printf_float+0x1a4>
 8005666:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800566a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800566c:	4299      	cmp	r1, r3
 800566e:	db05      	blt.n	800567c <_printf_float+0x1d4>
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	6121      	str	r1, [r4, #16]
 8005674:	07d8      	lsls	r0, r3, #31
 8005676:	d5ea      	bpl.n	800564e <_printf_float+0x1a6>
 8005678:	1c4b      	adds	r3, r1, #1
 800567a:	e7e7      	b.n	800564c <_printf_float+0x1a4>
 800567c:	2900      	cmp	r1, #0
 800567e:	bfd4      	ite	le
 8005680:	f1c1 0202 	rsble	r2, r1, #2
 8005684:	2201      	movgt	r2, #1
 8005686:	4413      	add	r3, r2
 8005688:	e7e0      	b.n	800564c <_printf_float+0x1a4>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	055a      	lsls	r2, r3, #21
 800568e:	d407      	bmi.n	80056a0 <_printf_float+0x1f8>
 8005690:	6923      	ldr	r3, [r4, #16]
 8005692:	4642      	mov	r2, r8
 8005694:	4631      	mov	r1, r6
 8005696:	4628      	mov	r0, r5
 8005698:	47b8      	blx	r7
 800569a:	3001      	adds	r0, #1
 800569c:	d12c      	bne.n	80056f8 <_printf_float+0x250>
 800569e:	e764      	b.n	800556a <_printf_float+0xc2>
 80056a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056a4:	f240 80e0 	bls.w	8005868 <_printf_float+0x3c0>
 80056a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056ac:	2200      	movs	r2, #0
 80056ae:	2300      	movs	r3, #0
 80056b0:	f7fb fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d034      	beq.n	8005722 <_printf_float+0x27a>
 80056b8:	4a37      	ldr	r2, [pc, #220]	; (8005798 <_printf_float+0x2f0>)
 80056ba:	2301      	movs	r3, #1
 80056bc:	4631      	mov	r1, r6
 80056be:	4628      	mov	r0, r5
 80056c0:	47b8      	blx	r7
 80056c2:	3001      	adds	r0, #1
 80056c4:	f43f af51 	beq.w	800556a <_printf_float+0xc2>
 80056c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056cc:	429a      	cmp	r2, r3
 80056ce:	db02      	blt.n	80056d6 <_printf_float+0x22e>
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	07d8      	lsls	r0, r3, #31
 80056d4:	d510      	bpl.n	80056f8 <_printf_float+0x250>
 80056d6:	ee18 3a10 	vmov	r3, s16
 80056da:	4652      	mov	r2, sl
 80056dc:	4631      	mov	r1, r6
 80056de:	4628      	mov	r0, r5
 80056e0:	47b8      	blx	r7
 80056e2:	3001      	adds	r0, #1
 80056e4:	f43f af41 	beq.w	800556a <_printf_float+0xc2>
 80056e8:	f04f 0800 	mov.w	r8, #0
 80056ec:	f104 091a 	add.w	r9, r4, #26
 80056f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056f2:	3b01      	subs	r3, #1
 80056f4:	4543      	cmp	r3, r8
 80056f6:	dc09      	bgt.n	800570c <_printf_float+0x264>
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	079b      	lsls	r3, r3, #30
 80056fc:	f100 8105 	bmi.w	800590a <_printf_float+0x462>
 8005700:	68e0      	ldr	r0, [r4, #12]
 8005702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005704:	4298      	cmp	r0, r3
 8005706:	bfb8      	it	lt
 8005708:	4618      	movlt	r0, r3
 800570a:	e730      	b.n	800556e <_printf_float+0xc6>
 800570c:	2301      	movs	r3, #1
 800570e:	464a      	mov	r2, r9
 8005710:	4631      	mov	r1, r6
 8005712:	4628      	mov	r0, r5
 8005714:	47b8      	blx	r7
 8005716:	3001      	adds	r0, #1
 8005718:	f43f af27 	beq.w	800556a <_printf_float+0xc2>
 800571c:	f108 0801 	add.w	r8, r8, #1
 8005720:	e7e6      	b.n	80056f0 <_printf_float+0x248>
 8005722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005724:	2b00      	cmp	r3, #0
 8005726:	dc39      	bgt.n	800579c <_printf_float+0x2f4>
 8005728:	4a1b      	ldr	r2, [pc, #108]	; (8005798 <_printf_float+0x2f0>)
 800572a:	2301      	movs	r3, #1
 800572c:	4631      	mov	r1, r6
 800572e:	4628      	mov	r0, r5
 8005730:	47b8      	blx	r7
 8005732:	3001      	adds	r0, #1
 8005734:	f43f af19 	beq.w	800556a <_printf_float+0xc2>
 8005738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800573c:	4313      	orrs	r3, r2
 800573e:	d102      	bne.n	8005746 <_printf_float+0x29e>
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	07d9      	lsls	r1, r3, #31
 8005744:	d5d8      	bpl.n	80056f8 <_printf_float+0x250>
 8005746:	ee18 3a10 	vmov	r3, s16
 800574a:	4652      	mov	r2, sl
 800574c:	4631      	mov	r1, r6
 800574e:	4628      	mov	r0, r5
 8005750:	47b8      	blx	r7
 8005752:	3001      	adds	r0, #1
 8005754:	f43f af09 	beq.w	800556a <_printf_float+0xc2>
 8005758:	f04f 0900 	mov.w	r9, #0
 800575c:	f104 0a1a 	add.w	sl, r4, #26
 8005760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005762:	425b      	negs	r3, r3
 8005764:	454b      	cmp	r3, r9
 8005766:	dc01      	bgt.n	800576c <_printf_float+0x2c4>
 8005768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800576a:	e792      	b.n	8005692 <_printf_float+0x1ea>
 800576c:	2301      	movs	r3, #1
 800576e:	4652      	mov	r2, sl
 8005770:	4631      	mov	r1, r6
 8005772:	4628      	mov	r0, r5
 8005774:	47b8      	blx	r7
 8005776:	3001      	adds	r0, #1
 8005778:	f43f aef7 	beq.w	800556a <_printf_float+0xc2>
 800577c:	f109 0901 	add.w	r9, r9, #1
 8005780:	e7ee      	b.n	8005760 <_printf_float+0x2b8>
 8005782:	bf00      	nop
 8005784:	7fefffff 	.word	0x7fefffff
 8005788:	080081a0 	.word	0x080081a0
 800578c:	080081a4 	.word	0x080081a4
 8005790:	080081ac 	.word	0x080081ac
 8005794:	080081a8 	.word	0x080081a8
 8005798:	080081b0 	.word	0x080081b0
 800579c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800579e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057a0:	429a      	cmp	r2, r3
 80057a2:	bfa8      	it	ge
 80057a4:	461a      	movge	r2, r3
 80057a6:	2a00      	cmp	r2, #0
 80057a8:	4691      	mov	r9, r2
 80057aa:	dc37      	bgt.n	800581c <_printf_float+0x374>
 80057ac:	f04f 0b00 	mov.w	fp, #0
 80057b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057b4:	f104 021a 	add.w	r2, r4, #26
 80057b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057ba:	9305      	str	r3, [sp, #20]
 80057bc:	eba3 0309 	sub.w	r3, r3, r9
 80057c0:	455b      	cmp	r3, fp
 80057c2:	dc33      	bgt.n	800582c <_printf_float+0x384>
 80057c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057c8:	429a      	cmp	r2, r3
 80057ca:	db3b      	blt.n	8005844 <_printf_float+0x39c>
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	07da      	lsls	r2, r3, #31
 80057d0:	d438      	bmi.n	8005844 <_printf_float+0x39c>
 80057d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057d4:	9a05      	ldr	r2, [sp, #20]
 80057d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057d8:	1a9a      	subs	r2, r3, r2
 80057da:	eba3 0901 	sub.w	r9, r3, r1
 80057de:	4591      	cmp	r9, r2
 80057e0:	bfa8      	it	ge
 80057e2:	4691      	movge	r9, r2
 80057e4:	f1b9 0f00 	cmp.w	r9, #0
 80057e8:	dc35      	bgt.n	8005856 <_printf_float+0x3ae>
 80057ea:	f04f 0800 	mov.w	r8, #0
 80057ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057f2:	f104 0a1a 	add.w	sl, r4, #26
 80057f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	eba3 0309 	sub.w	r3, r3, r9
 8005800:	4543      	cmp	r3, r8
 8005802:	f77f af79 	ble.w	80056f8 <_printf_float+0x250>
 8005806:	2301      	movs	r3, #1
 8005808:	4652      	mov	r2, sl
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	f43f aeaa 	beq.w	800556a <_printf_float+0xc2>
 8005816:	f108 0801 	add.w	r8, r8, #1
 800581a:	e7ec      	b.n	80057f6 <_printf_float+0x34e>
 800581c:	4613      	mov	r3, r2
 800581e:	4631      	mov	r1, r6
 8005820:	4642      	mov	r2, r8
 8005822:	4628      	mov	r0, r5
 8005824:	47b8      	blx	r7
 8005826:	3001      	adds	r0, #1
 8005828:	d1c0      	bne.n	80057ac <_printf_float+0x304>
 800582a:	e69e      	b.n	800556a <_printf_float+0xc2>
 800582c:	2301      	movs	r3, #1
 800582e:	4631      	mov	r1, r6
 8005830:	4628      	mov	r0, r5
 8005832:	9205      	str	r2, [sp, #20]
 8005834:	47b8      	blx	r7
 8005836:	3001      	adds	r0, #1
 8005838:	f43f ae97 	beq.w	800556a <_printf_float+0xc2>
 800583c:	9a05      	ldr	r2, [sp, #20]
 800583e:	f10b 0b01 	add.w	fp, fp, #1
 8005842:	e7b9      	b.n	80057b8 <_printf_float+0x310>
 8005844:	ee18 3a10 	vmov	r3, s16
 8005848:	4652      	mov	r2, sl
 800584a:	4631      	mov	r1, r6
 800584c:	4628      	mov	r0, r5
 800584e:	47b8      	blx	r7
 8005850:	3001      	adds	r0, #1
 8005852:	d1be      	bne.n	80057d2 <_printf_float+0x32a>
 8005854:	e689      	b.n	800556a <_printf_float+0xc2>
 8005856:	9a05      	ldr	r2, [sp, #20]
 8005858:	464b      	mov	r3, r9
 800585a:	4442      	add	r2, r8
 800585c:	4631      	mov	r1, r6
 800585e:	4628      	mov	r0, r5
 8005860:	47b8      	blx	r7
 8005862:	3001      	adds	r0, #1
 8005864:	d1c1      	bne.n	80057ea <_printf_float+0x342>
 8005866:	e680      	b.n	800556a <_printf_float+0xc2>
 8005868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800586a:	2a01      	cmp	r2, #1
 800586c:	dc01      	bgt.n	8005872 <_printf_float+0x3ca>
 800586e:	07db      	lsls	r3, r3, #31
 8005870:	d538      	bpl.n	80058e4 <_printf_float+0x43c>
 8005872:	2301      	movs	r3, #1
 8005874:	4642      	mov	r2, r8
 8005876:	4631      	mov	r1, r6
 8005878:	4628      	mov	r0, r5
 800587a:	47b8      	blx	r7
 800587c:	3001      	adds	r0, #1
 800587e:	f43f ae74 	beq.w	800556a <_printf_float+0xc2>
 8005882:	ee18 3a10 	vmov	r3, s16
 8005886:	4652      	mov	r2, sl
 8005888:	4631      	mov	r1, r6
 800588a:	4628      	mov	r0, r5
 800588c:	47b8      	blx	r7
 800588e:	3001      	adds	r0, #1
 8005890:	f43f ae6b 	beq.w	800556a <_printf_float+0xc2>
 8005894:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005898:	2200      	movs	r2, #0
 800589a:	2300      	movs	r3, #0
 800589c:	f7fb f914 	bl	8000ac8 <__aeabi_dcmpeq>
 80058a0:	b9d8      	cbnz	r0, 80058da <_printf_float+0x432>
 80058a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058a4:	f108 0201 	add.w	r2, r8, #1
 80058a8:	3b01      	subs	r3, #1
 80058aa:	4631      	mov	r1, r6
 80058ac:	4628      	mov	r0, r5
 80058ae:	47b8      	blx	r7
 80058b0:	3001      	adds	r0, #1
 80058b2:	d10e      	bne.n	80058d2 <_printf_float+0x42a>
 80058b4:	e659      	b.n	800556a <_printf_float+0xc2>
 80058b6:	2301      	movs	r3, #1
 80058b8:	4652      	mov	r2, sl
 80058ba:	4631      	mov	r1, r6
 80058bc:	4628      	mov	r0, r5
 80058be:	47b8      	blx	r7
 80058c0:	3001      	adds	r0, #1
 80058c2:	f43f ae52 	beq.w	800556a <_printf_float+0xc2>
 80058c6:	f108 0801 	add.w	r8, r8, #1
 80058ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058cc:	3b01      	subs	r3, #1
 80058ce:	4543      	cmp	r3, r8
 80058d0:	dcf1      	bgt.n	80058b6 <_printf_float+0x40e>
 80058d2:	464b      	mov	r3, r9
 80058d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80058d8:	e6dc      	b.n	8005694 <_printf_float+0x1ec>
 80058da:	f04f 0800 	mov.w	r8, #0
 80058de:	f104 0a1a 	add.w	sl, r4, #26
 80058e2:	e7f2      	b.n	80058ca <_printf_float+0x422>
 80058e4:	2301      	movs	r3, #1
 80058e6:	4642      	mov	r2, r8
 80058e8:	e7df      	b.n	80058aa <_printf_float+0x402>
 80058ea:	2301      	movs	r3, #1
 80058ec:	464a      	mov	r2, r9
 80058ee:	4631      	mov	r1, r6
 80058f0:	4628      	mov	r0, r5
 80058f2:	47b8      	blx	r7
 80058f4:	3001      	adds	r0, #1
 80058f6:	f43f ae38 	beq.w	800556a <_printf_float+0xc2>
 80058fa:	f108 0801 	add.w	r8, r8, #1
 80058fe:	68e3      	ldr	r3, [r4, #12]
 8005900:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005902:	1a5b      	subs	r3, r3, r1
 8005904:	4543      	cmp	r3, r8
 8005906:	dcf0      	bgt.n	80058ea <_printf_float+0x442>
 8005908:	e6fa      	b.n	8005700 <_printf_float+0x258>
 800590a:	f04f 0800 	mov.w	r8, #0
 800590e:	f104 0919 	add.w	r9, r4, #25
 8005912:	e7f4      	b.n	80058fe <_printf_float+0x456>

08005914 <_printf_common>:
 8005914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005918:	4616      	mov	r6, r2
 800591a:	4699      	mov	r9, r3
 800591c:	688a      	ldr	r2, [r1, #8]
 800591e:	690b      	ldr	r3, [r1, #16]
 8005920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005924:	4293      	cmp	r3, r2
 8005926:	bfb8      	it	lt
 8005928:	4613      	movlt	r3, r2
 800592a:	6033      	str	r3, [r6, #0]
 800592c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005930:	4607      	mov	r7, r0
 8005932:	460c      	mov	r4, r1
 8005934:	b10a      	cbz	r2, 800593a <_printf_common+0x26>
 8005936:	3301      	adds	r3, #1
 8005938:	6033      	str	r3, [r6, #0]
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	0699      	lsls	r1, r3, #26
 800593e:	bf42      	ittt	mi
 8005940:	6833      	ldrmi	r3, [r6, #0]
 8005942:	3302      	addmi	r3, #2
 8005944:	6033      	strmi	r3, [r6, #0]
 8005946:	6825      	ldr	r5, [r4, #0]
 8005948:	f015 0506 	ands.w	r5, r5, #6
 800594c:	d106      	bne.n	800595c <_printf_common+0x48>
 800594e:	f104 0a19 	add.w	sl, r4, #25
 8005952:	68e3      	ldr	r3, [r4, #12]
 8005954:	6832      	ldr	r2, [r6, #0]
 8005956:	1a9b      	subs	r3, r3, r2
 8005958:	42ab      	cmp	r3, r5
 800595a:	dc26      	bgt.n	80059aa <_printf_common+0x96>
 800595c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005960:	1e13      	subs	r3, r2, #0
 8005962:	6822      	ldr	r2, [r4, #0]
 8005964:	bf18      	it	ne
 8005966:	2301      	movne	r3, #1
 8005968:	0692      	lsls	r2, r2, #26
 800596a:	d42b      	bmi.n	80059c4 <_printf_common+0xb0>
 800596c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005970:	4649      	mov	r1, r9
 8005972:	4638      	mov	r0, r7
 8005974:	47c0      	blx	r8
 8005976:	3001      	adds	r0, #1
 8005978:	d01e      	beq.n	80059b8 <_printf_common+0xa4>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	68e5      	ldr	r5, [r4, #12]
 800597e:	6832      	ldr	r2, [r6, #0]
 8005980:	f003 0306 	and.w	r3, r3, #6
 8005984:	2b04      	cmp	r3, #4
 8005986:	bf08      	it	eq
 8005988:	1aad      	subeq	r5, r5, r2
 800598a:	68a3      	ldr	r3, [r4, #8]
 800598c:	6922      	ldr	r2, [r4, #16]
 800598e:	bf0c      	ite	eq
 8005990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005994:	2500      	movne	r5, #0
 8005996:	4293      	cmp	r3, r2
 8005998:	bfc4      	itt	gt
 800599a:	1a9b      	subgt	r3, r3, r2
 800599c:	18ed      	addgt	r5, r5, r3
 800599e:	2600      	movs	r6, #0
 80059a0:	341a      	adds	r4, #26
 80059a2:	42b5      	cmp	r5, r6
 80059a4:	d11a      	bne.n	80059dc <_printf_common+0xc8>
 80059a6:	2000      	movs	r0, #0
 80059a8:	e008      	b.n	80059bc <_printf_common+0xa8>
 80059aa:	2301      	movs	r3, #1
 80059ac:	4652      	mov	r2, sl
 80059ae:	4649      	mov	r1, r9
 80059b0:	4638      	mov	r0, r7
 80059b2:	47c0      	blx	r8
 80059b4:	3001      	adds	r0, #1
 80059b6:	d103      	bne.n	80059c0 <_printf_common+0xac>
 80059b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c0:	3501      	adds	r5, #1
 80059c2:	e7c6      	b.n	8005952 <_printf_common+0x3e>
 80059c4:	18e1      	adds	r1, r4, r3
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	2030      	movs	r0, #48	; 0x30
 80059ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059ce:	4422      	add	r2, r4
 80059d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059d8:	3302      	adds	r3, #2
 80059da:	e7c7      	b.n	800596c <_printf_common+0x58>
 80059dc:	2301      	movs	r3, #1
 80059de:	4622      	mov	r2, r4
 80059e0:	4649      	mov	r1, r9
 80059e2:	4638      	mov	r0, r7
 80059e4:	47c0      	blx	r8
 80059e6:	3001      	adds	r0, #1
 80059e8:	d0e6      	beq.n	80059b8 <_printf_common+0xa4>
 80059ea:	3601      	adds	r6, #1
 80059ec:	e7d9      	b.n	80059a2 <_printf_common+0x8e>
	...

080059f0 <_printf_i>:
 80059f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059f4:	7e0f      	ldrb	r7, [r1, #24]
 80059f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059f8:	2f78      	cmp	r7, #120	; 0x78
 80059fa:	4691      	mov	r9, r2
 80059fc:	4680      	mov	r8, r0
 80059fe:	460c      	mov	r4, r1
 8005a00:	469a      	mov	sl, r3
 8005a02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a06:	d807      	bhi.n	8005a18 <_printf_i+0x28>
 8005a08:	2f62      	cmp	r7, #98	; 0x62
 8005a0a:	d80a      	bhi.n	8005a22 <_printf_i+0x32>
 8005a0c:	2f00      	cmp	r7, #0
 8005a0e:	f000 80d8 	beq.w	8005bc2 <_printf_i+0x1d2>
 8005a12:	2f58      	cmp	r7, #88	; 0x58
 8005a14:	f000 80a3 	beq.w	8005b5e <_printf_i+0x16e>
 8005a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a20:	e03a      	b.n	8005a98 <_printf_i+0xa8>
 8005a22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a26:	2b15      	cmp	r3, #21
 8005a28:	d8f6      	bhi.n	8005a18 <_printf_i+0x28>
 8005a2a:	a101      	add	r1, pc, #4	; (adr r1, 8005a30 <_printf_i+0x40>)
 8005a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a30:	08005a89 	.word	0x08005a89
 8005a34:	08005a9d 	.word	0x08005a9d
 8005a38:	08005a19 	.word	0x08005a19
 8005a3c:	08005a19 	.word	0x08005a19
 8005a40:	08005a19 	.word	0x08005a19
 8005a44:	08005a19 	.word	0x08005a19
 8005a48:	08005a9d 	.word	0x08005a9d
 8005a4c:	08005a19 	.word	0x08005a19
 8005a50:	08005a19 	.word	0x08005a19
 8005a54:	08005a19 	.word	0x08005a19
 8005a58:	08005a19 	.word	0x08005a19
 8005a5c:	08005ba9 	.word	0x08005ba9
 8005a60:	08005acd 	.word	0x08005acd
 8005a64:	08005b8b 	.word	0x08005b8b
 8005a68:	08005a19 	.word	0x08005a19
 8005a6c:	08005a19 	.word	0x08005a19
 8005a70:	08005bcb 	.word	0x08005bcb
 8005a74:	08005a19 	.word	0x08005a19
 8005a78:	08005acd 	.word	0x08005acd
 8005a7c:	08005a19 	.word	0x08005a19
 8005a80:	08005a19 	.word	0x08005a19
 8005a84:	08005b93 	.word	0x08005b93
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	1d1a      	adds	r2, r3, #4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	602a      	str	r2, [r5, #0]
 8005a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0a3      	b.n	8005be4 <_printf_i+0x1f4>
 8005a9c:	6820      	ldr	r0, [r4, #0]
 8005a9e:	6829      	ldr	r1, [r5, #0]
 8005aa0:	0606      	lsls	r6, r0, #24
 8005aa2:	f101 0304 	add.w	r3, r1, #4
 8005aa6:	d50a      	bpl.n	8005abe <_printf_i+0xce>
 8005aa8:	680e      	ldr	r6, [r1, #0]
 8005aaa:	602b      	str	r3, [r5, #0]
 8005aac:	2e00      	cmp	r6, #0
 8005aae:	da03      	bge.n	8005ab8 <_printf_i+0xc8>
 8005ab0:	232d      	movs	r3, #45	; 0x2d
 8005ab2:	4276      	negs	r6, r6
 8005ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ab8:	485e      	ldr	r0, [pc, #376]	; (8005c34 <_printf_i+0x244>)
 8005aba:	230a      	movs	r3, #10
 8005abc:	e019      	b.n	8005af2 <_printf_i+0x102>
 8005abe:	680e      	ldr	r6, [r1, #0]
 8005ac0:	602b      	str	r3, [r5, #0]
 8005ac2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ac6:	bf18      	it	ne
 8005ac8:	b236      	sxthne	r6, r6
 8005aca:	e7ef      	b.n	8005aac <_printf_i+0xbc>
 8005acc:	682b      	ldr	r3, [r5, #0]
 8005ace:	6820      	ldr	r0, [r4, #0]
 8005ad0:	1d19      	adds	r1, r3, #4
 8005ad2:	6029      	str	r1, [r5, #0]
 8005ad4:	0601      	lsls	r1, r0, #24
 8005ad6:	d501      	bpl.n	8005adc <_printf_i+0xec>
 8005ad8:	681e      	ldr	r6, [r3, #0]
 8005ada:	e002      	b.n	8005ae2 <_printf_i+0xf2>
 8005adc:	0646      	lsls	r6, r0, #25
 8005ade:	d5fb      	bpl.n	8005ad8 <_printf_i+0xe8>
 8005ae0:	881e      	ldrh	r6, [r3, #0]
 8005ae2:	4854      	ldr	r0, [pc, #336]	; (8005c34 <_printf_i+0x244>)
 8005ae4:	2f6f      	cmp	r7, #111	; 0x6f
 8005ae6:	bf0c      	ite	eq
 8005ae8:	2308      	moveq	r3, #8
 8005aea:	230a      	movne	r3, #10
 8005aec:	2100      	movs	r1, #0
 8005aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005af2:	6865      	ldr	r5, [r4, #4]
 8005af4:	60a5      	str	r5, [r4, #8]
 8005af6:	2d00      	cmp	r5, #0
 8005af8:	bfa2      	ittt	ge
 8005afa:	6821      	ldrge	r1, [r4, #0]
 8005afc:	f021 0104 	bicge.w	r1, r1, #4
 8005b00:	6021      	strge	r1, [r4, #0]
 8005b02:	b90e      	cbnz	r6, 8005b08 <_printf_i+0x118>
 8005b04:	2d00      	cmp	r5, #0
 8005b06:	d04d      	beq.n	8005ba4 <_printf_i+0x1b4>
 8005b08:	4615      	mov	r5, r2
 8005b0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b0e:	fb03 6711 	mls	r7, r3, r1, r6
 8005b12:	5dc7      	ldrb	r7, [r0, r7]
 8005b14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b18:	4637      	mov	r7, r6
 8005b1a:	42bb      	cmp	r3, r7
 8005b1c:	460e      	mov	r6, r1
 8005b1e:	d9f4      	bls.n	8005b0a <_printf_i+0x11a>
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d10b      	bne.n	8005b3c <_printf_i+0x14c>
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	07de      	lsls	r6, r3, #31
 8005b28:	d508      	bpl.n	8005b3c <_printf_i+0x14c>
 8005b2a:	6923      	ldr	r3, [r4, #16]
 8005b2c:	6861      	ldr	r1, [r4, #4]
 8005b2e:	4299      	cmp	r1, r3
 8005b30:	bfde      	ittt	le
 8005b32:	2330      	movle	r3, #48	; 0x30
 8005b34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b38:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005b3c:	1b52      	subs	r2, r2, r5
 8005b3e:	6122      	str	r2, [r4, #16]
 8005b40:	f8cd a000 	str.w	sl, [sp]
 8005b44:	464b      	mov	r3, r9
 8005b46:	aa03      	add	r2, sp, #12
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	f7ff fee2 	bl	8005914 <_printf_common>
 8005b50:	3001      	adds	r0, #1
 8005b52:	d14c      	bne.n	8005bee <_printf_i+0x1fe>
 8005b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b58:	b004      	add	sp, #16
 8005b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b5e:	4835      	ldr	r0, [pc, #212]	; (8005c34 <_printf_i+0x244>)
 8005b60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b64:	6829      	ldr	r1, [r5, #0]
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b6c:	6029      	str	r1, [r5, #0]
 8005b6e:	061d      	lsls	r5, r3, #24
 8005b70:	d514      	bpl.n	8005b9c <_printf_i+0x1ac>
 8005b72:	07df      	lsls	r7, r3, #31
 8005b74:	bf44      	itt	mi
 8005b76:	f043 0320 	orrmi.w	r3, r3, #32
 8005b7a:	6023      	strmi	r3, [r4, #0]
 8005b7c:	b91e      	cbnz	r6, 8005b86 <_printf_i+0x196>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	f023 0320 	bic.w	r3, r3, #32
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	2310      	movs	r3, #16
 8005b88:	e7b0      	b.n	8005aec <_printf_i+0xfc>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	f043 0320 	orr.w	r3, r3, #32
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	2378      	movs	r3, #120	; 0x78
 8005b94:	4828      	ldr	r0, [pc, #160]	; (8005c38 <_printf_i+0x248>)
 8005b96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b9a:	e7e3      	b.n	8005b64 <_printf_i+0x174>
 8005b9c:	0659      	lsls	r1, r3, #25
 8005b9e:	bf48      	it	mi
 8005ba0:	b2b6      	uxthmi	r6, r6
 8005ba2:	e7e6      	b.n	8005b72 <_printf_i+0x182>
 8005ba4:	4615      	mov	r5, r2
 8005ba6:	e7bb      	b.n	8005b20 <_printf_i+0x130>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	6826      	ldr	r6, [r4, #0]
 8005bac:	6961      	ldr	r1, [r4, #20]
 8005bae:	1d18      	adds	r0, r3, #4
 8005bb0:	6028      	str	r0, [r5, #0]
 8005bb2:	0635      	lsls	r5, r6, #24
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	d501      	bpl.n	8005bbc <_printf_i+0x1cc>
 8005bb8:	6019      	str	r1, [r3, #0]
 8005bba:	e002      	b.n	8005bc2 <_printf_i+0x1d2>
 8005bbc:	0670      	lsls	r0, r6, #25
 8005bbe:	d5fb      	bpl.n	8005bb8 <_printf_i+0x1c8>
 8005bc0:	8019      	strh	r1, [r3, #0]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	6123      	str	r3, [r4, #16]
 8005bc6:	4615      	mov	r5, r2
 8005bc8:	e7ba      	b.n	8005b40 <_printf_i+0x150>
 8005bca:	682b      	ldr	r3, [r5, #0]
 8005bcc:	1d1a      	adds	r2, r3, #4
 8005bce:	602a      	str	r2, [r5, #0]
 8005bd0:	681d      	ldr	r5, [r3, #0]
 8005bd2:	6862      	ldr	r2, [r4, #4]
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f7fa fb02 	bl	80001e0 <memchr>
 8005bdc:	b108      	cbz	r0, 8005be2 <_printf_i+0x1f2>
 8005bde:	1b40      	subs	r0, r0, r5
 8005be0:	6060      	str	r0, [r4, #4]
 8005be2:	6863      	ldr	r3, [r4, #4]
 8005be4:	6123      	str	r3, [r4, #16]
 8005be6:	2300      	movs	r3, #0
 8005be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bec:	e7a8      	b.n	8005b40 <_printf_i+0x150>
 8005bee:	6923      	ldr	r3, [r4, #16]
 8005bf0:	462a      	mov	r2, r5
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	47d0      	blx	sl
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d0ab      	beq.n	8005b54 <_printf_i+0x164>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	079b      	lsls	r3, r3, #30
 8005c00:	d413      	bmi.n	8005c2a <_printf_i+0x23a>
 8005c02:	68e0      	ldr	r0, [r4, #12]
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	4298      	cmp	r0, r3
 8005c08:	bfb8      	it	lt
 8005c0a:	4618      	movlt	r0, r3
 8005c0c:	e7a4      	b.n	8005b58 <_printf_i+0x168>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	4632      	mov	r2, r6
 8005c12:	4649      	mov	r1, r9
 8005c14:	4640      	mov	r0, r8
 8005c16:	47d0      	blx	sl
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d09b      	beq.n	8005b54 <_printf_i+0x164>
 8005c1c:	3501      	adds	r5, #1
 8005c1e:	68e3      	ldr	r3, [r4, #12]
 8005c20:	9903      	ldr	r1, [sp, #12]
 8005c22:	1a5b      	subs	r3, r3, r1
 8005c24:	42ab      	cmp	r3, r5
 8005c26:	dcf2      	bgt.n	8005c0e <_printf_i+0x21e>
 8005c28:	e7eb      	b.n	8005c02 <_printf_i+0x212>
 8005c2a:	2500      	movs	r5, #0
 8005c2c:	f104 0619 	add.w	r6, r4, #25
 8005c30:	e7f5      	b.n	8005c1e <_printf_i+0x22e>
 8005c32:	bf00      	nop
 8005c34:	080081b2 	.word	0x080081b2
 8005c38:	080081c3 	.word	0x080081c3

08005c3c <siprintf>:
 8005c3c:	b40e      	push	{r1, r2, r3}
 8005c3e:	b500      	push	{lr}
 8005c40:	b09c      	sub	sp, #112	; 0x70
 8005c42:	ab1d      	add	r3, sp, #116	; 0x74
 8005c44:	9002      	str	r0, [sp, #8]
 8005c46:	9006      	str	r0, [sp, #24]
 8005c48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c4c:	4809      	ldr	r0, [pc, #36]	; (8005c74 <siprintf+0x38>)
 8005c4e:	9107      	str	r1, [sp, #28]
 8005c50:	9104      	str	r1, [sp, #16]
 8005c52:	4909      	ldr	r1, [pc, #36]	; (8005c78 <siprintf+0x3c>)
 8005c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c58:	9105      	str	r1, [sp, #20]
 8005c5a:	6800      	ldr	r0, [r0, #0]
 8005c5c:	9301      	str	r3, [sp, #4]
 8005c5e:	a902      	add	r1, sp, #8
 8005c60:	f001 fb78 	bl	8007354 <_svfiprintf_r>
 8005c64:	9b02      	ldr	r3, [sp, #8]
 8005c66:	2200      	movs	r2, #0
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	b01c      	add	sp, #112	; 0x70
 8005c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c70:	b003      	add	sp, #12
 8005c72:	4770      	bx	lr
 8005c74:	2000000c 	.word	0x2000000c
 8005c78:	ffff0208 	.word	0xffff0208

08005c7c <quorem>:
 8005c7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c80:	6903      	ldr	r3, [r0, #16]
 8005c82:	690c      	ldr	r4, [r1, #16]
 8005c84:	42a3      	cmp	r3, r4
 8005c86:	4607      	mov	r7, r0
 8005c88:	f2c0 8081 	blt.w	8005d8e <quorem+0x112>
 8005c8c:	3c01      	subs	r4, #1
 8005c8e:	f101 0814 	add.w	r8, r1, #20
 8005c92:	f100 0514 	add.w	r5, r0, #20
 8005c96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c9a:	9301      	str	r3, [sp, #4]
 8005c9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ca0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005cac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cb4:	d331      	bcc.n	8005d1a <quorem+0x9e>
 8005cb6:	f04f 0e00 	mov.w	lr, #0
 8005cba:	4640      	mov	r0, r8
 8005cbc:	46ac      	mov	ip, r5
 8005cbe:	46f2      	mov	sl, lr
 8005cc0:	f850 2b04 	ldr.w	r2, [r0], #4
 8005cc4:	b293      	uxth	r3, r2
 8005cc6:	fb06 e303 	mla	r3, r6, r3, lr
 8005cca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	ebaa 0303 	sub.w	r3, sl, r3
 8005cd4:	f8dc a000 	ldr.w	sl, [ip]
 8005cd8:	0c12      	lsrs	r2, r2, #16
 8005cda:	fa13 f38a 	uxtah	r3, r3, sl
 8005cde:	fb06 e202 	mla	r2, r6, r2, lr
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	9b00      	ldr	r3, [sp, #0]
 8005ce6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005cea:	b292      	uxth	r2, r2
 8005cec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005cf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cf4:	f8bd 3000 	ldrh.w	r3, [sp]
 8005cf8:	4581      	cmp	r9, r0
 8005cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cfe:	f84c 3b04 	str.w	r3, [ip], #4
 8005d02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d06:	d2db      	bcs.n	8005cc0 <quorem+0x44>
 8005d08:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d0c:	b92b      	cbnz	r3, 8005d1a <quorem+0x9e>
 8005d0e:	9b01      	ldr	r3, [sp, #4]
 8005d10:	3b04      	subs	r3, #4
 8005d12:	429d      	cmp	r5, r3
 8005d14:	461a      	mov	r2, r3
 8005d16:	d32e      	bcc.n	8005d76 <quorem+0xfa>
 8005d18:	613c      	str	r4, [r7, #16]
 8005d1a:	4638      	mov	r0, r7
 8005d1c:	f001 f8c6 	bl	8006eac <__mcmp>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	db24      	blt.n	8005d6e <quorem+0xf2>
 8005d24:	3601      	adds	r6, #1
 8005d26:	4628      	mov	r0, r5
 8005d28:	f04f 0c00 	mov.w	ip, #0
 8005d2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d30:	f8d0 e000 	ldr.w	lr, [r0]
 8005d34:	b293      	uxth	r3, r2
 8005d36:	ebac 0303 	sub.w	r3, ip, r3
 8005d3a:	0c12      	lsrs	r2, r2, #16
 8005d3c:	fa13 f38e 	uxtah	r3, r3, lr
 8005d40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d4e:	45c1      	cmp	r9, r8
 8005d50:	f840 3b04 	str.w	r3, [r0], #4
 8005d54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d58:	d2e8      	bcs.n	8005d2c <quorem+0xb0>
 8005d5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d62:	b922      	cbnz	r2, 8005d6e <quorem+0xf2>
 8005d64:	3b04      	subs	r3, #4
 8005d66:	429d      	cmp	r5, r3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	d30a      	bcc.n	8005d82 <quorem+0x106>
 8005d6c:	613c      	str	r4, [r7, #16]
 8005d6e:	4630      	mov	r0, r6
 8005d70:	b003      	add	sp, #12
 8005d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d76:	6812      	ldr	r2, [r2, #0]
 8005d78:	3b04      	subs	r3, #4
 8005d7a:	2a00      	cmp	r2, #0
 8005d7c:	d1cc      	bne.n	8005d18 <quorem+0x9c>
 8005d7e:	3c01      	subs	r4, #1
 8005d80:	e7c7      	b.n	8005d12 <quorem+0x96>
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	3b04      	subs	r3, #4
 8005d86:	2a00      	cmp	r2, #0
 8005d88:	d1f0      	bne.n	8005d6c <quorem+0xf0>
 8005d8a:	3c01      	subs	r4, #1
 8005d8c:	e7eb      	b.n	8005d66 <quorem+0xea>
 8005d8e:	2000      	movs	r0, #0
 8005d90:	e7ee      	b.n	8005d70 <quorem+0xf4>
 8005d92:	0000      	movs	r0, r0
 8005d94:	0000      	movs	r0, r0
	...

08005d98 <_dtoa_r>:
 8005d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9c:	ed2d 8b04 	vpush	{d8-d9}
 8005da0:	ec57 6b10 	vmov	r6, r7, d0
 8005da4:	b093      	sub	sp, #76	; 0x4c
 8005da6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005da8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005dac:	9106      	str	r1, [sp, #24]
 8005dae:	ee10 aa10 	vmov	sl, s0
 8005db2:	4604      	mov	r4, r0
 8005db4:	9209      	str	r2, [sp, #36]	; 0x24
 8005db6:	930c      	str	r3, [sp, #48]	; 0x30
 8005db8:	46bb      	mov	fp, r7
 8005dba:	b975      	cbnz	r5, 8005dda <_dtoa_r+0x42>
 8005dbc:	2010      	movs	r0, #16
 8005dbe:	f000 fddd 	bl	800697c <malloc>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	6260      	str	r0, [r4, #36]	; 0x24
 8005dc6:	b920      	cbnz	r0, 8005dd2 <_dtoa_r+0x3a>
 8005dc8:	4ba7      	ldr	r3, [pc, #668]	; (8006068 <_dtoa_r+0x2d0>)
 8005dca:	21ea      	movs	r1, #234	; 0xea
 8005dcc:	48a7      	ldr	r0, [pc, #668]	; (800606c <_dtoa_r+0x2d4>)
 8005dce:	f001 fbd1 	bl	8007574 <__assert_func>
 8005dd2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005dd6:	6005      	str	r5, [r0, #0]
 8005dd8:	60c5      	str	r5, [r0, #12]
 8005dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ddc:	6819      	ldr	r1, [r3, #0]
 8005dde:	b151      	cbz	r1, 8005df6 <_dtoa_r+0x5e>
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	604a      	str	r2, [r1, #4]
 8005de4:	2301      	movs	r3, #1
 8005de6:	4093      	lsls	r3, r2
 8005de8:	608b      	str	r3, [r1, #8]
 8005dea:	4620      	mov	r0, r4
 8005dec:	f000 fe1c 	bl	8006a28 <_Bfree>
 8005df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	1e3b      	subs	r3, r7, #0
 8005df8:	bfaa      	itet	ge
 8005dfa:	2300      	movge	r3, #0
 8005dfc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005e00:	f8c8 3000 	strge.w	r3, [r8]
 8005e04:	4b9a      	ldr	r3, [pc, #616]	; (8006070 <_dtoa_r+0x2d8>)
 8005e06:	bfbc      	itt	lt
 8005e08:	2201      	movlt	r2, #1
 8005e0a:	f8c8 2000 	strlt.w	r2, [r8]
 8005e0e:	ea33 030b 	bics.w	r3, r3, fp
 8005e12:	d11b      	bne.n	8005e4c <_dtoa_r+0xb4>
 8005e14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e16:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e20:	4333      	orrs	r3, r6
 8005e22:	f000 8592 	beq.w	800694a <_dtoa_r+0xbb2>
 8005e26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e28:	b963      	cbnz	r3, 8005e44 <_dtoa_r+0xac>
 8005e2a:	4b92      	ldr	r3, [pc, #584]	; (8006074 <_dtoa_r+0x2dc>)
 8005e2c:	e022      	b.n	8005e74 <_dtoa_r+0xdc>
 8005e2e:	4b92      	ldr	r3, [pc, #584]	; (8006078 <_dtoa_r+0x2e0>)
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	3308      	adds	r3, #8
 8005e34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	9801      	ldr	r0, [sp, #4]
 8005e3a:	b013      	add	sp, #76	; 0x4c
 8005e3c:	ecbd 8b04 	vpop	{d8-d9}
 8005e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e44:	4b8b      	ldr	r3, [pc, #556]	; (8006074 <_dtoa_r+0x2dc>)
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	3303      	adds	r3, #3
 8005e4a:	e7f3      	b.n	8005e34 <_dtoa_r+0x9c>
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2300      	movs	r3, #0
 8005e50:	4650      	mov	r0, sl
 8005e52:	4659      	mov	r1, fp
 8005e54:	f7fa fe38 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e58:	ec4b ab19 	vmov	d9, sl, fp
 8005e5c:	4680      	mov	r8, r0
 8005e5e:	b158      	cbz	r0, 8005e78 <_dtoa_r+0xe0>
 8005e60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e62:	2301      	movs	r3, #1
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 856b 	beq.w	8006944 <_dtoa_r+0xbac>
 8005e6e:	4883      	ldr	r0, [pc, #524]	; (800607c <_dtoa_r+0x2e4>)
 8005e70:	6018      	str	r0, [r3, #0]
 8005e72:	1e43      	subs	r3, r0, #1
 8005e74:	9301      	str	r3, [sp, #4]
 8005e76:	e7df      	b.n	8005e38 <_dtoa_r+0xa0>
 8005e78:	ec4b ab10 	vmov	d0, sl, fp
 8005e7c:	aa10      	add	r2, sp, #64	; 0x40
 8005e7e:	a911      	add	r1, sp, #68	; 0x44
 8005e80:	4620      	mov	r0, r4
 8005e82:	f001 f8b9 	bl	8006ff8 <__d2b>
 8005e86:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005e8a:	ee08 0a10 	vmov	s16, r0
 8005e8e:	2d00      	cmp	r5, #0
 8005e90:	f000 8084 	beq.w	8005f9c <_dtoa_r+0x204>
 8005e94:	ee19 3a90 	vmov	r3, s19
 8005e98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e9c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005ea0:	4656      	mov	r6, sl
 8005ea2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005ea6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005eaa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005eae:	4b74      	ldr	r3, [pc, #464]	; (8006080 <_dtoa_r+0x2e8>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	4639      	mov	r1, r7
 8005eb6:	f7fa f9e7 	bl	8000288 <__aeabi_dsub>
 8005eba:	a365      	add	r3, pc, #404	; (adr r3, 8006050 <_dtoa_r+0x2b8>)
 8005ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec0:	f7fa fb9a 	bl	80005f8 <__aeabi_dmul>
 8005ec4:	a364      	add	r3, pc, #400	; (adr r3, 8006058 <_dtoa_r+0x2c0>)
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f7fa f9df 	bl	800028c <__adddf3>
 8005ece:	4606      	mov	r6, r0
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	460f      	mov	r7, r1
 8005ed4:	f7fa fb26 	bl	8000524 <__aeabi_i2d>
 8005ed8:	a361      	add	r3, pc, #388	; (adr r3, 8006060 <_dtoa_r+0x2c8>)
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	f7fa fb8b 	bl	80005f8 <__aeabi_dmul>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	4639      	mov	r1, r7
 8005eea:	f7fa f9cf 	bl	800028c <__adddf3>
 8005eee:	4606      	mov	r6, r0
 8005ef0:	460f      	mov	r7, r1
 8005ef2:	f7fa fe31 	bl	8000b58 <__aeabi_d2iz>
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	9000      	str	r0, [sp, #0]
 8005efa:	2300      	movs	r3, #0
 8005efc:	4630      	mov	r0, r6
 8005efe:	4639      	mov	r1, r7
 8005f00:	f7fa fdec 	bl	8000adc <__aeabi_dcmplt>
 8005f04:	b150      	cbz	r0, 8005f1c <_dtoa_r+0x184>
 8005f06:	9800      	ldr	r0, [sp, #0]
 8005f08:	f7fa fb0c 	bl	8000524 <__aeabi_i2d>
 8005f0c:	4632      	mov	r2, r6
 8005f0e:	463b      	mov	r3, r7
 8005f10:	f7fa fdda 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f14:	b910      	cbnz	r0, 8005f1c <_dtoa_r+0x184>
 8005f16:	9b00      	ldr	r3, [sp, #0]
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	9b00      	ldr	r3, [sp, #0]
 8005f1e:	2b16      	cmp	r3, #22
 8005f20:	d85a      	bhi.n	8005fd8 <_dtoa_r+0x240>
 8005f22:	9a00      	ldr	r2, [sp, #0]
 8005f24:	4b57      	ldr	r3, [pc, #348]	; (8006084 <_dtoa_r+0x2ec>)
 8005f26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	ec51 0b19 	vmov	r0, r1, d9
 8005f32:	f7fa fdd3 	bl	8000adc <__aeabi_dcmplt>
 8005f36:	2800      	cmp	r0, #0
 8005f38:	d050      	beq.n	8005fdc <_dtoa_r+0x244>
 8005f3a:	9b00      	ldr	r3, [sp, #0]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	2300      	movs	r3, #0
 8005f42:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f46:	1b5d      	subs	r5, r3, r5
 8005f48:	1e6b      	subs	r3, r5, #1
 8005f4a:	9305      	str	r3, [sp, #20]
 8005f4c:	bf45      	ittet	mi
 8005f4e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005f52:	9304      	strmi	r3, [sp, #16]
 8005f54:	2300      	movpl	r3, #0
 8005f56:	2300      	movmi	r3, #0
 8005f58:	bf4c      	ite	mi
 8005f5a:	9305      	strmi	r3, [sp, #20]
 8005f5c:	9304      	strpl	r3, [sp, #16]
 8005f5e:	9b00      	ldr	r3, [sp, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	db3d      	blt.n	8005fe0 <_dtoa_r+0x248>
 8005f64:	9b05      	ldr	r3, [sp, #20]
 8005f66:	9a00      	ldr	r2, [sp, #0]
 8005f68:	920a      	str	r2, [sp, #40]	; 0x28
 8005f6a:	4413      	add	r3, r2
 8005f6c:	9305      	str	r3, [sp, #20]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	9307      	str	r3, [sp, #28]
 8005f72:	9b06      	ldr	r3, [sp, #24]
 8005f74:	2b09      	cmp	r3, #9
 8005f76:	f200 8089 	bhi.w	800608c <_dtoa_r+0x2f4>
 8005f7a:	2b05      	cmp	r3, #5
 8005f7c:	bfc4      	itt	gt
 8005f7e:	3b04      	subgt	r3, #4
 8005f80:	9306      	strgt	r3, [sp, #24]
 8005f82:	9b06      	ldr	r3, [sp, #24]
 8005f84:	f1a3 0302 	sub.w	r3, r3, #2
 8005f88:	bfcc      	ite	gt
 8005f8a:	2500      	movgt	r5, #0
 8005f8c:	2501      	movle	r5, #1
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	f200 8087 	bhi.w	80060a2 <_dtoa_r+0x30a>
 8005f94:	e8df f003 	tbb	[pc, r3]
 8005f98:	59383a2d 	.word	0x59383a2d
 8005f9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005fa0:	441d      	add	r5, r3
 8005fa2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	bfc1      	itttt	gt
 8005faa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005fae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005fb2:	fa0b f303 	lslgt.w	r3, fp, r3
 8005fb6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005fba:	bfda      	itte	le
 8005fbc:	f1c3 0320 	rsble	r3, r3, #32
 8005fc0:	fa06 f003 	lslle.w	r0, r6, r3
 8005fc4:	4318      	orrgt	r0, r3
 8005fc6:	f7fa fa9d 	bl	8000504 <__aeabi_ui2d>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	4606      	mov	r6, r0
 8005fce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005fd2:	3d01      	subs	r5, #1
 8005fd4:	930e      	str	r3, [sp, #56]	; 0x38
 8005fd6:	e76a      	b.n	8005eae <_dtoa_r+0x116>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e7b2      	b.n	8005f42 <_dtoa_r+0x1aa>
 8005fdc:	900b      	str	r0, [sp, #44]	; 0x2c
 8005fde:	e7b1      	b.n	8005f44 <_dtoa_r+0x1ac>
 8005fe0:	9b04      	ldr	r3, [sp, #16]
 8005fe2:	9a00      	ldr	r2, [sp, #0]
 8005fe4:	1a9b      	subs	r3, r3, r2
 8005fe6:	9304      	str	r3, [sp, #16]
 8005fe8:	4253      	negs	r3, r2
 8005fea:	9307      	str	r3, [sp, #28]
 8005fec:	2300      	movs	r3, #0
 8005fee:	930a      	str	r3, [sp, #40]	; 0x28
 8005ff0:	e7bf      	b.n	8005f72 <_dtoa_r+0x1da>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	9308      	str	r3, [sp, #32]
 8005ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	dc55      	bgt.n	80060a8 <_dtoa_r+0x310>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006002:	461a      	mov	r2, r3
 8006004:	9209      	str	r2, [sp, #36]	; 0x24
 8006006:	e00c      	b.n	8006022 <_dtoa_r+0x28a>
 8006008:	2301      	movs	r3, #1
 800600a:	e7f3      	b.n	8005ff4 <_dtoa_r+0x25c>
 800600c:	2300      	movs	r3, #0
 800600e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006010:	9308      	str	r3, [sp, #32]
 8006012:	9b00      	ldr	r3, [sp, #0]
 8006014:	4413      	add	r3, r2
 8006016:	9302      	str	r3, [sp, #8]
 8006018:	3301      	adds	r3, #1
 800601a:	2b01      	cmp	r3, #1
 800601c:	9303      	str	r3, [sp, #12]
 800601e:	bfb8      	it	lt
 8006020:	2301      	movlt	r3, #1
 8006022:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006024:	2200      	movs	r2, #0
 8006026:	6042      	str	r2, [r0, #4]
 8006028:	2204      	movs	r2, #4
 800602a:	f102 0614 	add.w	r6, r2, #20
 800602e:	429e      	cmp	r6, r3
 8006030:	6841      	ldr	r1, [r0, #4]
 8006032:	d93d      	bls.n	80060b0 <_dtoa_r+0x318>
 8006034:	4620      	mov	r0, r4
 8006036:	f000 fcb7 	bl	80069a8 <_Balloc>
 800603a:	9001      	str	r0, [sp, #4]
 800603c:	2800      	cmp	r0, #0
 800603e:	d13b      	bne.n	80060b8 <_dtoa_r+0x320>
 8006040:	4b11      	ldr	r3, [pc, #68]	; (8006088 <_dtoa_r+0x2f0>)
 8006042:	4602      	mov	r2, r0
 8006044:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006048:	e6c0      	b.n	8005dcc <_dtoa_r+0x34>
 800604a:	2301      	movs	r3, #1
 800604c:	e7df      	b.n	800600e <_dtoa_r+0x276>
 800604e:	bf00      	nop
 8006050:	636f4361 	.word	0x636f4361
 8006054:	3fd287a7 	.word	0x3fd287a7
 8006058:	8b60c8b3 	.word	0x8b60c8b3
 800605c:	3fc68a28 	.word	0x3fc68a28
 8006060:	509f79fb 	.word	0x509f79fb
 8006064:	3fd34413 	.word	0x3fd34413
 8006068:	080081e1 	.word	0x080081e1
 800606c:	080081f8 	.word	0x080081f8
 8006070:	7ff00000 	.word	0x7ff00000
 8006074:	080081dd 	.word	0x080081dd
 8006078:	080081d4 	.word	0x080081d4
 800607c:	080081b1 	.word	0x080081b1
 8006080:	3ff80000 	.word	0x3ff80000
 8006084:	080082e8 	.word	0x080082e8
 8006088:	08008253 	.word	0x08008253
 800608c:	2501      	movs	r5, #1
 800608e:	2300      	movs	r3, #0
 8006090:	9306      	str	r3, [sp, #24]
 8006092:	9508      	str	r5, [sp, #32]
 8006094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006098:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800609c:	2200      	movs	r2, #0
 800609e:	2312      	movs	r3, #18
 80060a0:	e7b0      	b.n	8006004 <_dtoa_r+0x26c>
 80060a2:	2301      	movs	r3, #1
 80060a4:	9308      	str	r3, [sp, #32]
 80060a6:	e7f5      	b.n	8006094 <_dtoa_r+0x2fc>
 80060a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060ae:	e7b8      	b.n	8006022 <_dtoa_r+0x28a>
 80060b0:	3101      	adds	r1, #1
 80060b2:	6041      	str	r1, [r0, #4]
 80060b4:	0052      	lsls	r2, r2, #1
 80060b6:	e7b8      	b.n	800602a <_dtoa_r+0x292>
 80060b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060ba:	9a01      	ldr	r2, [sp, #4]
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	9b03      	ldr	r3, [sp, #12]
 80060c0:	2b0e      	cmp	r3, #14
 80060c2:	f200 809d 	bhi.w	8006200 <_dtoa_r+0x468>
 80060c6:	2d00      	cmp	r5, #0
 80060c8:	f000 809a 	beq.w	8006200 <_dtoa_r+0x468>
 80060cc:	9b00      	ldr	r3, [sp, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	dd32      	ble.n	8006138 <_dtoa_r+0x3a0>
 80060d2:	4ab7      	ldr	r2, [pc, #732]	; (80063b0 <_dtoa_r+0x618>)
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80060dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060e0:	9b00      	ldr	r3, [sp, #0]
 80060e2:	05d8      	lsls	r0, r3, #23
 80060e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80060e8:	d516      	bpl.n	8006118 <_dtoa_r+0x380>
 80060ea:	4bb2      	ldr	r3, [pc, #712]	; (80063b4 <_dtoa_r+0x61c>)
 80060ec:	ec51 0b19 	vmov	r0, r1, d9
 80060f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060f4:	f7fa fbaa 	bl	800084c <__aeabi_ddiv>
 80060f8:	f007 070f 	and.w	r7, r7, #15
 80060fc:	4682      	mov	sl, r0
 80060fe:	468b      	mov	fp, r1
 8006100:	2503      	movs	r5, #3
 8006102:	4eac      	ldr	r6, [pc, #688]	; (80063b4 <_dtoa_r+0x61c>)
 8006104:	b957      	cbnz	r7, 800611c <_dtoa_r+0x384>
 8006106:	4642      	mov	r2, r8
 8006108:	464b      	mov	r3, r9
 800610a:	4650      	mov	r0, sl
 800610c:	4659      	mov	r1, fp
 800610e:	f7fa fb9d 	bl	800084c <__aeabi_ddiv>
 8006112:	4682      	mov	sl, r0
 8006114:	468b      	mov	fp, r1
 8006116:	e028      	b.n	800616a <_dtoa_r+0x3d2>
 8006118:	2502      	movs	r5, #2
 800611a:	e7f2      	b.n	8006102 <_dtoa_r+0x36a>
 800611c:	07f9      	lsls	r1, r7, #31
 800611e:	d508      	bpl.n	8006132 <_dtoa_r+0x39a>
 8006120:	4640      	mov	r0, r8
 8006122:	4649      	mov	r1, r9
 8006124:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006128:	f7fa fa66 	bl	80005f8 <__aeabi_dmul>
 800612c:	3501      	adds	r5, #1
 800612e:	4680      	mov	r8, r0
 8006130:	4689      	mov	r9, r1
 8006132:	107f      	asrs	r7, r7, #1
 8006134:	3608      	adds	r6, #8
 8006136:	e7e5      	b.n	8006104 <_dtoa_r+0x36c>
 8006138:	f000 809b 	beq.w	8006272 <_dtoa_r+0x4da>
 800613c:	9b00      	ldr	r3, [sp, #0]
 800613e:	4f9d      	ldr	r7, [pc, #628]	; (80063b4 <_dtoa_r+0x61c>)
 8006140:	425e      	negs	r6, r3
 8006142:	4b9b      	ldr	r3, [pc, #620]	; (80063b0 <_dtoa_r+0x618>)
 8006144:	f006 020f 	and.w	r2, r6, #15
 8006148:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	ec51 0b19 	vmov	r0, r1, d9
 8006154:	f7fa fa50 	bl	80005f8 <__aeabi_dmul>
 8006158:	1136      	asrs	r6, r6, #4
 800615a:	4682      	mov	sl, r0
 800615c:	468b      	mov	fp, r1
 800615e:	2300      	movs	r3, #0
 8006160:	2502      	movs	r5, #2
 8006162:	2e00      	cmp	r6, #0
 8006164:	d17a      	bne.n	800625c <_dtoa_r+0x4c4>
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1d3      	bne.n	8006112 <_dtoa_r+0x37a>
 800616a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 8082 	beq.w	8006276 <_dtoa_r+0x4de>
 8006172:	4b91      	ldr	r3, [pc, #580]	; (80063b8 <_dtoa_r+0x620>)
 8006174:	2200      	movs	r2, #0
 8006176:	4650      	mov	r0, sl
 8006178:	4659      	mov	r1, fp
 800617a:	f7fa fcaf 	bl	8000adc <__aeabi_dcmplt>
 800617e:	2800      	cmp	r0, #0
 8006180:	d079      	beq.n	8006276 <_dtoa_r+0x4de>
 8006182:	9b03      	ldr	r3, [sp, #12]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d076      	beq.n	8006276 <_dtoa_r+0x4de>
 8006188:	9b02      	ldr	r3, [sp, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	dd36      	ble.n	80061fc <_dtoa_r+0x464>
 800618e:	9b00      	ldr	r3, [sp, #0]
 8006190:	4650      	mov	r0, sl
 8006192:	4659      	mov	r1, fp
 8006194:	1e5f      	subs	r7, r3, #1
 8006196:	2200      	movs	r2, #0
 8006198:	4b88      	ldr	r3, [pc, #544]	; (80063bc <_dtoa_r+0x624>)
 800619a:	f7fa fa2d 	bl	80005f8 <__aeabi_dmul>
 800619e:	9e02      	ldr	r6, [sp, #8]
 80061a0:	4682      	mov	sl, r0
 80061a2:	468b      	mov	fp, r1
 80061a4:	3501      	adds	r5, #1
 80061a6:	4628      	mov	r0, r5
 80061a8:	f7fa f9bc 	bl	8000524 <__aeabi_i2d>
 80061ac:	4652      	mov	r2, sl
 80061ae:	465b      	mov	r3, fp
 80061b0:	f7fa fa22 	bl	80005f8 <__aeabi_dmul>
 80061b4:	4b82      	ldr	r3, [pc, #520]	; (80063c0 <_dtoa_r+0x628>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	f7fa f868 	bl	800028c <__adddf3>
 80061bc:	46d0      	mov	r8, sl
 80061be:	46d9      	mov	r9, fp
 80061c0:	4682      	mov	sl, r0
 80061c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80061c6:	2e00      	cmp	r6, #0
 80061c8:	d158      	bne.n	800627c <_dtoa_r+0x4e4>
 80061ca:	4b7e      	ldr	r3, [pc, #504]	; (80063c4 <_dtoa_r+0x62c>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	4640      	mov	r0, r8
 80061d0:	4649      	mov	r1, r9
 80061d2:	f7fa f859 	bl	8000288 <__aeabi_dsub>
 80061d6:	4652      	mov	r2, sl
 80061d8:	465b      	mov	r3, fp
 80061da:	4680      	mov	r8, r0
 80061dc:	4689      	mov	r9, r1
 80061de:	f7fa fc9b 	bl	8000b18 <__aeabi_dcmpgt>
 80061e2:	2800      	cmp	r0, #0
 80061e4:	f040 8295 	bne.w	8006712 <_dtoa_r+0x97a>
 80061e8:	4652      	mov	r2, sl
 80061ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80061ee:	4640      	mov	r0, r8
 80061f0:	4649      	mov	r1, r9
 80061f2:	f7fa fc73 	bl	8000adc <__aeabi_dcmplt>
 80061f6:	2800      	cmp	r0, #0
 80061f8:	f040 8289 	bne.w	800670e <_dtoa_r+0x976>
 80061fc:	ec5b ab19 	vmov	sl, fp, d9
 8006200:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006202:	2b00      	cmp	r3, #0
 8006204:	f2c0 8148 	blt.w	8006498 <_dtoa_r+0x700>
 8006208:	9a00      	ldr	r2, [sp, #0]
 800620a:	2a0e      	cmp	r2, #14
 800620c:	f300 8144 	bgt.w	8006498 <_dtoa_r+0x700>
 8006210:	4b67      	ldr	r3, [pc, #412]	; (80063b0 <_dtoa_r+0x618>)
 8006212:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006216:	e9d3 8900 	ldrd	r8, r9, [r3]
 800621a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800621c:	2b00      	cmp	r3, #0
 800621e:	f280 80d5 	bge.w	80063cc <_dtoa_r+0x634>
 8006222:	9b03      	ldr	r3, [sp, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	f300 80d1 	bgt.w	80063cc <_dtoa_r+0x634>
 800622a:	f040 826f 	bne.w	800670c <_dtoa_r+0x974>
 800622e:	4b65      	ldr	r3, [pc, #404]	; (80063c4 <_dtoa_r+0x62c>)
 8006230:	2200      	movs	r2, #0
 8006232:	4640      	mov	r0, r8
 8006234:	4649      	mov	r1, r9
 8006236:	f7fa f9df 	bl	80005f8 <__aeabi_dmul>
 800623a:	4652      	mov	r2, sl
 800623c:	465b      	mov	r3, fp
 800623e:	f7fa fc61 	bl	8000b04 <__aeabi_dcmpge>
 8006242:	9e03      	ldr	r6, [sp, #12]
 8006244:	4637      	mov	r7, r6
 8006246:	2800      	cmp	r0, #0
 8006248:	f040 8245 	bne.w	80066d6 <_dtoa_r+0x93e>
 800624c:	9d01      	ldr	r5, [sp, #4]
 800624e:	2331      	movs	r3, #49	; 0x31
 8006250:	f805 3b01 	strb.w	r3, [r5], #1
 8006254:	9b00      	ldr	r3, [sp, #0]
 8006256:	3301      	adds	r3, #1
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	e240      	b.n	80066de <_dtoa_r+0x946>
 800625c:	07f2      	lsls	r2, r6, #31
 800625e:	d505      	bpl.n	800626c <_dtoa_r+0x4d4>
 8006260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006264:	f7fa f9c8 	bl	80005f8 <__aeabi_dmul>
 8006268:	3501      	adds	r5, #1
 800626a:	2301      	movs	r3, #1
 800626c:	1076      	asrs	r6, r6, #1
 800626e:	3708      	adds	r7, #8
 8006270:	e777      	b.n	8006162 <_dtoa_r+0x3ca>
 8006272:	2502      	movs	r5, #2
 8006274:	e779      	b.n	800616a <_dtoa_r+0x3d2>
 8006276:	9f00      	ldr	r7, [sp, #0]
 8006278:	9e03      	ldr	r6, [sp, #12]
 800627a:	e794      	b.n	80061a6 <_dtoa_r+0x40e>
 800627c:	9901      	ldr	r1, [sp, #4]
 800627e:	4b4c      	ldr	r3, [pc, #304]	; (80063b0 <_dtoa_r+0x618>)
 8006280:	4431      	add	r1, r6
 8006282:	910d      	str	r1, [sp, #52]	; 0x34
 8006284:	9908      	ldr	r1, [sp, #32]
 8006286:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800628a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800628e:	2900      	cmp	r1, #0
 8006290:	d043      	beq.n	800631a <_dtoa_r+0x582>
 8006292:	494d      	ldr	r1, [pc, #308]	; (80063c8 <_dtoa_r+0x630>)
 8006294:	2000      	movs	r0, #0
 8006296:	f7fa fad9 	bl	800084c <__aeabi_ddiv>
 800629a:	4652      	mov	r2, sl
 800629c:	465b      	mov	r3, fp
 800629e:	f7f9 fff3 	bl	8000288 <__aeabi_dsub>
 80062a2:	9d01      	ldr	r5, [sp, #4]
 80062a4:	4682      	mov	sl, r0
 80062a6:	468b      	mov	fp, r1
 80062a8:	4649      	mov	r1, r9
 80062aa:	4640      	mov	r0, r8
 80062ac:	f7fa fc54 	bl	8000b58 <__aeabi_d2iz>
 80062b0:	4606      	mov	r6, r0
 80062b2:	f7fa f937 	bl	8000524 <__aeabi_i2d>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4640      	mov	r0, r8
 80062bc:	4649      	mov	r1, r9
 80062be:	f7f9 ffe3 	bl	8000288 <__aeabi_dsub>
 80062c2:	3630      	adds	r6, #48	; 0x30
 80062c4:	f805 6b01 	strb.w	r6, [r5], #1
 80062c8:	4652      	mov	r2, sl
 80062ca:	465b      	mov	r3, fp
 80062cc:	4680      	mov	r8, r0
 80062ce:	4689      	mov	r9, r1
 80062d0:	f7fa fc04 	bl	8000adc <__aeabi_dcmplt>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	d163      	bne.n	80063a0 <_dtoa_r+0x608>
 80062d8:	4642      	mov	r2, r8
 80062da:	464b      	mov	r3, r9
 80062dc:	4936      	ldr	r1, [pc, #216]	; (80063b8 <_dtoa_r+0x620>)
 80062de:	2000      	movs	r0, #0
 80062e0:	f7f9 ffd2 	bl	8000288 <__aeabi_dsub>
 80062e4:	4652      	mov	r2, sl
 80062e6:	465b      	mov	r3, fp
 80062e8:	f7fa fbf8 	bl	8000adc <__aeabi_dcmplt>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	f040 80b5 	bne.w	800645c <_dtoa_r+0x6c4>
 80062f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062f4:	429d      	cmp	r5, r3
 80062f6:	d081      	beq.n	80061fc <_dtoa_r+0x464>
 80062f8:	4b30      	ldr	r3, [pc, #192]	; (80063bc <_dtoa_r+0x624>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	4650      	mov	r0, sl
 80062fe:	4659      	mov	r1, fp
 8006300:	f7fa f97a 	bl	80005f8 <__aeabi_dmul>
 8006304:	4b2d      	ldr	r3, [pc, #180]	; (80063bc <_dtoa_r+0x624>)
 8006306:	4682      	mov	sl, r0
 8006308:	468b      	mov	fp, r1
 800630a:	4640      	mov	r0, r8
 800630c:	4649      	mov	r1, r9
 800630e:	2200      	movs	r2, #0
 8006310:	f7fa f972 	bl	80005f8 <__aeabi_dmul>
 8006314:	4680      	mov	r8, r0
 8006316:	4689      	mov	r9, r1
 8006318:	e7c6      	b.n	80062a8 <_dtoa_r+0x510>
 800631a:	4650      	mov	r0, sl
 800631c:	4659      	mov	r1, fp
 800631e:	f7fa f96b 	bl	80005f8 <__aeabi_dmul>
 8006322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006324:	9d01      	ldr	r5, [sp, #4]
 8006326:	930f      	str	r3, [sp, #60]	; 0x3c
 8006328:	4682      	mov	sl, r0
 800632a:	468b      	mov	fp, r1
 800632c:	4649      	mov	r1, r9
 800632e:	4640      	mov	r0, r8
 8006330:	f7fa fc12 	bl	8000b58 <__aeabi_d2iz>
 8006334:	4606      	mov	r6, r0
 8006336:	f7fa f8f5 	bl	8000524 <__aeabi_i2d>
 800633a:	3630      	adds	r6, #48	; 0x30
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4640      	mov	r0, r8
 8006342:	4649      	mov	r1, r9
 8006344:	f7f9 ffa0 	bl	8000288 <__aeabi_dsub>
 8006348:	f805 6b01 	strb.w	r6, [r5], #1
 800634c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800634e:	429d      	cmp	r5, r3
 8006350:	4680      	mov	r8, r0
 8006352:	4689      	mov	r9, r1
 8006354:	f04f 0200 	mov.w	r2, #0
 8006358:	d124      	bne.n	80063a4 <_dtoa_r+0x60c>
 800635a:	4b1b      	ldr	r3, [pc, #108]	; (80063c8 <_dtoa_r+0x630>)
 800635c:	4650      	mov	r0, sl
 800635e:	4659      	mov	r1, fp
 8006360:	f7f9 ff94 	bl	800028c <__adddf3>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	4640      	mov	r0, r8
 800636a:	4649      	mov	r1, r9
 800636c:	f7fa fbd4 	bl	8000b18 <__aeabi_dcmpgt>
 8006370:	2800      	cmp	r0, #0
 8006372:	d173      	bne.n	800645c <_dtoa_r+0x6c4>
 8006374:	4652      	mov	r2, sl
 8006376:	465b      	mov	r3, fp
 8006378:	4913      	ldr	r1, [pc, #76]	; (80063c8 <_dtoa_r+0x630>)
 800637a:	2000      	movs	r0, #0
 800637c:	f7f9 ff84 	bl	8000288 <__aeabi_dsub>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	4640      	mov	r0, r8
 8006386:	4649      	mov	r1, r9
 8006388:	f7fa fba8 	bl	8000adc <__aeabi_dcmplt>
 800638c:	2800      	cmp	r0, #0
 800638e:	f43f af35 	beq.w	80061fc <_dtoa_r+0x464>
 8006392:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006394:	1e6b      	subs	r3, r5, #1
 8006396:	930f      	str	r3, [sp, #60]	; 0x3c
 8006398:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800639c:	2b30      	cmp	r3, #48	; 0x30
 800639e:	d0f8      	beq.n	8006392 <_dtoa_r+0x5fa>
 80063a0:	9700      	str	r7, [sp, #0]
 80063a2:	e049      	b.n	8006438 <_dtoa_r+0x6a0>
 80063a4:	4b05      	ldr	r3, [pc, #20]	; (80063bc <_dtoa_r+0x624>)
 80063a6:	f7fa f927 	bl	80005f8 <__aeabi_dmul>
 80063aa:	4680      	mov	r8, r0
 80063ac:	4689      	mov	r9, r1
 80063ae:	e7bd      	b.n	800632c <_dtoa_r+0x594>
 80063b0:	080082e8 	.word	0x080082e8
 80063b4:	080082c0 	.word	0x080082c0
 80063b8:	3ff00000 	.word	0x3ff00000
 80063bc:	40240000 	.word	0x40240000
 80063c0:	401c0000 	.word	0x401c0000
 80063c4:	40140000 	.word	0x40140000
 80063c8:	3fe00000 	.word	0x3fe00000
 80063cc:	9d01      	ldr	r5, [sp, #4]
 80063ce:	4656      	mov	r6, sl
 80063d0:	465f      	mov	r7, fp
 80063d2:	4642      	mov	r2, r8
 80063d4:	464b      	mov	r3, r9
 80063d6:	4630      	mov	r0, r6
 80063d8:	4639      	mov	r1, r7
 80063da:	f7fa fa37 	bl	800084c <__aeabi_ddiv>
 80063de:	f7fa fbbb 	bl	8000b58 <__aeabi_d2iz>
 80063e2:	4682      	mov	sl, r0
 80063e4:	f7fa f89e 	bl	8000524 <__aeabi_i2d>
 80063e8:	4642      	mov	r2, r8
 80063ea:	464b      	mov	r3, r9
 80063ec:	f7fa f904 	bl	80005f8 <__aeabi_dmul>
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	4630      	mov	r0, r6
 80063f6:	4639      	mov	r1, r7
 80063f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80063fc:	f7f9 ff44 	bl	8000288 <__aeabi_dsub>
 8006400:	f805 6b01 	strb.w	r6, [r5], #1
 8006404:	9e01      	ldr	r6, [sp, #4]
 8006406:	9f03      	ldr	r7, [sp, #12]
 8006408:	1bae      	subs	r6, r5, r6
 800640a:	42b7      	cmp	r7, r6
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	d135      	bne.n	800647e <_dtoa_r+0x6e6>
 8006412:	f7f9 ff3b 	bl	800028c <__adddf3>
 8006416:	4642      	mov	r2, r8
 8006418:	464b      	mov	r3, r9
 800641a:	4606      	mov	r6, r0
 800641c:	460f      	mov	r7, r1
 800641e:	f7fa fb7b 	bl	8000b18 <__aeabi_dcmpgt>
 8006422:	b9d0      	cbnz	r0, 800645a <_dtoa_r+0x6c2>
 8006424:	4642      	mov	r2, r8
 8006426:	464b      	mov	r3, r9
 8006428:	4630      	mov	r0, r6
 800642a:	4639      	mov	r1, r7
 800642c:	f7fa fb4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006430:	b110      	cbz	r0, 8006438 <_dtoa_r+0x6a0>
 8006432:	f01a 0f01 	tst.w	sl, #1
 8006436:	d110      	bne.n	800645a <_dtoa_r+0x6c2>
 8006438:	4620      	mov	r0, r4
 800643a:	ee18 1a10 	vmov	r1, s16
 800643e:	f000 faf3 	bl	8006a28 <_Bfree>
 8006442:	2300      	movs	r3, #0
 8006444:	9800      	ldr	r0, [sp, #0]
 8006446:	702b      	strb	r3, [r5, #0]
 8006448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800644a:	3001      	adds	r0, #1
 800644c:	6018      	str	r0, [r3, #0]
 800644e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006450:	2b00      	cmp	r3, #0
 8006452:	f43f acf1 	beq.w	8005e38 <_dtoa_r+0xa0>
 8006456:	601d      	str	r5, [r3, #0]
 8006458:	e4ee      	b.n	8005e38 <_dtoa_r+0xa0>
 800645a:	9f00      	ldr	r7, [sp, #0]
 800645c:	462b      	mov	r3, r5
 800645e:	461d      	mov	r5, r3
 8006460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006464:	2a39      	cmp	r2, #57	; 0x39
 8006466:	d106      	bne.n	8006476 <_dtoa_r+0x6de>
 8006468:	9a01      	ldr	r2, [sp, #4]
 800646a:	429a      	cmp	r2, r3
 800646c:	d1f7      	bne.n	800645e <_dtoa_r+0x6c6>
 800646e:	9901      	ldr	r1, [sp, #4]
 8006470:	2230      	movs	r2, #48	; 0x30
 8006472:	3701      	adds	r7, #1
 8006474:	700a      	strb	r2, [r1, #0]
 8006476:	781a      	ldrb	r2, [r3, #0]
 8006478:	3201      	adds	r2, #1
 800647a:	701a      	strb	r2, [r3, #0]
 800647c:	e790      	b.n	80063a0 <_dtoa_r+0x608>
 800647e:	4ba6      	ldr	r3, [pc, #664]	; (8006718 <_dtoa_r+0x980>)
 8006480:	2200      	movs	r2, #0
 8006482:	f7fa f8b9 	bl	80005f8 <__aeabi_dmul>
 8006486:	2200      	movs	r2, #0
 8006488:	2300      	movs	r3, #0
 800648a:	4606      	mov	r6, r0
 800648c:	460f      	mov	r7, r1
 800648e:	f7fa fb1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006492:	2800      	cmp	r0, #0
 8006494:	d09d      	beq.n	80063d2 <_dtoa_r+0x63a>
 8006496:	e7cf      	b.n	8006438 <_dtoa_r+0x6a0>
 8006498:	9a08      	ldr	r2, [sp, #32]
 800649a:	2a00      	cmp	r2, #0
 800649c:	f000 80d7 	beq.w	800664e <_dtoa_r+0x8b6>
 80064a0:	9a06      	ldr	r2, [sp, #24]
 80064a2:	2a01      	cmp	r2, #1
 80064a4:	f300 80ba 	bgt.w	800661c <_dtoa_r+0x884>
 80064a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064aa:	2a00      	cmp	r2, #0
 80064ac:	f000 80b2 	beq.w	8006614 <_dtoa_r+0x87c>
 80064b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064b4:	9e07      	ldr	r6, [sp, #28]
 80064b6:	9d04      	ldr	r5, [sp, #16]
 80064b8:	9a04      	ldr	r2, [sp, #16]
 80064ba:	441a      	add	r2, r3
 80064bc:	9204      	str	r2, [sp, #16]
 80064be:	9a05      	ldr	r2, [sp, #20]
 80064c0:	2101      	movs	r1, #1
 80064c2:	441a      	add	r2, r3
 80064c4:	4620      	mov	r0, r4
 80064c6:	9205      	str	r2, [sp, #20]
 80064c8:	f000 fb66 	bl	8006b98 <__i2b>
 80064cc:	4607      	mov	r7, r0
 80064ce:	2d00      	cmp	r5, #0
 80064d0:	dd0c      	ble.n	80064ec <_dtoa_r+0x754>
 80064d2:	9b05      	ldr	r3, [sp, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	dd09      	ble.n	80064ec <_dtoa_r+0x754>
 80064d8:	42ab      	cmp	r3, r5
 80064da:	9a04      	ldr	r2, [sp, #16]
 80064dc:	bfa8      	it	ge
 80064de:	462b      	movge	r3, r5
 80064e0:	1ad2      	subs	r2, r2, r3
 80064e2:	9204      	str	r2, [sp, #16]
 80064e4:	9a05      	ldr	r2, [sp, #20]
 80064e6:	1aed      	subs	r5, r5, r3
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	9305      	str	r3, [sp, #20]
 80064ec:	9b07      	ldr	r3, [sp, #28]
 80064ee:	b31b      	cbz	r3, 8006538 <_dtoa_r+0x7a0>
 80064f0:	9b08      	ldr	r3, [sp, #32]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 80af 	beq.w	8006656 <_dtoa_r+0x8be>
 80064f8:	2e00      	cmp	r6, #0
 80064fa:	dd13      	ble.n	8006524 <_dtoa_r+0x78c>
 80064fc:	4639      	mov	r1, r7
 80064fe:	4632      	mov	r2, r6
 8006500:	4620      	mov	r0, r4
 8006502:	f000 fc09 	bl	8006d18 <__pow5mult>
 8006506:	ee18 2a10 	vmov	r2, s16
 800650a:	4601      	mov	r1, r0
 800650c:	4607      	mov	r7, r0
 800650e:	4620      	mov	r0, r4
 8006510:	f000 fb58 	bl	8006bc4 <__multiply>
 8006514:	ee18 1a10 	vmov	r1, s16
 8006518:	4680      	mov	r8, r0
 800651a:	4620      	mov	r0, r4
 800651c:	f000 fa84 	bl	8006a28 <_Bfree>
 8006520:	ee08 8a10 	vmov	s16, r8
 8006524:	9b07      	ldr	r3, [sp, #28]
 8006526:	1b9a      	subs	r2, r3, r6
 8006528:	d006      	beq.n	8006538 <_dtoa_r+0x7a0>
 800652a:	ee18 1a10 	vmov	r1, s16
 800652e:	4620      	mov	r0, r4
 8006530:	f000 fbf2 	bl	8006d18 <__pow5mult>
 8006534:	ee08 0a10 	vmov	s16, r0
 8006538:	2101      	movs	r1, #1
 800653a:	4620      	mov	r0, r4
 800653c:	f000 fb2c 	bl	8006b98 <__i2b>
 8006540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006542:	2b00      	cmp	r3, #0
 8006544:	4606      	mov	r6, r0
 8006546:	f340 8088 	ble.w	800665a <_dtoa_r+0x8c2>
 800654a:	461a      	mov	r2, r3
 800654c:	4601      	mov	r1, r0
 800654e:	4620      	mov	r0, r4
 8006550:	f000 fbe2 	bl	8006d18 <__pow5mult>
 8006554:	9b06      	ldr	r3, [sp, #24]
 8006556:	2b01      	cmp	r3, #1
 8006558:	4606      	mov	r6, r0
 800655a:	f340 8081 	ble.w	8006660 <_dtoa_r+0x8c8>
 800655e:	f04f 0800 	mov.w	r8, #0
 8006562:	6933      	ldr	r3, [r6, #16]
 8006564:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006568:	6918      	ldr	r0, [r3, #16]
 800656a:	f000 fac5 	bl	8006af8 <__hi0bits>
 800656e:	f1c0 0020 	rsb	r0, r0, #32
 8006572:	9b05      	ldr	r3, [sp, #20]
 8006574:	4418      	add	r0, r3
 8006576:	f010 001f 	ands.w	r0, r0, #31
 800657a:	f000 8092 	beq.w	80066a2 <_dtoa_r+0x90a>
 800657e:	f1c0 0320 	rsb	r3, r0, #32
 8006582:	2b04      	cmp	r3, #4
 8006584:	f340 808a 	ble.w	800669c <_dtoa_r+0x904>
 8006588:	f1c0 001c 	rsb	r0, r0, #28
 800658c:	9b04      	ldr	r3, [sp, #16]
 800658e:	4403      	add	r3, r0
 8006590:	9304      	str	r3, [sp, #16]
 8006592:	9b05      	ldr	r3, [sp, #20]
 8006594:	4403      	add	r3, r0
 8006596:	4405      	add	r5, r0
 8006598:	9305      	str	r3, [sp, #20]
 800659a:	9b04      	ldr	r3, [sp, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	dd07      	ble.n	80065b0 <_dtoa_r+0x818>
 80065a0:	ee18 1a10 	vmov	r1, s16
 80065a4:	461a      	mov	r2, r3
 80065a6:	4620      	mov	r0, r4
 80065a8:	f000 fc10 	bl	8006dcc <__lshift>
 80065ac:	ee08 0a10 	vmov	s16, r0
 80065b0:	9b05      	ldr	r3, [sp, #20]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	dd05      	ble.n	80065c2 <_dtoa_r+0x82a>
 80065b6:	4631      	mov	r1, r6
 80065b8:	461a      	mov	r2, r3
 80065ba:	4620      	mov	r0, r4
 80065bc:	f000 fc06 	bl	8006dcc <__lshift>
 80065c0:	4606      	mov	r6, r0
 80065c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d06e      	beq.n	80066a6 <_dtoa_r+0x90e>
 80065c8:	ee18 0a10 	vmov	r0, s16
 80065cc:	4631      	mov	r1, r6
 80065ce:	f000 fc6d 	bl	8006eac <__mcmp>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	da67      	bge.n	80066a6 <_dtoa_r+0x90e>
 80065d6:	9b00      	ldr	r3, [sp, #0]
 80065d8:	3b01      	subs	r3, #1
 80065da:	ee18 1a10 	vmov	r1, s16
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	220a      	movs	r2, #10
 80065e2:	2300      	movs	r3, #0
 80065e4:	4620      	mov	r0, r4
 80065e6:	f000 fa41 	bl	8006a6c <__multadd>
 80065ea:	9b08      	ldr	r3, [sp, #32]
 80065ec:	ee08 0a10 	vmov	s16, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 81b1 	beq.w	8006958 <_dtoa_r+0xbc0>
 80065f6:	2300      	movs	r3, #0
 80065f8:	4639      	mov	r1, r7
 80065fa:	220a      	movs	r2, #10
 80065fc:	4620      	mov	r0, r4
 80065fe:	f000 fa35 	bl	8006a6c <__multadd>
 8006602:	9b02      	ldr	r3, [sp, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	4607      	mov	r7, r0
 8006608:	f300 808e 	bgt.w	8006728 <_dtoa_r+0x990>
 800660c:	9b06      	ldr	r3, [sp, #24]
 800660e:	2b02      	cmp	r3, #2
 8006610:	dc51      	bgt.n	80066b6 <_dtoa_r+0x91e>
 8006612:	e089      	b.n	8006728 <_dtoa_r+0x990>
 8006614:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006616:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800661a:	e74b      	b.n	80064b4 <_dtoa_r+0x71c>
 800661c:	9b03      	ldr	r3, [sp, #12]
 800661e:	1e5e      	subs	r6, r3, #1
 8006620:	9b07      	ldr	r3, [sp, #28]
 8006622:	42b3      	cmp	r3, r6
 8006624:	bfbf      	itttt	lt
 8006626:	9b07      	ldrlt	r3, [sp, #28]
 8006628:	9607      	strlt	r6, [sp, #28]
 800662a:	1af2      	sublt	r2, r6, r3
 800662c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800662e:	bfb6      	itet	lt
 8006630:	189b      	addlt	r3, r3, r2
 8006632:	1b9e      	subge	r6, r3, r6
 8006634:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006636:	9b03      	ldr	r3, [sp, #12]
 8006638:	bfb8      	it	lt
 800663a:	2600      	movlt	r6, #0
 800663c:	2b00      	cmp	r3, #0
 800663e:	bfb7      	itett	lt
 8006640:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006644:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006648:	1a9d      	sublt	r5, r3, r2
 800664a:	2300      	movlt	r3, #0
 800664c:	e734      	b.n	80064b8 <_dtoa_r+0x720>
 800664e:	9e07      	ldr	r6, [sp, #28]
 8006650:	9d04      	ldr	r5, [sp, #16]
 8006652:	9f08      	ldr	r7, [sp, #32]
 8006654:	e73b      	b.n	80064ce <_dtoa_r+0x736>
 8006656:	9a07      	ldr	r2, [sp, #28]
 8006658:	e767      	b.n	800652a <_dtoa_r+0x792>
 800665a:	9b06      	ldr	r3, [sp, #24]
 800665c:	2b01      	cmp	r3, #1
 800665e:	dc18      	bgt.n	8006692 <_dtoa_r+0x8fa>
 8006660:	f1ba 0f00 	cmp.w	sl, #0
 8006664:	d115      	bne.n	8006692 <_dtoa_r+0x8fa>
 8006666:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800666a:	b993      	cbnz	r3, 8006692 <_dtoa_r+0x8fa>
 800666c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006670:	0d1b      	lsrs	r3, r3, #20
 8006672:	051b      	lsls	r3, r3, #20
 8006674:	b183      	cbz	r3, 8006698 <_dtoa_r+0x900>
 8006676:	9b04      	ldr	r3, [sp, #16]
 8006678:	3301      	adds	r3, #1
 800667a:	9304      	str	r3, [sp, #16]
 800667c:	9b05      	ldr	r3, [sp, #20]
 800667e:	3301      	adds	r3, #1
 8006680:	9305      	str	r3, [sp, #20]
 8006682:	f04f 0801 	mov.w	r8, #1
 8006686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006688:	2b00      	cmp	r3, #0
 800668a:	f47f af6a 	bne.w	8006562 <_dtoa_r+0x7ca>
 800668e:	2001      	movs	r0, #1
 8006690:	e76f      	b.n	8006572 <_dtoa_r+0x7da>
 8006692:	f04f 0800 	mov.w	r8, #0
 8006696:	e7f6      	b.n	8006686 <_dtoa_r+0x8ee>
 8006698:	4698      	mov	r8, r3
 800669a:	e7f4      	b.n	8006686 <_dtoa_r+0x8ee>
 800669c:	f43f af7d 	beq.w	800659a <_dtoa_r+0x802>
 80066a0:	4618      	mov	r0, r3
 80066a2:	301c      	adds	r0, #28
 80066a4:	e772      	b.n	800658c <_dtoa_r+0x7f4>
 80066a6:	9b03      	ldr	r3, [sp, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	dc37      	bgt.n	800671c <_dtoa_r+0x984>
 80066ac:	9b06      	ldr	r3, [sp, #24]
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	dd34      	ble.n	800671c <_dtoa_r+0x984>
 80066b2:	9b03      	ldr	r3, [sp, #12]
 80066b4:	9302      	str	r3, [sp, #8]
 80066b6:	9b02      	ldr	r3, [sp, #8]
 80066b8:	b96b      	cbnz	r3, 80066d6 <_dtoa_r+0x93e>
 80066ba:	4631      	mov	r1, r6
 80066bc:	2205      	movs	r2, #5
 80066be:	4620      	mov	r0, r4
 80066c0:	f000 f9d4 	bl	8006a6c <__multadd>
 80066c4:	4601      	mov	r1, r0
 80066c6:	4606      	mov	r6, r0
 80066c8:	ee18 0a10 	vmov	r0, s16
 80066cc:	f000 fbee 	bl	8006eac <__mcmp>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	f73f adbb 	bgt.w	800624c <_dtoa_r+0x4b4>
 80066d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d8:	9d01      	ldr	r5, [sp, #4]
 80066da:	43db      	mvns	r3, r3
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	f04f 0800 	mov.w	r8, #0
 80066e2:	4631      	mov	r1, r6
 80066e4:	4620      	mov	r0, r4
 80066e6:	f000 f99f 	bl	8006a28 <_Bfree>
 80066ea:	2f00      	cmp	r7, #0
 80066ec:	f43f aea4 	beq.w	8006438 <_dtoa_r+0x6a0>
 80066f0:	f1b8 0f00 	cmp.w	r8, #0
 80066f4:	d005      	beq.n	8006702 <_dtoa_r+0x96a>
 80066f6:	45b8      	cmp	r8, r7
 80066f8:	d003      	beq.n	8006702 <_dtoa_r+0x96a>
 80066fa:	4641      	mov	r1, r8
 80066fc:	4620      	mov	r0, r4
 80066fe:	f000 f993 	bl	8006a28 <_Bfree>
 8006702:	4639      	mov	r1, r7
 8006704:	4620      	mov	r0, r4
 8006706:	f000 f98f 	bl	8006a28 <_Bfree>
 800670a:	e695      	b.n	8006438 <_dtoa_r+0x6a0>
 800670c:	2600      	movs	r6, #0
 800670e:	4637      	mov	r7, r6
 8006710:	e7e1      	b.n	80066d6 <_dtoa_r+0x93e>
 8006712:	9700      	str	r7, [sp, #0]
 8006714:	4637      	mov	r7, r6
 8006716:	e599      	b.n	800624c <_dtoa_r+0x4b4>
 8006718:	40240000 	.word	0x40240000
 800671c:	9b08      	ldr	r3, [sp, #32]
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 80ca 	beq.w	80068b8 <_dtoa_r+0xb20>
 8006724:	9b03      	ldr	r3, [sp, #12]
 8006726:	9302      	str	r3, [sp, #8]
 8006728:	2d00      	cmp	r5, #0
 800672a:	dd05      	ble.n	8006738 <_dtoa_r+0x9a0>
 800672c:	4639      	mov	r1, r7
 800672e:	462a      	mov	r2, r5
 8006730:	4620      	mov	r0, r4
 8006732:	f000 fb4b 	bl	8006dcc <__lshift>
 8006736:	4607      	mov	r7, r0
 8006738:	f1b8 0f00 	cmp.w	r8, #0
 800673c:	d05b      	beq.n	80067f6 <_dtoa_r+0xa5e>
 800673e:	6879      	ldr	r1, [r7, #4]
 8006740:	4620      	mov	r0, r4
 8006742:	f000 f931 	bl	80069a8 <_Balloc>
 8006746:	4605      	mov	r5, r0
 8006748:	b928      	cbnz	r0, 8006756 <_dtoa_r+0x9be>
 800674a:	4b87      	ldr	r3, [pc, #540]	; (8006968 <_dtoa_r+0xbd0>)
 800674c:	4602      	mov	r2, r0
 800674e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006752:	f7ff bb3b 	b.w	8005dcc <_dtoa_r+0x34>
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	3202      	adds	r2, #2
 800675a:	0092      	lsls	r2, r2, #2
 800675c:	f107 010c 	add.w	r1, r7, #12
 8006760:	300c      	adds	r0, #12
 8006762:	f000 f913 	bl	800698c <memcpy>
 8006766:	2201      	movs	r2, #1
 8006768:	4629      	mov	r1, r5
 800676a:	4620      	mov	r0, r4
 800676c:	f000 fb2e 	bl	8006dcc <__lshift>
 8006770:	9b01      	ldr	r3, [sp, #4]
 8006772:	f103 0901 	add.w	r9, r3, #1
 8006776:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800677a:	4413      	add	r3, r2
 800677c:	9305      	str	r3, [sp, #20]
 800677e:	f00a 0301 	and.w	r3, sl, #1
 8006782:	46b8      	mov	r8, r7
 8006784:	9304      	str	r3, [sp, #16]
 8006786:	4607      	mov	r7, r0
 8006788:	4631      	mov	r1, r6
 800678a:	ee18 0a10 	vmov	r0, s16
 800678e:	f7ff fa75 	bl	8005c7c <quorem>
 8006792:	4641      	mov	r1, r8
 8006794:	9002      	str	r0, [sp, #8]
 8006796:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800679a:	ee18 0a10 	vmov	r0, s16
 800679e:	f000 fb85 	bl	8006eac <__mcmp>
 80067a2:	463a      	mov	r2, r7
 80067a4:	9003      	str	r0, [sp, #12]
 80067a6:	4631      	mov	r1, r6
 80067a8:	4620      	mov	r0, r4
 80067aa:	f000 fb9b 	bl	8006ee4 <__mdiff>
 80067ae:	68c2      	ldr	r2, [r0, #12]
 80067b0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80067b4:	4605      	mov	r5, r0
 80067b6:	bb02      	cbnz	r2, 80067fa <_dtoa_r+0xa62>
 80067b8:	4601      	mov	r1, r0
 80067ba:	ee18 0a10 	vmov	r0, s16
 80067be:	f000 fb75 	bl	8006eac <__mcmp>
 80067c2:	4602      	mov	r2, r0
 80067c4:	4629      	mov	r1, r5
 80067c6:	4620      	mov	r0, r4
 80067c8:	9207      	str	r2, [sp, #28]
 80067ca:	f000 f92d 	bl	8006a28 <_Bfree>
 80067ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80067d2:	ea43 0102 	orr.w	r1, r3, r2
 80067d6:	9b04      	ldr	r3, [sp, #16]
 80067d8:	430b      	orrs	r3, r1
 80067da:	464d      	mov	r5, r9
 80067dc:	d10f      	bne.n	80067fe <_dtoa_r+0xa66>
 80067de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80067e2:	d02a      	beq.n	800683a <_dtoa_r+0xaa2>
 80067e4:	9b03      	ldr	r3, [sp, #12]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	dd02      	ble.n	80067f0 <_dtoa_r+0xa58>
 80067ea:	9b02      	ldr	r3, [sp, #8]
 80067ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80067f0:	f88b a000 	strb.w	sl, [fp]
 80067f4:	e775      	b.n	80066e2 <_dtoa_r+0x94a>
 80067f6:	4638      	mov	r0, r7
 80067f8:	e7ba      	b.n	8006770 <_dtoa_r+0x9d8>
 80067fa:	2201      	movs	r2, #1
 80067fc:	e7e2      	b.n	80067c4 <_dtoa_r+0xa2c>
 80067fe:	9b03      	ldr	r3, [sp, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	db04      	blt.n	800680e <_dtoa_r+0xa76>
 8006804:	9906      	ldr	r1, [sp, #24]
 8006806:	430b      	orrs	r3, r1
 8006808:	9904      	ldr	r1, [sp, #16]
 800680a:	430b      	orrs	r3, r1
 800680c:	d122      	bne.n	8006854 <_dtoa_r+0xabc>
 800680e:	2a00      	cmp	r2, #0
 8006810:	ddee      	ble.n	80067f0 <_dtoa_r+0xa58>
 8006812:	ee18 1a10 	vmov	r1, s16
 8006816:	2201      	movs	r2, #1
 8006818:	4620      	mov	r0, r4
 800681a:	f000 fad7 	bl	8006dcc <__lshift>
 800681e:	4631      	mov	r1, r6
 8006820:	ee08 0a10 	vmov	s16, r0
 8006824:	f000 fb42 	bl	8006eac <__mcmp>
 8006828:	2800      	cmp	r0, #0
 800682a:	dc03      	bgt.n	8006834 <_dtoa_r+0xa9c>
 800682c:	d1e0      	bne.n	80067f0 <_dtoa_r+0xa58>
 800682e:	f01a 0f01 	tst.w	sl, #1
 8006832:	d0dd      	beq.n	80067f0 <_dtoa_r+0xa58>
 8006834:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006838:	d1d7      	bne.n	80067ea <_dtoa_r+0xa52>
 800683a:	2339      	movs	r3, #57	; 0x39
 800683c:	f88b 3000 	strb.w	r3, [fp]
 8006840:	462b      	mov	r3, r5
 8006842:	461d      	mov	r5, r3
 8006844:	3b01      	subs	r3, #1
 8006846:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800684a:	2a39      	cmp	r2, #57	; 0x39
 800684c:	d071      	beq.n	8006932 <_dtoa_r+0xb9a>
 800684e:	3201      	adds	r2, #1
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	e746      	b.n	80066e2 <_dtoa_r+0x94a>
 8006854:	2a00      	cmp	r2, #0
 8006856:	dd07      	ble.n	8006868 <_dtoa_r+0xad0>
 8006858:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800685c:	d0ed      	beq.n	800683a <_dtoa_r+0xaa2>
 800685e:	f10a 0301 	add.w	r3, sl, #1
 8006862:	f88b 3000 	strb.w	r3, [fp]
 8006866:	e73c      	b.n	80066e2 <_dtoa_r+0x94a>
 8006868:	9b05      	ldr	r3, [sp, #20]
 800686a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800686e:	4599      	cmp	r9, r3
 8006870:	d047      	beq.n	8006902 <_dtoa_r+0xb6a>
 8006872:	ee18 1a10 	vmov	r1, s16
 8006876:	2300      	movs	r3, #0
 8006878:	220a      	movs	r2, #10
 800687a:	4620      	mov	r0, r4
 800687c:	f000 f8f6 	bl	8006a6c <__multadd>
 8006880:	45b8      	cmp	r8, r7
 8006882:	ee08 0a10 	vmov	s16, r0
 8006886:	f04f 0300 	mov.w	r3, #0
 800688a:	f04f 020a 	mov.w	r2, #10
 800688e:	4641      	mov	r1, r8
 8006890:	4620      	mov	r0, r4
 8006892:	d106      	bne.n	80068a2 <_dtoa_r+0xb0a>
 8006894:	f000 f8ea 	bl	8006a6c <__multadd>
 8006898:	4680      	mov	r8, r0
 800689a:	4607      	mov	r7, r0
 800689c:	f109 0901 	add.w	r9, r9, #1
 80068a0:	e772      	b.n	8006788 <_dtoa_r+0x9f0>
 80068a2:	f000 f8e3 	bl	8006a6c <__multadd>
 80068a6:	4639      	mov	r1, r7
 80068a8:	4680      	mov	r8, r0
 80068aa:	2300      	movs	r3, #0
 80068ac:	220a      	movs	r2, #10
 80068ae:	4620      	mov	r0, r4
 80068b0:	f000 f8dc 	bl	8006a6c <__multadd>
 80068b4:	4607      	mov	r7, r0
 80068b6:	e7f1      	b.n	800689c <_dtoa_r+0xb04>
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	9302      	str	r3, [sp, #8]
 80068bc:	9d01      	ldr	r5, [sp, #4]
 80068be:	ee18 0a10 	vmov	r0, s16
 80068c2:	4631      	mov	r1, r6
 80068c4:	f7ff f9da 	bl	8005c7c <quorem>
 80068c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80068cc:	9b01      	ldr	r3, [sp, #4]
 80068ce:	f805 ab01 	strb.w	sl, [r5], #1
 80068d2:	1aea      	subs	r2, r5, r3
 80068d4:	9b02      	ldr	r3, [sp, #8]
 80068d6:	4293      	cmp	r3, r2
 80068d8:	dd09      	ble.n	80068ee <_dtoa_r+0xb56>
 80068da:	ee18 1a10 	vmov	r1, s16
 80068de:	2300      	movs	r3, #0
 80068e0:	220a      	movs	r2, #10
 80068e2:	4620      	mov	r0, r4
 80068e4:	f000 f8c2 	bl	8006a6c <__multadd>
 80068e8:	ee08 0a10 	vmov	s16, r0
 80068ec:	e7e7      	b.n	80068be <_dtoa_r+0xb26>
 80068ee:	9b02      	ldr	r3, [sp, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	bfc8      	it	gt
 80068f4:	461d      	movgt	r5, r3
 80068f6:	9b01      	ldr	r3, [sp, #4]
 80068f8:	bfd8      	it	le
 80068fa:	2501      	movle	r5, #1
 80068fc:	441d      	add	r5, r3
 80068fe:	f04f 0800 	mov.w	r8, #0
 8006902:	ee18 1a10 	vmov	r1, s16
 8006906:	2201      	movs	r2, #1
 8006908:	4620      	mov	r0, r4
 800690a:	f000 fa5f 	bl	8006dcc <__lshift>
 800690e:	4631      	mov	r1, r6
 8006910:	ee08 0a10 	vmov	s16, r0
 8006914:	f000 faca 	bl	8006eac <__mcmp>
 8006918:	2800      	cmp	r0, #0
 800691a:	dc91      	bgt.n	8006840 <_dtoa_r+0xaa8>
 800691c:	d102      	bne.n	8006924 <_dtoa_r+0xb8c>
 800691e:	f01a 0f01 	tst.w	sl, #1
 8006922:	d18d      	bne.n	8006840 <_dtoa_r+0xaa8>
 8006924:	462b      	mov	r3, r5
 8006926:	461d      	mov	r5, r3
 8006928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800692c:	2a30      	cmp	r2, #48	; 0x30
 800692e:	d0fa      	beq.n	8006926 <_dtoa_r+0xb8e>
 8006930:	e6d7      	b.n	80066e2 <_dtoa_r+0x94a>
 8006932:	9a01      	ldr	r2, [sp, #4]
 8006934:	429a      	cmp	r2, r3
 8006936:	d184      	bne.n	8006842 <_dtoa_r+0xaaa>
 8006938:	9b00      	ldr	r3, [sp, #0]
 800693a:	3301      	adds	r3, #1
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	2331      	movs	r3, #49	; 0x31
 8006940:	7013      	strb	r3, [r2, #0]
 8006942:	e6ce      	b.n	80066e2 <_dtoa_r+0x94a>
 8006944:	4b09      	ldr	r3, [pc, #36]	; (800696c <_dtoa_r+0xbd4>)
 8006946:	f7ff ba95 	b.w	8005e74 <_dtoa_r+0xdc>
 800694a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800694c:	2b00      	cmp	r3, #0
 800694e:	f47f aa6e 	bne.w	8005e2e <_dtoa_r+0x96>
 8006952:	4b07      	ldr	r3, [pc, #28]	; (8006970 <_dtoa_r+0xbd8>)
 8006954:	f7ff ba8e 	b.w	8005e74 <_dtoa_r+0xdc>
 8006958:	9b02      	ldr	r3, [sp, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	dcae      	bgt.n	80068bc <_dtoa_r+0xb24>
 800695e:	9b06      	ldr	r3, [sp, #24]
 8006960:	2b02      	cmp	r3, #2
 8006962:	f73f aea8 	bgt.w	80066b6 <_dtoa_r+0x91e>
 8006966:	e7a9      	b.n	80068bc <_dtoa_r+0xb24>
 8006968:	08008253 	.word	0x08008253
 800696c:	080081b0 	.word	0x080081b0
 8006970:	080081d4 	.word	0x080081d4

08006974 <_localeconv_r>:
 8006974:	4800      	ldr	r0, [pc, #0]	; (8006978 <_localeconv_r+0x4>)
 8006976:	4770      	bx	lr
 8006978:	20000160 	.word	0x20000160

0800697c <malloc>:
 800697c:	4b02      	ldr	r3, [pc, #8]	; (8006988 <malloc+0xc>)
 800697e:	4601      	mov	r1, r0
 8006980:	6818      	ldr	r0, [r3, #0]
 8006982:	f000 bc17 	b.w	80071b4 <_malloc_r>
 8006986:	bf00      	nop
 8006988:	2000000c 	.word	0x2000000c

0800698c <memcpy>:
 800698c:	440a      	add	r2, r1
 800698e:	4291      	cmp	r1, r2
 8006990:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006994:	d100      	bne.n	8006998 <memcpy+0xc>
 8006996:	4770      	bx	lr
 8006998:	b510      	push	{r4, lr}
 800699a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800699e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069a2:	4291      	cmp	r1, r2
 80069a4:	d1f9      	bne.n	800699a <memcpy+0xe>
 80069a6:	bd10      	pop	{r4, pc}

080069a8 <_Balloc>:
 80069a8:	b570      	push	{r4, r5, r6, lr}
 80069aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069ac:	4604      	mov	r4, r0
 80069ae:	460d      	mov	r5, r1
 80069b0:	b976      	cbnz	r6, 80069d0 <_Balloc+0x28>
 80069b2:	2010      	movs	r0, #16
 80069b4:	f7ff ffe2 	bl	800697c <malloc>
 80069b8:	4602      	mov	r2, r0
 80069ba:	6260      	str	r0, [r4, #36]	; 0x24
 80069bc:	b920      	cbnz	r0, 80069c8 <_Balloc+0x20>
 80069be:	4b18      	ldr	r3, [pc, #96]	; (8006a20 <_Balloc+0x78>)
 80069c0:	4818      	ldr	r0, [pc, #96]	; (8006a24 <_Balloc+0x7c>)
 80069c2:	2166      	movs	r1, #102	; 0x66
 80069c4:	f000 fdd6 	bl	8007574 <__assert_func>
 80069c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069cc:	6006      	str	r6, [r0, #0]
 80069ce:	60c6      	str	r6, [r0, #12]
 80069d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80069d2:	68f3      	ldr	r3, [r6, #12]
 80069d4:	b183      	cbz	r3, 80069f8 <_Balloc+0x50>
 80069d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069de:	b9b8      	cbnz	r0, 8006a10 <_Balloc+0x68>
 80069e0:	2101      	movs	r1, #1
 80069e2:	fa01 f605 	lsl.w	r6, r1, r5
 80069e6:	1d72      	adds	r2, r6, #5
 80069e8:	0092      	lsls	r2, r2, #2
 80069ea:	4620      	mov	r0, r4
 80069ec:	f000 fb60 	bl	80070b0 <_calloc_r>
 80069f0:	b160      	cbz	r0, 8006a0c <_Balloc+0x64>
 80069f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069f6:	e00e      	b.n	8006a16 <_Balloc+0x6e>
 80069f8:	2221      	movs	r2, #33	; 0x21
 80069fa:	2104      	movs	r1, #4
 80069fc:	4620      	mov	r0, r4
 80069fe:	f000 fb57 	bl	80070b0 <_calloc_r>
 8006a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a04:	60f0      	str	r0, [r6, #12]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1e4      	bne.n	80069d6 <_Balloc+0x2e>
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}
 8006a10:	6802      	ldr	r2, [r0, #0]
 8006a12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a16:	2300      	movs	r3, #0
 8006a18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a1c:	e7f7      	b.n	8006a0e <_Balloc+0x66>
 8006a1e:	bf00      	nop
 8006a20:	080081e1 	.word	0x080081e1
 8006a24:	08008264 	.word	0x08008264

08006a28 <_Bfree>:
 8006a28:	b570      	push	{r4, r5, r6, lr}
 8006a2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a2c:	4605      	mov	r5, r0
 8006a2e:	460c      	mov	r4, r1
 8006a30:	b976      	cbnz	r6, 8006a50 <_Bfree+0x28>
 8006a32:	2010      	movs	r0, #16
 8006a34:	f7ff ffa2 	bl	800697c <malloc>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	6268      	str	r0, [r5, #36]	; 0x24
 8006a3c:	b920      	cbnz	r0, 8006a48 <_Bfree+0x20>
 8006a3e:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <_Bfree+0x3c>)
 8006a40:	4809      	ldr	r0, [pc, #36]	; (8006a68 <_Bfree+0x40>)
 8006a42:	218a      	movs	r1, #138	; 0x8a
 8006a44:	f000 fd96 	bl	8007574 <__assert_func>
 8006a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a4c:	6006      	str	r6, [r0, #0]
 8006a4e:	60c6      	str	r6, [r0, #12]
 8006a50:	b13c      	cbz	r4, 8006a62 <_Bfree+0x3a>
 8006a52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a54:	6862      	ldr	r2, [r4, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a5c:	6021      	str	r1, [r4, #0]
 8006a5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a62:	bd70      	pop	{r4, r5, r6, pc}
 8006a64:	080081e1 	.word	0x080081e1
 8006a68:	08008264 	.word	0x08008264

08006a6c <__multadd>:
 8006a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a70:	690d      	ldr	r5, [r1, #16]
 8006a72:	4607      	mov	r7, r0
 8006a74:	460c      	mov	r4, r1
 8006a76:	461e      	mov	r6, r3
 8006a78:	f101 0c14 	add.w	ip, r1, #20
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	f8dc 3000 	ldr.w	r3, [ip]
 8006a82:	b299      	uxth	r1, r3
 8006a84:	fb02 6101 	mla	r1, r2, r1, r6
 8006a88:	0c1e      	lsrs	r6, r3, #16
 8006a8a:	0c0b      	lsrs	r3, r1, #16
 8006a8c:	fb02 3306 	mla	r3, r2, r6, r3
 8006a90:	b289      	uxth	r1, r1
 8006a92:	3001      	adds	r0, #1
 8006a94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a98:	4285      	cmp	r5, r0
 8006a9a:	f84c 1b04 	str.w	r1, [ip], #4
 8006a9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006aa2:	dcec      	bgt.n	8006a7e <__multadd+0x12>
 8006aa4:	b30e      	cbz	r6, 8006aea <__multadd+0x7e>
 8006aa6:	68a3      	ldr	r3, [r4, #8]
 8006aa8:	42ab      	cmp	r3, r5
 8006aaa:	dc19      	bgt.n	8006ae0 <__multadd+0x74>
 8006aac:	6861      	ldr	r1, [r4, #4]
 8006aae:	4638      	mov	r0, r7
 8006ab0:	3101      	adds	r1, #1
 8006ab2:	f7ff ff79 	bl	80069a8 <_Balloc>
 8006ab6:	4680      	mov	r8, r0
 8006ab8:	b928      	cbnz	r0, 8006ac6 <__multadd+0x5a>
 8006aba:	4602      	mov	r2, r0
 8006abc:	4b0c      	ldr	r3, [pc, #48]	; (8006af0 <__multadd+0x84>)
 8006abe:	480d      	ldr	r0, [pc, #52]	; (8006af4 <__multadd+0x88>)
 8006ac0:	21b5      	movs	r1, #181	; 0xb5
 8006ac2:	f000 fd57 	bl	8007574 <__assert_func>
 8006ac6:	6922      	ldr	r2, [r4, #16]
 8006ac8:	3202      	adds	r2, #2
 8006aca:	f104 010c 	add.w	r1, r4, #12
 8006ace:	0092      	lsls	r2, r2, #2
 8006ad0:	300c      	adds	r0, #12
 8006ad2:	f7ff ff5b 	bl	800698c <memcpy>
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	4638      	mov	r0, r7
 8006ada:	f7ff ffa5 	bl	8006a28 <_Bfree>
 8006ade:	4644      	mov	r4, r8
 8006ae0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ae4:	3501      	adds	r5, #1
 8006ae6:	615e      	str	r6, [r3, #20]
 8006ae8:	6125      	str	r5, [r4, #16]
 8006aea:	4620      	mov	r0, r4
 8006aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af0:	08008253 	.word	0x08008253
 8006af4:	08008264 	.word	0x08008264

08006af8 <__hi0bits>:
 8006af8:	0c03      	lsrs	r3, r0, #16
 8006afa:	041b      	lsls	r3, r3, #16
 8006afc:	b9d3      	cbnz	r3, 8006b34 <__hi0bits+0x3c>
 8006afe:	0400      	lsls	r0, r0, #16
 8006b00:	2310      	movs	r3, #16
 8006b02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b06:	bf04      	itt	eq
 8006b08:	0200      	lsleq	r0, r0, #8
 8006b0a:	3308      	addeq	r3, #8
 8006b0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006b10:	bf04      	itt	eq
 8006b12:	0100      	lsleq	r0, r0, #4
 8006b14:	3304      	addeq	r3, #4
 8006b16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b1a:	bf04      	itt	eq
 8006b1c:	0080      	lsleq	r0, r0, #2
 8006b1e:	3302      	addeq	r3, #2
 8006b20:	2800      	cmp	r0, #0
 8006b22:	db05      	blt.n	8006b30 <__hi0bits+0x38>
 8006b24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b28:	f103 0301 	add.w	r3, r3, #1
 8006b2c:	bf08      	it	eq
 8006b2e:	2320      	moveq	r3, #32
 8006b30:	4618      	mov	r0, r3
 8006b32:	4770      	bx	lr
 8006b34:	2300      	movs	r3, #0
 8006b36:	e7e4      	b.n	8006b02 <__hi0bits+0xa>

08006b38 <__lo0bits>:
 8006b38:	6803      	ldr	r3, [r0, #0]
 8006b3a:	f013 0207 	ands.w	r2, r3, #7
 8006b3e:	4601      	mov	r1, r0
 8006b40:	d00b      	beq.n	8006b5a <__lo0bits+0x22>
 8006b42:	07da      	lsls	r2, r3, #31
 8006b44:	d423      	bmi.n	8006b8e <__lo0bits+0x56>
 8006b46:	0798      	lsls	r0, r3, #30
 8006b48:	bf49      	itett	mi
 8006b4a:	085b      	lsrmi	r3, r3, #1
 8006b4c:	089b      	lsrpl	r3, r3, #2
 8006b4e:	2001      	movmi	r0, #1
 8006b50:	600b      	strmi	r3, [r1, #0]
 8006b52:	bf5c      	itt	pl
 8006b54:	600b      	strpl	r3, [r1, #0]
 8006b56:	2002      	movpl	r0, #2
 8006b58:	4770      	bx	lr
 8006b5a:	b298      	uxth	r0, r3
 8006b5c:	b9a8      	cbnz	r0, 8006b8a <__lo0bits+0x52>
 8006b5e:	0c1b      	lsrs	r3, r3, #16
 8006b60:	2010      	movs	r0, #16
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	b90a      	cbnz	r2, 8006b6a <__lo0bits+0x32>
 8006b66:	3008      	adds	r0, #8
 8006b68:	0a1b      	lsrs	r3, r3, #8
 8006b6a:	071a      	lsls	r2, r3, #28
 8006b6c:	bf04      	itt	eq
 8006b6e:	091b      	lsreq	r3, r3, #4
 8006b70:	3004      	addeq	r0, #4
 8006b72:	079a      	lsls	r2, r3, #30
 8006b74:	bf04      	itt	eq
 8006b76:	089b      	lsreq	r3, r3, #2
 8006b78:	3002      	addeq	r0, #2
 8006b7a:	07da      	lsls	r2, r3, #31
 8006b7c:	d403      	bmi.n	8006b86 <__lo0bits+0x4e>
 8006b7e:	085b      	lsrs	r3, r3, #1
 8006b80:	f100 0001 	add.w	r0, r0, #1
 8006b84:	d005      	beq.n	8006b92 <__lo0bits+0x5a>
 8006b86:	600b      	str	r3, [r1, #0]
 8006b88:	4770      	bx	lr
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	e7e9      	b.n	8006b62 <__lo0bits+0x2a>
 8006b8e:	2000      	movs	r0, #0
 8006b90:	4770      	bx	lr
 8006b92:	2020      	movs	r0, #32
 8006b94:	4770      	bx	lr
	...

08006b98 <__i2b>:
 8006b98:	b510      	push	{r4, lr}
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	f7ff ff03 	bl	80069a8 <_Balloc>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	b928      	cbnz	r0, 8006bb2 <__i2b+0x1a>
 8006ba6:	4b05      	ldr	r3, [pc, #20]	; (8006bbc <__i2b+0x24>)
 8006ba8:	4805      	ldr	r0, [pc, #20]	; (8006bc0 <__i2b+0x28>)
 8006baa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006bae:	f000 fce1 	bl	8007574 <__assert_func>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	6144      	str	r4, [r0, #20]
 8006bb6:	6103      	str	r3, [r0, #16]
 8006bb8:	bd10      	pop	{r4, pc}
 8006bba:	bf00      	nop
 8006bbc:	08008253 	.word	0x08008253
 8006bc0:	08008264 	.word	0x08008264

08006bc4 <__multiply>:
 8006bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc8:	4691      	mov	r9, r2
 8006bca:	690a      	ldr	r2, [r1, #16]
 8006bcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	bfb8      	it	lt
 8006bd4:	460b      	movlt	r3, r1
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	bfbc      	itt	lt
 8006bda:	464c      	movlt	r4, r9
 8006bdc:	4699      	movlt	r9, r3
 8006bde:	6927      	ldr	r7, [r4, #16]
 8006be0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006be4:	68a3      	ldr	r3, [r4, #8]
 8006be6:	6861      	ldr	r1, [r4, #4]
 8006be8:	eb07 060a 	add.w	r6, r7, sl
 8006bec:	42b3      	cmp	r3, r6
 8006bee:	b085      	sub	sp, #20
 8006bf0:	bfb8      	it	lt
 8006bf2:	3101      	addlt	r1, #1
 8006bf4:	f7ff fed8 	bl	80069a8 <_Balloc>
 8006bf8:	b930      	cbnz	r0, 8006c08 <__multiply+0x44>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	4b44      	ldr	r3, [pc, #272]	; (8006d10 <__multiply+0x14c>)
 8006bfe:	4845      	ldr	r0, [pc, #276]	; (8006d14 <__multiply+0x150>)
 8006c00:	f240 115d 	movw	r1, #349	; 0x15d
 8006c04:	f000 fcb6 	bl	8007574 <__assert_func>
 8006c08:	f100 0514 	add.w	r5, r0, #20
 8006c0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c10:	462b      	mov	r3, r5
 8006c12:	2200      	movs	r2, #0
 8006c14:	4543      	cmp	r3, r8
 8006c16:	d321      	bcc.n	8006c5c <__multiply+0x98>
 8006c18:	f104 0314 	add.w	r3, r4, #20
 8006c1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c20:	f109 0314 	add.w	r3, r9, #20
 8006c24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c28:	9202      	str	r2, [sp, #8]
 8006c2a:	1b3a      	subs	r2, r7, r4
 8006c2c:	3a15      	subs	r2, #21
 8006c2e:	f022 0203 	bic.w	r2, r2, #3
 8006c32:	3204      	adds	r2, #4
 8006c34:	f104 0115 	add.w	r1, r4, #21
 8006c38:	428f      	cmp	r7, r1
 8006c3a:	bf38      	it	cc
 8006c3c:	2204      	movcc	r2, #4
 8006c3e:	9201      	str	r2, [sp, #4]
 8006c40:	9a02      	ldr	r2, [sp, #8]
 8006c42:	9303      	str	r3, [sp, #12]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d80c      	bhi.n	8006c62 <__multiply+0x9e>
 8006c48:	2e00      	cmp	r6, #0
 8006c4a:	dd03      	ble.n	8006c54 <__multiply+0x90>
 8006c4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d05a      	beq.n	8006d0a <__multiply+0x146>
 8006c54:	6106      	str	r6, [r0, #16]
 8006c56:	b005      	add	sp, #20
 8006c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c5c:	f843 2b04 	str.w	r2, [r3], #4
 8006c60:	e7d8      	b.n	8006c14 <__multiply+0x50>
 8006c62:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c66:	f1ba 0f00 	cmp.w	sl, #0
 8006c6a:	d024      	beq.n	8006cb6 <__multiply+0xf2>
 8006c6c:	f104 0e14 	add.w	lr, r4, #20
 8006c70:	46a9      	mov	r9, r5
 8006c72:	f04f 0c00 	mov.w	ip, #0
 8006c76:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c7a:	f8d9 1000 	ldr.w	r1, [r9]
 8006c7e:	fa1f fb82 	uxth.w	fp, r2
 8006c82:	b289      	uxth	r1, r1
 8006c84:	fb0a 110b 	mla	r1, sl, fp, r1
 8006c88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006c8c:	f8d9 2000 	ldr.w	r2, [r9]
 8006c90:	4461      	add	r1, ip
 8006c92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c96:	fb0a c20b 	mla	r2, sl, fp, ip
 8006c9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006c9e:	b289      	uxth	r1, r1
 8006ca0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ca4:	4577      	cmp	r7, lr
 8006ca6:	f849 1b04 	str.w	r1, [r9], #4
 8006caa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cae:	d8e2      	bhi.n	8006c76 <__multiply+0xb2>
 8006cb0:	9a01      	ldr	r2, [sp, #4]
 8006cb2:	f845 c002 	str.w	ip, [r5, r2]
 8006cb6:	9a03      	ldr	r2, [sp, #12]
 8006cb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	f1b9 0f00 	cmp.w	r9, #0
 8006cc2:	d020      	beq.n	8006d06 <__multiply+0x142>
 8006cc4:	6829      	ldr	r1, [r5, #0]
 8006cc6:	f104 0c14 	add.w	ip, r4, #20
 8006cca:	46ae      	mov	lr, r5
 8006ccc:	f04f 0a00 	mov.w	sl, #0
 8006cd0:	f8bc b000 	ldrh.w	fp, [ip]
 8006cd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006cd8:	fb09 220b 	mla	r2, r9, fp, r2
 8006cdc:	4492      	add	sl, r2
 8006cde:	b289      	uxth	r1, r1
 8006ce0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006ce4:	f84e 1b04 	str.w	r1, [lr], #4
 8006ce8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006cec:	f8be 1000 	ldrh.w	r1, [lr]
 8006cf0:	0c12      	lsrs	r2, r2, #16
 8006cf2:	fb09 1102 	mla	r1, r9, r2, r1
 8006cf6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006cfa:	4567      	cmp	r7, ip
 8006cfc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d00:	d8e6      	bhi.n	8006cd0 <__multiply+0x10c>
 8006d02:	9a01      	ldr	r2, [sp, #4]
 8006d04:	50a9      	str	r1, [r5, r2]
 8006d06:	3504      	adds	r5, #4
 8006d08:	e79a      	b.n	8006c40 <__multiply+0x7c>
 8006d0a:	3e01      	subs	r6, #1
 8006d0c:	e79c      	b.n	8006c48 <__multiply+0x84>
 8006d0e:	bf00      	nop
 8006d10:	08008253 	.word	0x08008253
 8006d14:	08008264 	.word	0x08008264

08006d18 <__pow5mult>:
 8006d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d1c:	4615      	mov	r5, r2
 8006d1e:	f012 0203 	ands.w	r2, r2, #3
 8006d22:	4606      	mov	r6, r0
 8006d24:	460f      	mov	r7, r1
 8006d26:	d007      	beq.n	8006d38 <__pow5mult+0x20>
 8006d28:	4c25      	ldr	r4, [pc, #148]	; (8006dc0 <__pow5mult+0xa8>)
 8006d2a:	3a01      	subs	r2, #1
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d32:	f7ff fe9b 	bl	8006a6c <__multadd>
 8006d36:	4607      	mov	r7, r0
 8006d38:	10ad      	asrs	r5, r5, #2
 8006d3a:	d03d      	beq.n	8006db8 <__pow5mult+0xa0>
 8006d3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d3e:	b97c      	cbnz	r4, 8006d60 <__pow5mult+0x48>
 8006d40:	2010      	movs	r0, #16
 8006d42:	f7ff fe1b 	bl	800697c <malloc>
 8006d46:	4602      	mov	r2, r0
 8006d48:	6270      	str	r0, [r6, #36]	; 0x24
 8006d4a:	b928      	cbnz	r0, 8006d58 <__pow5mult+0x40>
 8006d4c:	4b1d      	ldr	r3, [pc, #116]	; (8006dc4 <__pow5mult+0xac>)
 8006d4e:	481e      	ldr	r0, [pc, #120]	; (8006dc8 <__pow5mult+0xb0>)
 8006d50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006d54:	f000 fc0e 	bl	8007574 <__assert_func>
 8006d58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d5c:	6004      	str	r4, [r0, #0]
 8006d5e:	60c4      	str	r4, [r0, #12]
 8006d60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d68:	b94c      	cbnz	r4, 8006d7e <__pow5mult+0x66>
 8006d6a:	f240 2171 	movw	r1, #625	; 0x271
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f7ff ff12 	bl	8006b98 <__i2b>
 8006d74:	2300      	movs	r3, #0
 8006d76:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	6003      	str	r3, [r0, #0]
 8006d7e:	f04f 0900 	mov.w	r9, #0
 8006d82:	07eb      	lsls	r3, r5, #31
 8006d84:	d50a      	bpl.n	8006d9c <__pow5mult+0x84>
 8006d86:	4639      	mov	r1, r7
 8006d88:	4622      	mov	r2, r4
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	f7ff ff1a 	bl	8006bc4 <__multiply>
 8006d90:	4639      	mov	r1, r7
 8006d92:	4680      	mov	r8, r0
 8006d94:	4630      	mov	r0, r6
 8006d96:	f7ff fe47 	bl	8006a28 <_Bfree>
 8006d9a:	4647      	mov	r7, r8
 8006d9c:	106d      	asrs	r5, r5, #1
 8006d9e:	d00b      	beq.n	8006db8 <__pow5mult+0xa0>
 8006da0:	6820      	ldr	r0, [r4, #0]
 8006da2:	b938      	cbnz	r0, 8006db4 <__pow5mult+0x9c>
 8006da4:	4622      	mov	r2, r4
 8006da6:	4621      	mov	r1, r4
 8006da8:	4630      	mov	r0, r6
 8006daa:	f7ff ff0b 	bl	8006bc4 <__multiply>
 8006dae:	6020      	str	r0, [r4, #0]
 8006db0:	f8c0 9000 	str.w	r9, [r0]
 8006db4:	4604      	mov	r4, r0
 8006db6:	e7e4      	b.n	8006d82 <__pow5mult+0x6a>
 8006db8:	4638      	mov	r0, r7
 8006dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dbe:	bf00      	nop
 8006dc0:	080083b0 	.word	0x080083b0
 8006dc4:	080081e1 	.word	0x080081e1
 8006dc8:	08008264 	.word	0x08008264

08006dcc <__lshift>:
 8006dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	6849      	ldr	r1, [r1, #4]
 8006dd4:	6923      	ldr	r3, [r4, #16]
 8006dd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006dda:	68a3      	ldr	r3, [r4, #8]
 8006ddc:	4607      	mov	r7, r0
 8006dde:	4691      	mov	r9, r2
 8006de0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006de4:	f108 0601 	add.w	r6, r8, #1
 8006de8:	42b3      	cmp	r3, r6
 8006dea:	db0b      	blt.n	8006e04 <__lshift+0x38>
 8006dec:	4638      	mov	r0, r7
 8006dee:	f7ff fddb 	bl	80069a8 <_Balloc>
 8006df2:	4605      	mov	r5, r0
 8006df4:	b948      	cbnz	r0, 8006e0a <__lshift+0x3e>
 8006df6:	4602      	mov	r2, r0
 8006df8:	4b2a      	ldr	r3, [pc, #168]	; (8006ea4 <__lshift+0xd8>)
 8006dfa:	482b      	ldr	r0, [pc, #172]	; (8006ea8 <__lshift+0xdc>)
 8006dfc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006e00:	f000 fbb8 	bl	8007574 <__assert_func>
 8006e04:	3101      	adds	r1, #1
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	e7ee      	b.n	8006de8 <__lshift+0x1c>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f100 0114 	add.w	r1, r0, #20
 8006e10:	f100 0210 	add.w	r2, r0, #16
 8006e14:	4618      	mov	r0, r3
 8006e16:	4553      	cmp	r3, sl
 8006e18:	db37      	blt.n	8006e8a <__lshift+0xbe>
 8006e1a:	6920      	ldr	r0, [r4, #16]
 8006e1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e20:	f104 0314 	add.w	r3, r4, #20
 8006e24:	f019 091f 	ands.w	r9, r9, #31
 8006e28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e30:	d02f      	beq.n	8006e92 <__lshift+0xc6>
 8006e32:	f1c9 0e20 	rsb	lr, r9, #32
 8006e36:	468a      	mov	sl, r1
 8006e38:	f04f 0c00 	mov.w	ip, #0
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	fa02 f209 	lsl.w	r2, r2, r9
 8006e42:	ea42 020c 	orr.w	r2, r2, ip
 8006e46:	f84a 2b04 	str.w	r2, [sl], #4
 8006e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e4e:	4298      	cmp	r0, r3
 8006e50:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006e54:	d8f2      	bhi.n	8006e3c <__lshift+0x70>
 8006e56:	1b03      	subs	r3, r0, r4
 8006e58:	3b15      	subs	r3, #21
 8006e5a:	f023 0303 	bic.w	r3, r3, #3
 8006e5e:	3304      	adds	r3, #4
 8006e60:	f104 0215 	add.w	r2, r4, #21
 8006e64:	4290      	cmp	r0, r2
 8006e66:	bf38      	it	cc
 8006e68:	2304      	movcc	r3, #4
 8006e6a:	f841 c003 	str.w	ip, [r1, r3]
 8006e6e:	f1bc 0f00 	cmp.w	ip, #0
 8006e72:	d001      	beq.n	8006e78 <__lshift+0xac>
 8006e74:	f108 0602 	add.w	r6, r8, #2
 8006e78:	3e01      	subs	r6, #1
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	612e      	str	r6, [r5, #16]
 8006e7e:	4621      	mov	r1, r4
 8006e80:	f7ff fdd2 	bl	8006a28 <_Bfree>
 8006e84:	4628      	mov	r0, r5
 8006e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e8e:	3301      	adds	r3, #1
 8006e90:	e7c1      	b.n	8006e16 <__lshift+0x4a>
 8006e92:	3904      	subs	r1, #4
 8006e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e98:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e9c:	4298      	cmp	r0, r3
 8006e9e:	d8f9      	bhi.n	8006e94 <__lshift+0xc8>
 8006ea0:	e7ea      	b.n	8006e78 <__lshift+0xac>
 8006ea2:	bf00      	nop
 8006ea4:	08008253 	.word	0x08008253
 8006ea8:	08008264 	.word	0x08008264

08006eac <__mcmp>:
 8006eac:	b530      	push	{r4, r5, lr}
 8006eae:	6902      	ldr	r2, [r0, #16]
 8006eb0:	690c      	ldr	r4, [r1, #16]
 8006eb2:	1b12      	subs	r2, r2, r4
 8006eb4:	d10e      	bne.n	8006ed4 <__mcmp+0x28>
 8006eb6:	f100 0314 	add.w	r3, r0, #20
 8006eba:	3114      	adds	r1, #20
 8006ebc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ec0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ec4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ec8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006ecc:	42a5      	cmp	r5, r4
 8006ece:	d003      	beq.n	8006ed8 <__mcmp+0x2c>
 8006ed0:	d305      	bcc.n	8006ede <__mcmp+0x32>
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	bd30      	pop	{r4, r5, pc}
 8006ed8:	4283      	cmp	r3, r0
 8006eda:	d3f3      	bcc.n	8006ec4 <__mcmp+0x18>
 8006edc:	e7fa      	b.n	8006ed4 <__mcmp+0x28>
 8006ede:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ee2:	e7f7      	b.n	8006ed4 <__mcmp+0x28>

08006ee4 <__mdiff>:
 8006ee4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee8:	460c      	mov	r4, r1
 8006eea:	4606      	mov	r6, r0
 8006eec:	4611      	mov	r1, r2
 8006eee:	4620      	mov	r0, r4
 8006ef0:	4690      	mov	r8, r2
 8006ef2:	f7ff ffdb 	bl	8006eac <__mcmp>
 8006ef6:	1e05      	subs	r5, r0, #0
 8006ef8:	d110      	bne.n	8006f1c <__mdiff+0x38>
 8006efa:	4629      	mov	r1, r5
 8006efc:	4630      	mov	r0, r6
 8006efe:	f7ff fd53 	bl	80069a8 <_Balloc>
 8006f02:	b930      	cbnz	r0, 8006f12 <__mdiff+0x2e>
 8006f04:	4b3a      	ldr	r3, [pc, #232]	; (8006ff0 <__mdiff+0x10c>)
 8006f06:	4602      	mov	r2, r0
 8006f08:	f240 2132 	movw	r1, #562	; 0x232
 8006f0c:	4839      	ldr	r0, [pc, #228]	; (8006ff4 <__mdiff+0x110>)
 8006f0e:	f000 fb31 	bl	8007574 <__assert_func>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1c:	bfa4      	itt	ge
 8006f1e:	4643      	movge	r3, r8
 8006f20:	46a0      	movge	r8, r4
 8006f22:	4630      	mov	r0, r6
 8006f24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f28:	bfa6      	itte	ge
 8006f2a:	461c      	movge	r4, r3
 8006f2c:	2500      	movge	r5, #0
 8006f2e:	2501      	movlt	r5, #1
 8006f30:	f7ff fd3a 	bl	80069a8 <_Balloc>
 8006f34:	b920      	cbnz	r0, 8006f40 <__mdiff+0x5c>
 8006f36:	4b2e      	ldr	r3, [pc, #184]	; (8006ff0 <__mdiff+0x10c>)
 8006f38:	4602      	mov	r2, r0
 8006f3a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006f3e:	e7e5      	b.n	8006f0c <__mdiff+0x28>
 8006f40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f44:	6926      	ldr	r6, [r4, #16]
 8006f46:	60c5      	str	r5, [r0, #12]
 8006f48:	f104 0914 	add.w	r9, r4, #20
 8006f4c:	f108 0514 	add.w	r5, r8, #20
 8006f50:	f100 0e14 	add.w	lr, r0, #20
 8006f54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006f58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f5c:	f108 0210 	add.w	r2, r8, #16
 8006f60:	46f2      	mov	sl, lr
 8006f62:	2100      	movs	r1, #0
 8006f64:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f6c:	fa1f f883 	uxth.w	r8, r3
 8006f70:	fa11 f18b 	uxtah	r1, r1, fp
 8006f74:	0c1b      	lsrs	r3, r3, #16
 8006f76:	eba1 0808 	sub.w	r8, r1, r8
 8006f7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006f82:	fa1f f888 	uxth.w	r8, r8
 8006f86:	1419      	asrs	r1, r3, #16
 8006f88:	454e      	cmp	r6, r9
 8006f8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006f8e:	f84a 3b04 	str.w	r3, [sl], #4
 8006f92:	d8e7      	bhi.n	8006f64 <__mdiff+0x80>
 8006f94:	1b33      	subs	r3, r6, r4
 8006f96:	3b15      	subs	r3, #21
 8006f98:	f023 0303 	bic.w	r3, r3, #3
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	3415      	adds	r4, #21
 8006fa0:	42a6      	cmp	r6, r4
 8006fa2:	bf38      	it	cc
 8006fa4:	2304      	movcc	r3, #4
 8006fa6:	441d      	add	r5, r3
 8006fa8:	4473      	add	r3, lr
 8006faa:	469e      	mov	lr, r3
 8006fac:	462e      	mov	r6, r5
 8006fae:	4566      	cmp	r6, ip
 8006fb0:	d30e      	bcc.n	8006fd0 <__mdiff+0xec>
 8006fb2:	f10c 0203 	add.w	r2, ip, #3
 8006fb6:	1b52      	subs	r2, r2, r5
 8006fb8:	f022 0203 	bic.w	r2, r2, #3
 8006fbc:	3d03      	subs	r5, #3
 8006fbe:	45ac      	cmp	ip, r5
 8006fc0:	bf38      	it	cc
 8006fc2:	2200      	movcc	r2, #0
 8006fc4:	441a      	add	r2, r3
 8006fc6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006fca:	b17b      	cbz	r3, 8006fec <__mdiff+0x108>
 8006fcc:	6107      	str	r7, [r0, #16]
 8006fce:	e7a3      	b.n	8006f18 <__mdiff+0x34>
 8006fd0:	f856 8b04 	ldr.w	r8, [r6], #4
 8006fd4:	fa11 f288 	uxtah	r2, r1, r8
 8006fd8:	1414      	asrs	r4, r2, #16
 8006fda:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006fde:	b292      	uxth	r2, r2
 8006fe0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006fe4:	f84e 2b04 	str.w	r2, [lr], #4
 8006fe8:	1421      	asrs	r1, r4, #16
 8006fea:	e7e0      	b.n	8006fae <__mdiff+0xca>
 8006fec:	3f01      	subs	r7, #1
 8006fee:	e7ea      	b.n	8006fc6 <__mdiff+0xe2>
 8006ff0:	08008253 	.word	0x08008253
 8006ff4:	08008264 	.word	0x08008264

08006ff8 <__d2b>:
 8006ff8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ffc:	4689      	mov	r9, r1
 8006ffe:	2101      	movs	r1, #1
 8007000:	ec57 6b10 	vmov	r6, r7, d0
 8007004:	4690      	mov	r8, r2
 8007006:	f7ff fccf 	bl	80069a8 <_Balloc>
 800700a:	4604      	mov	r4, r0
 800700c:	b930      	cbnz	r0, 800701c <__d2b+0x24>
 800700e:	4602      	mov	r2, r0
 8007010:	4b25      	ldr	r3, [pc, #148]	; (80070a8 <__d2b+0xb0>)
 8007012:	4826      	ldr	r0, [pc, #152]	; (80070ac <__d2b+0xb4>)
 8007014:	f240 310a 	movw	r1, #778	; 0x30a
 8007018:	f000 faac 	bl	8007574 <__assert_func>
 800701c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007020:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007024:	bb35      	cbnz	r5, 8007074 <__d2b+0x7c>
 8007026:	2e00      	cmp	r6, #0
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	d028      	beq.n	800707e <__d2b+0x86>
 800702c:	4668      	mov	r0, sp
 800702e:	9600      	str	r6, [sp, #0]
 8007030:	f7ff fd82 	bl	8006b38 <__lo0bits>
 8007034:	9900      	ldr	r1, [sp, #0]
 8007036:	b300      	cbz	r0, 800707a <__d2b+0x82>
 8007038:	9a01      	ldr	r2, [sp, #4]
 800703a:	f1c0 0320 	rsb	r3, r0, #32
 800703e:	fa02 f303 	lsl.w	r3, r2, r3
 8007042:	430b      	orrs	r3, r1
 8007044:	40c2      	lsrs	r2, r0
 8007046:	6163      	str	r3, [r4, #20]
 8007048:	9201      	str	r2, [sp, #4]
 800704a:	9b01      	ldr	r3, [sp, #4]
 800704c:	61a3      	str	r3, [r4, #24]
 800704e:	2b00      	cmp	r3, #0
 8007050:	bf14      	ite	ne
 8007052:	2202      	movne	r2, #2
 8007054:	2201      	moveq	r2, #1
 8007056:	6122      	str	r2, [r4, #16]
 8007058:	b1d5      	cbz	r5, 8007090 <__d2b+0x98>
 800705a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800705e:	4405      	add	r5, r0
 8007060:	f8c9 5000 	str.w	r5, [r9]
 8007064:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007068:	f8c8 0000 	str.w	r0, [r8]
 800706c:	4620      	mov	r0, r4
 800706e:	b003      	add	sp, #12
 8007070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007074:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007078:	e7d5      	b.n	8007026 <__d2b+0x2e>
 800707a:	6161      	str	r1, [r4, #20]
 800707c:	e7e5      	b.n	800704a <__d2b+0x52>
 800707e:	a801      	add	r0, sp, #4
 8007080:	f7ff fd5a 	bl	8006b38 <__lo0bits>
 8007084:	9b01      	ldr	r3, [sp, #4]
 8007086:	6163      	str	r3, [r4, #20]
 8007088:	2201      	movs	r2, #1
 800708a:	6122      	str	r2, [r4, #16]
 800708c:	3020      	adds	r0, #32
 800708e:	e7e3      	b.n	8007058 <__d2b+0x60>
 8007090:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007094:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007098:	f8c9 0000 	str.w	r0, [r9]
 800709c:	6918      	ldr	r0, [r3, #16]
 800709e:	f7ff fd2b 	bl	8006af8 <__hi0bits>
 80070a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070a6:	e7df      	b.n	8007068 <__d2b+0x70>
 80070a8:	08008253 	.word	0x08008253
 80070ac:	08008264 	.word	0x08008264

080070b0 <_calloc_r>:
 80070b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070b2:	fba1 2402 	umull	r2, r4, r1, r2
 80070b6:	b94c      	cbnz	r4, 80070cc <_calloc_r+0x1c>
 80070b8:	4611      	mov	r1, r2
 80070ba:	9201      	str	r2, [sp, #4]
 80070bc:	f000 f87a 	bl	80071b4 <_malloc_r>
 80070c0:	9a01      	ldr	r2, [sp, #4]
 80070c2:	4605      	mov	r5, r0
 80070c4:	b930      	cbnz	r0, 80070d4 <_calloc_r+0x24>
 80070c6:	4628      	mov	r0, r5
 80070c8:	b003      	add	sp, #12
 80070ca:	bd30      	pop	{r4, r5, pc}
 80070cc:	220c      	movs	r2, #12
 80070ce:	6002      	str	r2, [r0, #0]
 80070d0:	2500      	movs	r5, #0
 80070d2:	e7f8      	b.n	80070c6 <_calloc_r+0x16>
 80070d4:	4621      	mov	r1, r4
 80070d6:	f7fe f93f 	bl	8005358 <memset>
 80070da:	e7f4      	b.n	80070c6 <_calloc_r+0x16>

080070dc <_free_r>:
 80070dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070de:	2900      	cmp	r1, #0
 80070e0:	d044      	beq.n	800716c <_free_r+0x90>
 80070e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070e6:	9001      	str	r0, [sp, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f1a1 0404 	sub.w	r4, r1, #4
 80070ee:	bfb8      	it	lt
 80070f0:	18e4      	addlt	r4, r4, r3
 80070f2:	f000 fa9b 	bl	800762c <__malloc_lock>
 80070f6:	4a1e      	ldr	r2, [pc, #120]	; (8007170 <_free_r+0x94>)
 80070f8:	9801      	ldr	r0, [sp, #4]
 80070fa:	6813      	ldr	r3, [r2, #0]
 80070fc:	b933      	cbnz	r3, 800710c <_free_r+0x30>
 80070fe:	6063      	str	r3, [r4, #4]
 8007100:	6014      	str	r4, [r2, #0]
 8007102:	b003      	add	sp, #12
 8007104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007108:	f000 ba96 	b.w	8007638 <__malloc_unlock>
 800710c:	42a3      	cmp	r3, r4
 800710e:	d908      	bls.n	8007122 <_free_r+0x46>
 8007110:	6825      	ldr	r5, [r4, #0]
 8007112:	1961      	adds	r1, r4, r5
 8007114:	428b      	cmp	r3, r1
 8007116:	bf01      	itttt	eq
 8007118:	6819      	ldreq	r1, [r3, #0]
 800711a:	685b      	ldreq	r3, [r3, #4]
 800711c:	1949      	addeq	r1, r1, r5
 800711e:	6021      	streq	r1, [r4, #0]
 8007120:	e7ed      	b.n	80070fe <_free_r+0x22>
 8007122:	461a      	mov	r2, r3
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	b10b      	cbz	r3, 800712c <_free_r+0x50>
 8007128:	42a3      	cmp	r3, r4
 800712a:	d9fa      	bls.n	8007122 <_free_r+0x46>
 800712c:	6811      	ldr	r1, [r2, #0]
 800712e:	1855      	adds	r5, r2, r1
 8007130:	42a5      	cmp	r5, r4
 8007132:	d10b      	bne.n	800714c <_free_r+0x70>
 8007134:	6824      	ldr	r4, [r4, #0]
 8007136:	4421      	add	r1, r4
 8007138:	1854      	adds	r4, r2, r1
 800713a:	42a3      	cmp	r3, r4
 800713c:	6011      	str	r1, [r2, #0]
 800713e:	d1e0      	bne.n	8007102 <_free_r+0x26>
 8007140:	681c      	ldr	r4, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	6053      	str	r3, [r2, #4]
 8007146:	4421      	add	r1, r4
 8007148:	6011      	str	r1, [r2, #0]
 800714a:	e7da      	b.n	8007102 <_free_r+0x26>
 800714c:	d902      	bls.n	8007154 <_free_r+0x78>
 800714e:	230c      	movs	r3, #12
 8007150:	6003      	str	r3, [r0, #0]
 8007152:	e7d6      	b.n	8007102 <_free_r+0x26>
 8007154:	6825      	ldr	r5, [r4, #0]
 8007156:	1961      	adds	r1, r4, r5
 8007158:	428b      	cmp	r3, r1
 800715a:	bf04      	itt	eq
 800715c:	6819      	ldreq	r1, [r3, #0]
 800715e:	685b      	ldreq	r3, [r3, #4]
 8007160:	6063      	str	r3, [r4, #4]
 8007162:	bf04      	itt	eq
 8007164:	1949      	addeq	r1, r1, r5
 8007166:	6021      	streq	r1, [r4, #0]
 8007168:	6054      	str	r4, [r2, #4]
 800716a:	e7ca      	b.n	8007102 <_free_r+0x26>
 800716c:	b003      	add	sp, #12
 800716e:	bd30      	pop	{r4, r5, pc}
 8007170:	200003ec 	.word	0x200003ec

08007174 <sbrk_aligned>:
 8007174:	b570      	push	{r4, r5, r6, lr}
 8007176:	4e0e      	ldr	r6, [pc, #56]	; (80071b0 <sbrk_aligned+0x3c>)
 8007178:	460c      	mov	r4, r1
 800717a:	6831      	ldr	r1, [r6, #0]
 800717c:	4605      	mov	r5, r0
 800717e:	b911      	cbnz	r1, 8007186 <sbrk_aligned+0x12>
 8007180:	f000 f9e8 	bl	8007554 <_sbrk_r>
 8007184:	6030      	str	r0, [r6, #0]
 8007186:	4621      	mov	r1, r4
 8007188:	4628      	mov	r0, r5
 800718a:	f000 f9e3 	bl	8007554 <_sbrk_r>
 800718e:	1c43      	adds	r3, r0, #1
 8007190:	d00a      	beq.n	80071a8 <sbrk_aligned+0x34>
 8007192:	1cc4      	adds	r4, r0, #3
 8007194:	f024 0403 	bic.w	r4, r4, #3
 8007198:	42a0      	cmp	r0, r4
 800719a:	d007      	beq.n	80071ac <sbrk_aligned+0x38>
 800719c:	1a21      	subs	r1, r4, r0
 800719e:	4628      	mov	r0, r5
 80071a0:	f000 f9d8 	bl	8007554 <_sbrk_r>
 80071a4:	3001      	adds	r0, #1
 80071a6:	d101      	bne.n	80071ac <sbrk_aligned+0x38>
 80071a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80071ac:	4620      	mov	r0, r4
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	200003f0 	.word	0x200003f0

080071b4 <_malloc_r>:
 80071b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b8:	1ccd      	adds	r5, r1, #3
 80071ba:	f025 0503 	bic.w	r5, r5, #3
 80071be:	3508      	adds	r5, #8
 80071c0:	2d0c      	cmp	r5, #12
 80071c2:	bf38      	it	cc
 80071c4:	250c      	movcc	r5, #12
 80071c6:	2d00      	cmp	r5, #0
 80071c8:	4607      	mov	r7, r0
 80071ca:	db01      	blt.n	80071d0 <_malloc_r+0x1c>
 80071cc:	42a9      	cmp	r1, r5
 80071ce:	d905      	bls.n	80071dc <_malloc_r+0x28>
 80071d0:	230c      	movs	r3, #12
 80071d2:	603b      	str	r3, [r7, #0]
 80071d4:	2600      	movs	r6, #0
 80071d6:	4630      	mov	r0, r6
 80071d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071dc:	4e2e      	ldr	r6, [pc, #184]	; (8007298 <_malloc_r+0xe4>)
 80071de:	f000 fa25 	bl	800762c <__malloc_lock>
 80071e2:	6833      	ldr	r3, [r6, #0]
 80071e4:	461c      	mov	r4, r3
 80071e6:	bb34      	cbnz	r4, 8007236 <_malloc_r+0x82>
 80071e8:	4629      	mov	r1, r5
 80071ea:	4638      	mov	r0, r7
 80071ec:	f7ff ffc2 	bl	8007174 <sbrk_aligned>
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	4604      	mov	r4, r0
 80071f4:	d14d      	bne.n	8007292 <_malloc_r+0xde>
 80071f6:	6834      	ldr	r4, [r6, #0]
 80071f8:	4626      	mov	r6, r4
 80071fa:	2e00      	cmp	r6, #0
 80071fc:	d140      	bne.n	8007280 <_malloc_r+0xcc>
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	4631      	mov	r1, r6
 8007202:	4638      	mov	r0, r7
 8007204:	eb04 0803 	add.w	r8, r4, r3
 8007208:	f000 f9a4 	bl	8007554 <_sbrk_r>
 800720c:	4580      	cmp	r8, r0
 800720e:	d13a      	bne.n	8007286 <_malloc_r+0xd2>
 8007210:	6821      	ldr	r1, [r4, #0]
 8007212:	3503      	adds	r5, #3
 8007214:	1a6d      	subs	r5, r5, r1
 8007216:	f025 0503 	bic.w	r5, r5, #3
 800721a:	3508      	adds	r5, #8
 800721c:	2d0c      	cmp	r5, #12
 800721e:	bf38      	it	cc
 8007220:	250c      	movcc	r5, #12
 8007222:	4629      	mov	r1, r5
 8007224:	4638      	mov	r0, r7
 8007226:	f7ff ffa5 	bl	8007174 <sbrk_aligned>
 800722a:	3001      	adds	r0, #1
 800722c:	d02b      	beq.n	8007286 <_malloc_r+0xd2>
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	442b      	add	r3, r5
 8007232:	6023      	str	r3, [r4, #0]
 8007234:	e00e      	b.n	8007254 <_malloc_r+0xa0>
 8007236:	6822      	ldr	r2, [r4, #0]
 8007238:	1b52      	subs	r2, r2, r5
 800723a:	d41e      	bmi.n	800727a <_malloc_r+0xc6>
 800723c:	2a0b      	cmp	r2, #11
 800723e:	d916      	bls.n	800726e <_malloc_r+0xba>
 8007240:	1961      	adds	r1, r4, r5
 8007242:	42a3      	cmp	r3, r4
 8007244:	6025      	str	r5, [r4, #0]
 8007246:	bf18      	it	ne
 8007248:	6059      	strne	r1, [r3, #4]
 800724a:	6863      	ldr	r3, [r4, #4]
 800724c:	bf08      	it	eq
 800724e:	6031      	streq	r1, [r6, #0]
 8007250:	5162      	str	r2, [r4, r5]
 8007252:	604b      	str	r3, [r1, #4]
 8007254:	4638      	mov	r0, r7
 8007256:	f104 060b 	add.w	r6, r4, #11
 800725a:	f000 f9ed 	bl	8007638 <__malloc_unlock>
 800725e:	f026 0607 	bic.w	r6, r6, #7
 8007262:	1d23      	adds	r3, r4, #4
 8007264:	1af2      	subs	r2, r6, r3
 8007266:	d0b6      	beq.n	80071d6 <_malloc_r+0x22>
 8007268:	1b9b      	subs	r3, r3, r6
 800726a:	50a3      	str	r3, [r4, r2]
 800726c:	e7b3      	b.n	80071d6 <_malloc_r+0x22>
 800726e:	6862      	ldr	r2, [r4, #4]
 8007270:	42a3      	cmp	r3, r4
 8007272:	bf0c      	ite	eq
 8007274:	6032      	streq	r2, [r6, #0]
 8007276:	605a      	strne	r2, [r3, #4]
 8007278:	e7ec      	b.n	8007254 <_malloc_r+0xa0>
 800727a:	4623      	mov	r3, r4
 800727c:	6864      	ldr	r4, [r4, #4]
 800727e:	e7b2      	b.n	80071e6 <_malloc_r+0x32>
 8007280:	4634      	mov	r4, r6
 8007282:	6876      	ldr	r6, [r6, #4]
 8007284:	e7b9      	b.n	80071fa <_malloc_r+0x46>
 8007286:	230c      	movs	r3, #12
 8007288:	603b      	str	r3, [r7, #0]
 800728a:	4638      	mov	r0, r7
 800728c:	f000 f9d4 	bl	8007638 <__malloc_unlock>
 8007290:	e7a1      	b.n	80071d6 <_malloc_r+0x22>
 8007292:	6025      	str	r5, [r4, #0]
 8007294:	e7de      	b.n	8007254 <_malloc_r+0xa0>
 8007296:	bf00      	nop
 8007298:	200003ec 	.word	0x200003ec

0800729c <__ssputs_r>:
 800729c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a0:	688e      	ldr	r6, [r1, #8]
 80072a2:	429e      	cmp	r6, r3
 80072a4:	4682      	mov	sl, r0
 80072a6:	460c      	mov	r4, r1
 80072a8:	4690      	mov	r8, r2
 80072aa:	461f      	mov	r7, r3
 80072ac:	d838      	bhi.n	8007320 <__ssputs_r+0x84>
 80072ae:	898a      	ldrh	r2, [r1, #12]
 80072b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072b4:	d032      	beq.n	800731c <__ssputs_r+0x80>
 80072b6:	6825      	ldr	r5, [r4, #0]
 80072b8:	6909      	ldr	r1, [r1, #16]
 80072ba:	eba5 0901 	sub.w	r9, r5, r1
 80072be:	6965      	ldr	r5, [r4, #20]
 80072c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072c8:	3301      	adds	r3, #1
 80072ca:	444b      	add	r3, r9
 80072cc:	106d      	asrs	r5, r5, #1
 80072ce:	429d      	cmp	r5, r3
 80072d0:	bf38      	it	cc
 80072d2:	461d      	movcc	r5, r3
 80072d4:	0553      	lsls	r3, r2, #21
 80072d6:	d531      	bpl.n	800733c <__ssputs_r+0xa0>
 80072d8:	4629      	mov	r1, r5
 80072da:	f7ff ff6b 	bl	80071b4 <_malloc_r>
 80072de:	4606      	mov	r6, r0
 80072e0:	b950      	cbnz	r0, 80072f8 <__ssputs_r+0x5c>
 80072e2:	230c      	movs	r3, #12
 80072e4:	f8ca 3000 	str.w	r3, [sl]
 80072e8:	89a3      	ldrh	r3, [r4, #12]
 80072ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072ee:	81a3      	strh	r3, [r4, #12]
 80072f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f8:	6921      	ldr	r1, [r4, #16]
 80072fa:	464a      	mov	r2, r9
 80072fc:	f7ff fb46 	bl	800698c <memcpy>
 8007300:	89a3      	ldrh	r3, [r4, #12]
 8007302:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800730a:	81a3      	strh	r3, [r4, #12]
 800730c:	6126      	str	r6, [r4, #16]
 800730e:	6165      	str	r5, [r4, #20]
 8007310:	444e      	add	r6, r9
 8007312:	eba5 0509 	sub.w	r5, r5, r9
 8007316:	6026      	str	r6, [r4, #0]
 8007318:	60a5      	str	r5, [r4, #8]
 800731a:	463e      	mov	r6, r7
 800731c:	42be      	cmp	r6, r7
 800731e:	d900      	bls.n	8007322 <__ssputs_r+0x86>
 8007320:	463e      	mov	r6, r7
 8007322:	6820      	ldr	r0, [r4, #0]
 8007324:	4632      	mov	r2, r6
 8007326:	4641      	mov	r1, r8
 8007328:	f000 f966 	bl	80075f8 <memmove>
 800732c:	68a3      	ldr	r3, [r4, #8]
 800732e:	1b9b      	subs	r3, r3, r6
 8007330:	60a3      	str	r3, [r4, #8]
 8007332:	6823      	ldr	r3, [r4, #0]
 8007334:	4433      	add	r3, r6
 8007336:	6023      	str	r3, [r4, #0]
 8007338:	2000      	movs	r0, #0
 800733a:	e7db      	b.n	80072f4 <__ssputs_r+0x58>
 800733c:	462a      	mov	r2, r5
 800733e:	f000 f981 	bl	8007644 <_realloc_r>
 8007342:	4606      	mov	r6, r0
 8007344:	2800      	cmp	r0, #0
 8007346:	d1e1      	bne.n	800730c <__ssputs_r+0x70>
 8007348:	6921      	ldr	r1, [r4, #16]
 800734a:	4650      	mov	r0, sl
 800734c:	f7ff fec6 	bl	80070dc <_free_r>
 8007350:	e7c7      	b.n	80072e2 <__ssputs_r+0x46>
	...

08007354 <_svfiprintf_r>:
 8007354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007358:	4698      	mov	r8, r3
 800735a:	898b      	ldrh	r3, [r1, #12]
 800735c:	061b      	lsls	r3, r3, #24
 800735e:	b09d      	sub	sp, #116	; 0x74
 8007360:	4607      	mov	r7, r0
 8007362:	460d      	mov	r5, r1
 8007364:	4614      	mov	r4, r2
 8007366:	d50e      	bpl.n	8007386 <_svfiprintf_r+0x32>
 8007368:	690b      	ldr	r3, [r1, #16]
 800736a:	b963      	cbnz	r3, 8007386 <_svfiprintf_r+0x32>
 800736c:	2140      	movs	r1, #64	; 0x40
 800736e:	f7ff ff21 	bl	80071b4 <_malloc_r>
 8007372:	6028      	str	r0, [r5, #0]
 8007374:	6128      	str	r0, [r5, #16]
 8007376:	b920      	cbnz	r0, 8007382 <_svfiprintf_r+0x2e>
 8007378:	230c      	movs	r3, #12
 800737a:	603b      	str	r3, [r7, #0]
 800737c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007380:	e0d1      	b.n	8007526 <_svfiprintf_r+0x1d2>
 8007382:	2340      	movs	r3, #64	; 0x40
 8007384:	616b      	str	r3, [r5, #20]
 8007386:	2300      	movs	r3, #0
 8007388:	9309      	str	r3, [sp, #36]	; 0x24
 800738a:	2320      	movs	r3, #32
 800738c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007390:	f8cd 800c 	str.w	r8, [sp, #12]
 8007394:	2330      	movs	r3, #48	; 0x30
 8007396:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007540 <_svfiprintf_r+0x1ec>
 800739a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800739e:	f04f 0901 	mov.w	r9, #1
 80073a2:	4623      	mov	r3, r4
 80073a4:	469a      	mov	sl, r3
 80073a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073aa:	b10a      	cbz	r2, 80073b0 <_svfiprintf_r+0x5c>
 80073ac:	2a25      	cmp	r2, #37	; 0x25
 80073ae:	d1f9      	bne.n	80073a4 <_svfiprintf_r+0x50>
 80073b0:	ebba 0b04 	subs.w	fp, sl, r4
 80073b4:	d00b      	beq.n	80073ce <_svfiprintf_r+0x7a>
 80073b6:	465b      	mov	r3, fp
 80073b8:	4622      	mov	r2, r4
 80073ba:	4629      	mov	r1, r5
 80073bc:	4638      	mov	r0, r7
 80073be:	f7ff ff6d 	bl	800729c <__ssputs_r>
 80073c2:	3001      	adds	r0, #1
 80073c4:	f000 80aa 	beq.w	800751c <_svfiprintf_r+0x1c8>
 80073c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073ca:	445a      	add	r2, fp
 80073cc:	9209      	str	r2, [sp, #36]	; 0x24
 80073ce:	f89a 3000 	ldrb.w	r3, [sl]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f000 80a2 	beq.w	800751c <_svfiprintf_r+0x1c8>
 80073d8:	2300      	movs	r3, #0
 80073da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073e2:	f10a 0a01 	add.w	sl, sl, #1
 80073e6:	9304      	str	r3, [sp, #16]
 80073e8:	9307      	str	r3, [sp, #28]
 80073ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073ee:	931a      	str	r3, [sp, #104]	; 0x68
 80073f0:	4654      	mov	r4, sl
 80073f2:	2205      	movs	r2, #5
 80073f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073f8:	4851      	ldr	r0, [pc, #324]	; (8007540 <_svfiprintf_r+0x1ec>)
 80073fa:	f7f8 fef1 	bl	80001e0 <memchr>
 80073fe:	9a04      	ldr	r2, [sp, #16]
 8007400:	b9d8      	cbnz	r0, 800743a <_svfiprintf_r+0xe6>
 8007402:	06d0      	lsls	r0, r2, #27
 8007404:	bf44      	itt	mi
 8007406:	2320      	movmi	r3, #32
 8007408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800740c:	0711      	lsls	r1, r2, #28
 800740e:	bf44      	itt	mi
 8007410:	232b      	movmi	r3, #43	; 0x2b
 8007412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007416:	f89a 3000 	ldrb.w	r3, [sl]
 800741a:	2b2a      	cmp	r3, #42	; 0x2a
 800741c:	d015      	beq.n	800744a <_svfiprintf_r+0xf6>
 800741e:	9a07      	ldr	r2, [sp, #28]
 8007420:	4654      	mov	r4, sl
 8007422:	2000      	movs	r0, #0
 8007424:	f04f 0c0a 	mov.w	ip, #10
 8007428:	4621      	mov	r1, r4
 800742a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800742e:	3b30      	subs	r3, #48	; 0x30
 8007430:	2b09      	cmp	r3, #9
 8007432:	d94e      	bls.n	80074d2 <_svfiprintf_r+0x17e>
 8007434:	b1b0      	cbz	r0, 8007464 <_svfiprintf_r+0x110>
 8007436:	9207      	str	r2, [sp, #28]
 8007438:	e014      	b.n	8007464 <_svfiprintf_r+0x110>
 800743a:	eba0 0308 	sub.w	r3, r0, r8
 800743e:	fa09 f303 	lsl.w	r3, r9, r3
 8007442:	4313      	orrs	r3, r2
 8007444:	9304      	str	r3, [sp, #16]
 8007446:	46a2      	mov	sl, r4
 8007448:	e7d2      	b.n	80073f0 <_svfiprintf_r+0x9c>
 800744a:	9b03      	ldr	r3, [sp, #12]
 800744c:	1d19      	adds	r1, r3, #4
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	9103      	str	r1, [sp, #12]
 8007452:	2b00      	cmp	r3, #0
 8007454:	bfbb      	ittet	lt
 8007456:	425b      	neglt	r3, r3
 8007458:	f042 0202 	orrlt.w	r2, r2, #2
 800745c:	9307      	strge	r3, [sp, #28]
 800745e:	9307      	strlt	r3, [sp, #28]
 8007460:	bfb8      	it	lt
 8007462:	9204      	strlt	r2, [sp, #16]
 8007464:	7823      	ldrb	r3, [r4, #0]
 8007466:	2b2e      	cmp	r3, #46	; 0x2e
 8007468:	d10c      	bne.n	8007484 <_svfiprintf_r+0x130>
 800746a:	7863      	ldrb	r3, [r4, #1]
 800746c:	2b2a      	cmp	r3, #42	; 0x2a
 800746e:	d135      	bne.n	80074dc <_svfiprintf_r+0x188>
 8007470:	9b03      	ldr	r3, [sp, #12]
 8007472:	1d1a      	adds	r2, r3, #4
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	9203      	str	r2, [sp, #12]
 8007478:	2b00      	cmp	r3, #0
 800747a:	bfb8      	it	lt
 800747c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007480:	3402      	adds	r4, #2
 8007482:	9305      	str	r3, [sp, #20]
 8007484:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007550 <_svfiprintf_r+0x1fc>
 8007488:	7821      	ldrb	r1, [r4, #0]
 800748a:	2203      	movs	r2, #3
 800748c:	4650      	mov	r0, sl
 800748e:	f7f8 fea7 	bl	80001e0 <memchr>
 8007492:	b140      	cbz	r0, 80074a6 <_svfiprintf_r+0x152>
 8007494:	2340      	movs	r3, #64	; 0x40
 8007496:	eba0 000a 	sub.w	r0, r0, sl
 800749a:	fa03 f000 	lsl.w	r0, r3, r0
 800749e:	9b04      	ldr	r3, [sp, #16]
 80074a0:	4303      	orrs	r3, r0
 80074a2:	3401      	adds	r4, #1
 80074a4:	9304      	str	r3, [sp, #16]
 80074a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074aa:	4826      	ldr	r0, [pc, #152]	; (8007544 <_svfiprintf_r+0x1f0>)
 80074ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074b0:	2206      	movs	r2, #6
 80074b2:	f7f8 fe95 	bl	80001e0 <memchr>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d038      	beq.n	800752c <_svfiprintf_r+0x1d8>
 80074ba:	4b23      	ldr	r3, [pc, #140]	; (8007548 <_svfiprintf_r+0x1f4>)
 80074bc:	bb1b      	cbnz	r3, 8007506 <_svfiprintf_r+0x1b2>
 80074be:	9b03      	ldr	r3, [sp, #12]
 80074c0:	3307      	adds	r3, #7
 80074c2:	f023 0307 	bic.w	r3, r3, #7
 80074c6:	3308      	adds	r3, #8
 80074c8:	9303      	str	r3, [sp, #12]
 80074ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074cc:	4433      	add	r3, r6
 80074ce:	9309      	str	r3, [sp, #36]	; 0x24
 80074d0:	e767      	b.n	80073a2 <_svfiprintf_r+0x4e>
 80074d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80074d6:	460c      	mov	r4, r1
 80074d8:	2001      	movs	r0, #1
 80074da:	e7a5      	b.n	8007428 <_svfiprintf_r+0xd4>
 80074dc:	2300      	movs	r3, #0
 80074de:	3401      	adds	r4, #1
 80074e0:	9305      	str	r3, [sp, #20]
 80074e2:	4619      	mov	r1, r3
 80074e4:	f04f 0c0a 	mov.w	ip, #10
 80074e8:	4620      	mov	r0, r4
 80074ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074ee:	3a30      	subs	r2, #48	; 0x30
 80074f0:	2a09      	cmp	r2, #9
 80074f2:	d903      	bls.n	80074fc <_svfiprintf_r+0x1a8>
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0c5      	beq.n	8007484 <_svfiprintf_r+0x130>
 80074f8:	9105      	str	r1, [sp, #20]
 80074fa:	e7c3      	b.n	8007484 <_svfiprintf_r+0x130>
 80074fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007500:	4604      	mov	r4, r0
 8007502:	2301      	movs	r3, #1
 8007504:	e7f0      	b.n	80074e8 <_svfiprintf_r+0x194>
 8007506:	ab03      	add	r3, sp, #12
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	462a      	mov	r2, r5
 800750c:	4b0f      	ldr	r3, [pc, #60]	; (800754c <_svfiprintf_r+0x1f8>)
 800750e:	a904      	add	r1, sp, #16
 8007510:	4638      	mov	r0, r7
 8007512:	f7fd ffc9 	bl	80054a8 <_printf_float>
 8007516:	1c42      	adds	r2, r0, #1
 8007518:	4606      	mov	r6, r0
 800751a:	d1d6      	bne.n	80074ca <_svfiprintf_r+0x176>
 800751c:	89ab      	ldrh	r3, [r5, #12]
 800751e:	065b      	lsls	r3, r3, #25
 8007520:	f53f af2c 	bmi.w	800737c <_svfiprintf_r+0x28>
 8007524:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007526:	b01d      	add	sp, #116	; 0x74
 8007528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752c:	ab03      	add	r3, sp, #12
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	462a      	mov	r2, r5
 8007532:	4b06      	ldr	r3, [pc, #24]	; (800754c <_svfiprintf_r+0x1f8>)
 8007534:	a904      	add	r1, sp, #16
 8007536:	4638      	mov	r0, r7
 8007538:	f7fe fa5a 	bl	80059f0 <_printf_i>
 800753c:	e7eb      	b.n	8007516 <_svfiprintf_r+0x1c2>
 800753e:	bf00      	nop
 8007540:	080083bc 	.word	0x080083bc
 8007544:	080083c6 	.word	0x080083c6
 8007548:	080054a9 	.word	0x080054a9
 800754c:	0800729d 	.word	0x0800729d
 8007550:	080083c2 	.word	0x080083c2

08007554 <_sbrk_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	4d06      	ldr	r5, [pc, #24]	; (8007570 <_sbrk_r+0x1c>)
 8007558:	2300      	movs	r3, #0
 800755a:	4604      	mov	r4, r0
 800755c:	4608      	mov	r0, r1
 800755e:	602b      	str	r3, [r5, #0]
 8007560:	f7fa fc28 	bl	8001db4 <_sbrk>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d102      	bne.n	800756e <_sbrk_r+0x1a>
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	b103      	cbz	r3, 800756e <_sbrk_r+0x1a>
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	bd38      	pop	{r3, r4, r5, pc}
 8007570:	200003f4 	.word	0x200003f4

08007574 <__assert_func>:
 8007574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007576:	4614      	mov	r4, r2
 8007578:	461a      	mov	r2, r3
 800757a:	4b09      	ldr	r3, [pc, #36]	; (80075a0 <__assert_func+0x2c>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4605      	mov	r5, r0
 8007580:	68d8      	ldr	r0, [r3, #12]
 8007582:	b14c      	cbz	r4, 8007598 <__assert_func+0x24>
 8007584:	4b07      	ldr	r3, [pc, #28]	; (80075a4 <__assert_func+0x30>)
 8007586:	9100      	str	r1, [sp, #0]
 8007588:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800758c:	4906      	ldr	r1, [pc, #24]	; (80075a8 <__assert_func+0x34>)
 800758e:	462b      	mov	r3, r5
 8007590:	f000 f80e 	bl	80075b0 <fiprintf>
 8007594:	f000 faac 	bl	8007af0 <abort>
 8007598:	4b04      	ldr	r3, [pc, #16]	; (80075ac <__assert_func+0x38>)
 800759a:	461c      	mov	r4, r3
 800759c:	e7f3      	b.n	8007586 <__assert_func+0x12>
 800759e:	bf00      	nop
 80075a0:	2000000c 	.word	0x2000000c
 80075a4:	080083cd 	.word	0x080083cd
 80075a8:	080083da 	.word	0x080083da
 80075ac:	08008408 	.word	0x08008408

080075b0 <fiprintf>:
 80075b0:	b40e      	push	{r1, r2, r3}
 80075b2:	b503      	push	{r0, r1, lr}
 80075b4:	4601      	mov	r1, r0
 80075b6:	ab03      	add	r3, sp, #12
 80075b8:	4805      	ldr	r0, [pc, #20]	; (80075d0 <fiprintf+0x20>)
 80075ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80075be:	6800      	ldr	r0, [r0, #0]
 80075c0:	9301      	str	r3, [sp, #4]
 80075c2:	f000 f897 	bl	80076f4 <_vfiprintf_r>
 80075c6:	b002      	add	sp, #8
 80075c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075cc:	b003      	add	sp, #12
 80075ce:	4770      	bx	lr
 80075d0:	2000000c 	.word	0x2000000c

080075d4 <__ascii_mbtowc>:
 80075d4:	b082      	sub	sp, #8
 80075d6:	b901      	cbnz	r1, 80075da <__ascii_mbtowc+0x6>
 80075d8:	a901      	add	r1, sp, #4
 80075da:	b142      	cbz	r2, 80075ee <__ascii_mbtowc+0x1a>
 80075dc:	b14b      	cbz	r3, 80075f2 <__ascii_mbtowc+0x1e>
 80075de:	7813      	ldrb	r3, [r2, #0]
 80075e0:	600b      	str	r3, [r1, #0]
 80075e2:	7812      	ldrb	r2, [r2, #0]
 80075e4:	1e10      	subs	r0, r2, #0
 80075e6:	bf18      	it	ne
 80075e8:	2001      	movne	r0, #1
 80075ea:	b002      	add	sp, #8
 80075ec:	4770      	bx	lr
 80075ee:	4610      	mov	r0, r2
 80075f0:	e7fb      	b.n	80075ea <__ascii_mbtowc+0x16>
 80075f2:	f06f 0001 	mvn.w	r0, #1
 80075f6:	e7f8      	b.n	80075ea <__ascii_mbtowc+0x16>

080075f8 <memmove>:
 80075f8:	4288      	cmp	r0, r1
 80075fa:	b510      	push	{r4, lr}
 80075fc:	eb01 0402 	add.w	r4, r1, r2
 8007600:	d902      	bls.n	8007608 <memmove+0x10>
 8007602:	4284      	cmp	r4, r0
 8007604:	4623      	mov	r3, r4
 8007606:	d807      	bhi.n	8007618 <memmove+0x20>
 8007608:	1e43      	subs	r3, r0, #1
 800760a:	42a1      	cmp	r1, r4
 800760c:	d008      	beq.n	8007620 <memmove+0x28>
 800760e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007612:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007616:	e7f8      	b.n	800760a <memmove+0x12>
 8007618:	4402      	add	r2, r0
 800761a:	4601      	mov	r1, r0
 800761c:	428a      	cmp	r2, r1
 800761e:	d100      	bne.n	8007622 <memmove+0x2a>
 8007620:	bd10      	pop	{r4, pc}
 8007622:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007626:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800762a:	e7f7      	b.n	800761c <memmove+0x24>

0800762c <__malloc_lock>:
 800762c:	4801      	ldr	r0, [pc, #4]	; (8007634 <__malloc_lock+0x8>)
 800762e:	f000 bc1f 	b.w	8007e70 <__retarget_lock_acquire_recursive>
 8007632:	bf00      	nop
 8007634:	200003f8 	.word	0x200003f8

08007638 <__malloc_unlock>:
 8007638:	4801      	ldr	r0, [pc, #4]	; (8007640 <__malloc_unlock+0x8>)
 800763a:	f000 bc1a 	b.w	8007e72 <__retarget_lock_release_recursive>
 800763e:	bf00      	nop
 8007640:	200003f8 	.word	0x200003f8

08007644 <_realloc_r>:
 8007644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007648:	4680      	mov	r8, r0
 800764a:	4614      	mov	r4, r2
 800764c:	460e      	mov	r6, r1
 800764e:	b921      	cbnz	r1, 800765a <_realloc_r+0x16>
 8007650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007654:	4611      	mov	r1, r2
 8007656:	f7ff bdad 	b.w	80071b4 <_malloc_r>
 800765a:	b92a      	cbnz	r2, 8007668 <_realloc_r+0x24>
 800765c:	f7ff fd3e 	bl	80070dc <_free_r>
 8007660:	4625      	mov	r5, r4
 8007662:	4628      	mov	r0, r5
 8007664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007668:	f000 fc6a 	bl	8007f40 <_malloc_usable_size_r>
 800766c:	4284      	cmp	r4, r0
 800766e:	4607      	mov	r7, r0
 8007670:	d802      	bhi.n	8007678 <_realloc_r+0x34>
 8007672:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007676:	d812      	bhi.n	800769e <_realloc_r+0x5a>
 8007678:	4621      	mov	r1, r4
 800767a:	4640      	mov	r0, r8
 800767c:	f7ff fd9a 	bl	80071b4 <_malloc_r>
 8007680:	4605      	mov	r5, r0
 8007682:	2800      	cmp	r0, #0
 8007684:	d0ed      	beq.n	8007662 <_realloc_r+0x1e>
 8007686:	42bc      	cmp	r4, r7
 8007688:	4622      	mov	r2, r4
 800768a:	4631      	mov	r1, r6
 800768c:	bf28      	it	cs
 800768e:	463a      	movcs	r2, r7
 8007690:	f7ff f97c 	bl	800698c <memcpy>
 8007694:	4631      	mov	r1, r6
 8007696:	4640      	mov	r0, r8
 8007698:	f7ff fd20 	bl	80070dc <_free_r>
 800769c:	e7e1      	b.n	8007662 <_realloc_r+0x1e>
 800769e:	4635      	mov	r5, r6
 80076a0:	e7df      	b.n	8007662 <_realloc_r+0x1e>

080076a2 <__sfputc_r>:
 80076a2:	6893      	ldr	r3, [r2, #8]
 80076a4:	3b01      	subs	r3, #1
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	b410      	push	{r4}
 80076aa:	6093      	str	r3, [r2, #8]
 80076ac:	da08      	bge.n	80076c0 <__sfputc_r+0x1e>
 80076ae:	6994      	ldr	r4, [r2, #24]
 80076b0:	42a3      	cmp	r3, r4
 80076b2:	db01      	blt.n	80076b8 <__sfputc_r+0x16>
 80076b4:	290a      	cmp	r1, #10
 80076b6:	d103      	bne.n	80076c0 <__sfputc_r+0x1e>
 80076b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076bc:	f000 b94a 	b.w	8007954 <__swbuf_r>
 80076c0:	6813      	ldr	r3, [r2, #0]
 80076c2:	1c58      	adds	r0, r3, #1
 80076c4:	6010      	str	r0, [r2, #0]
 80076c6:	7019      	strb	r1, [r3, #0]
 80076c8:	4608      	mov	r0, r1
 80076ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <__sfputs_r>:
 80076d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d2:	4606      	mov	r6, r0
 80076d4:	460f      	mov	r7, r1
 80076d6:	4614      	mov	r4, r2
 80076d8:	18d5      	adds	r5, r2, r3
 80076da:	42ac      	cmp	r4, r5
 80076dc:	d101      	bne.n	80076e2 <__sfputs_r+0x12>
 80076de:	2000      	movs	r0, #0
 80076e0:	e007      	b.n	80076f2 <__sfputs_r+0x22>
 80076e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e6:	463a      	mov	r2, r7
 80076e8:	4630      	mov	r0, r6
 80076ea:	f7ff ffda 	bl	80076a2 <__sfputc_r>
 80076ee:	1c43      	adds	r3, r0, #1
 80076f0:	d1f3      	bne.n	80076da <__sfputs_r+0xa>
 80076f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076f4 <_vfiprintf_r>:
 80076f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f8:	460d      	mov	r5, r1
 80076fa:	b09d      	sub	sp, #116	; 0x74
 80076fc:	4614      	mov	r4, r2
 80076fe:	4698      	mov	r8, r3
 8007700:	4606      	mov	r6, r0
 8007702:	b118      	cbz	r0, 800770c <_vfiprintf_r+0x18>
 8007704:	6983      	ldr	r3, [r0, #24]
 8007706:	b90b      	cbnz	r3, 800770c <_vfiprintf_r+0x18>
 8007708:	f000 fb14 	bl	8007d34 <__sinit>
 800770c:	4b89      	ldr	r3, [pc, #548]	; (8007934 <_vfiprintf_r+0x240>)
 800770e:	429d      	cmp	r5, r3
 8007710:	d11b      	bne.n	800774a <_vfiprintf_r+0x56>
 8007712:	6875      	ldr	r5, [r6, #4]
 8007714:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007716:	07d9      	lsls	r1, r3, #31
 8007718:	d405      	bmi.n	8007726 <_vfiprintf_r+0x32>
 800771a:	89ab      	ldrh	r3, [r5, #12]
 800771c:	059a      	lsls	r2, r3, #22
 800771e:	d402      	bmi.n	8007726 <_vfiprintf_r+0x32>
 8007720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007722:	f000 fba5 	bl	8007e70 <__retarget_lock_acquire_recursive>
 8007726:	89ab      	ldrh	r3, [r5, #12]
 8007728:	071b      	lsls	r3, r3, #28
 800772a:	d501      	bpl.n	8007730 <_vfiprintf_r+0x3c>
 800772c:	692b      	ldr	r3, [r5, #16]
 800772e:	b9eb      	cbnz	r3, 800776c <_vfiprintf_r+0x78>
 8007730:	4629      	mov	r1, r5
 8007732:	4630      	mov	r0, r6
 8007734:	f000 f96e 	bl	8007a14 <__swsetup_r>
 8007738:	b1c0      	cbz	r0, 800776c <_vfiprintf_r+0x78>
 800773a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800773c:	07dc      	lsls	r4, r3, #31
 800773e:	d50e      	bpl.n	800775e <_vfiprintf_r+0x6a>
 8007740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007744:	b01d      	add	sp, #116	; 0x74
 8007746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774a:	4b7b      	ldr	r3, [pc, #492]	; (8007938 <_vfiprintf_r+0x244>)
 800774c:	429d      	cmp	r5, r3
 800774e:	d101      	bne.n	8007754 <_vfiprintf_r+0x60>
 8007750:	68b5      	ldr	r5, [r6, #8]
 8007752:	e7df      	b.n	8007714 <_vfiprintf_r+0x20>
 8007754:	4b79      	ldr	r3, [pc, #484]	; (800793c <_vfiprintf_r+0x248>)
 8007756:	429d      	cmp	r5, r3
 8007758:	bf08      	it	eq
 800775a:	68f5      	ldreq	r5, [r6, #12]
 800775c:	e7da      	b.n	8007714 <_vfiprintf_r+0x20>
 800775e:	89ab      	ldrh	r3, [r5, #12]
 8007760:	0598      	lsls	r0, r3, #22
 8007762:	d4ed      	bmi.n	8007740 <_vfiprintf_r+0x4c>
 8007764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007766:	f000 fb84 	bl	8007e72 <__retarget_lock_release_recursive>
 800776a:	e7e9      	b.n	8007740 <_vfiprintf_r+0x4c>
 800776c:	2300      	movs	r3, #0
 800776e:	9309      	str	r3, [sp, #36]	; 0x24
 8007770:	2320      	movs	r3, #32
 8007772:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007776:	f8cd 800c 	str.w	r8, [sp, #12]
 800777a:	2330      	movs	r3, #48	; 0x30
 800777c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007940 <_vfiprintf_r+0x24c>
 8007780:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007784:	f04f 0901 	mov.w	r9, #1
 8007788:	4623      	mov	r3, r4
 800778a:	469a      	mov	sl, r3
 800778c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007790:	b10a      	cbz	r2, 8007796 <_vfiprintf_r+0xa2>
 8007792:	2a25      	cmp	r2, #37	; 0x25
 8007794:	d1f9      	bne.n	800778a <_vfiprintf_r+0x96>
 8007796:	ebba 0b04 	subs.w	fp, sl, r4
 800779a:	d00b      	beq.n	80077b4 <_vfiprintf_r+0xc0>
 800779c:	465b      	mov	r3, fp
 800779e:	4622      	mov	r2, r4
 80077a0:	4629      	mov	r1, r5
 80077a2:	4630      	mov	r0, r6
 80077a4:	f7ff ff94 	bl	80076d0 <__sfputs_r>
 80077a8:	3001      	adds	r0, #1
 80077aa:	f000 80aa 	beq.w	8007902 <_vfiprintf_r+0x20e>
 80077ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077b0:	445a      	add	r2, fp
 80077b2:	9209      	str	r2, [sp, #36]	; 0x24
 80077b4:	f89a 3000 	ldrb.w	r3, [sl]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 80a2 	beq.w	8007902 <_vfiprintf_r+0x20e>
 80077be:	2300      	movs	r3, #0
 80077c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077c8:	f10a 0a01 	add.w	sl, sl, #1
 80077cc:	9304      	str	r3, [sp, #16]
 80077ce:	9307      	str	r3, [sp, #28]
 80077d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077d4:	931a      	str	r3, [sp, #104]	; 0x68
 80077d6:	4654      	mov	r4, sl
 80077d8:	2205      	movs	r2, #5
 80077da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077de:	4858      	ldr	r0, [pc, #352]	; (8007940 <_vfiprintf_r+0x24c>)
 80077e0:	f7f8 fcfe 	bl	80001e0 <memchr>
 80077e4:	9a04      	ldr	r2, [sp, #16]
 80077e6:	b9d8      	cbnz	r0, 8007820 <_vfiprintf_r+0x12c>
 80077e8:	06d1      	lsls	r1, r2, #27
 80077ea:	bf44      	itt	mi
 80077ec:	2320      	movmi	r3, #32
 80077ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077f2:	0713      	lsls	r3, r2, #28
 80077f4:	bf44      	itt	mi
 80077f6:	232b      	movmi	r3, #43	; 0x2b
 80077f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007800:	2b2a      	cmp	r3, #42	; 0x2a
 8007802:	d015      	beq.n	8007830 <_vfiprintf_r+0x13c>
 8007804:	9a07      	ldr	r2, [sp, #28]
 8007806:	4654      	mov	r4, sl
 8007808:	2000      	movs	r0, #0
 800780a:	f04f 0c0a 	mov.w	ip, #10
 800780e:	4621      	mov	r1, r4
 8007810:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007814:	3b30      	subs	r3, #48	; 0x30
 8007816:	2b09      	cmp	r3, #9
 8007818:	d94e      	bls.n	80078b8 <_vfiprintf_r+0x1c4>
 800781a:	b1b0      	cbz	r0, 800784a <_vfiprintf_r+0x156>
 800781c:	9207      	str	r2, [sp, #28]
 800781e:	e014      	b.n	800784a <_vfiprintf_r+0x156>
 8007820:	eba0 0308 	sub.w	r3, r0, r8
 8007824:	fa09 f303 	lsl.w	r3, r9, r3
 8007828:	4313      	orrs	r3, r2
 800782a:	9304      	str	r3, [sp, #16]
 800782c:	46a2      	mov	sl, r4
 800782e:	e7d2      	b.n	80077d6 <_vfiprintf_r+0xe2>
 8007830:	9b03      	ldr	r3, [sp, #12]
 8007832:	1d19      	adds	r1, r3, #4
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	9103      	str	r1, [sp, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	bfbb      	ittet	lt
 800783c:	425b      	neglt	r3, r3
 800783e:	f042 0202 	orrlt.w	r2, r2, #2
 8007842:	9307      	strge	r3, [sp, #28]
 8007844:	9307      	strlt	r3, [sp, #28]
 8007846:	bfb8      	it	lt
 8007848:	9204      	strlt	r2, [sp, #16]
 800784a:	7823      	ldrb	r3, [r4, #0]
 800784c:	2b2e      	cmp	r3, #46	; 0x2e
 800784e:	d10c      	bne.n	800786a <_vfiprintf_r+0x176>
 8007850:	7863      	ldrb	r3, [r4, #1]
 8007852:	2b2a      	cmp	r3, #42	; 0x2a
 8007854:	d135      	bne.n	80078c2 <_vfiprintf_r+0x1ce>
 8007856:	9b03      	ldr	r3, [sp, #12]
 8007858:	1d1a      	adds	r2, r3, #4
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	9203      	str	r2, [sp, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	bfb8      	it	lt
 8007862:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007866:	3402      	adds	r4, #2
 8007868:	9305      	str	r3, [sp, #20]
 800786a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007950 <_vfiprintf_r+0x25c>
 800786e:	7821      	ldrb	r1, [r4, #0]
 8007870:	2203      	movs	r2, #3
 8007872:	4650      	mov	r0, sl
 8007874:	f7f8 fcb4 	bl	80001e0 <memchr>
 8007878:	b140      	cbz	r0, 800788c <_vfiprintf_r+0x198>
 800787a:	2340      	movs	r3, #64	; 0x40
 800787c:	eba0 000a 	sub.w	r0, r0, sl
 8007880:	fa03 f000 	lsl.w	r0, r3, r0
 8007884:	9b04      	ldr	r3, [sp, #16]
 8007886:	4303      	orrs	r3, r0
 8007888:	3401      	adds	r4, #1
 800788a:	9304      	str	r3, [sp, #16]
 800788c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007890:	482c      	ldr	r0, [pc, #176]	; (8007944 <_vfiprintf_r+0x250>)
 8007892:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007896:	2206      	movs	r2, #6
 8007898:	f7f8 fca2 	bl	80001e0 <memchr>
 800789c:	2800      	cmp	r0, #0
 800789e:	d03f      	beq.n	8007920 <_vfiprintf_r+0x22c>
 80078a0:	4b29      	ldr	r3, [pc, #164]	; (8007948 <_vfiprintf_r+0x254>)
 80078a2:	bb1b      	cbnz	r3, 80078ec <_vfiprintf_r+0x1f8>
 80078a4:	9b03      	ldr	r3, [sp, #12]
 80078a6:	3307      	adds	r3, #7
 80078a8:	f023 0307 	bic.w	r3, r3, #7
 80078ac:	3308      	adds	r3, #8
 80078ae:	9303      	str	r3, [sp, #12]
 80078b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078b2:	443b      	add	r3, r7
 80078b4:	9309      	str	r3, [sp, #36]	; 0x24
 80078b6:	e767      	b.n	8007788 <_vfiprintf_r+0x94>
 80078b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80078bc:	460c      	mov	r4, r1
 80078be:	2001      	movs	r0, #1
 80078c0:	e7a5      	b.n	800780e <_vfiprintf_r+0x11a>
 80078c2:	2300      	movs	r3, #0
 80078c4:	3401      	adds	r4, #1
 80078c6:	9305      	str	r3, [sp, #20]
 80078c8:	4619      	mov	r1, r3
 80078ca:	f04f 0c0a 	mov.w	ip, #10
 80078ce:	4620      	mov	r0, r4
 80078d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078d4:	3a30      	subs	r2, #48	; 0x30
 80078d6:	2a09      	cmp	r2, #9
 80078d8:	d903      	bls.n	80078e2 <_vfiprintf_r+0x1ee>
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0c5      	beq.n	800786a <_vfiprintf_r+0x176>
 80078de:	9105      	str	r1, [sp, #20]
 80078e0:	e7c3      	b.n	800786a <_vfiprintf_r+0x176>
 80078e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80078e6:	4604      	mov	r4, r0
 80078e8:	2301      	movs	r3, #1
 80078ea:	e7f0      	b.n	80078ce <_vfiprintf_r+0x1da>
 80078ec:	ab03      	add	r3, sp, #12
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	462a      	mov	r2, r5
 80078f2:	4b16      	ldr	r3, [pc, #88]	; (800794c <_vfiprintf_r+0x258>)
 80078f4:	a904      	add	r1, sp, #16
 80078f6:	4630      	mov	r0, r6
 80078f8:	f7fd fdd6 	bl	80054a8 <_printf_float>
 80078fc:	4607      	mov	r7, r0
 80078fe:	1c78      	adds	r0, r7, #1
 8007900:	d1d6      	bne.n	80078b0 <_vfiprintf_r+0x1bc>
 8007902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007904:	07d9      	lsls	r1, r3, #31
 8007906:	d405      	bmi.n	8007914 <_vfiprintf_r+0x220>
 8007908:	89ab      	ldrh	r3, [r5, #12]
 800790a:	059a      	lsls	r2, r3, #22
 800790c:	d402      	bmi.n	8007914 <_vfiprintf_r+0x220>
 800790e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007910:	f000 faaf 	bl	8007e72 <__retarget_lock_release_recursive>
 8007914:	89ab      	ldrh	r3, [r5, #12]
 8007916:	065b      	lsls	r3, r3, #25
 8007918:	f53f af12 	bmi.w	8007740 <_vfiprintf_r+0x4c>
 800791c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800791e:	e711      	b.n	8007744 <_vfiprintf_r+0x50>
 8007920:	ab03      	add	r3, sp, #12
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	462a      	mov	r2, r5
 8007926:	4b09      	ldr	r3, [pc, #36]	; (800794c <_vfiprintf_r+0x258>)
 8007928:	a904      	add	r1, sp, #16
 800792a:	4630      	mov	r0, r6
 800792c:	f7fe f860 	bl	80059f0 <_printf_i>
 8007930:	e7e4      	b.n	80078fc <_vfiprintf_r+0x208>
 8007932:	bf00      	nop
 8007934:	08008534 	.word	0x08008534
 8007938:	08008554 	.word	0x08008554
 800793c:	08008514 	.word	0x08008514
 8007940:	080083bc 	.word	0x080083bc
 8007944:	080083c6 	.word	0x080083c6
 8007948:	080054a9 	.word	0x080054a9
 800794c:	080076d1 	.word	0x080076d1
 8007950:	080083c2 	.word	0x080083c2

08007954 <__swbuf_r>:
 8007954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007956:	460e      	mov	r6, r1
 8007958:	4614      	mov	r4, r2
 800795a:	4605      	mov	r5, r0
 800795c:	b118      	cbz	r0, 8007966 <__swbuf_r+0x12>
 800795e:	6983      	ldr	r3, [r0, #24]
 8007960:	b90b      	cbnz	r3, 8007966 <__swbuf_r+0x12>
 8007962:	f000 f9e7 	bl	8007d34 <__sinit>
 8007966:	4b21      	ldr	r3, [pc, #132]	; (80079ec <__swbuf_r+0x98>)
 8007968:	429c      	cmp	r4, r3
 800796a:	d12b      	bne.n	80079c4 <__swbuf_r+0x70>
 800796c:	686c      	ldr	r4, [r5, #4]
 800796e:	69a3      	ldr	r3, [r4, #24]
 8007970:	60a3      	str	r3, [r4, #8]
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	071a      	lsls	r2, r3, #28
 8007976:	d52f      	bpl.n	80079d8 <__swbuf_r+0x84>
 8007978:	6923      	ldr	r3, [r4, #16]
 800797a:	b36b      	cbz	r3, 80079d8 <__swbuf_r+0x84>
 800797c:	6923      	ldr	r3, [r4, #16]
 800797e:	6820      	ldr	r0, [r4, #0]
 8007980:	1ac0      	subs	r0, r0, r3
 8007982:	6963      	ldr	r3, [r4, #20]
 8007984:	b2f6      	uxtb	r6, r6
 8007986:	4283      	cmp	r3, r0
 8007988:	4637      	mov	r7, r6
 800798a:	dc04      	bgt.n	8007996 <__swbuf_r+0x42>
 800798c:	4621      	mov	r1, r4
 800798e:	4628      	mov	r0, r5
 8007990:	f000 f93c 	bl	8007c0c <_fflush_r>
 8007994:	bb30      	cbnz	r0, 80079e4 <__swbuf_r+0x90>
 8007996:	68a3      	ldr	r3, [r4, #8]
 8007998:	3b01      	subs	r3, #1
 800799a:	60a3      	str	r3, [r4, #8]
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	6022      	str	r2, [r4, #0]
 80079a2:	701e      	strb	r6, [r3, #0]
 80079a4:	6963      	ldr	r3, [r4, #20]
 80079a6:	3001      	adds	r0, #1
 80079a8:	4283      	cmp	r3, r0
 80079aa:	d004      	beq.n	80079b6 <__swbuf_r+0x62>
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	07db      	lsls	r3, r3, #31
 80079b0:	d506      	bpl.n	80079c0 <__swbuf_r+0x6c>
 80079b2:	2e0a      	cmp	r6, #10
 80079b4:	d104      	bne.n	80079c0 <__swbuf_r+0x6c>
 80079b6:	4621      	mov	r1, r4
 80079b8:	4628      	mov	r0, r5
 80079ba:	f000 f927 	bl	8007c0c <_fflush_r>
 80079be:	b988      	cbnz	r0, 80079e4 <__swbuf_r+0x90>
 80079c0:	4638      	mov	r0, r7
 80079c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c4:	4b0a      	ldr	r3, [pc, #40]	; (80079f0 <__swbuf_r+0x9c>)
 80079c6:	429c      	cmp	r4, r3
 80079c8:	d101      	bne.n	80079ce <__swbuf_r+0x7a>
 80079ca:	68ac      	ldr	r4, [r5, #8]
 80079cc:	e7cf      	b.n	800796e <__swbuf_r+0x1a>
 80079ce:	4b09      	ldr	r3, [pc, #36]	; (80079f4 <__swbuf_r+0xa0>)
 80079d0:	429c      	cmp	r4, r3
 80079d2:	bf08      	it	eq
 80079d4:	68ec      	ldreq	r4, [r5, #12]
 80079d6:	e7ca      	b.n	800796e <__swbuf_r+0x1a>
 80079d8:	4621      	mov	r1, r4
 80079da:	4628      	mov	r0, r5
 80079dc:	f000 f81a 	bl	8007a14 <__swsetup_r>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d0cb      	beq.n	800797c <__swbuf_r+0x28>
 80079e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80079e8:	e7ea      	b.n	80079c0 <__swbuf_r+0x6c>
 80079ea:	bf00      	nop
 80079ec:	08008534 	.word	0x08008534
 80079f0:	08008554 	.word	0x08008554
 80079f4:	08008514 	.word	0x08008514

080079f8 <__ascii_wctomb>:
 80079f8:	b149      	cbz	r1, 8007a0e <__ascii_wctomb+0x16>
 80079fa:	2aff      	cmp	r2, #255	; 0xff
 80079fc:	bf85      	ittet	hi
 80079fe:	238a      	movhi	r3, #138	; 0x8a
 8007a00:	6003      	strhi	r3, [r0, #0]
 8007a02:	700a      	strbls	r2, [r1, #0]
 8007a04:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007a08:	bf98      	it	ls
 8007a0a:	2001      	movls	r0, #1
 8007a0c:	4770      	bx	lr
 8007a0e:	4608      	mov	r0, r1
 8007a10:	4770      	bx	lr
	...

08007a14 <__swsetup_r>:
 8007a14:	4b32      	ldr	r3, [pc, #200]	; (8007ae0 <__swsetup_r+0xcc>)
 8007a16:	b570      	push	{r4, r5, r6, lr}
 8007a18:	681d      	ldr	r5, [r3, #0]
 8007a1a:	4606      	mov	r6, r0
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	b125      	cbz	r5, 8007a2a <__swsetup_r+0x16>
 8007a20:	69ab      	ldr	r3, [r5, #24]
 8007a22:	b913      	cbnz	r3, 8007a2a <__swsetup_r+0x16>
 8007a24:	4628      	mov	r0, r5
 8007a26:	f000 f985 	bl	8007d34 <__sinit>
 8007a2a:	4b2e      	ldr	r3, [pc, #184]	; (8007ae4 <__swsetup_r+0xd0>)
 8007a2c:	429c      	cmp	r4, r3
 8007a2e:	d10f      	bne.n	8007a50 <__swsetup_r+0x3c>
 8007a30:	686c      	ldr	r4, [r5, #4]
 8007a32:	89a3      	ldrh	r3, [r4, #12]
 8007a34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a38:	0719      	lsls	r1, r3, #28
 8007a3a:	d42c      	bmi.n	8007a96 <__swsetup_r+0x82>
 8007a3c:	06dd      	lsls	r5, r3, #27
 8007a3e:	d411      	bmi.n	8007a64 <__swsetup_r+0x50>
 8007a40:	2309      	movs	r3, #9
 8007a42:	6033      	str	r3, [r6, #0]
 8007a44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a48:	81a3      	strh	r3, [r4, #12]
 8007a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a4e:	e03e      	b.n	8007ace <__swsetup_r+0xba>
 8007a50:	4b25      	ldr	r3, [pc, #148]	; (8007ae8 <__swsetup_r+0xd4>)
 8007a52:	429c      	cmp	r4, r3
 8007a54:	d101      	bne.n	8007a5a <__swsetup_r+0x46>
 8007a56:	68ac      	ldr	r4, [r5, #8]
 8007a58:	e7eb      	b.n	8007a32 <__swsetup_r+0x1e>
 8007a5a:	4b24      	ldr	r3, [pc, #144]	; (8007aec <__swsetup_r+0xd8>)
 8007a5c:	429c      	cmp	r4, r3
 8007a5e:	bf08      	it	eq
 8007a60:	68ec      	ldreq	r4, [r5, #12]
 8007a62:	e7e6      	b.n	8007a32 <__swsetup_r+0x1e>
 8007a64:	0758      	lsls	r0, r3, #29
 8007a66:	d512      	bpl.n	8007a8e <__swsetup_r+0x7a>
 8007a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a6a:	b141      	cbz	r1, 8007a7e <__swsetup_r+0x6a>
 8007a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a70:	4299      	cmp	r1, r3
 8007a72:	d002      	beq.n	8007a7a <__swsetup_r+0x66>
 8007a74:	4630      	mov	r0, r6
 8007a76:	f7ff fb31 	bl	80070dc <_free_r>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	6363      	str	r3, [r4, #52]	; 0x34
 8007a7e:	89a3      	ldrh	r3, [r4, #12]
 8007a80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a84:	81a3      	strh	r3, [r4, #12]
 8007a86:	2300      	movs	r3, #0
 8007a88:	6063      	str	r3, [r4, #4]
 8007a8a:	6923      	ldr	r3, [r4, #16]
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	f043 0308 	orr.w	r3, r3, #8
 8007a94:	81a3      	strh	r3, [r4, #12]
 8007a96:	6923      	ldr	r3, [r4, #16]
 8007a98:	b94b      	cbnz	r3, 8007aae <__swsetup_r+0x9a>
 8007a9a:	89a3      	ldrh	r3, [r4, #12]
 8007a9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa4:	d003      	beq.n	8007aae <__swsetup_r+0x9a>
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f000 fa09 	bl	8007ec0 <__smakebuf_r>
 8007aae:	89a0      	ldrh	r0, [r4, #12]
 8007ab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ab4:	f010 0301 	ands.w	r3, r0, #1
 8007ab8:	d00a      	beq.n	8007ad0 <__swsetup_r+0xbc>
 8007aba:	2300      	movs	r3, #0
 8007abc:	60a3      	str	r3, [r4, #8]
 8007abe:	6963      	ldr	r3, [r4, #20]
 8007ac0:	425b      	negs	r3, r3
 8007ac2:	61a3      	str	r3, [r4, #24]
 8007ac4:	6923      	ldr	r3, [r4, #16]
 8007ac6:	b943      	cbnz	r3, 8007ada <__swsetup_r+0xc6>
 8007ac8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007acc:	d1ba      	bne.n	8007a44 <__swsetup_r+0x30>
 8007ace:	bd70      	pop	{r4, r5, r6, pc}
 8007ad0:	0781      	lsls	r1, r0, #30
 8007ad2:	bf58      	it	pl
 8007ad4:	6963      	ldrpl	r3, [r4, #20]
 8007ad6:	60a3      	str	r3, [r4, #8]
 8007ad8:	e7f4      	b.n	8007ac4 <__swsetup_r+0xb0>
 8007ada:	2000      	movs	r0, #0
 8007adc:	e7f7      	b.n	8007ace <__swsetup_r+0xba>
 8007ade:	bf00      	nop
 8007ae0:	2000000c 	.word	0x2000000c
 8007ae4:	08008534 	.word	0x08008534
 8007ae8:	08008554 	.word	0x08008554
 8007aec:	08008514 	.word	0x08008514

08007af0 <abort>:
 8007af0:	b508      	push	{r3, lr}
 8007af2:	2006      	movs	r0, #6
 8007af4:	f000 fa54 	bl	8007fa0 <raise>
 8007af8:	2001      	movs	r0, #1
 8007afa:	f7fa f8e3 	bl	8001cc4 <_exit>
	...

08007b00 <__sflush_r>:
 8007b00:	898a      	ldrh	r2, [r1, #12]
 8007b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b06:	4605      	mov	r5, r0
 8007b08:	0710      	lsls	r0, r2, #28
 8007b0a:	460c      	mov	r4, r1
 8007b0c:	d458      	bmi.n	8007bc0 <__sflush_r+0xc0>
 8007b0e:	684b      	ldr	r3, [r1, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	dc05      	bgt.n	8007b20 <__sflush_r+0x20>
 8007b14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	dc02      	bgt.n	8007b20 <__sflush_r+0x20>
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b22:	2e00      	cmp	r6, #0
 8007b24:	d0f9      	beq.n	8007b1a <__sflush_r+0x1a>
 8007b26:	2300      	movs	r3, #0
 8007b28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b2c:	682f      	ldr	r7, [r5, #0]
 8007b2e:	602b      	str	r3, [r5, #0]
 8007b30:	d032      	beq.n	8007b98 <__sflush_r+0x98>
 8007b32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b34:	89a3      	ldrh	r3, [r4, #12]
 8007b36:	075a      	lsls	r2, r3, #29
 8007b38:	d505      	bpl.n	8007b46 <__sflush_r+0x46>
 8007b3a:	6863      	ldr	r3, [r4, #4]
 8007b3c:	1ac0      	subs	r0, r0, r3
 8007b3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b40:	b10b      	cbz	r3, 8007b46 <__sflush_r+0x46>
 8007b42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b44:	1ac0      	subs	r0, r0, r3
 8007b46:	2300      	movs	r3, #0
 8007b48:	4602      	mov	r2, r0
 8007b4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b4c:	6a21      	ldr	r1, [r4, #32]
 8007b4e:	4628      	mov	r0, r5
 8007b50:	47b0      	blx	r6
 8007b52:	1c43      	adds	r3, r0, #1
 8007b54:	89a3      	ldrh	r3, [r4, #12]
 8007b56:	d106      	bne.n	8007b66 <__sflush_r+0x66>
 8007b58:	6829      	ldr	r1, [r5, #0]
 8007b5a:	291d      	cmp	r1, #29
 8007b5c:	d82c      	bhi.n	8007bb8 <__sflush_r+0xb8>
 8007b5e:	4a2a      	ldr	r2, [pc, #168]	; (8007c08 <__sflush_r+0x108>)
 8007b60:	40ca      	lsrs	r2, r1
 8007b62:	07d6      	lsls	r6, r2, #31
 8007b64:	d528      	bpl.n	8007bb8 <__sflush_r+0xb8>
 8007b66:	2200      	movs	r2, #0
 8007b68:	6062      	str	r2, [r4, #4]
 8007b6a:	04d9      	lsls	r1, r3, #19
 8007b6c:	6922      	ldr	r2, [r4, #16]
 8007b6e:	6022      	str	r2, [r4, #0]
 8007b70:	d504      	bpl.n	8007b7c <__sflush_r+0x7c>
 8007b72:	1c42      	adds	r2, r0, #1
 8007b74:	d101      	bne.n	8007b7a <__sflush_r+0x7a>
 8007b76:	682b      	ldr	r3, [r5, #0]
 8007b78:	b903      	cbnz	r3, 8007b7c <__sflush_r+0x7c>
 8007b7a:	6560      	str	r0, [r4, #84]	; 0x54
 8007b7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b7e:	602f      	str	r7, [r5, #0]
 8007b80:	2900      	cmp	r1, #0
 8007b82:	d0ca      	beq.n	8007b1a <__sflush_r+0x1a>
 8007b84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b88:	4299      	cmp	r1, r3
 8007b8a:	d002      	beq.n	8007b92 <__sflush_r+0x92>
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	f7ff faa5 	bl	80070dc <_free_r>
 8007b92:	2000      	movs	r0, #0
 8007b94:	6360      	str	r0, [r4, #52]	; 0x34
 8007b96:	e7c1      	b.n	8007b1c <__sflush_r+0x1c>
 8007b98:	6a21      	ldr	r1, [r4, #32]
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	47b0      	blx	r6
 8007ba0:	1c41      	adds	r1, r0, #1
 8007ba2:	d1c7      	bne.n	8007b34 <__sflush_r+0x34>
 8007ba4:	682b      	ldr	r3, [r5, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d0c4      	beq.n	8007b34 <__sflush_r+0x34>
 8007baa:	2b1d      	cmp	r3, #29
 8007bac:	d001      	beq.n	8007bb2 <__sflush_r+0xb2>
 8007bae:	2b16      	cmp	r3, #22
 8007bb0:	d101      	bne.n	8007bb6 <__sflush_r+0xb6>
 8007bb2:	602f      	str	r7, [r5, #0]
 8007bb4:	e7b1      	b.n	8007b1a <__sflush_r+0x1a>
 8007bb6:	89a3      	ldrh	r3, [r4, #12]
 8007bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bbc:	81a3      	strh	r3, [r4, #12]
 8007bbe:	e7ad      	b.n	8007b1c <__sflush_r+0x1c>
 8007bc0:	690f      	ldr	r7, [r1, #16]
 8007bc2:	2f00      	cmp	r7, #0
 8007bc4:	d0a9      	beq.n	8007b1a <__sflush_r+0x1a>
 8007bc6:	0793      	lsls	r3, r2, #30
 8007bc8:	680e      	ldr	r6, [r1, #0]
 8007bca:	bf08      	it	eq
 8007bcc:	694b      	ldreq	r3, [r1, #20]
 8007bce:	600f      	str	r7, [r1, #0]
 8007bd0:	bf18      	it	ne
 8007bd2:	2300      	movne	r3, #0
 8007bd4:	eba6 0807 	sub.w	r8, r6, r7
 8007bd8:	608b      	str	r3, [r1, #8]
 8007bda:	f1b8 0f00 	cmp.w	r8, #0
 8007bde:	dd9c      	ble.n	8007b1a <__sflush_r+0x1a>
 8007be0:	6a21      	ldr	r1, [r4, #32]
 8007be2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007be4:	4643      	mov	r3, r8
 8007be6:	463a      	mov	r2, r7
 8007be8:	4628      	mov	r0, r5
 8007bea:	47b0      	blx	r6
 8007bec:	2800      	cmp	r0, #0
 8007bee:	dc06      	bgt.n	8007bfe <__sflush_r+0xfe>
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf6:	81a3      	strh	r3, [r4, #12]
 8007bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bfc:	e78e      	b.n	8007b1c <__sflush_r+0x1c>
 8007bfe:	4407      	add	r7, r0
 8007c00:	eba8 0800 	sub.w	r8, r8, r0
 8007c04:	e7e9      	b.n	8007bda <__sflush_r+0xda>
 8007c06:	bf00      	nop
 8007c08:	20400001 	.word	0x20400001

08007c0c <_fflush_r>:
 8007c0c:	b538      	push	{r3, r4, r5, lr}
 8007c0e:	690b      	ldr	r3, [r1, #16]
 8007c10:	4605      	mov	r5, r0
 8007c12:	460c      	mov	r4, r1
 8007c14:	b913      	cbnz	r3, 8007c1c <_fflush_r+0x10>
 8007c16:	2500      	movs	r5, #0
 8007c18:	4628      	mov	r0, r5
 8007c1a:	bd38      	pop	{r3, r4, r5, pc}
 8007c1c:	b118      	cbz	r0, 8007c26 <_fflush_r+0x1a>
 8007c1e:	6983      	ldr	r3, [r0, #24]
 8007c20:	b90b      	cbnz	r3, 8007c26 <_fflush_r+0x1a>
 8007c22:	f000 f887 	bl	8007d34 <__sinit>
 8007c26:	4b14      	ldr	r3, [pc, #80]	; (8007c78 <_fflush_r+0x6c>)
 8007c28:	429c      	cmp	r4, r3
 8007c2a:	d11b      	bne.n	8007c64 <_fflush_r+0x58>
 8007c2c:	686c      	ldr	r4, [r5, #4]
 8007c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d0ef      	beq.n	8007c16 <_fflush_r+0xa>
 8007c36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c38:	07d0      	lsls	r0, r2, #31
 8007c3a:	d404      	bmi.n	8007c46 <_fflush_r+0x3a>
 8007c3c:	0599      	lsls	r1, r3, #22
 8007c3e:	d402      	bmi.n	8007c46 <_fflush_r+0x3a>
 8007c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c42:	f000 f915 	bl	8007e70 <__retarget_lock_acquire_recursive>
 8007c46:	4628      	mov	r0, r5
 8007c48:	4621      	mov	r1, r4
 8007c4a:	f7ff ff59 	bl	8007b00 <__sflush_r>
 8007c4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c50:	07da      	lsls	r2, r3, #31
 8007c52:	4605      	mov	r5, r0
 8007c54:	d4e0      	bmi.n	8007c18 <_fflush_r+0xc>
 8007c56:	89a3      	ldrh	r3, [r4, #12]
 8007c58:	059b      	lsls	r3, r3, #22
 8007c5a:	d4dd      	bmi.n	8007c18 <_fflush_r+0xc>
 8007c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c5e:	f000 f908 	bl	8007e72 <__retarget_lock_release_recursive>
 8007c62:	e7d9      	b.n	8007c18 <_fflush_r+0xc>
 8007c64:	4b05      	ldr	r3, [pc, #20]	; (8007c7c <_fflush_r+0x70>)
 8007c66:	429c      	cmp	r4, r3
 8007c68:	d101      	bne.n	8007c6e <_fflush_r+0x62>
 8007c6a:	68ac      	ldr	r4, [r5, #8]
 8007c6c:	e7df      	b.n	8007c2e <_fflush_r+0x22>
 8007c6e:	4b04      	ldr	r3, [pc, #16]	; (8007c80 <_fflush_r+0x74>)
 8007c70:	429c      	cmp	r4, r3
 8007c72:	bf08      	it	eq
 8007c74:	68ec      	ldreq	r4, [r5, #12]
 8007c76:	e7da      	b.n	8007c2e <_fflush_r+0x22>
 8007c78:	08008534 	.word	0x08008534
 8007c7c:	08008554 	.word	0x08008554
 8007c80:	08008514 	.word	0x08008514

08007c84 <std>:
 8007c84:	2300      	movs	r3, #0
 8007c86:	b510      	push	{r4, lr}
 8007c88:	4604      	mov	r4, r0
 8007c8a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c92:	6083      	str	r3, [r0, #8]
 8007c94:	8181      	strh	r1, [r0, #12]
 8007c96:	6643      	str	r3, [r0, #100]	; 0x64
 8007c98:	81c2      	strh	r2, [r0, #14]
 8007c9a:	6183      	str	r3, [r0, #24]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	2208      	movs	r2, #8
 8007ca0:	305c      	adds	r0, #92	; 0x5c
 8007ca2:	f7fd fb59 	bl	8005358 <memset>
 8007ca6:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <std+0x38>)
 8007ca8:	6263      	str	r3, [r4, #36]	; 0x24
 8007caa:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <std+0x3c>)
 8007cac:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cae:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <std+0x40>)
 8007cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cb2:	4b05      	ldr	r3, [pc, #20]	; (8007cc8 <std+0x44>)
 8007cb4:	6224      	str	r4, [r4, #32]
 8007cb6:	6323      	str	r3, [r4, #48]	; 0x30
 8007cb8:	bd10      	pop	{r4, pc}
 8007cba:	bf00      	nop
 8007cbc:	08007fd9 	.word	0x08007fd9
 8007cc0:	08007ffb 	.word	0x08007ffb
 8007cc4:	08008033 	.word	0x08008033
 8007cc8:	08008057 	.word	0x08008057

08007ccc <_cleanup_r>:
 8007ccc:	4901      	ldr	r1, [pc, #4]	; (8007cd4 <_cleanup_r+0x8>)
 8007cce:	f000 b8af 	b.w	8007e30 <_fwalk_reent>
 8007cd2:	bf00      	nop
 8007cd4:	08007c0d 	.word	0x08007c0d

08007cd8 <__sfmoreglue>:
 8007cd8:	b570      	push	{r4, r5, r6, lr}
 8007cda:	2268      	movs	r2, #104	; 0x68
 8007cdc:	1e4d      	subs	r5, r1, #1
 8007cde:	4355      	muls	r5, r2
 8007ce0:	460e      	mov	r6, r1
 8007ce2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ce6:	f7ff fa65 	bl	80071b4 <_malloc_r>
 8007cea:	4604      	mov	r4, r0
 8007cec:	b140      	cbz	r0, 8007d00 <__sfmoreglue+0x28>
 8007cee:	2100      	movs	r1, #0
 8007cf0:	e9c0 1600 	strd	r1, r6, [r0]
 8007cf4:	300c      	adds	r0, #12
 8007cf6:	60a0      	str	r0, [r4, #8]
 8007cf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007cfc:	f7fd fb2c 	bl	8005358 <memset>
 8007d00:	4620      	mov	r0, r4
 8007d02:	bd70      	pop	{r4, r5, r6, pc}

08007d04 <__sfp_lock_acquire>:
 8007d04:	4801      	ldr	r0, [pc, #4]	; (8007d0c <__sfp_lock_acquire+0x8>)
 8007d06:	f000 b8b3 	b.w	8007e70 <__retarget_lock_acquire_recursive>
 8007d0a:	bf00      	nop
 8007d0c:	200003f9 	.word	0x200003f9

08007d10 <__sfp_lock_release>:
 8007d10:	4801      	ldr	r0, [pc, #4]	; (8007d18 <__sfp_lock_release+0x8>)
 8007d12:	f000 b8ae 	b.w	8007e72 <__retarget_lock_release_recursive>
 8007d16:	bf00      	nop
 8007d18:	200003f9 	.word	0x200003f9

08007d1c <__sinit_lock_acquire>:
 8007d1c:	4801      	ldr	r0, [pc, #4]	; (8007d24 <__sinit_lock_acquire+0x8>)
 8007d1e:	f000 b8a7 	b.w	8007e70 <__retarget_lock_acquire_recursive>
 8007d22:	bf00      	nop
 8007d24:	200003fa 	.word	0x200003fa

08007d28 <__sinit_lock_release>:
 8007d28:	4801      	ldr	r0, [pc, #4]	; (8007d30 <__sinit_lock_release+0x8>)
 8007d2a:	f000 b8a2 	b.w	8007e72 <__retarget_lock_release_recursive>
 8007d2e:	bf00      	nop
 8007d30:	200003fa 	.word	0x200003fa

08007d34 <__sinit>:
 8007d34:	b510      	push	{r4, lr}
 8007d36:	4604      	mov	r4, r0
 8007d38:	f7ff fff0 	bl	8007d1c <__sinit_lock_acquire>
 8007d3c:	69a3      	ldr	r3, [r4, #24]
 8007d3e:	b11b      	cbz	r3, 8007d48 <__sinit+0x14>
 8007d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d44:	f7ff bff0 	b.w	8007d28 <__sinit_lock_release>
 8007d48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d4c:	6523      	str	r3, [r4, #80]	; 0x50
 8007d4e:	4b13      	ldr	r3, [pc, #76]	; (8007d9c <__sinit+0x68>)
 8007d50:	4a13      	ldr	r2, [pc, #76]	; (8007da0 <__sinit+0x6c>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d56:	42a3      	cmp	r3, r4
 8007d58:	bf04      	itt	eq
 8007d5a:	2301      	moveq	r3, #1
 8007d5c:	61a3      	streq	r3, [r4, #24]
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f000 f820 	bl	8007da4 <__sfp>
 8007d64:	6060      	str	r0, [r4, #4]
 8007d66:	4620      	mov	r0, r4
 8007d68:	f000 f81c 	bl	8007da4 <__sfp>
 8007d6c:	60a0      	str	r0, [r4, #8]
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f000 f818 	bl	8007da4 <__sfp>
 8007d74:	2200      	movs	r2, #0
 8007d76:	60e0      	str	r0, [r4, #12]
 8007d78:	2104      	movs	r1, #4
 8007d7a:	6860      	ldr	r0, [r4, #4]
 8007d7c:	f7ff ff82 	bl	8007c84 <std>
 8007d80:	68a0      	ldr	r0, [r4, #8]
 8007d82:	2201      	movs	r2, #1
 8007d84:	2109      	movs	r1, #9
 8007d86:	f7ff ff7d 	bl	8007c84 <std>
 8007d8a:	68e0      	ldr	r0, [r4, #12]
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	2112      	movs	r1, #18
 8007d90:	f7ff ff78 	bl	8007c84 <std>
 8007d94:	2301      	movs	r3, #1
 8007d96:	61a3      	str	r3, [r4, #24]
 8007d98:	e7d2      	b.n	8007d40 <__sinit+0xc>
 8007d9a:	bf00      	nop
 8007d9c:	0800819c 	.word	0x0800819c
 8007da0:	08007ccd 	.word	0x08007ccd

08007da4 <__sfp>:
 8007da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da6:	4607      	mov	r7, r0
 8007da8:	f7ff ffac 	bl	8007d04 <__sfp_lock_acquire>
 8007dac:	4b1e      	ldr	r3, [pc, #120]	; (8007e28 <__sfp+0x84>)
 8007dae:	681e      	ldr	r6, [r3, #0]
 8007db0:	69b3      	ldr	r3, [r6, #24]
 8007db2:	b913      	cbnz	r3, 8007dba <__sfp+0x16>
 8007db4:	4630      	mov	r0, r6
 8007db6:	f7ff ffbd 	bl	8007d34 <__sinit>
 8007dba:	3648      	adds	r6, #72	; 0x48
 8007dbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	d503      	bpl.n	8007dcc <__sfp+0x28>
 8007dc4:	6833      	ldr	r3, [r6, #0]
 8007dc6:	b30b      	cbz	r3, 8007e0c <__sfp+0x68>
 8007dc8:	6836      	ldr	r6, [r6, #0]
 8007dca:	e7f7      	b.n	8007dbc <__sfp+0x18>
 8007dcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007dd0:	b9d5      	cbnz	r5, 8007e08 <__sfp+0x64>
 8007dd2:	4b16      	ldr	r3, [pc, #88]	; (8007e2c <__sfp+0x88>)
 8007dd4:	60e3      	str	r3, [r4, #12]
 8007dd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007dda:	6665      	str	r5, [r4, #100]	; 0x64
 8007ddc:	f000 f847 	bl	8007e6e <__retarget_lock_init_recursive>
 8007de0:	f7ff ff96 	bl	8007d10 <__sfp_lock_release>
 8007de4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007de8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007dec:	6025      	str	r5, [r4, #0]
 8007dee:	61a5      	str	r5, [r4, #24]
 8007df0:	2208      	movs	r2, #8
 8007df2:	4629      	mov	r1, r5
 8007df4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007df8:	f7fd faae 	bl	8005358 <memset>
 8007dfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e04:	4620      	mov	r0, r4
 8007e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e08:	3468      	adds	r4, #104	; 0x68
 8007e0a:	e7d9      	b.n	8007dc0 <__sfp+0x1c>
 8007e0c:	2104      	movs	r1, #4
 8007e0e:	4638      	mov	r0, r7
 8007e10:	f7ff ff62 	bl	8007cd8 <__sfmoreglue>
 8007e14:	4604      	mov	r4, r0
 8007e16:	6030      	str	r0, [r6, #0]
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d1d5      	bne.n	8007dc8 <__sfp+0x24>
 8007e1c:	f7ff ff78 	bl	8007d10 <__sfp_lock_release>
 8007e20:	230c      	movs	r3, #12
 8007e22:	603b      	str	r3, [r7, #0]
 8007e24:	e7ee      	b.n	8007e04 <__sfp+0x60>
 8007e26:	bf00      	nop
 8007e28:	0800819c 	.word	0x0800819c
 8007e2c:	ffff0001 	.word	0xffff0001

08007e30 <_fwalk_reent>:
 8007e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e34:	4606      	mov	r6, r0
 8007e36:	4688      	mov	r8, r1
 8007e38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e3c:	2700      	movs	r7, #0
 8007e3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e42:	f1b9 0901 	subs.w	r9, r9, #1
 8007e46:	d505      	bpl.n	8007e54 <_fwalk_reent+0x24>
 8007e48:	6824      	ldr	r4, [r4, #0]
 8007e4a:	2c00      	cmp	r4, #0
 8007e4c:	d1f7      	bne.n	8007e3e <_fwalk_reent+0xe>
 8007e4e:	4638      	mov	r0, r7
 8007e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e54:	89ab      	ldrh	r3, [r5, #12]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d907      	bls.n	8007e6a <_fwalk_reent+0x3a>
 8007e5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	d003      	beq.n	8007e6a <_fwalk_reent+0x3a>
 8007e62:	4629      	mov	r1, r5
 8007e64:	4630      	mov	r0, r6
 8007e66:	47c0      	blx	r8
 8007e68:	4307      	orrs	r7, r0
 8007e6a:	3568      	adds	r5, #104	; 0x68
 8007e6c:	e7e9      	b.n	8007e42 <_fwalk_reent+0x12>

08007e6e <__retarget_lock_init_recursive>:
 8007e6e:	4770      	bx	lr

08007e70 <__retarget_lock_acquire_recursive>:
 8007e70:	4770      	bx	lr

08007e72 <__retarget_lock_release_recursive>:
 8007e72:	4770      	bx	lr

08007e74 <__swhatbuf_r>:
 8007e74:	b570      	push	{r4, r5, r6, lr}
 8007e76:	460e      	mov	r6, r1
 8007e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e7c:	2900      	cmp	r1, #0
 8007e7e:	b096      	sub	sp, #88	; 0x58
 8007e80:	4614      	mov	r4, r2
 8007e82:	461d      	mov	r5, r3
 8007e84:	da08      	bge.n	8007e98 <__swhatbuf_r+0x24>
 8007e86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	602a      	str	r2, [r5, #0]
 8007e8e:	061a      	lsls	r2, r3, #24
 8007e90:	d410      	bmi.n	8007eb4 <__swhatbuf_r+0x40>
 8007e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e96:	e00e      	b.n	8007eb6 <__swhatbuf_r+0x42>
 8007e98:	466a      	mov	r2, sp
 8007e9a:	f000 f903 	bl	80080a4 <_fstat_r>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	dbf1      	blt.n	8007e86 <__swhatbuf_r+0x12>
 8007ea2:	9a01      	ldr	r2, [sp, #4]
 8007ea4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ea8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007eac:	425a      	negs	r2, r3
 8007eae:	415a      	adcs	r2, r3
 8007eb0:	602a      	str	r2, [r5, #0]
 8007eb2:	e7ee      	b.n	8007e92 <__swhatbuf_r+0x1e>
 8007eb4:	2340      	movs	r3, #64	; 0x40
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	b016      	add	sp, #88	; 0x58
 8007ebc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ec0 <__smakebuf_r>:
 8007ec0:	898b      	ldrh	r3, [r1, #12]
 8007ec2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ec4:	079d      	lsls	r5, r3, #30
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	460c      	mov	r4, r1
 8007eca:	d507      	bpl.n	8007edc <__smakebuf_r+0x1c>
 8007ecc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	6123      	str	r3, [r4, #16]
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	6163      	str	r3, [r4, #20]
 8007ed8:	b002      	add	sp, #8
 8007eda:	bd70      	pop	{r4, r5, r6, pc}
 8007edc:	ab01      	add	r3, sp, #4
 8007ede:	466a      	mov	r2, sp
 8007ee0:	f7ff ffc8 	bl	8007e74 <__swhatbuf_r>
 8007ee4:	9900      	ldr	r1, [sp, #0]
 8007ee6:	4605      	mov	r5, r0
 8007ee8:	4630      	mov	r0, r6
 8007eea:	f7ff f963 	bl	80071b4 <_malloc_r>
 8007eee:	b948      	cbnz	r0, 8007f04 <__smakebuf_r+0x44>
 8007ef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ef4:	059a      	lsls	r2, r3, #22
 8007ef6:	d4ef      	bmi.n	8007ed8 <__smakebuf_r+0x18>
 8007ef8:	f023 0303 	bic.w	r3, r3, #3
 8007efc:	f043 0302 	orr.w	r3, r3, #2
 8007f00:	81a3      	strh	r3, [r4, #12]
 8007f02:	e7e3      	b.n	8007ecc <__smakebuf_r+0xc>
 8007f04:	4b0d      	ldr	r3, [pc, #52]	; (8007f3c <__smakebuf_r+0x7c>)
 8007f06:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f08:	89a3      	ldrh	r3, [r4, #12]
 8007f0a:	6020      	str	r0, [r4, #0]
 8007f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f10:	81a3      	strh	r3, [r4, #12]
 8007f12:	9b00      	ldr	r3, [sp, #0]
 8007f14:	6163      	str	r3, [r4, #20]
 8007f16:	9b01      	ldr	r3, [sp, #4]
 8007f18:	6120      	str	r0, [r4, #16]
 8007f1a:	b15b      	cbz	r3, 8007f34 <__smakebuf_r+0x74>
 8007f1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f20:	4630      	mov	r0, r6
 8007f22:	f000 f8d1 	bl	80080c8 <_isatty_r>
 8007f26:	b128      	cbz	r0, 8007f34 <__smakebuf_r+0x74>
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	f023 0303 	bic.w	r3, r3, #3
 8007f2e:	f043 0301 	orr.w	r3, r3, #1
 8007f32:	81a3      	strh	r3, [r4, #12]
 8007f34:	89a0      	ldrh	r0, [r4, #12]
 8007f36:	4305      	orrs	r5, r0
 8007f38:	81a5      	strh	r5, [r4, #12]
 8007f3a:	e7cd      	b.n	8007ed8 <__smakebuf_r+0x18>
 8007f3c:	08007ccd 	.word	0x08007ccd

08007f40 <_malloc_usable_size_r>:
 8007f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f44:	1f18      	subs	r0, r3, #4
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	bfbc      	itt	lt
 8007f4a:	580b      	ldrlt	r3, [r1, r0]
 8007f4c:	18c0      	addlt	r0, r0, r3
 8007f4e:	4770      	bx	lr

08007f50 <_raise_r>:
 8007f50:	291f      	cmp	r1, #31
 8007f52:	b538      	push	{r3, r4, r5, lr}
 8007f54:	4604      	mov	r4, r0
 8007f56:	460d      	mov	r5, r1
 8007f58:	d904      	bls.n	8007f64 <_raise_r+0x14>
 8007f5a:	2316      	movs	r3, #22
 8007f5c:	6003      	str	r3, [r0, #0]
 8007f5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f62:	bd38      	pop	{r3, r4, r5, pc}
 8007f64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f66:	b112      	cbz	r2, 8007f6e <_raise_r+0x1e>
 8007f68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f6c:	b94b      	cbnz	r3, 8007f82 <_raise_r+0x32>
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f000 f830 	bl	8007fd4 <_getpid_r>
 8007f74:	462a      	mov	r2, r5
 8007f76:	4601      	mov	r1, r0
 8007f78:	4620      	mov	r0, r4
 8007f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f7e:	f000 b817 	b.w	8007fb0 <_kill_r>
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d00a      	beq.n	8007f9c <_raise_r+0x4c>
 8007f86:	1c59      	adds	r1, r3, #1
 8007f88:	d103      	bne.n	8007f92 <_raise_r+0x42>
 8007f8a:	2316      	movs	r3, #22
 8007f8c:	6003      	str	r3, [r0, #0]
 8007f8e:	2001      	movs	r0, #1
 8007f90:	e7e7      	b.n	8007f62 <_raise_r+0x12>
 8007f92:	2400      	movs	r4, #0
 8007f94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f98:	4628      	mov	r0, r5
 8007f9a:	4798      	blx	r3
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	e7e0      	b.n	8007f62 <_raise_r+0x12>

08007fa0 <raise>:
 8007fa0:	4b02      	ldr	r3, [pc, #8]	; (8007fac <raise+0xc>)
 8007fa2:	4601      	mov	r1, r0
 8007fa4:	6818      	ldr	r0, [r3, #0]
 8007fa6:	f7ff bfd3 	b.w	8007f50 <_raise_r>
 8007faa:	bf00      	nop
 8007fac:	2000000c 	.word	0x2000000c

08007fb0 <_kill_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	4d07      	ldr	r5, [pc, #28]	; (8007fd0 <_kill_r+0x20>)
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	4608      	mov	r0, r1
 8007fba:	4611      	mov	r1, r2
 8007fbc:	602b      	str	r3, [r5, #0]
 8007fbe:	f7f9 fe71 	bl	8001ca4 <_kill>
 8007fc2:	1c43      	adds	r3, r0, #1
 8007fc4:	d102      	bne.n	8007fcc <_kill_r+0x1c>
 8007fc6:	682b      	ldr	r3, [r5, #0]
 8007fc8:	b103      	cbz	r3, 8007fcc <_kill_r+0x1c>
 8007fca:	6023      	str	r3, [r4, #0]
 8007fcc:	bd38      	pop	{r3, r4, r5, pc}
 8007fce:	bf00      	nop
 8007fd0:	200003f4 	.word	0x200003f4

08007fd4 <_getpid_r>:
 8007fd4:	f7f9 be5e 	b.w	8001c94 <_getpid>

08007fd8 <__sread>:
 8007fd8:	b510      	push	{r4, lr}
 8007fda:	460c      	mov	r4, r1
 8007fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe0:	f000 f894 	bl	800810c <_read_r>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	bfab      	itete	ge
 8007fe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fea:	89a3      	ldrhlt	r3, [r4, #12]
 8007fec:	181b      	addge	r3, r3, r0
 8007fee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ff2:	bfac      	ite	ge
 8007ff4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ff6:	81a3      	strhlt	r3, [r4, #12]
 8007ff8:	bd10      	pop	{r4, pc}

08007ffa <__swrite>:
 8007ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ffe:	461f      	mov	r7, r3
 8008000:	898b      	ldrh	r3, [r1, #12]
 8008002:	05db      	lsls	r3, r3, #23
 8008004:	4605      	mov	r5, r0
 8008006:	460c      	mov	r4, r1
 8008008:	4616      	mov	r6, r2
 800800a:	d505      	bpl.n	8008018 <__swrite+0x1e>
 800800c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008010:	2302      	movs	r3, #2
 8008012:	2200      	movs	r2, #0
 8008014:	f000 f868 	bl	80080e8 <_lseek_r>
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800801e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008022:	81a3      	strh	r3, [r4, #12]
 8008024:	4632      	mov	r2, r6
 8008026:	463b      	mov	r3, r7
 8008028:	4628      	mov	r0, r5
 800802a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800802e:	f000 b817 	b.w	8008060 <_write_r>

08008032 <__sseek>:
 8008032:	b510      	push	{r4, lr}
 8008034:	460c      	mov	r4, r1
 8008036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800803a:	f000 f855 	bl	80080e8 <_lseek_r>
 800803e:	1c43      	adds	r3, r0, #1
 8008040:	89a3      	ldrh	r3, [r4, #12]
 8008042:	bf15      	itete	ne
 8008044:	6560      	strne	r0, [r4, #84]	; 0x54
 8008046:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800804a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800804e:	81a3      	strheq	r3, [r4, #12]
 8008050:	bf18      	it	ne
 8008052:	81a3      	strhne	r3, [r4, #12]
 8008054:	bd10      	pop	{r4, pc}

08008056 <__sclose>:
 8008056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800805a:	f000 b813 	b.w	8008084 <_close_r>
	...

08008060 <_write_r>:
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	4d07      	ldr	r5, [pc, #28]	; (8008080 <_write_r+0x20>)
 8008064:	4604      	mov	r4, r0
 8008066:	4608      	mov	r0, r1
 8008068:	4611      	mov	r1, r2
 800806a:	2200      	movs	r2, #0
 800806c:	602a      	str	r2, [r5, #0]
 800806e:	461a      	mov	r2, r3
 8008070:	f7f9 fe4f 	bl	8001d12 <_write>
 8008074:	1c43      	adds	r3, r0, #1
 8008076:	d102      	bne.n	800807e <_write_r+0x1e>
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	b103      	cbz	r3, 800807e <_write_r+0x1e>
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	bd38      	pop	{r3, r4, r5, pc}
 8008080:	200003f4 	.word	0x200003f4

08008084 <_close_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4d06      	ldr	r5, [pc, #24]	; (80080a0 <_close_r+0x1c>)
 8008088:	2300      	movs	r3, #0
 800808a:	4604      	mov	r4, r0
 800808c:	4608      	mov	r0, r1
 800808e:	602b      	str	r3, [r5, #0]
 8008090:	f7f9 fe5b 	bl	8001d4a <_close>
 8008094:	1c43      	adds	r3, r0, #1
 8008096:	d102      	bne.n	800809e <_close_r+0x1a>
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	b103      	cbz	r3, 800809e <_close_r+0x1a>
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	bd38      	pop	{r3, r4, r5, pc}
 80080a0:	200003f4 	.word	0x200003f4

080080a4 <_fstat_r>:
 80080a4:	b538      	push	{r3, r4, r5, lr}
 80080a6:	4d07      	ldr	r5, [pc, #28]	; (80080c4 <_fstat_r+0x20>)
 80080a8:	2300      	movs	r3, #0
 80080aa:	4604      	mov	r4, r0
 80080ac:	4608      	mov	r0, r1
 80080ae:	4611      	mov	r1, r2
 80080b0:	602b      	str	r3, [r5, #0]
 80080b2:	f7f9 fe56 	bl	8001d62 <_fstat>
 80080b6:	1c43      	adds	r3, r0, #1
 80080b8:	d102      	bne.n	80080c0 <_fstat_r+0x1c>
 80080ba:	682b      	ldr	r3, [r5, #0]
 80080bc:	b103      	cbz	r3, 80080c0 <_fstat_r+0x1c>
 80080be:	6023      	str	r3, [r4, #0]
 80080c0:	bd38      	pop	{r3, r4, r5, pc}
 80080c2:	bf00      	nop
 80080c4:	200003f4 	.word	0x200003f4

080080c8 <_isatty_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4d06      	ldr	r5, [pc, #24]	; (80080e4 <_isatty_r+0x1c>)
 80080cc:	2300      	movs	r3, #0
 80080ce:	4604      	mov	r4, r0
 80080d0:	4608      	mov	r0, r1
 80080d2:	602b      	str	r3, [r5, #0]
 80080d4:	f7f9 fe55 	bl	8001d82 <_isatty>
 80080d8:	1c43      	adds	r3, r0, #1
 80080da:	d102      	bne.n	80080e2 <_isatty_r+0x1a>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	b103      	cbz	r3, 80080e2 <_isatty_r+0x1a>
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	200003f4 	.word	0x200003f4

080080e8 <_lseek_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4d07      	ldr	r5, [pc, #28]	; (8008108 <_lseek_r+0x20>)
 80080ec:	4604      	mov	r4, r0
 80080ee:	4608      	mov	r0, r1
 80080f0:	4611      	mov	r1, r2
 80080f2:	2200      	movs	r2, #0
 80080f4:	602a      	str	r2, [r5, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	f7f9 fe4e 	bl	8001d98 <_lseek>
 80080fc:	1c43      	adds	r3, r0, #1
 80080fe:	d102      	bne.n	8008106 <_lseek_r+0x1e>
 8008100:	682b      	ldr	r3, [r5, #0]
 8008102:	b103      	cbz	r3, 8008106 <_lseek_r+0x1e>
 8008104:	6023      	str	r3, [r4, #0]
 8008106:	bd38      	pop	{r3, r4, r5, pc}
 8008108:	200003f4 	.word	0x200003f4

0800810c <_read_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	4d07      	ldr	r5, [pc, #28]	; (800812c <_read_r+0x20>)
 8008110:	4604      	mov	r4, r0
 8008112:	4608      	mov	r0, r1
 8008114:	4611      	mov	r1, r2
 8008116:	2200      	movs	r2, #0
 8008118:	602a      	str	r2, [r5, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	f7f9 fddc 	bl	8001cd8 <_read>
 8008120:	1c43      	adds	r3, r0, #1
 8008122:	d102      	bne.n	800812a <_read_r+0x1e>
 8008124:	682b      	ldr	r3, [r5, #0]
 8008126:	b103      	cbz	r3, 800812a <_read_r+0x1e>
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	bd38      	pop	{r3, r4, r5, pc}
 800812c:	200003f4 	.word	0x200003f4

08008130 <_init>:
 8008130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008132:	bf00      	nop
 8008134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008136:	bc08      	pop	{r3}
 8008138:	469e      	mov	lr, r3
 800813a:	4770      	bx	lr

0800813c <_fini>:
 800813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813e:	bf00      	nop
 8008140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008142:	bc08      	pop	{r3}
 8008144:	469e      	mov	lr, r3
 8008146:	4770      	bx	lr
