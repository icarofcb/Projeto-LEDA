
LEDA-F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a734  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800a8c8  0800a8c8  0001a8c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adcc  0800adcc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800adcc  0800adcc  0001adcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800add4  0800add4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800add4  0800add4  0001add4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800add8  0800add8  0001add8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800addc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000003bc  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000598  20000598  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001471e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025e1  00000000  00000000  0003492a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  00036f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011d8  00000000  00000000  000381b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023df1  00000000  00000000  00039390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000150b8  00000000  00000000  0005d181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de2be  00000000  00000000  00072239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001504f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006544  00000000  00000000  00150548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8ac 	.word	0x0800a8ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800a8ac 	.word	0x0800a8ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MPU6050_Init>:
#endif

//==========ACELEROMETRO==========//

void MPU6050_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	9302      	str	r3, [sp, #8]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	1dfb      	adds	r3, r7, #7
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2301      	movs	r3, #1
 8000f62:	2275      	movs	r2, #117	; 0x75
 8000f64:	21d0      	movs	r1, #208	; 0xd0
 8000f66:	4823      	ldr	r0, [pc, #140]	; (8000ff4 <MPU6050_Init+0xa8>)
 8000f68:	f003 fb88 	bl	800467c <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b68      	cmp	r3, #104	; 0x68
 8000f70:	d13b      	bne.n	8000fea <MPU6050_Init+0x9e>
	{
		Data = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7a:	9302      	str	r3, [sp, #8]
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	1dbb      	adds	r3, r7, #6
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2301      	movs	r3, #1
 8000f86:	226b      	movs	r2, #107	; 0x6b
 8000f88:	21d0      	movs	r1, #208	; 0xd0
 8000f8a:	481a      	ldr	r0, [pc, #104]	; (8000ff4 <MPU6050_Init+0xa8>)
 8000f8c:	f003 fa7c 	bl	8004488 <HAL_I2C_Mem_Write>

		Data = 0x07;
 8000f90:	2307      	movs	r3, #7
 8000f92:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	1dbb      	adds	r3, r7, #6
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	2219      	movs	r2, #25
 8000fa6:	21d0      	movs	r1, #208	; 0xd0
 8000fa8:	4812      	ldr	r0, [pc, #72]	; (8000ff4 <MPU6050_Init+0xa8>)
 8000faa:	f003 fa6d 	bl	8004488 <HAL_I2C_Mem_Write>

		Data = 0x00;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	9302      	str	r3, [sp, #8]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	1dbb      	adds	r3, r7, #6
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	221c      	movs	r2, #28
 8000fc4:	21d0      	movs	r1, #208	; 0xd0
 8000fc6:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <MPU6050_Init+0xa8>)
 8000fc8:	f003 fa5e 	bl	8004488 <HAL_I2C_Mem_Write>

		Data = 0x00;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	1dbb      	adds	r3, r7, #6
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	221b      	movs	r2, #27
 8000fe2:	21d0      	movs	r1, #208	; 0xd0
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <MPU6050_Init+0xa8>)
 8000fe6:	f003 fa4f 	bl	8004488 <HAL_I2C_Mem_Write>
	}

}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000268 	.word	0x20000268

08000ff8 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	int16_t Accel_X_RAW = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	81fb      	strh	r3, [r7, #14]
	int16_t Accel_Y_RAW = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	81bb      	strh	r3, [r7, #12]
	int16_t Accel_Z_RAW = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	9302      	str	r3, [sp, #8]
 8001010:	2306      	movs	r3, #6
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	223b      	movs	r2, #59	; 0x3b
 800101c:	21d0      	movs	r1, #208	; 0xd0
 800101e:	4853      	ldr	r0, [pc, #332]	; (800116c <MPU6050_Read_Accel+0x174>)
 8001020:	f003 fb2c 	bl	800467c <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001024:	793b      	ldrb	r3, [r7, #4]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	797b      	ldrb	r3, [r7, #5]
 800102c:	b21b      	sxth	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	81fb      	strh	r3, [r7, #14]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b21a      	sxth	r2, r3
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	b21b      	sxth	r3, r3
 800103c:	4313      	orrs	r3, r2
 800103e:	81bb      	strh	r3, [r7, #12]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001040:	7a3b      	ldrb	r3, [r7, #8]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	7a7b      	ldrb	r3, [r7, #9]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	817b      	strh	r3, [r7, #10]

	MPU6050.ax = ((float)Accel_X_RAW/16384.0)*10;
 800104e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105a:	ee17 0a90 	vmov	r0, s15
 800105e:	f7ff fa73 	bl	8000548 <__aeabi_f2d>
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	4b42      	ldr	r3, [pc, #264]	; (8001170 <MPU6050_Read_Accel+0x178>)
 8001068:	f7ff fbf0 	bl	800084c <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	4b3e      	ldr	r3, [pc, #248]	; (8001174 <MPU6050_Read_Accel+0x17c>)
 800107a:	f7ff fabd 	bl	80005f8 <__aeabi_dmul>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	f7ff fd8f 	bl	8000ba8 <__aeabi_d2f>
 800108a:	4603      	mov	r3, r0
 800108c:	4a3a      	ldr	r2, [pc, #232]	; (8001178 <MPU6050_Read_Accel+0x180>)
 800108e:	6013      	str	r3, [r2, #0]
	MPU6050.ay = ((float)Accel_Y_RAW/16384.0)*10;
 8001090:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109c:	ee17 0a90 	vmov	r0, s15
 80010a0:	f7ff fa52 	bl	8000548 <__aeabi_f2d>
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4b31      	ldr	r3, [pc, #196]	; (8001170 <MPU6050_Read_Accel+0x178>)
 80010aa:	f7ff fbcf 	bl	800084c <__aeabi_ddiv>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <MPU6050_Read_Accel+0x17c>)
 80010bc:	f7ff fa9c 	bl	80005f8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fd6e 	bl	8000ba8 <__aeabi_d2f>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a2a      	ldr	r2, [pc, #168]	; (8001178 <MPU6050_Read_Accel+0x180>)
 80010d0:	6053      	str	r3, [r2, #4]
	MPU6050.az = ((float)Accel_Z_RAW/16384.0)*10;
 80010d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010de:	ee17 0a90 	vmov	r0, s15
 80010e2:	f7ff fa31 	bl	8000548 <__aeabi_f2d>
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	4b21      	ldr	r3, [pc, #132]	; (8001170 <MPU6050_Read_Accel+0x178>)
 80010ec:	f7ff fbae 	bl	800084c <__aeabi_ddiv>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <MPU6050_Read_Accel+0x17c>)
 80010fe:	f7ff fa7b 	bl	80005f8 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fd4d 	bl	8000ba8 <__aeabi_d2f>
 800110e:	4603      	mov	r3, r0
 8001110:	4a19      	ldr	r2, [pc, #100]	; (8001178 <MPU6050_Read_Accel+0x180>)
 8001112:	6093      	str	r3, [r2, #8]

	average.ax = mvAx(MPU6050.ax, numberOfIterations);
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <MPU6050_Read_Accel+0x180>)
 8001116:	edd3 7a00 	vldr	s15, [r3]
 800111a:	200a      	movs	r0, #10
 800111c:	eeb0 0a67 	vmov.f32	s0, s15
 8001120:	f000 fb76 	bl	8001810 <mvAx>
 8001124:	eef0 7a40 	vmov.f32	s15, s0
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <MPU6050_Read_Accel+0x184>)
 800112a:	edc3 7a00 	vstr	s15, [r3]
	average.ay = mvAy(MPU6050.ay, numberOfIterations);
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MPU6050_Read_Accel+0x180>)
 8001130:	edd3 7a01 	vldr	s15, [r3, #4]
 8001134:	200a      	movs	r0, #10
 8001136:	eeb0 0a67 	vmov.f32	s0, s15
 800113a:	f000 fbb5 	bl	80018a8 <mvAy>
 800113e:	eef0 7a40 	vmov.f32	s15, s0
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MPU6050_Read_Accel+0x184>)
 8001144:	edc3 7a01 	vstr	s15, [r3, #4]
	average.az = mvAy(MPU6050.az, numberOfIterations);
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MPU6050_Read_Accel+0x180>)
 800114a:	edd3 7a02 	vldr	s15, [r3, #8]
 800114e:	200a      	movs	r0, #10
 8001150:	eeb0 0a67 	vmov.f32	s0, s15
 8001154:	f000 fba8 	bl	80018a8 <mvAy>
 8001158:	eef0 7a40 	vmov.f32	s15, s0
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <MPU6050_Read_Accel+0x184>)
 800115e:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000268 	.word	0x20000268
 8001170:	40d00000 	.word	0x40d00000
 8001174:	40240000 	.word	0x40240000
 8001178:	20000420 	.word	0x20000420
 800117c:	20000438 	.word	0x20000438

08001180 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro  (void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	int16_t Gyro_X_RAW = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	81fb      	strh	r3, [r7, #14]
	int16_t Gyro_Y_RAW = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	81bb      	strh	r3, [r7, #12]
	int16_t Gyro_Z_RAW = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	2306      	movs	r3, #6
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2301      	movs	r3, #1
 80011a2:	2243      	movs	r2, #67	; 0x43
 80011a4:	21d0      	movs	r1, #208	; 0xd0
 80011a6:	4821      	ldr	r0, [pc, #132]	; (800122c <MPU6050_Read_Gyro+0xac>)
 80011a8:	f003 fa68 	bl	800467c <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80011ac:	793b      	ldrb	r3, [r7, #4]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	797b      	ldrb	r3, [r7, #5]
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	81fb      	strh	r3, [r7, #14]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21a      	sxth	r2, r3
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	4313      	orrs	r3, r2
 80011c6:	81bb      	strh	r3, [r7, #12]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80011c8:	7a3b      	ldrb	r3, [r7, #8]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	7a7b      	ldrb	r3, [r7, #9]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	817b      	strh	r3, [r7, #10]

	MPU6050.gx = (float)Gyro_X_RAW/131.0;
 80011d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e2:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001230 <MPU6050_Read_Gyro+0xb0>
 80011e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MPU6050_Read_Gyro+0xb4>)
 80011ec:	edc3 7a03 	vstr	s15, [r3, #12]
	MPU6050.gy = (float)Gyro_Y_RAW/131.0;
 80011f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001230 <MPU6050_Read_Gyro+0xb0>
 8001200:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MPU6050_Read_Gyro+0xb4>)
 8001206:	edc3 7a04 	vstr	s15, [r3, #16]
	MPU6050.gz = (float)Gyro_Z_RAW/131.0;
 800120a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001216:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001230 <MPU6050_Read_Gyro+0xb0>
 800121a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <MPU6050_Read_Gyro+0xb4>)
 8001220:	edc3 7a05 	vstr	s15, [r3, #20]

	//average.gx = mvGx(MPU6050.gx, numberOfIterations);
	//average.gy = mvGy(MPU6050.gy, numberOfIterations);
	//average.gz = mvGy(MPU6050.gz, numberOfIterations);

}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000268 	.word	0x20000268
 8001230:	43030000 	.word	0x43030000
 8001234:	20000420 	.word	0x20000420

08001238 <GPS_Init>:

//==========GPS==========//

void GPS_Init()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 800123c:	2201      	movs	r2, #1
 800123e:	4903      	ldr	r1, [pc, #12]	; (800124c <GPS_Init+0x14>)
 8001240:	4803      	ldr	r0, [pc, #12]	; (8001250 <GPS_Init+0x18>)
 8001242:	f004 ffb8 	bl	80061b6 <HAL_UART_Receive_IT>
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000450 	.word	0x20000450
 8001250:	20000390 	.word	0x20000390

08001254 <GPS_UART_CallBack>:

void GPS_UART_CallBack(){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <GPS_UART_CallBack+0x60>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b0a      	cmp	r3, #10
 800125e:	d010      	beq.n	8001282 <GPS_UART_CallBack+0x2e>
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <GPS_UART_CallBack+0x64>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b25b      	sxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	db0b      	blt.n	8001282 <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <GPS_UART_CallBack+0x64>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	b2d1      	uxtb	r1, r2
 8001272:	4a11      	ldr	r2, [pc, #68]	; (80012b8 <GPS_UART_CallBack+0x64>)
 8001274:	7011      	strb	r1, [r2, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <GPS_UART_CallBack+0x60>)
 800127a:	7819      	ldrb	r1, [r3, #0]
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <GPS_UART_CallBack+0x68>)
 800127e:	5499      	strb	r1, [r3, r2]
 8001280:	e010      	b.n	80012a4 <GPS_UART_CallBack+0x50>

		#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer);
		#endif

		if(GPS_validate((char*) rx_buffer))
 8001282:	480e      	ldr	r0, [pc, #56]	; (80012bc <GPS_UART_CallBack+0x68>)
 8001284:	f000 f81e 	bl	80012c4 <GPS_validate>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 800128e:	480b      	ldr	r0, [pc, #44]	; (80012bc <GPS_UART_CallBack+0x68>)
 8001290:	f000 f87a 	bl	8001388 <GPS_parse>
		rx_index = 0;
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <GPS_UART_CallBack+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 800129a:	2280      	movs	r2, #128	; 0x80
 800129c:	2100      	movs	r1, #0
 800129e:	4807      	ldr	r0, [pc, #28]	; (80012bc <GPS_UART_CallBack+0x68>)
 80012a0:	f005 ff4c 	bl	800713c <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80012a4:	2201      	movs	r2, #1
 80012a6:	4903      	ldr	r1, [pc, #12]	; (80012b4 <GPS_UART_CallBack+0x60>)
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <GPS_UART_CallBack+0x6c>)
 80012aa:	f004 ff84 	bl	80061b6 <HAL_UART_Receive_IT>
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000450 	.word	0x20000450
 80012b8:	200004d4 	.word	0x200004d4
 80012bc:	20000454 	.word	0x20000454
 80012c0:	20000390 	.word	0x20000390

080012c4 <GPS_validate>:

int GPS_validate(char *nmeastr){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b24      	cmp	r3, #36	; 0x24
 80012de:	d103      	bne.n	80012e8 <GPS_validate+0x24>
        i++;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	3301      	adds	r3, #1
 80012e4:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80012e6:	e00c      	b.n	8001302 <GPS_validate+0x3e>
        return 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	e047      	b.n	800137c <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4053      	eors	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        i++;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3301      	adds	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d008      	beq.n	8001320 <GPS_validate+0x5c>
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	4413      	add	r3, r2
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b2a      	cmp	r3, #42	; 0x2a
 8001318:	d002      	beq.n	8001320 <GPS_validate+0x5c>
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	2b4a      	cmp	r3, #74	; 0x4a
 800131e:	dde5      	ble.n	80012ec <GPS_validate+0x28>
    }

    if(i >= 75){
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	2b4a      	cmp	r3, #74	; 0x4a
 8001324:	dd01      	ble.n	800132a <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8001326:	2300      	movs	r3, #0
 8001328:	e028      	b.n	800137c <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b2a      	cmp	r3, #42	; 0x2a
 8001334:	d119      	bne.n	800136a <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3302      	adds	r3, #2
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	490a      	ldr	r1, [pc, #40]	; (8001384 <GPS_validate+0xc0>)
 800135a:	4618      	mov	r0, r3
 800135c:	f006 fb60 	bl	8007a20 <siprintf>
    return((checkcalcstr[0] == check[0])
 8001360:	7a3a      	ldrb	r2, [r7, #8]
 8001362:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001364:	429a      	cmp	r2, r3
 8001366:	d108      	bne.n	800137a <GPS_validate+0xb6>
 8001368:	e001      	b.n	800136e <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800136a:	2300      	movs	r3, #0
 800136c:	e006      	b.n	800137c <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800136e:	7a7a      	ldrb	r2, [r7, #9]
 8001370:	7b7b      	ldrb	r3, [r7, #13]
 8001372:	429a      	cmp	r2, r3
 8001374:	d101      	bne.n	800137a <GPS_validate+0xb6>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <GPS_validate+0xb8>
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	0800a8c8 	.word	0x0800a8c8

08001388 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af08      	add	r7, sp, #32
 800138e:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001390:	2206      	movs	r2, #6
 8001392:	494a      	ldr	r1, [pc, #296]	; (80014bc <GPS_parse+0x134>)
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f006 fbd4 	bl	8007b42 <strncmp>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d137      	bne.n	8001410 <GPS_parse+0x88>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80013a0:	4b47      	ldr	r3, [pc, #284]	; (80014c0 <GPS_parse+0x138>)
 80013a2:	9307      	str	r3, [sp, #28]
 80013a4:	4b47      	ldr	r3, [pc, #284]	; (80014c4 <GPS_parse+0x13c>)
 80013a6:	9306      	str	r3, [sp, #24]
 80013a8:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <GPS_parse+0x140>)
 80013aa:	9305      	str	r3, [sp, #20]
 80013ac:	4b47      	ldr	r3, [pc, #284]	; (80014cc <GPS_parse+0x144>)
 80013ae:	9304      	str	r3, [sp, #16]
 80013b0:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <GPS_parse+0x148>)
 80013b2:	9303      	str	r3, [sp, #12]
 80013b4:	4b47      	ldr	r3, [pc, #284]	; (80014d4 <GPS_parse+0x14c>)
 80013b6:	9302      	str	r3, [sp, #8]
 80013b8:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <GPS_parse+0x150>)
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	4b47      	ldr	r3, [pc, #284]	; (80014dc <GPS_parse+0x154>)
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	4b47      	ldr	r3, [pc, #284]	; (80014e0 <GPS_parse+0x158>)
 80013c2:	4a48      	ldr	r2, [pc, #288]	; (80014e4 <GPS_parse+0x15c>)
 80013c4:	4948      	ldr	r1, [pc, #288]	; (80014e8 <GPS_parse+0x160>)
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f006 fb4a 	bl	8007a60 <siscanf>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	dd70      	ble.n	80014b4 <GPS_parse+0x12c>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80013d2:	4b46      	ldr	r3, [pc, #280]	; (80014ec <GPS_parse+0x164>)
 80013d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80013d8:	4b44      	ldr	r3, [pc, #272]	; (80014ec <GPS_parse+0x164>)
 80013da:	7e1b      	ldrb	r3, [r3, #24]
 80013dc:	4618      	mov	r0, r3
 80013de:	eeb0 0a67 	vmov.f32	s0, s15
 80013e2:	f000 f8a7 	bl	8001534 <GPS_nmea_to_dec>
 80013e6:	eef0 7a40 	vmov.f32	s15, s0
 80013ea:	4b40      	ldr	r3, [pc, #256]	; (80014ec <GPS_parse+0x164>)
 80013ec:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80013f0:	4b3e      	ldr	r3, [pc, #248]	; (80014ec <GPS_parse+0x164>)
 80013f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80013f6:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <GPS_parse+0x164>)
 80013f8:	7e5b      	ldrb	r3, [r3, #25]
 80013fa:	4618      	mov	r0, r3
 80013fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001400:	f000 f898 	bl	8001534 <GPS_nmea_to_dec>
 8001404:	eef0 7a40 	vmov.f32	s15, s0
 8001408:	4b38      	ldr	r3, [pc, #224]	; (80014ec <GPS_parse+0x164>)
 800140a:	edc3 7a00 	vstr	s15, [r3]
    		return;
 800140e:	e051      	b.n	80014b4 <GPS_parse+0x12c>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001410:	2206      	movs	r2, #6
 8001412:	4937      	ldr	r1, [pc, #220]	; (80014f0 <GPS_parse+0x168>)
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f006 fb94 	bl	8007b42 <strncmp>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d114      	bne.n	800144a <GPS_parse+0xc2>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001420:	4b34      	ldr	r3, [pc, #208]	; (80014f4 <GPS_parse+0x16c>)
 8001422:	9305      	str	r3, [sp, #20]
 8001424:	4b34      	ldr	r3, [pc, #208]	; (80014f8 <GPS_parse+0x170>)
 8001426:	9304      	str	r3, [sp, #16]
 8001428:	4b34      	ldr	r3, [pc, #208]	; (80014fc <GPS_parse+0x174>)
 800142a:	9303      	str	r3, [sp, #12]
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <GPS_parse+0x14c>)
 800142e:	9302      	str	r3, [sp, #8]
 8001430:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <GPS_parse+0x150>)
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	4b29      	ldr	r3, [pc, #164]	; (80014dc <GPS_parse+0x154>)
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <GPS_parse+0x158>)
 800143a:	4a2a      	ldr	r2, [pc, #168]	; (80014e4 <GPS_parse+0x15c>)
 800143c:	4930      	ldr	r1, [pc, #192]	; (8001500 <GPS_parse+0x178>)
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f006 fb0e 	bl	8007a60 <siscanf>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	e034      	b.n	80014b4 <GPS_parse+0x12c>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 800144a:	2206      	movs	r2, #6
 800144c:	492d      	ldr	r1, [pc, #180]	; (8001504 <GPS_parse+0x17c>)
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f006 fb77 	bl	8007b42 <strncmp>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d110      	bne.n	800147c <GPS_parse+0xf4>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 800145a:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <GPS_parse+0x180>)
 800145c:	9303      	str	r3, [sp, #12]
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <GPS_parse+0x15c>)
 8001460:	9302      	str	r3, [sp, #8]
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <GPS_parse+0x14c>)
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <GPS_parse+0x150>)
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <GPS_parse+0x154>)
 800146c:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <GPS_parse+0x158>)
 800146e:	4927      	ldr	r1, [pc, #156]	; (800150c <GPS_parse+0x184>)
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f006 faf5 	bl	8007a60 <siscanf>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	e01b      	b.n	80014b4 <GPS_parse+0x12c>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 800147c:	2206      	movs	r2, #6
 800147e:	4924      	ldr	r1, [pc, #144]	; (8001510 <GPS_parse+0x188>)
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f006 fb5e 	bl	8007b42 <strncmp>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d113      	bne.n	80014b4 <GPS_parse+0x12c>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 800148c:	4b21      	ldr	r3, [pc, #132]	; (8001514 <GPS_parse+0x18c>)
 800148e:	9305      	str	r3, [sp, #20]
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <GPS_parse+0x190>)
 8001492:	9304      	str	r3, [sp, #16]
 8001494:	4b21      	ldr	r3, [pc, #132]	; (800151c <GPS_parse+0x194>)
 8001496:	9303      	str	r3, [sp, #12]
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <GPS_parse+0x174>)
 800149a:	9302      	str	r3, [sp, #8]
 800149c:	4b20      	ldr	r3, [pc, #128]	; (8001520 <GPS_parse+0x198>)
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	4b20      	ldr	r3, [pc, #128]	; (8001524 <GPS_parse+0x19c>)
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <GPS_parse+0x1a0>)
 80014a6:	4a21      	ldr	r2, [pc, #132]	; (800152c <GPS_parse+0x1a4>)
 80014a8:	4921      	ldr	r1, [pc, #132]	; (8001530 <GPS_parse+0x1a8>)
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f006 fad8 	bl	8007a60 <siscanf>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
            return;
    }
}
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	0800a8d0 	.word	0x0800a8d0
 80014c0:	20000504 	.word	0x20000504
 80014c4:	20000500 	.word	0x20000500
 80014c8:	200004fc 	.word	0x200004fc
 80014cc:	200004f8 	.word	0x200004f8
 80014d0:	200004f4 	.word	0x200004f4
 80014d4:	200004f1 	.word	0x200004f1
 80014d8:	200004e4 	.word	0x200004e4
 80014dc:	200004f0 	.word	0x200004f0
 80014e0:	200004e8 	.word	0x200004e8
 80014e4:	200004ec 	.word	0x200004ec
 80014e8:	0800a8d8 	.word	0x0800a8d8
 80014ec:	200004d8 	.word	0x200004d8
 80014f0:	0800a900 	.word	0x0800a900
 80014f4:	20000510 	.word	0x20000510
 80014f8:	2000050c 	.word	0x2000050c
 80014fc:	20000508 	.word	0x20000508
 8001500:	0800a908 	.word	0x0800a908
 8001504:	0800a928 	.word	0x0800a928
 8001508:	20000514 	.word	0x20000514
 800150c:	0800a930 	.word	0x0800a930
 8001510:	0800a94c 	.word	0x0800a94c
 8001514:	2000052c 	.word	0x2000052c
 8001518:	20000528 	.word	0x20000528
 800151c:	20000525 	.word	0x20000525
 8001520:	20000524 	.word	0x20000524
 8001524:	20000520 	.word	0x20000520
 8001528:	2000051c 	.word	0x2000051c
 800152c:	20000518 	.word	0x20000518
 8001530:	0800a954 	.word	0x0800a954

08001534 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	ed87 0a01 	vstr	s0, [r7, #4]
 800153e:	4603      	mov	r3, r0
 8001540:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001542:	ed97 7a01 	vldr	s14, [r7, #4]
 8001546:	eddf 6a20 	vldr	s13, [pc, #128]	; 80015c8 <GPS_nmea_to_dec+0x94>
 800154a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800154e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001552:	ee17 3a90 	vmov	r3, s15
 8001556:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	2264      	movs	r2, #100	; 0x64
 800155c:	fb02 f303 	mul.w	r3, r2, r3
 8001560:	ee07 3a90 	vmov	s15, r3
 8001564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001568:	ed97 7a01 	vldr	s14, [r7, #4]
 800156c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001570:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001574:	ed97 7a03 	vldr	s14, [r7, #12]
 8001578:	eddf 6a14 	vldr	s13, [pc, #80]	; 80015cc <GPS_nmea_to_dec+0x98>
 800157c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001580:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001596:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	2b53      	cmp	r3, #83	; 0x53
 800159e:	d002      	beq.n	80015a6 <GPS_nmea_to_dec+0x72>
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	2b57      	cmp	r3, #87	; 0x57
 80015a4:	d105      	bne.n	80015b2 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80015a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80015aa:	eef1 7a67 	vneg.f32	s15, s15
 80015ae:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	ee07 3a90 	vmov	s15, r3
}
 80015b8:	eeb0 0a67 	vmov.f32	s0, s15
 80015bc:	371c      	adds	r7, #28
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	42c80000 	.word	0x42c80000
 80015cc:	42700000 	.word	0x42700000

080015d0 <Nextion_SendString>:


//==========NEXTION==========//

void Nextion_SendString(char *ID,char *string)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b094      	sub	sp, #80	; 0x50
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
	uint8_t Cmd_End[3] = {0xFF, 0xFF, 0xFF};
 80015da:	4a14      	ldr	r2, [pc, #80]	; (800162c <Nextion_SendString+0x5c>)
 80015dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	4611      	mov	r1, r2
 80015e4:	8019      	strh	r1, [r3, #0]
 80015e6:	3302      	adds	r3, #2
 80015e8:	0c12      	lsrs	r2, r2, #16
 80015ea:	701a      	strb	r2, [r3, #0]

	char buf[64];

	sprintf(buf,"%s.txt=\"%s\"", ID, string);
 80015ec:	f107 000c 	add.w	r0, r7, #12
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	490e      	ldr	r1, [pc, #56]	; (8001630 <Nextion_SendString+0x60>)
 80015f6:	f006 fa13 	bl	8007a20 <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 100);
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe fde6 	bl	80001d0 <strlen>
 8001604:	4603      	mov	r3, r0
 8001606:	b29a      	uxth	r2, r3
 8001608:	f107 010c 	add.w	r1, r7, #12
 800160c:	2364      	movs	r3, #100	; 0x64
 800160e:	4809      	ldr	r0, [pc, #36]	; (8001634 <Nextion_SendString+0x64>)
 8001610:	f004 fd3f 	bl	8006092 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 10);
 8001614:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001618:	230a      	movs	r3, #10
 800161a:	2203      	movs	r2, #3
 800161c:	4805      	ldr	r0, [pc, #20]	; (8001634 <Nextion_SendString+0x64>)
 800161e:	f004 fd38 	bl	8006092 <HAL_UART_Transmit>
}
 8001622:	bf00      	nop
 8001624:	3750      	adds	r7, #80	; 0x50
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	0800a980 	.word	0x0800a980
 8001630:	0800a974 	.word	0x0800a974
 8001634:	2000034c 	.word	0x2000034c

08001638 <Nextion_Sendfloat>:
	sprintf(buf,"%d",var);
	Nextion_SendString(ID,buf);
}

void Nextion_Sendfloat(char *ID,float var)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b092      	sub	sp, #72	; 0x48
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	ed87 0a00 	vstr	s0, [r7]
	char buf[64];
	sprintf(buf,"%.2f",var);
 8001644:	6838      	ldr	r0, [r7, #0]
 8001646:	f7fe ff7f 	bl	8000548 <__aeabi_f2d>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	f107 0008 	add.w	r0, r7, #8
 8001652:	4906      	ldr	r1, [pc, #24]	; (800166c <Nextion_Sendfloat+0x34>)
 8001654:	f006 f9e4 	bl	8007a20 <siprintf>
	Nextion_SendString(ID,buf);
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	4619      	mov	r1, r3
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ffb6 	bl	80015d0 <Nextion_SendString>
}
 8001664:	bf00      	nop
 8001666:	3748      	adds	r7, #72	; 0x48
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	0800a988 	.word	0x0800a988

08001670 <updateDisplay>:

void updateDisplay(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	Nextion_Sendfloat("ax", average.ax);
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <updateDisplay+0x7c>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	eeb0 0a67 	vmov.f32	s0, s15
 800167e:	481c      	ldr	r0, [pc, #112]	; (80016f0 <updateDisplay+0x80>)
 8001680:	f7ff ffda 	bl	8001638 <Nextion_Sendfloat>
	Nextion_Sendfloat("ay", average.ay);
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <updateDisplay+0x7c>)
 8001686:	edd3 7a01 	vldr	s15, [r3, #4]
 800168a:	eeb0 0a67 	vmov.f32	s0, s15
 800168e:	4819      	ldr	r0, [pc, #100]	; (80016f4 <updateDisplay+0x84>)
 8001690:	f7ff ffd2 	bl	8001638 <Nextion_Sendfloat>
	Nextion_Sendfloat("az", average.az);
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <updateDisplay+0x7c>)
 8001696:	edd3 7a02 	vldr	s15, [r3, #8]
 800169a:	eeb0 0a67 	vmov.f32	s0, s15
 800169e:	4816      	ldr	r0, [pc, #88]	; (80016f8 <updateDisplay+0x88>)
 80016a0:	f7ff ffca 	bl	8001638 <Nextion_Sendfloat>

	Nextion_Sendfloat("gx", MPU6050.gx);
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <updateDisplay+0x8c>)
 80016a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80016aa:	eeb0 0a67 	vmov.f32	s0, s15
 80016ae:	4814      	ldr	r0, [pc, #80]	; (8001700 <updateDisplay+0x90>)
 80016b0:	f7ff ffc2 	bl	8001638 <Nextion_Sendfloat>
	Nextion_Sendfloat("gy", MPU6050.gy);
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <updateDisplay+0x8c>)
 80016b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80016ba:	eeb0 0a67 	vmov.f32	s0, s15
 80016be:	4811      	ldr	r0, [pc, #68]	; (8001704 <updateDisplay+0x94>)
 80016c0:	f7ff ffba 	bl	8001638 <Nextion_Sendfloat>
	Nextion_Sendfloat("gz", MPU6050.gz);
 80016c4:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <updateDisplay+0x8c>)
 80016c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80016ca:	eeb0 0a67 	vmov.f32	s0, s15
 80016ce:	480e      	ldr	r0, [pc, #56]	; (8001708 <updateDisplay+0x98>)
 80016d0:	f7ff ffb2 	bl	8001638 <Nextion_Sendfloat>

	//Nextion_Sendfloat("gx", average.gx);
	//Nextion_Sendfloat("gy", average.gy);
	//Nextion_Sendfloat("gz", average.gz);

	Nextion_Sendfloat("temp", ADC_Select_CHTemp());
 80016d4:	f000 f81c 	bl	8001710 <ADC_Select_CHTemp>
 80016d8:	eef0 7a40 	vmov.f32	s15, s0
 80016dc:	eeb0 0a67 	vmov.f32	s0, s15
 80016e0:	480a      	ldr	r0, [pc, #40]	; (800170c <updateDisplay+0x9c>)
 80016e2:	f7ff ffa9 	bl	8001638 <Nextion_Sendfloat>
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000438 	.word	0x20000438
 80016f0:	0800a990 	.word	0x0800a990
 80016f4:	0800a994 	.word	0x0800a994
 80016f8:	0800a998 	.word	0x0800a998
 80016fc:	20000420 	.word	0x20000420
 8001700:	0800a99c 	.word	0x0800a99c
 8001704:	0800a9a0 	.word	0x0800a9a0
 8001708:	0800a9a4 	.word	0x0800a9a4
 800170c:	0800a9a8 	.word	0x0800a9a8

08001710 <ADC_Select_CHTemp>:

//==========TEMP==========//

float ADC_Select_CHTemp(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0

	float Temp = 0;
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

	uint16_t ADC_READING = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	827b      	strh	r3, [r7, #18]

	ADC_ChannelConfTypeDef sConfig = {0};
 8001720:	463b      	mov	r3, r7
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800172c:	2310      	movs	r3, #16
 800172e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001730:	2301      	movs	r3, #1
 8001732:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001734:	463b      	mov	r3, r7
 8001736:	4619      	mov	r1, r3
 8001738:	4833      	ldr	r0, [pc, #204]	; (8001808 <ADC_Select_CHTemp+0xf8>)
 800173a:	f001 f96d 	bl	8002a18 <HAL_ADC_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <ADC_Select_CHTemp+0x38>
	{
	  Error_Handler();
 8001744:	f000 fbea 	bl	8001f1c <Error_Handler>
	}

	HAL_ADC_Start(&hadc1);
 8001748:	482f      	ldr	r0, [pc, #188]	; (8001808 <ADC_Select_CHTemp+0xf8>)
 800174a:	f000 ffc7 	bl	80026dc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800174e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001752:	482d      	ldr	r0, [pc, #180]	; (8001808 <ADC_Select_CHTemp+0xf8>)
 8001754:	f001 f8c7 	bl	80028e6 <HAL_ADC_PollForConversion>
	ADC_READING = HAL_ADC_GetValue(&hadc1);
 8001758:	482b      	ldr	r0, [pc, #172]	; (8001808 <ADC_Select_CHTemp+0xf8>)
 800175a:	f001 f94f 	bl	80029fc <HAL_ADC_GetValue>
 800175e:	4603      	mov	r3, r0
 8001760:	827b      	strh	r3, [r7, #18]
	HAL_ADC_Stop(&hadc1);
 8001762:	4829      	ldr	r0, [pc, #164]	; (8001808 <ADC_Select_CHTemp+0xf8>)
 8001764:	f001 f88c 	bl	8002880 <HAL_ADC_Stop>

	Temp = ((3.3*ADC_READING/4095 - V25)/Avg_Slope)+25;
 8001768:	8a7b      	ldrh	r3, [r7, #18]
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe feda 	bl	8000524 <__aeabi_i2d>
 8001770:	a31d      	add	r3, pc, #116	; (adr r3, 80017e8 <ADC_Select_CHTemp+0xd8>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7fe ff3f 	bl	80005f8 <__aeabi_dmul>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	a31b      	add	r3, pc, #108	; (adr r3, 80017f0 <ADC_Select_CHTemp+0xe0>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7ff f860 	bl	800084c <__aeabi_ddiv>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	a318      	add	r3, pc, #96	; (adr r3, 80017f8 <ADC_Select_CHTemp+0xe8>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe fd75 	bl	8000288 <__aeabi_dsub>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	a316      	add	r3, pc, #88	; (adr r3, 8001800 <ADC_Select_CHTemp+0xf0>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7ff f84e 	bl	800084c <__aeabi_ddiv>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	4b13      	ldr	r3, [pc, #76]	; (800180c <ADC_Select_CHTemp+0xfc>)
 80017be:	f7fe fd65 	bl	800028c <__adddf3>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f9ed 	bl	8000ba8 <__aeabi_d2f>
 80017ce:	4603      	mov	r3, r0
 80017d0:	617b      	str	r3, [r7, #20]

	return Temp;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	ee07 3a90 	vmov	s15, r3
}
 80017d8:	eeb0 0a67 	vmov.f32	s0, s15
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	f3af 8000 	nop.w
 80017e8:	66666666 	.word	0x66666666
 80017ec:	400a6666 	.word	0x400a6666
 80017f0:	00000000 	.word	0x00000000
 80017f4:	40affe00 	.word	0x40affe00
 80017f8:	851eb852 	.word	0x851eb852
 80017fc:	3fe851eb 	.word	0x3fe851eb
 8001800:	47ae147b 	.word	0x47ae147b
 8001804:	3f647ae1 	.word	0x3f647ae1
 8001808:	200001f8 	.word	0x200001f8
 800180c:	40390000 	.word	0x40390000

08001810 <mvAx>:

//==========MATH==========//

float mvAx(float content, const int n)
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	ed87 0a01 	vstr	s0, [r7, #4]
 800181a:	6038      	str	r0, [r7, #0]
	float acc = 0;
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	617b      	str	r3, [r7, #20]

	static float  numbersAx[numberOfIterations];

	for(int i= n-1; i>0; i--) numbersAx[i] = numbersAx[i-1]; //pay attention to n-1
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	3b01      	subs	r3, #1
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	e00d      	b.n	8001846 <mvAx+0x36>
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	3b01      	subs	r3, #1
 800182e:	4a1d      	ldr	r2, [pc, #116]	; (80018a4 <mvAx+0x94>)
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	491b      	ldr	r1, [pc, #108]	; (80018a4 <mvAx+0x94>)
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	3b01      	subs	r3, #1
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	2b00      	cmp	r3, #0
 800184a:	dcee      	bgt.n	800182a <mvAx+0x1a>

	numbersAx[0] = content;
 800184c:	4a15      	ldr	r2, [pc, #84]	; (80018a4 <mvAx+0x94>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]

	for(int i=0; i<n; i++) acc += numbersAx[i];
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	e00e      	b.n	8001876 <mvAx+0x66>
 8001858:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <mvAx+0x94>)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	edd3 7a00 	vldr	s15, [r3]
 8001864:	ed97 7a05 	vldr	s14, [r7, #20]
 8001868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	3301      	adds	r3, #1
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	dbec      	blt.n	8001858 <mvAx+0x48>

	return acc/n;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001888:	ed97 7a05 	vldr	s14, [r7, #20]
 800188c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001890:	eef0 7a66 	vmov.f32	s15, s13
}
 8001894:	eeb0 0a67 	vmov.f32	s0, s15
 8001898:	371c      	adds	r7, #28
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000530 	.word	0x20000530

080018a8 <mvAy>:

float mvAy(float content, const int n)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80018b2:	6038      	str	r0, [r7, #0]
	float acc = 0;
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]

	static float  numbersAy[numberOfIterations];

	for(int i= n-1; i>0; i--) numbersAy[i] = numbersAy[i-1]; //pay attention to n-1
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	3b01      	subs	r3, #1
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	e00d      	b.n	80018de <mvAy+0x36>
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	4a1d      	ldr	r2, [pc, #116]	; (800193c <mvAy+0x94>)
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	491b      	ldr	r1, [pc, #108]	; (800193c <mvAy+0x94>)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	3b01      	subs	r3, #1
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	dcee      	bgt.n	80018c2 <mvAy+0x1a>

	numbersAy[0] = content;
 80018e4:	4a15      	ldr	r2, [pc, #84]	; (800193c <mvAy+0x94>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6013      	str	r3, [r2, #0]

	for(int i=0; i<n; i++) acc += numbersAy[i];
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	e00e      	b.n	800190e <mvAy+0x66>
 80018f0:	4a12      	ldr	r2, [pc, #72]	; (800193c <mvAy+0x94>)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001904:	edc7 7a05 	vstr	s15, [r7, #20]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3301      	adds	r3, #1
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	dbec      	blt.n	80018f0 <mvAy+0x48>

	return acc/n;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001920:	ed97 7a05 	vldr	s14, [r7, #20]
 8001924:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001928:	eef0 7a66 	vmov.f32	s15, s13
}
 800192c:	eeb0 0a67 	vmov.f32	s0, s15
 8001930:	371c      	adds	r7, #28
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000558 	.word	0x20000558

08001940 <invertLed>:
}

//==========MCU==========//

void invertLed(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001944:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <invertLed+0x14>)
 800194a:	f002 fc3e 	bl	80041ca <HAL_GPIO_TogglePin>
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40021400 	.word	0x40021400

08001958 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	if(htim==&htim14)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d107      	bne.n	8001978 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		MPU6050_Read_Accel();
 8001968:	f7ff fb46 	bl	8000ff8 <MPU6050_Read_Accel>
		MPU6050_Read_Gyro();
 800196c:	f7ff fc08 	bl	8001180 <MPU6050_Read_Gyro>

		updateDisplay();
 8001970:	f7ff fe7e 	bl	8001670 <updateDisplay>

		invertLed();
 8001974:	f7ff ffe4 	bl	8001940 <invertLed>
	}

	if(htim==&htim13)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a05      	ldr	r2, [pc, #20]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		sendCan();
 8001980:	f000 f830 	bl	80019e4 <sendCan>
	}
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000304 	.word	0x20000304
 8001990:	200002bc 	.word	0x200002bc

08001994 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2) GPS_UART_CallBack();
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <HAL_UART_RxCpltCallback+0x1c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d101      	bne.n	80019a8 <HAL_UART_RxCpltCallback+0x14>
 80019a4:	f7ff fc56 	bl	8001254 <GPS_UART_CallBack>
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000390 	.word	0x20000390

080019b4 <HAL_CAN_RxFifo0MsgPendingCallback>:

//==========CAN==========//

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData);
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80019be:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80019c0:	2100      	movs	r1, #0
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f001 fd41 	bl	800344a <HAL_CAN_GetRxMessage>
	dataCheck = 1;
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	701a      	strb	r2, [r3, #0]
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000410 	.word	0x20000410
 80019dc:	200003ec 	.word	0x200003ec
 80019e0:	2000041c 	.word	0x2000041c

080019e4 <sendCan>:

void sendCan()
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	txData[0] = 4;
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <sendCan+0x24>)
 80019ea:	2204      	movs	r2, #4
 80019ec:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80019ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019f2:	4806      	ldr	r0, [pc, #24]	; (8001a0c <sendCan+0x28>)
 80019f4:	f002 fbe9 	bl	80041ca <HAL_GPIO_TogglePin>
	HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, &txMailBox);
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <sendCan+0x2c>)
 80019fa:	4a03      	ldr	r2, [pc, #12]	; (8001a08 <sendCan+0x24>)
 80019fc:	4905      	ldr	r1, [pc, #20]	; (8001a14 <sendCan+0x30>)
 80019fe:	4806      	ldr	r0, [pc, #24]	; (8001a18 <sendCan+0x34>)
 8001a00:	f001 fc48 	bl	8003294 <HAL_CAN_AddTxMessage>

	/*
	 * CANTX - PA12
	 * CANRX - PA11
	 */
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000408 	.word	0x20000408
 8001a0c:	40021400 	.word	0x40021400
 8001a10:	20000418 	.word	0x20000418
 8001a14:	200003d4 	.word	0x200003d4
 8001a18:	20000240 	.word	0x20000240

08001a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a20:	f000 fd82 	bl	8002528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a24:	f000 f840 	bl	8001aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a28:	f000 fa18 	bl	8001e5c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a2c:	f000 f94c 	bl	8001cc8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001a30:	f000 f8a4 	bl	8001b7c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001a34:	f000 f9be 	bl	8001db4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001a38:	f000 f9e6 	bl	8001e08 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8001a3c:	f000 f996 	bl	8001d6c <MX_TIM14_Init>
  MX_CAN1_Init();
 8001a40:	f000 f8ee 	bl	8001c20 <MX_CAN1_Init>
  MX_TIM13_Init();
 8001a44:	f000 f96e 	bl	8001d24 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 8001a48:	f7ff fa80 	bl	8000f4c <MPU6050_Init>

  GPS_Init();
 8001a4c:	f7ff fbf4 	bl	8001238 <GPS_Init>

  HAL_TIM_Base_Start_IT(&htim14);
 8001a50:	4811      	ldr	r0, [pc, #68]	; (8001a98 <main+0x7c>)
 8001a52:	f004 f87d 	bl	8005b50 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 8001a56:	4811      	ldr	r0, [pc, #68]	; (8001a9c <main+0x80>)
 8001a58:	f004 f87a 	bl	8005b50 <HAL_TIM_Base_Start_IT>

  HAL_CAN_Start(&hcan1);
 8001a5c:	4810      	ldr	r0, [pc, #64]	; (8001aa0 <main+0x84>)
 8001a5e:	f001 fbd5 	bl	800320c <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001a62:	2102      	movs	r1, #2
 8001a64:	480e      	ldr	r0, [pc, #56]	; (8001aa0 <main+0x84>)
 8001a66:	f001 fe02 	bl	800366e <HAL_CAN_ActivateNotification>

  txHeader.DLC 		= 1;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <main+0x88>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	611a      	str	r2, [r3, #16]
  txHeader.ExtId 	= 0;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <main+0x88>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	605a      	str	r2, [r3, #4]
  txHeader.IDE 		= CAN_ID_STD;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <main+0x88>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  txHeader.RTR 		= CAN_RTR_DATA;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <main+0x88>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  txHeader.StdId 	= 0x407; //sender ID
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <main+0x88>)
 8001a84:	f240 4207 	movw	r2, #1031	; 0x407
 8001a88:	601a      	str	r2, [r3, #0]
  txHeader.TransmitGlobalTime = DISABLE;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <main+0x88>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	751a      	strb	r2, [r3, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(1);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f000 fdbb 	bl	800260c <HAL_Delay>
 8001a96:	e7fb      	b.n	8001a90 <main+0x74>
 8001a98:	20000304 	.word	0x20000304
 8001a9c:	200002bc 	.word	0x200002bc
 8001aa0:	20000240 	.word	0x20000240
 8001aa4:	200003d4 	.word	0x200003d4

08001aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b094      	sub	sp, #80	; 0x50
 8001aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aae:	f107 0320 	add.w	r3, r7, #32
 8001ab2:	2230      	movs	r2, #48	; 0x30
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f005 fb40 	bl	800713c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <SystemClock_Config+0xcc>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	4a27      	ldr	r2, [pc, #156]	; (8001b74 <SystemClock_Config+0xcc>)
 8001ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ada:	6413      	str	r3, [r2, #64]	; 0x40
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <SystemClock_Config+0xcc>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae8:	2300      	movs	r3, #0
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <SystemClock_Config+0xd0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a21      	ldr	r2, [pc, #132]	; (8001b78 <SystemClock_Config+0xd0>)
 8001af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <SystemClock_Config+0xd0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b04:	2301      	movs	r3, #1
 8001b06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b18:	2304      	movs	r3, #4
 8001b1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b1c:	23a8      	movs	r3, #168	; 0xa8
 8001b1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b20:	2302      	movs	r3, #2
 8001b22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001b24:	2306      	movs	r3, #6
 8001b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b28:	f107 0320 	add.w	r3, r7, #32
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f003 fb27 	bl	8005180 <HAL_RCC_OscConfig>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b38:	f000 f9f0 	bl	8001f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b3c:	230f      	movs	r3, #15
 8001b3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b40:	2302      	movs	r3, #2
 8001b42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	2105      	movs	r1, #5
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 fd88 	bl	8005670 <HAL_RCC_ClockConfig>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b66:	f000 f9d9 	bl	8001f1c <Error_Handler>
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	3750      	adds	r7, #80	; 0x50
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40007000 	.word	0x40007000

08001b7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b82:	463b      	mov	r3, r7
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b8e:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <MX_ADC1_Init+0x98>)
 8001b90:	4a21      	ldr	r2, [pc, #132]	; (8001c18 <MX_ADC1_Init+0x9c>)
 8001b92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b94:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <MX_ADC1_Init+0x98>)
 8001b96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b9c:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <MX_ADC1_Init+0x98>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <MX_ADC1_Init+0x98>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <MX_ADC1_Init+0x98>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bae:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <MX_ADC1_Init+0x98>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <MX_ADC1_Init+0x98>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <MX_ADC1_Init+0x98>)
 8001bbe:	4a17      	ldr	r2, [pc, #92]	; (8001c1c <MX_ADC1_Init+0xa0>)
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <MX_ADC1_Init+0x98>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <MX_ADC1_Init+0x98>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_ADC1_Init+0x98>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <MX_ADC1_Init+0x98>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bdc:	480d      	ldr	r0, [pc, #52]	; (8001c14 <MX_ADC1_Init+0x98>)
 8001bde:	f000 fd39 	bl	8002654 <HAL_ADC_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001be8:	f000 f998 	bl	8001f1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001bec:	2310      	movs	r3, #16
 8001bee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_ADC1_Init+0x98>)
 8001bfe:	f000 ff0b 	bl	8002a18 <HAL_ADC_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c08:	f000 f988 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	200001f8 	.word	0x200001f8
 8001c18:	40012000 	.word	0x40012000
 8001c1c:	0f000001 	.word	0x0f000001

08001c20 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c26:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <MX_CAN1_Init+0xa0>)
 8001c28:	4a26      	ldr	r2, [pc, #152]	; (8001cc4 <MX_CAN1_Init+0xa4>)
 8001c2a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001c2c:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <MX_CAN1_Init+0xa0>)
 8001c2e:	2206      	movs	r2, #6
 8001c30:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <MX_CAN1_Init+0xa0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c38:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <MX_CAN1_Init+0xa0>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <MX_CAN1_Init+0xa0>)
 8001c40:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001c44:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <MX_CAN1_Init+0xa0>)
 8001c48:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8001c4c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <MX_CAN1_Init+0xa0>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <MX_CAN1_Init+0xa0>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <MX_CAN1_Init+0xa0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <MX_CAN1_Init+0xa0>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <MX_CAN1_Init+0xa0>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c6c:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <MX_CAN1_Init+0xa0>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c72:	4813      	ldr	r0, [pc, #76]	; (8001cc0 <MX_CAN1_Init+0xa0>)
 8001c74:	f001 f8ee 	bl	8002e54 <HAL_CAN_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001c7e:	f000 f94d 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation		=	CAN_FILTER_ENABLE;
 8001c82:	2301      	movs	r3, #1
 8001c84:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank			=	18;
 8001c86:	2312      	movs	r3, #18
 8001c88:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment	= 	CAN_FILTER_FIFO0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh			=	0x407<<5;//0x407<<5;//address that will be let to pass
 8001c8e:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8001c92:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow			=	0x0000;
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh		=	0x407<<5;//0x407<<5;
 8001c98:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8001c9c:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow		=	0x0000;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode			=	CAN_FILTERMODE_IDMASK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale			=	CAN_FILTERSCALE_32BIT;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank	=	20;//20;
 8001caa:	2314      	movs	r3, #20
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001cae:	463b      	mov	r3, r7
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4803      	ldr	r0, [pc, #12]	; (8001cc0 <MX_CAN1_Init+0xa0>)
 8001cb4:	f001 f9ca 	bl	800304c <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	3728      	adds	r7, #40	; 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000240 	.word	0x20000240
 8001cc4:	40006400 	.word	0x40006400

08001cc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cce:	4a13      	ldr	r2, [pc, #76]	; (8001d1c <MX_I2C1_Init+0x54>)
 8001cd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cd4:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <MX_I2C1_Init+0x58>)
 8001cd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001ce6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d04:	4804      	ldr	r0, [pc, #16]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001d06:	f002 fa7b 	bl	8004200 <HAL_I2C_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d10:	f000 f904 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000268 	.word	0x20000268
 8001d1c:	40005400 	.word	0x40005400
 8001d20:	000186a0 	.word	0x000186a0

08001d24 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001d28:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <MX_TIM13_Init+0x40>)
 8001d2a:	4a0f      	ldr	r2, [pc, #60]	; (8001d68 <MX_TIM13_Init+0x44>)
 8001d2c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 16800-1;
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <MX_TIM13_Init+0x40>)
 8001d30:	f244 129f 	movw	r2, #16799	; 0x419f
 8001d34:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <MX_TIM13_Init+0x40>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 5000-1;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_TIM13_Init+0x40>)
 8001d3e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001d42:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d44:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <MX_TIM13_Init+0x40>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MX_TIM13_Init+0x40>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001d50:	4804      	ldr	r0, [pc, #16]	; (8001d64 <MX_TIM13_Init+0x40>)
 8001d52:	f003 fead 	bl	8005ab0 <HAL_TIM_Base_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001d5c:	f000 f8de 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	200002bc 	.word	0x200002bc
 8001d68:	40001c00 	.word	0x40001c00

08001d6c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_TIM14_Init+0x40>)
 8001d72:	4a0f      	ldr	r2, [pc, #60]	; (8001db0 <MX_TIM14_Init+0x44>)
 8001d74:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16800-1;
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <MX_TIM14_Init+0x40>)
 8001d78:	f244 129f 	movw	r2, #16799	; 0x419f
 8001d7c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <MX_TIM14_Init+0x40>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_TIM14_Init+0x40>)
 8001d86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d8a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8c:	4b07      	ldr	r3, [pc, #28]	; (8001dac <MX_TIM14_Init+0x40>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <MX_TIM14_Init+0x40>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001d98:	4804      	ldr	r0, [pc, #16]	; (8001dac <MX_TIM14_Init+0x40>)
 8001d9a:	f003 fe89 	bl	8005ab0 <HAL_TIM_Base_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001da4:	f000 f8ba 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000304 	.word	0x20000304
 8001db0:	40002000 	.word	0x40002000

08001db4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <MX_USART1_UART_Init+0x4c>)
 8001dba:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <MX_USART1_UART_Init+0x50>)
 8001dbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <MX_USART1_UART_Init+0x4c>)
 8001dc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <MX_USART1_UART_Init+0x4c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <MX_USART1_UART_Init+0x4c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <MX_USART1_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <MX_USART1_UART_Init+0x4c>)
 8001dda:	220c      	movs	r2, #12
 8001ddc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <MX_USART1_UART_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <MX_USART1_UART_Init+0x4c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <MX_USART1_UART_Init+0x4c>)
 8001dec:	f004 f904 	bl	8005ff8 <HAL_UART_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001df6:	f000 f891 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	2000034c 	.word	0x2000034c
 8001e04:	40011000 	.word	0x40011000

08001e08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e0e:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <MX_USART2_UART_Init+0x50>)
 8001e10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e2e:	220c      	movs	r2, #12
 8001e30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e3e:	4805      	ldr	r0, [pc, #20]	; (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e40:	f004 f8da 	bl	8005ff8 <HAL_UART_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e4a:	f000 f867 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000390 	.word	0x20000390
 8001e58:	40004400 	.word	0x40004400

08001e5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
 8001e70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <MX_GPIO_Init+0xb8>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4a26      	ldr	r2, [pc, #152]	; (8001f14 <MX_GPIO_Init+0xb8>)
 8001e7c:	f043 0320 	orr.w	r3, r3, #32
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <MX_GPIO_Init+0xb8>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f003 0320 	and.w	r3, r3, #32
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <MX_GPIO_Init+0xb8>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a1f      	ldr	r2, [pc, #124]	; (8001f14 <MX_GPIO_Init+0xb8>)
 8001e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <MX_GPIO_Init+0xb8>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <MX_GPIO_Init+0xb8>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a18      	ldr	r2, [pc, #96]	; (8001f14 <MX_GPIO_Init+0xb8>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <MX_GPIO_Init+0xb8>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <MX_GPIO_Init+0xb8>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a11      	ldr	r2, [pc, #68]	; (8001f14 <MX_GPIO_Init+0xb8>)
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <MX_GPIO_Init+0xb8>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001ee8:	480b      	ldr	r0, [pc, #44]	; (8001f18 <MX_GPIO_Init+0xbc>)
 8001eea:	f002 f955 	bl	8004198 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001eee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	4619      	mov	r1, r3
 8001f06:	4804      	ldr	r0, [pc, #16]	; (8001f18 <MX_GPIO_Init+0xbc>)
 8001f08:	f001 ffaa 	bl	8003e60 <HAL_GPIO_Init>

}
 8001f0c:	bf00      	nop
 8001f0e:	3728      	adds	r7, #40	; 0x28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40021400 	.word	0x40021400

08001f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f20:	b672      	cpsid	i
}
 8001f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <Error_Handler+0x8>
	...

08001f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <HAL_MspInit+0x4c>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <HAL_MspInit+0x4c>)
 8001f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <HAL_MspInit+0x4c>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_MspInit+0x4c>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <HAL_MspInit+0x4c>)
 8001f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f58:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_MspInit+0x4c>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800

08001f78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <HAL_ADC_MspInit+0x3c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d10d      	bne.n	8001fa6 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_ADC_MspInit+0x40>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <HAL_ADC_MspInit+0x40>)
 8001f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <HAL_ADC_MspInit+0x40>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40012000 	.word	0x40012000
 8001fb8:	40023800 	.word	0x40023800

08001fbc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a1d      	ldr	r2, [pc, #116]	; (8002050 <HAL_CAN_MspInit+0x94>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d134      	bne.n	8002048 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <HAL_CAN_MspInit+0x98>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a1b      	ldr	r2, [pc, #108]	; (8002054 <HAL_CAN_MspInit+0x98>)
 8001fe8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
 8001fee:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_CAN_MspInit+0x98>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <HAL_CAN_MspInit+0x98>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a14      	ldr	r2, [pc, #80]	; (8002054 <HAL_CAN_MspInit+0x98>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_CAN_MspInit+0x98>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002016:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800201a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002028:	2309      	movs	r3, #9
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4619      	mov	r1, r3
 8002032:	4809      	ldr	r0, [pc, #36]	; (8002058 <HAL_CAN_MspInit+0x9c>)
 8002034:	f001 ff14 	bl	8003e60 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002038:	2200      	movs	r2, #0
 800203a:	2100      	movs	r1, #0
 800203c:	2014      	movs	r0, #20
 800203e:	f001 fe46 	bl	8003cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002042:	2014      	movs	r0, #20
 8002044:	f001 fe5f 	bl	8003d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002048:	bf00      	nop
 800204a:	3728      	adds	r7, #40	; 0x28
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40006400 	.word	0x40006400
 8002054:	40023800 	.word	0x40023800
 8002058:	40020000 	.word	0x40020000

0800205c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a19      	ldr	r2, [pc, #100]	; (80020e0 <HAL_I2C_MspInit+0x84>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d12b      	bne.n	80020d6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <HAL_I2C_MspInit+0x88>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <HAL_I2C_MspInit+0x88>)
 8002088:	f043 0302 	orr.w	r3, r3, #2
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_I2C_MspInit+0x88>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800209a:	23c0      	movs	r3, #192	; 0xc0
 800209c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800209e:	2312      	movs	r3, #18
 80020a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a6:	2303      	movs	r3, #3
 80020a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020aa:	2304      	movs	r3, #4
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	4619      	mov	r1, r3
 80020b4:	480c      	ldr	r0, [pc, #48]	; (80020e8 <HAL_I2C_MspInit+0x8c>)
 80020b6:	f001 fed3 	bl	8003e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_I2C_MspInit+0x88>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4a08      	ldr	r2, [pc, #32]	; (80020e4 <HAL_I2C_MspInit+0x88>)
 80020c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020c8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_I2C_MspInit+0x88>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	; 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40005400 	.word	0x40005400
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020400 	.word	0x40020400

080020ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a1c      	ldr	r2, [pc, #112]	; (800216c <HAL_TIM_Base_MspInit+0x80>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d116      	bne.n	800212c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <HAL_TIM_Base_MspInit+0x84>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a1a      	ldr	r2, [pc, #104]	; (8002170 <HAL_TIM_Base_MspInit+0x84>)
 8002108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_TIM_Base_MspInit+0x84>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	202c      	movs	r0, #44	; 0x2c
 8002120:	f001 fdd5 	bl	8003cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002124:	202c      	movs	r0, #44	; 0x2c
 8002126:	f001 fdee 	bl	8003d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800212a:	e01a      	b.n	8002162 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM14)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a10      	ldr	r2, [pc, #64]	; (8002174 <HAL_TIM_Base_MspInit+0x88>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d115      	bne.n	8002162 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <HAL_TIM_Base_MspInit+0x84>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4a0c      	ldr	r2, [pc, #48]	; (8002170 <HAL_TIM_Base_MspInit+0x84>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	6413      	str	r3, [r2, #64]	; 0x40
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <HAL_TIM_Base_MspInit+0x84>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	2100      	movs	r1, #0
 8002156:	202d      	movs	r0, #45	; 0x2d
 8002158:	f001 fdb9 	bl	8003cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800215c:	202d      	movs	r0, #45	; 0x2d
 800215e:	f001 fdd2 	bl	8003d06 <HAL_NVIC_EnableIRQ>
}
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40001c00 	.word	0x40001c00
 8002170:	40023800 	.word	0x40023800
 8002174:	40002000 	.word	0x40002000

08002178 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08c      	sub	sp, #48	; 0x30
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 031c 	add.w	r3, r7, #28
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a36      	ldr	r2, [pc, #216]	; (8002270 <HAL_UART_MspInit+0xf8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d12d      	bne.n	80021f6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	4b35      	ldr	r3, [pc, #212]	; (8002274 <HAL_UART_MspInit+0xfc>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	4a34      	ldr	r2, [pc, #208]	; (8002274 <HAL_UART_MspInit+0xfc>)
 80021a4:	f043 0310 	orr.w	r3, r3, #16
 80021a8:	6453      	str	r3, [r2, #68]	; 0x44
 80021aa:	4b32      	ldr	r3, [pc, #200]	; (8002274 <HAL_UART_MspInit+0xfc>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	61bb      	str	r3, [r7, #24]
 80021b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <HAL_UART_MspInit+0xfc>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a2d      	ldr	r2, [pc, #180]	; (8002274 <HAL_UART_MspInit+0xfc>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b2b      	ldr	r3, [pc, #172]	; (8002274 <HAL_UART_MspInit+0xfc>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e0:	2303      	movs	r3, #3
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021e4:	2307      	movs	r3, #7
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	4619      	mov	r1, r3
 80021ee:	4822      	ldr	r0, [pc, #136]	; (8002278 <HAL_UART_MspInit+0x100>)
 80021f0:	f001 fe36 	bl	8003e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021f4:	e038      	b.n	8002268 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a20      	ldr	r2, [pc, #128]	; (800227c <HAL_UART_MspInit+0x104>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d133      	bne.n	8002268 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002200:	2300      	movs	r3, #0
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <HAL_UART_MspInit+0xfc>)
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	4a1a      	ldr	r2, [pc, #104]	; (8002274 <HAL_UART_MspInit+0xfc>)
 800220a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800220e:	6413      	str	r3, [r2, #64]	; 0x40
 8002210:	4b18      	ldr	r3, [pc, #96]	; (8002274 <HAL_UART_MspInit+0xfc>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <HAL_UART_MspInit+0xfc>)
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	4a13      	ldr	r2, [pc, #76]	; (8002274 <HAL_UART_MspInit+0xfc>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6313      	str	r3, [r2, #48]	; 0x30
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_UART_MspInit+0xfc>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002238:	230c      	movs	r3, #12
 800223a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002244:	2303      	movs	r3, #3
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002248:	2307      	movs	r3, #7
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224c:	f107 031c 	add.w	r3, r7, #28
 8002250:	4619      	mov	r1, r3
 8002252:	4809      	ldr	r0, [pc, #36]	; (8002278 <HAL_UART_MspInit+0x100>)
 8002254:	f001 fe04 	bl	8003e60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002258:	2200      	movs	r2, #0
 800225a:	2100      	movs	r1, #0
 800225c:	2026      	movs	r0, #38	; 0x26
 800225e:	f001 fd36 	bl	8003cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002262:	2026      	movs	r0, #38	; 0x26
 8002264:	f001 fd4f 	bl	8003d06 <HAL_NVIC_EnableIRQ>
}
 8002268:	bf00      	nop
 800226a:	3730      	adds	r7, #48	; 0x30
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40011000 	.word	0x40011000
 8002274:	40023800 	.word	0x40023800
 8002278:	40020000 	.word	0x40020000
 800227c:	40004400 	.word	0x40004400

08002280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <NMI_Handler+0x4>

08002286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800228a:	e7fe      	b.n	800228a <HardFault_Handler+0x4>

0800228c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <MemManage_Handler+0x4>

08002292 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002296:	e7fe      	b.n	8002296 <BusFault_Handler+0x4>

08002298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800229c:	e7fe      	b.n	800229c <UsageFault_Handler+0x4>

0800229e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022cc:	f000 f97e 	bl	80025cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <CAN1_RX0_IRQHandler+0x10>)
 80022da:	f001 f9ee 	bl	80036ba <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000240 	.word	0x20000240

080022e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <USART2_IRQHandler+0x10>)
 80022ee:	f003 ff93 	bl	8006218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000390 	.word	0x20000390

080022fc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002302:	f003 fc95 	bl	8005c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200002bc 	.word	0x200002bc

08002310 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002316:	f003 fc8b 	bl	8005c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000304 	.word	0x20000304

08002324 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
	return 1;
 8002328:	2301      	movs	r3, #1
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <_kill>:

int _kill(int pid, int sig)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800233e:	f004 fed3 	bl	80070e8 <__errno>
 8002342:	4603      	mov	r3, r0
 8002344:	2216      	movs	r2, #22
 8002346:	601a      	str	r2, [r3, #0]
	return -1;
 8002348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <_exit>:

void _exit (int status)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800235c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ffe7 	bl	8002334 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002366:	e7fe      	b.n	8002366 <_exit+0x12>

08002368 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	e00a      	b.n	8002390 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800237a:	f3af 8000 	nop.w
 800237e:	4601      	mov	r1, r0
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	60ba      	str	r2, [r7, #8]
 8002386:	b2ca      	uxtb	r2, r1
 8002388:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	3301      	adds	r3, #1
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	dbf0      	blt.n	800237a <_read+0x12>
	}

return len;
 8002398:	687b      	ldr	r3, [r7, #4]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	e009      	b.n	80023c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	60ba      	str	r2, [r7, #8]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	3301      	adds	r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	dbf1      	blt.n	80023b4 <_write+0x12>
	}
	return len;
 80023d0:	687b      	ldr	r3, [r7, #4]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <_close>:

int _close(int file)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
	return -1;
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002402:	605a      	str	r2, [r3, #4]
	return 0;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <_isatty>:

int _isatty(int file)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
	return 1;
 800241a:	2301      	movs	r3, #1
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
	return 0;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800244c:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <_sbrk+0x5c>)
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <_sbrk+0x60>)
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002458:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <_sbrk+0x64>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d102      	bne.n	8002466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <_sbrk+0x64>)
 8002462:	4a12      	ldr	r2, [pc, #72]	; (80024ac <_sbrk+0x68>)
 8002464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <_sbrk+0x64>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	429a      	cmp	r2, r3
 8002472:	d207      	bcs.n	8002484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002474:	f004 fe38 	bl	80070e8 <__errno>
 8002478:	4603      	mov	r3, r0
 800247a:	220c      	movs	r2, #12
 800247c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800247e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002482:	e009      	b.n	8002498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <_sbrk+0x64>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <_sbrk+0x64>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <_sbrk+0x64>)
 8002494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002496:	68fb      	ldr	r3, [r7, #12]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20020000 	.word	0x20020000
 80024a4:	00000400 	.word	0x00000400
 80024a8:	20000580 	.word	0x20000580
 80024ac:	20000598 	.word	0x20000598

080024b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <SystemInit+0x20>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	4a05      	ldr	r2, [pc, #20]	; (80024d0 <SystemInit+0x20>)
 80024bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <Reset_Handler>:
 80024d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800250c <LoopFillZerobss+0x12>
 80024d8:	480d      	ldr	r0, [pc, #52]	; (8002510 <LoopFillZerobss+0x16>)
 80024da:	490e      	ldr	r1, [pc, #56]	; (8002514 <LoopFillZerobss+0x1a>)
 80024dc:	4a0e      	ldr	r2, [pc, #56]	; (8002518 <LoopFillZerobss+0x1e>)
 80024de:	2300      	movs	r3, #0
 80024e0:	e002      	b.n	80024e8 <LoopCopyDataInit>

080024e2 <CopyDataInit>:
 80024e2:	58d4      	ldr	r4, [r2, r3]
 80024e4:	50c4      	str	r4, [r0, r3]
 80024e6:	3304      	adds	r3, #4

080024e8 <LoopCopyDataInit>:
 80024e8:	18c4      	adds	r4, r0, r3
 80024ea:	428c      	cmp	r4, r1
 80024ec:	d3f9      	bcc.n	80024e2 <CopyDataInit>
 80024ee:	4a0b      	ldr	r2, [pc, #44]	; (800251c <LoopFillZerobss+0x22>)
 80024f0:	4c0b      	ldr	r4, [pc, #44]	; (8002520 <LoopFillZerobss+0x26>)
 80024f2:	2300      	movs	r3, #0
 80024f4:	e001      	b.n	80024fa <LoopFillZerobss>

080024f6 <FillZerobss>:
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	3204      	adds	r2, #4

080024fa <LoopFillZerobss>:
 80024fa:	42a2      	cmp	r2, r4
 80024fc:	d3fb      	bcc.n	80024f6 <FillZerobss>
 80024fe:	f7ff ffd7 	bl	80024b0 <SystemInit>
 8002502:	f004 fdf7 	bl	80070f4 <__libc_init_array>
 8002506:	f7ff fa89 	bl	8001a1c <main>
 800250a:	4770      	bx	lr
 800250c:	20020000 	.word	0x20020000
 8002510:	20000000 	.word	0x20000000
 8002514:	200001dc 	.word	0x200001dc
 8002518:	0800addc 	.word	0x0800addc
 800251c:	200001dc 	.word	0x200001dc
 8002520:	20000598 	.word	0x20000598

08002524 <ADC_IRQHandler>:
 8002524:	e7fe      	b.n	8002524 <ADC_IRQHandler>
	...

08002528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800252c:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <HAL_Init+0x40>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0d      	ldr	r2, [pc, #52]	; (8002568 <HAL_Init+0x40>)
 8002532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_Init+0x40>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <HAL_Init+0x40>)
 800253e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <HAL_Init+0x40>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a07      	ldr	r2, [pc, #28]	; (8002568 <HAL_Init+0x40>)
 800254a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002550:	2003      	movs	r0, #3
 8002552:	f001 fbb1 	bl	8003cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002556:	200f      	movs	r0, #15
 8002558:	f000 f808 	bl	800256c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800255c:	f7ff fce4 	bl	8001f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023c00 	.word	0x40023c00

0800256c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002574:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_InitTick+0x54>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_InitTick+0x58>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002582:	fbb3 f3f1 	udiv	r3, r3, r1
 8002586:	fbb2 f3f3 	udiv	r3, r2, r3
 800258a:	4618      	mov	r0, r3
 800258c:	f001 fbc9 	bl	8003d22 <HAL_SYSTICK_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e00e      	b.n	80025b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b0f      	cmp	r3, #15
 800259e:	d80a      	bhi.n	80025b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a0:	2200      	movs	r2, #0
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025a8:	f001 fb91 	bl	8003cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025ac:	4a06      	ldr	r2, [pc, #24]	; (80025c8 <HAL_InitTick+0x5c>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e000      	b.n	80025b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000000 	.word	0x20000000
 80025c4:	20000008 	.word	0x20000008
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_IncTick+0x20>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_IncTick+0x24>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <HAL_IncTick+0x24>)
 80025de:	6013      	str	r3, [r2, #0]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000008 	.word	0x20000008
 80025f0:	20000584 	.word	0x20000584

080025f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return uwTick;
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_GetTick+0x14>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000584 	.word	0x20000584

0800260c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff ffee 	bl	80025f4 <HAL_GetTick>
 8002618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002624:	d005      	beq.n	8002632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <HAL_Delay+0x44>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4413      	add	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002632:	bf00      	nop
 8002634:	f7ff ffde 	bl	80025f4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	429a      	cmp	r2, r3
 8002642:	d8f7      	bhi.n	8002634 <HAL_Delay+0x28>
  {
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000008 	.word	0x20000008

08002654 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e033      	b.n	80026d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff fc80 	bl	8001f78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800269a:	f023 0302 	bic.w	r3, r3, #2
 800269e:	f043 0202 	orr.w	r2, r3, #2
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fad8 	bl	8002c5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f023 0303 	bic.w	r3, r3, #3
 80026ba:	f043 0201 	orr.w	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
 80026c2:	e001      	b.n	80026c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_Start+0x1a>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e0b2      	b.n	800285c <HAL_ADC_Start+0x180>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b01      	cmp	r3, #1
 800270a:	d018      	beq.n	800273e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800271c:	4b52      	ldr	r3, [pc, #328]	; (8002868 <HAL_ADC_Start+0x18c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a52      	ldr	r2, [pc, #328]	; (800286c <HAL_ADC_Start+0x190>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	0c9a      	lsrs	r2, r3, #18
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002730:	e002      	b.n	8002738 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	3b01      	subs	r3, #1
 8002736:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f9      	bne.n	8002732 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b01      	cmp	r3, #1
 800274a:	d17a      	bne.n	8002842 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276a:	2b00      	cmp	r3, #0
 800276c:	d007      	beq.n	800277e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002776:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278a:	d106      	bne.n	800279a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002790:	f023 0206 	bic.w	r2, r3, #6
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	645a      	str	r2, [r3, #68]	; 0x44
 8002798:	e002      	b.n	80027a0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027a8:	4b31      	ldr	r3, [pc, #196]	; (8002870 <HAL_ADC_Start+0x194>)
 80027aa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80027b4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 031f 	and.w	r3, r3, #31
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d12a      	bne.n	8002818 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a2b      	ldr	r2, [pc, #172]	; (8002874 <HAL_ADC_Start+0x198>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d015      	beq.n	80027f8 <HAL_ADC_Start+0x11c>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a29      	ldr	r2, [pc, #164]	; (8002878 <HAL_ADC_Start+0x19c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d105      	bne.n	80027e2 <HAL_ADC_Start+0x106>
 80027d6:	4b26      	ldr	r3, [pc, #152]	; (8002870 <HAL_ADC_Start+0x194>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a25      	ldr	r2, [pc, #148]	; (800287c <HAL_ADC_Start+0x1a0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d136      	bne.n	800285a <HAL_ADC_Start+0x17e>
 80027ec:	4b20      	ldr	r3, [pc, #128]	; (8002870 <HAL_ADC_Start+0x194>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d130      	bne.n	800285a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d129      	bne.n	800285a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002814:	609a      	str	r2, [r3, #8]
 8002816:	e020      	b.n	800285a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a15      	ldr	r2, [pc, #84]	; (8002874 <HAL_ADC_Start+0x198>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d11b      	bne.n	800285a <HAL_ADC_Start+0x17e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d114      	bne.n	800285a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	e00b      	b.n	800285a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f043 0210 	orr.w	r2, r3, #16
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	f043 0201 	orr.w	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	20000000 	.word	0x20000000
 800286c:	431bde83 	.word	0x431bde83
 8002870:	40012300 	.word	0x40012300
 8002874:	40012000 	.word	0x40012000
 8002878:	40012100 	.word	0x40012100
 800287c:	40012200 	.word	0x40012200

08002880 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_ADC_Stop+0x16>
 8002892:	2302      	movs	r3, #2
 8002894:	e021      	b.n	80028da <HAL_ADC_Stop+0x5a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0201 	bic.w	r2, r2, #1
 80028ac:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d109      	bne.n	80028d0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028c4:	f023 0301 	bic.w	r3, r3, #1
 80028c8:	f043 0201 	orr.w	r2, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b084      	sub	sp, #16
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002902:	d113      	bne.n	800292c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800290e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002912:	d10b      	bne.n	800292c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	f043 0220 	orr.w	r2, r3, #32
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e063      	b.n	80029f4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800292c:	f7ff fe62 	bl	80025f4 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002932:	e021      	b.n	8002978 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800293a:	d01d      	beq.n	8002978 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_ADC_PollForConversion+0x6c>
 8002942:	f7ff fe57 	bl	80025f4 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d212      	bcs.n	8002978 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b02      	cmp	r3, #2
 800295e:	d00b      	beq.n	8002978 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f043 0204 	orr.w	r2, r3, #4
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e03d      	b.n	80029f4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b02      	cmp	r3, #2
 8002984:	d1d6      	bne.n	8002934 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f06f 0212 	mvn.w	r2, #18
 800298e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d123      	bne.n	80029f2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d11f      	bne.n	80029f2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d006      	beq.n	80029ce <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d111      	bne.n	80029f2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d105      	bne.n	80029f2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f043 0201 	orr.w	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x1c>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e105      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x228>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b09      	cmp	r3, #9
 8002a42:	d925      	bls.n	8002a90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68d9      	ldr	r1, [r3, #12]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	4613      	mov	r3, r2
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	4413      	add	r3, r2
 8002a58:	3b1e      	subs	r3, #30
 8002a5a:	2207      	movs	r2, #7
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43da      	mvns	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	400a      	ands	r2, r1
 8002a68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68d9      	ldr	r1, [r3, #12]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4403      	add	r3, r0
 8002a82:	3b1e      	subs	r3, #30
 8002a84:	409a      	lsls	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	e022      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6919      	ldr	r1, [r3, #16]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	400a      	ands	r2, r1
 8002ab2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6919      	ldr	r1, [r3, #16]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4403      	add	r3, r0
 8002acc:	409a      	lsls	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d824      	bhi.n	8002b28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	3b05      	subs	r3, #5
 8002af0:	221f      	movs	r2, #31
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43da      	mvns	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	400a      	ands	r2, r1
 8002afe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	3b05      	subs	r3, #5
 8002b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	635a      	str	r2, [r3, #52]	; 0x34
 8002b26:	e04c      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b0c      	cmp	r3, #12
 8002b2e:	d824      	bhi.n	8002b7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	3b23      	subs	r3, #35	; 0x23
 8002b42:	221f      	movs	r2, #31
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	400a      	ands	r2, r1
 8002b50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	4618      	mov	r0, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	3b23      	subs	r3, #35	; 0x23
 8002b6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
 8002b78:	e023      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	3b41      	subs	r3, #65	; 0x41
 8002b8c:	221f      	movs	r2, #31
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43da      	mvns	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	400a      	ands	r2, r1
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	4618      	mov	r0, r3
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3b41      	subs	r3, #65	; 0x41
 8002bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bc2:	4b22      	ldr	r3, [pc, #136]	; (8002c4c <HAL_ADC_ConfigChannel+0x234>)
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a21      	ldr	r2, [pc, #132]	; (8002c50 <HAL_ADC_ConfigChannel+0x238>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d109      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x1cc>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b12      	cmp	r3, #18
 8002bd6:	d105      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a19      	ldr	r2, [pc, #100]	; (8002c50 <HAL_ADC_ConfigChannel+0x238>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d123      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x21e>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b10      	cmp	r3, #16
 8002bf4:	d003      	beq.n	8002bfe <HAL_ADC_ConfigChannel+0x1e6>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b11      	cmp	r3, #17
 8002bfc:	d11b      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b10      	cmp	r3, #16
 8002c10:	d111      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <HAL_ADC_ConfigChannel+0x23c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a10      	ldr	r2, [pc, #64]	; (8002c58 <HAL_ADC_ConfigChannel+0x240>)
 8002c18:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1c:	0c9a      	lsrs	r2, r3, #18
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c28:	e002      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f9      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	40012300 	.word	0x40012300
 8002c50:	40012000 	.word	0x40012000
 8002c54:	20000000 	.word	0x20000000
 8002c58:	431bde83 	.word	0x431bde83

08002c5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c64:	4b79      	ldr	r3, [pc, #484]	; (8002e4c <ADC_Init+0x1f0>)
 8002c66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6859      	ldr	r1, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	021a      	lsls	r2, r3, #8
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002cb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6859      	ldr	r1, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6899      	ldr	r1, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	4a58      	ldr	r2, [pc, #352]	; (8002e50 <ADC_Init+0x1f4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d022      	beq.n	8002d3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6899      	ldr	r1, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6899      	ldr	r1, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	e00f      	b.n	8002d5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0202 	bic.w	r2, r2, #2
 8002d68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6899      	ldr	r1, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	7e1b      	ldrb	r3, [r3, #24]
 8002d74:	005a      	lsls	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01b      	beq.n	8002dc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002da6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6859      	ldr	r1, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	3b01      	subs	r3, #1
 8002db4:	035a      	lsls	r2, r3, #13
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	e007      	b.n	8002dd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002dde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	051a      	lsls	r2, r3, #20
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6899      	ldr	r1, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e12:	025a      	lsls	r2, r3, #9
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6899      	ldr	r1, [r3, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	029a      	lsls	r2, r3, #10
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	609a      	str	r2, [r3, #8]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40012300 	.word	0x40012300
 8002e50:	0f000001 	.word	0x0f000001

08002e54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0ed      	b.n	8003042 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d102      	bne.n	8002e78 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff f8a2 	bl	8001fbc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e88:	f7ff fbb4 	bl	80025f4 <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e8e:	e012      	b.n	8002eb6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e90:	f7ff fbb0 	bl	80025f4 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b0a      	cmp	r3, #10
 8002e9c:	d90b      	bls.n	8002eb6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2205      	movs	r2, #5
 8002eae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0c5      	b.n	8003042 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0e5      	beq.n	8002e90 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0202 	bic.w	r2, r2, #2
 8002ed2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ed4:	f7ff fb8e 	bl	80025f4 <HAL_GetTick>
 8002ed8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002eda:	e012      	b.n	8002f02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002edc:	f7ff fb8a 	bl	80025f4 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b0a      	cmp	r3, #10
 8002ee8:	d90b      	bls.n	8002f02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2205      	movs	r2, #5
 8002efa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e09f      	b.n	8003042 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e5      	bne.n	8002edc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7e1b      	ldrb	r3, [r3, #24]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d108      	bne.n	8002f2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e007      	b.n	8002f3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	7e5b      	ldrb	r3, [r3, #25]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d108      	bne.n	8002f54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e007      	b.n	8002f64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	7e9b      	ldrb	r3, [r3, #26]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d108      	bne.n	8002f7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0220 	orr.w	r2, r2, #32
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	e007      	b.n	8002f8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0220 	bic.w	r2, r2, #32
 8002f8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7edb      	ldrb	r3, [r3, #27]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d108      	bne.n	8002fa8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0210 	bic.w	r2, r2, #16
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	e007      	b.n	8002fb8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0210 	orr.w	r2, r2, #16
 8002fb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	7f1b      	ldrb	r3, [r3, #28]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d108      	bne.n	8002fd2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0208 	orr.w	r2, r2, #8
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e007      	b.n	8002fe2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0208 	bic.w	r2, r2, #8
 8002fe0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	7f5b      	ldrb	r3, [r3, #29]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d108      	bne.n	8002ffc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0204 	orr.w	r2, r2, #4
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	e007      	b.n	800300c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0204 	bic.w	r2, r2, #4
 800300a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	ea42 0103 	orr.w	r1, r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	1e5a      	subs	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003062:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d003      	beq.n	8003072 <HAL_CAN_ConfigFilter+0x26>
 800306a:	7cfb      	ldrb	r3, [r7, #19]
 800306c:	2b02      	cmp	r3, #2
 800306e:	f040 80be 	bne.w	80031ee <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003072:	4b65      	ldr	r3, [pc, #404]	; (8003208 <HAL_CAN_ConfigFilter+0x1bc>)
 8003074:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800307c:	f043 0201 	orr.w	r2, r3, #1
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800308c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	021b      	lsls	r3, r3, #8
 80030a2:	431a      	orrs	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	2201      	movs	r2, #1
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	401a      	ands	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d123      	bne.n	800311c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	43db      	mvns	r3, r3
 80030de:	401a      	ands	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80030f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	3248      	adds	r2, #72	; 0x48
 80030fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003110:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003112:	6979      	ldr	r1, [r7, #20]
 8003114:	3348      	adds	r3, #72	; 0x48
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	440b      	add	r3, r1
 800311a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d122      	bne.n	800316a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	431a      	orrs	r2, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003144:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	3248      	adds	r2, #72	; 0x48
 800314a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800315e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003160:	6979      	ldr	r1, [r7, #20]
 8003162:	3348      	adds	r3, #72	; 0x48
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	440b      	add	r3, r1
 8003168:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d109      	bne.n	8003186 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	43db      	mvns	r3, r3
 800317c:	401a      	ands	r2, r3
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003184:	e007      	b.n	8003196 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	431a      	orrs	r2, r3
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	43db      	mvns	r3, r3
 80031a8:	401a      	ands	r2, r3
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80031b0:	e007      	b.n	80031c2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d107      	bne.n	80031da <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031e0:	f023 0201 	bic.w	r2, r3, #1
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	e006      	b.n	80031fc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	371c      	adds	r7, #28
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	40006400 	.word	0x40006400

0800320c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3020 	ldrb.w	r3, [r3, #32]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	d12e      	bne.n	800327e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0201 	bic.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003238:	f7ff f9dc 	bl	80025f4 <HAL_GetTick>
 800323c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800323e:	e012      	b.n	8003266 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003240:	f7ff f9d8 	bl	80025f4 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b0a      	cmp	r3, #10
 800324c:	d90b      	bls.n	8003266 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2205      	movs	r2, #5
 800325e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e012      	b.n	800328c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e5      	bne.n	8003240 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	e006      	b.n	800328c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
  }
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80032b2:	7ffb      	ldrb	r3, [r7, #31]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d003      	beq.n	80032c0 <HAL_CAN_AddTxMessage+0x2c>
 80032b8:	7ffb      	ldrb	r3, [r7, #31]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	f040 80b8 	bne.w	8003430 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10a      	bne.n	80032e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 80a0 	beq.w	8003420 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	0e1b      	lsrs	r3, r3, #24
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d907      	bls.n	8003300 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e09e      	b.n	800343e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003300:	2201      	movs	r2, #1
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	409a      	lsls	r2, r3
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10d      	bne.n	800332e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800331c:	68f9      	ldr	r1, [r7, #12]
 800331e:	6809      	ldr	r1, [r1, #0]
 8003320:	431a      	orrs	r2, r3
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	3318      	adds	r3, #24
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	440b      	add	r3, r1
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	e00f      	b.n	800334e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003338:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800333e:	68f9      	ldr	r1, [r7, #12]
 8003340:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003342:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	3318      	adds	r3, #24
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	440b      	add	r3, r1
 800334c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6819      	ldr	r1, [r3, #0]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	3318      	adds	r3, #24
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	440b      	add	r3, r1
 800335e:	3304      	adds	r3, #4
 8003360:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	7d1b      	ldrb	r3, [r3, #20]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d111      	bne.n	800338e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	3318      	adds	r3, #24
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	4413      	add	r3, r2
 8003376:	3304      	adds	r3, #4
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	6811      	ldr	r1, [r2, #0]
 800337e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	3318      	adds	r3, #24
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	440b      	add	r3, r1
 800338a:	3304      	adds	r3, #4
 800338c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3307      	adds	r3, #7
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	061a      	lsls	r2, r3, #24
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3306      	adds	r3, #6
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	041b      	lsls	r3, r3, #16
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3305      	adds	r3, #5
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	4313      	orrs	r3, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	3204      	adds	r2, #4
 80033ae:	7812      	ldrb	r2, [r2, #0]
 80033b0:	4610      	mov	r0, r2
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	6811      	ldr	r1, [r2, #0]
 80033b6:	ea43 0200 	orr.w	r2, r3, r0
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	440b      	add	r3, r1
 80033c0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80033c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3303      	adds	r3, #3
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	061a      	lsls	r2, r3, #24
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3302      	adds	r3, #2
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	041b      	lsls	r3, r3, #16
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3301      	adds	r3, #1
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	4313      	orrs	r3, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	7812      	ldrb	r2, [r2, #0]
 80033e6:	4610      	mov	r0, r2
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	6811      	ldr	r1, [r2, #0]
 80033ec:	ea43 0200 	orr.w	r2, r3, r0
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	440b      	add	r3, r1
 80033f6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80033fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	3318      	adds	r3, #24
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	4413      	add	r3, r2
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	6811      	ldr	r1, [r2, #0]
 800340e:	f043 0201 	orr.w	r2, r3, #1
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	3318      	adds	r3, #24
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	440b      	add	r3, r1
 800341a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e00e      	b.n	800343e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e006      	b.n	800343e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
  }
}
 800343e:	4618      	mov	r0, r3
 8003440:	3724      	adds	r7, #36	; 0x24
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800344a:	b480      	push	{r7}
 800344c:	b087      	sub	sp, #28
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800345e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003460:	7dfb      	ldrb	r3, [r7, #23]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d003      	beq.n	800346e <HAL_CAN_GetRxMessage+0x24>
 8003466:	7dfb      	ldrb	r3, [r7, #23]
 8003468:	2b02      	cmp	r3, #2
 800346a:	f040 80f3 	bne.w	8003654 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10e      	bne.n	8003492 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d116      	bne.n	80034b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e0e7      	b.n	8003662 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d107      	bne.n	80034b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0d8      	b.n	8003662 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	331b      	adds	r3, #27
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	4413      	add	r3, r2
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0204 	and.w	r2, r3, #4
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10c      	bne.n	80034e8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	331b      	adds	r3, #27
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	4413      	add	r3, r2
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	0d5b      	lsrs	r3, r3, #21
 80034de:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	e00b      	b.n	8003500 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	331b      	adds	r3, #27
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	4413      	add	r3, r2
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	08db      	lsrs	r3, r3, #3
 80034f8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	331b      	adds	r3, #27
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	4413      	add	r3, r2
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0202 	and.w	r2, r3, #2
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	331b      	adds	r3, #27
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	4413      	add	r3, r2
 8003522:	3304      	adds	r3, #4
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 020f 	and.w	r2, r3, #15
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	331b      	adds	r3, #27
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	4413      	add	r3, r2
 800353a:	3304      	adds	r3, #4
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	0a1b      	lsrs	r3, r3, #8
 8003540:	b2da      	uxtb	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	331b      	adds	r3, #27
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	4413      	add	r3, r2
 8003552:	3304      	adds	r3, #4
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	0c1b      	lsrs	r3, r3, #16
 8003558:	b29a      	uxth	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	4413      	add	r3, r2
 8003568:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	b2da      	uxtb	r2, r3
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	4413      	add	r3, r2
 800357e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	0a1a      	lsrs	r2, r3, #8
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	3301      	adds	r3, #1
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	4413      	add	r3, r2
 8003598:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	0c1a      	lsrs	r2, r3, #16
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	3302      	adds	r3, #2
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	0e1a      	lsrs	r2, r3, #24
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	3303      	adds	r3, #3
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	3304      	adds	r3, #4
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	0a1a      	lsrs	r2, r3, #8
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	3305      	adds	r3, #5
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	0c1a      	lsrs	r2, r3, #16
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	3306      	adds	r3, #6
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	4413      	add	r3, r2
 8003618:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	0e1a      	lsrs	r2, r3, #24
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	3307      	adds	r3, #7
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d108      	bne.n	8003640 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0220 	orr.w	r2, r2, #32
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	e007      	b.n	8003650 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0220 	orr.w	r2, r2, #32
 800364e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	e006      	b.n	8003662 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
  }
}
 8003662:	4618      	mov	r0, r3
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800366e:	b480      	push	{r7}
 8003670:	b085      	sub	sp, #20
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800367e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d002      	beq.n	800368c <HAL_CAN_ActivateNotification+0x1e>
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d109      	bne.n	80036a0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6959      	ldr	r1, [r3, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	e006      	b.n	80036ae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
  }
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b08a      	sub	sp, #40	; 0x28
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d07c      	beq.n	80037fa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d023      	beq.n	8003752 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2201      	movs	r2, #1
 8003710:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f983 	bl	8003a28 <HAL_CAN_TxMailbox0CompleteCallback>
 8003722:	e016      	b.n	8003752 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	d004      	beq.n	8003738 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
 8003736:	e00c      	b.n	8003752 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d004      	beq.n	800374c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
 800374a:	e002      	b.n	8003752 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f989 	bl	8003a64 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d024      	beq.n	80037a6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003764:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f963 	bl	8003a3c <HAL_CAN_TxMailbox1CompleteCallback>
 8003776:	e016      	b.n	80037a6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377e:	2b00      	cmp	r3, #0
 8003780:	d004      	beq.n	800378c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
 800378a:	e00c      	b.n	80037a6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003792:	2b00      	cmp	r3, #0
 8003794:	d004      	beq.n	80037a0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
 800379e:	e002      	b.n	80037a6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f969 	bl	8003a78 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d024      	beq.n	80037fa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f943 	bl	8003a50 <HAL_CAN_TxMailbox2CompleteCallback>
 80037ca:	e016      	b.n	80037fa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d004      	beq.n	80037e0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
 80037de:	e00c      	b.n	80037fa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d004      	beq.n	80037f4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
 80037f2:	e002      	b.n	80037fa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f949 	bl	8003a8c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00c      	beq.n	800381e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b00      	cmp	r3, #0
 800380c:	d007      	beq.n	800381e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003814:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2210      	movs	r2, #16
 800381c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00b      	beq.n	8003840 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d006      	beq.n	8003840 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2208      	movs	r2, #8
 8003838:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f930 	bl	8003aa0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d009      	beq.n	800385e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7fe f8ab 	bl	80019b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00c      	beq.n	8003882 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b00      	cmp	r3, #0
 8003870:	d007      	beq.n	8003882 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003878:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2210      	movs	r2, #16
 8003880:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00b      	beq.n	80038a4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d006      	beq.n	80038a4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2208      	movs	r2, #8
 800389c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f912 	bl	8003ac8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f8f9 	bl	8003ab4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00b      	beq.n	80038e4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d006      	beq.n	80038e4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2210      	movs	r2, #16
 80038dc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f8fc 	bl	8003adc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00b      	beq.n	8003906 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d006      	beq.n	8003906 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2208      	movs	r2, #8
 80038fe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f8f5 	bl	8003af0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d07b      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	d072      	beq.n	8003a00 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	f043 0302 	orr.w	r3, r3, #2
 8003950:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	f043 0304 	orr.w	r3, r3, #4
 800396c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003974:	2b00      	cmp	r3, #0
 8003976:	d043      	beq.n	8003a00 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800397e:	2b00      	cmp	r3, #0
 8003980:	d03e      	beq.n	8003a00 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003988:	2b60      	cmp	r3, #96	; 0x60
 800398a:	d02b      	beq.n	80039e4 <HAL_CAN_IRQHandler+0x32a>
 800398c:	2b60      	cmp	r3, #96	; 0x60
 800398e:	d82e      	bhi.n	80039ee <HAL_CAN_IRQHandler+0x334>
 8003990:	2b50      	cmp	r3, #80	; 0x50
 8003992:	d022      	beq.n	80039da <HAL_CAN_IRQHandler+0x320>
 8003994:	2b50      	cmp	r3, #80	; 0x50
 8003996:	d82a      	bhi.n	80039ee <HAL_CAN_IRQHandler+0x334>
 8003998:	2b40      	cmp	r3, #64	; 0x40
 800399a:	d019      	beq.n	80039d0 <HAL_CAN_IRQHandler+0x316>
 800399c:	2b40      	cmp	r3, #64	; 0x40
 800399e:	d826      	bhi.n	80039ee <HAL_CAN_IRQHandler+0x334>
 80039a0:	2b30      	cmp	r3, #48	; 0x30
 80039a2:	d010      	beq.n	80039c6 <HAL_CAN_IRQHandler+0x30c>
 80039a4:	2b30      	cmp	r3, #48	; 0x30
 80039a6:	d822      	bhi.n	80039ee <HAL_CAN_IRQHandler+0x334>
 80039a8:	2b10      	cmp	r3, #16
 80039aa:	d002      	beq.n	80039b2 <HAL_CAN_IRQHandler+0x2f8>
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	d005      	beq.n	80039bc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80039b0:	e01d      	b.n	80039ee <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	f043 0308 	orr.w	r3, r3, #8
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039ba:	e019      	b.n	80039f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	f043 0310 	orr.w	r3, r3, #16
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039c4:	e014      	b.n	80039f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	f043 0320 	orr.w	r3, r3, #32
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039ce:	e00f      	b.n	80039f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039d8:	e00a      	b.n	80039f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039e2:	e005      	b.n	80039f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039ec:	e000      	b.n	80039f0 <HAL_CAN_IRQHandler+0x336>
            break;
 80039ee:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80039fe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2204      	movs	r2, #4
 8003a06:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f872 	bl	8003b04 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a20:	bf00      	nop
 8003a22:	3728      	adds	r7, #40	; 0x28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b28:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <__NVIC_SetPriorityGrouping+0x44>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b34:	4013      	ands	r3, r2
 8003b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b4a:	4a04      	ldr	r2, [pc, #16]	; (8003b5c <__NVIC_SetPriorityGrouping+0x44>)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	60d3      	str	r3, [r2, #12]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	e000ed00 	.word	0xe000ed00

08003b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b64:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <__NVIC_GetPriorityGrouping+0x18>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	0a1b      	lsrs	r3, r3, #8
 8003b6a:	f003 0307 	and.w	r3, r3, #7
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	e000ed00 	.word	0xe000ed00

08003b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	db0b      	blt.n	8003ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	f003 021f 	and.w	r2, r3, #31
 8003b94:	4907      	ldr	r1, [pc, #28]	; (8003bb4 <__NVIC_EnableIRQ+0x38>)
 8003b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	e000e100 	.word	0xe000e100

08003bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	6039      	str	r1, [r7, #0]
 8003bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	db0a      	blt.n	8003be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	490c      	ldr	r1, [pc, #48]	; (8003c04 <__NVIC_SetPriority+0x4c>)
 8003bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd6:	0112      	lsls	r2, r2, #4
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	440b      	add	r3, r1
 8003bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003be0:	e00a      	b.n	8003bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	4908      	ldr	r1, [pc, #32]	; (8003c08 <__NVIC_SetPriority+0x50>)
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	3b04      	subs	r3, #4
 8003bf0:	0112      	lsls	r2, r2, #4
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	761a      	strb	r2, [r3, #24]
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000e100 	.word	0xe000e100
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b089      	sub	sp, #36	; 0x24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f1c3 0307 	rsb	r3, r3, #7
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	bf28      	it	cs
 8003c2a:	2304      	movcs	r3, #4
 8003c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3304      	adds	r3, #4
 8003c32:	2b06      	cmp	r3, #6
 8003c34:	d902      	bls.n	8003c3c <NVIC_EncodePriority+0x30>
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3b03      	subs	r3, #3
 8003c3a:	e000      	b.n	8003c3e <NVIC_EncodePriority+0x32>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43da      	mvns	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	401a      	ands	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5e:	43d9      	mvns	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c64:	4313      	orrs	r3, r2
         );
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3724      	adds	r7, #36	; 0x24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c84:	d301      	bcc.n	8003c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c86:	2301      	movs	r3, #1
 8003c88:	e00f      	b.n	8003caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <SysTick_Config+0x40>)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c92:	210f      	movs	r1, #15
 8003c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c98:	f7ff ff8e 	bl	8003bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c9c:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <SysTick_Config+0x40>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ca2:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <SysTick_Config+0x40>)
 8003ca4:	2207      	movs	r2, #7
 8003ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	e000e010 	.word	0xe000e010

08003cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff ff29 	bl	8003b18 <__NVIC_SetPriorityGrouping>
}
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b086      	sub	sp, #24
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ce0:	f7ff ff3e 	bl	8003b60 <__NVIC_GetPriorityGrouping>
 8003ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	6978      	ldr	r0, [r7, #20]
 8003cec:	f7ff ff8e 	bl	8003c0c <NVIC_EncodePriority>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff ff5d 	bl	8003bb8 <__NVIC_SetPriority>
}
 8003cfe:	bf00      	nop
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff ff31 	bl	8003b7c <__NVIC_EnableIRQ>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff ffa2 	bl	8003c74 <SysTick_Config>
 8003d30:	4603      	mov	r3, r0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d46:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d48:	f7fe fc54 	bl	80025f4 <HAL_GetTick>
 8003d4c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d008      	beq.n	8003d6c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2280      	movs	r2, #128	; 0x80
 8003d5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e052      	b.n	8003e12 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0216 	bic.w	r2, r2, #22
 8003d7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d8a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d103      	bne.n	8003d9c <HAL_DMA_Abort+0x62>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d007      	beq.n	8003dac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0208 	bic.w	r2, r2, #8
 8003daa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0201 	bic.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dbc:	e013      	b.n	8003de6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dbe:	f7fe fc19 	bl	80025f4 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b05      	cmp	r3, #5
 8003dca:	d90c      	bls.n	8003de6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e015      	b.n	8003e12 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e4      	bne.n	8003dbe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df8:	223f      	movs	r2, #63	; 0x3f
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d004      	beq.n	8003e38 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2280      	movs	r2, #128	; 0x80
 8003e32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e00c      	b.n	8003e52 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2205      	movs	r2, #5
 8003e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b089      	sub	sp, #36	; 0x24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	e16b      	b.n	8004154 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	f040 815a 	bne.w	800414e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d005      	beq.n	8003eb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d130      	bne.n	8003f14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ee8:	2201      	movs	r2, #1
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	091b      	lsrs	r3, r3, #4
 8003efe:	f003 0201 	and.w	r2, r3, #1
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d017      	beq.n	8003f50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d123      	bne.n	8003fa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	08da      	lsrs	r2, r3, #3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3208      	adds	r2, #8
 8003f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	220f      	movs	r2, #15
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	08da      	lsrs	r2, r3, #3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3208      	adds	r2, #8
 8003f9e:	69b9      	ldr	r1, [r7, #24]
 8003fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	2203      	movs	r2, #3
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 0203 	and.w	r2, r3, #3
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 80b4 	beq.w	800414e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	4b60      	ldr	r3, [pc, #384]	; (800416c <HAL_GPIO_Init+0x30c>)
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	4a5f      	ldr	r2, [pc, #380]	; (800416c <HAL_GPIO_Init+0x30c>)
 8003ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ff6:	4b5d      	ldr	r3, [pc, #372]	; (800416c <HAL_GPIO_Init+0x30c>)
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004002:	4a5b      	ldr	r2, [pc, #364]	; (8004170 <HAL_GPIO_Init+0x310>)
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	089b      	lsrs	r3, r3, #2
 8004008:	3302      	adds	r3, #2
 800400a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800400e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	220f      	movs	r2, #15
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43db      	mvns	r3, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4013      	ands	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a52      	ldr	r2, [pc, #328]	; (8004174 <HAL_GPIO_Init+0x314>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d02b      	beq.n	8004086 <HAL_GPIO_Init+0x226>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a51      	ldr	r2, [pc, #324]	; (8004178 <HAL_GPIO_Init+0x318>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d025      	beq.n	8004082 <HAL_GPIO_Init+0x222>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a50      	ldr	r2, [pc, #320]	; (800417c <HAL_GPIO_Init+0x31c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01f      	beq.n	800407e <HAL_GPIO_Init+0x21e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a4f      	ldr	r2, [pc, #316]	; (8004180 <HAL_GPIO_Init+0x320>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d019      	beq.n	800407a <HAL_GPIO_Init+0x21a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a4e      	ldr	r2, [pc, #312]	; (8004184 <HAL_GPIO_Init+0x324>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <HAL_GPIO_Init+0x216>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a4d      	ldr	r2, [pc, #308]	; (8004188 <HAL_GPIO_Init+0x328>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00d      	beq.n	8004072 <HAL_GPIO_Init+0x212>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a4c      	ldr	r2, [pc, #304]	; (800418c <HAL_GPIO_Init+0x32c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d007      	beq.n	800406e <HAL_GPIO_Init+0x20e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a4b      	ldr	r2, [pc, #300]	; (8004190 <HAL_GPIO_Init+0x330>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d101      	bne.n	800406a <HAL_GPIO_Init+0x20a>
 8004066:	2307      	movs	r3, #7
 8004068:	e00e      	b.n	8004088 <HAL_GPIO_Init+0x228>
 800406a:	2308      	movs	r3, #8
 800406c:	e00c      	b.n	8004088 <HAL_GPIO_Init+0x228>
 800406e:	2306      	movs	r3, #6
 8004070:	e00a      	b.n	8004088 <HAL_GPIO_Init+0x228>
 8004072:	2305      	movs	r3, #5
 8004074:	e008      	b.n	8004088 <HAL_GPIO_Init+0x228>
 8004076:	2304      	movs	r3, #4
 8004078:	e006      	b.n	8004088 <HAL_GPIO_Init+0x228>
 800407a:	2303      	movs	r3, #3
 800407c:	e004      	b.n	8004088 <HAL_GPIO_Init+0x228>
 800407e:	2302      	movs	r3, #2
 8004080:	e002      	b.n	8004088 <HAL_GPIO_Init+0x228>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <HAL_GPIO_Init+0x228>
 8004086:	2300      	movs	r3, #0
 8004088:	69fa      	ldr	r2, [r7, #28]
 800408a:	f002 0203 	and.w	r2, r2, #3
 800408e:	0092      	lsls	r2, r2, #2
 8004090:	4093      	lsls	r3, r2
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	4313      	orrs	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004098:	4935      	ldr	r1, [pc, #212]	; (8004170 <HAL_GPIO_Init+0x310>)
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	089b      	lsrs	r3, r3, #2
 800409e:	3302      	adds	r3, #2
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040a6:	4b3b      	ldr	r3, [pc, #236]	; (8004194 <HAL_GPIO_Init+0x334>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	43db      	mvns	r3, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4013      	ands	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ca:	4a32      	ldr	r2, [pc, #200]	; (8004194 <HAL_GPIO_Init+0x334>)
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040d0:	4b30      	ldr	r3, [pc, #192]	; (8004194 <HAL_GPIO_Init+0x334>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	43db      	mvns	r3, r3
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4013      	ands	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040f4:	4a27      	ldr	r2, [pc, #156]	; (8004194 <HAL_GPIO_Init+0x334>)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040fa:	4b26      	ldr	r3, [pc, #152]	; (8004194 <HAL_GPIO_Init+0x334>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	43db      	mvns	r3, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4013      	ands	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800411e:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <HAL_GPIO_Init+0x334>)
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004124:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <HAL_GPIO_Init+0x334>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	43db      	mvns	r3, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4013      	ands	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004148:	4a12      	ldr	r2, [pc, #72]	; (8004194 <HAL_GPIO_Init+0x334>)
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	3301      	adds	r3, #1
 8004152:	61fb      	str	r3, [r7, #28]
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	2b0f      	cmp	r3, #15
 8004158:	f67f ae90 	bls.w	8003e7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800415c:	bf00      	nop
 800415e:	bf00      	nop
 8004160:	3724      	adds	r7, #36	; 0x24
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40023800 	.word	0x40023800
 8004170:	40013800 	.word	0x40013800
 8004174:	40020000 	.word	0x40020000
 8004178:	40020400 	.word	0x40020400
 800417c:	40020800 	.word	0x40020800
 8004180:	40020c00 	.word	0x40020c00
 8004184:	40021000 	.word	0x40021000
 8004188:	40021400 	.word	0x40021400
 800418c:	40021800 	.word	0x40021800
 8004190:	40021c00 	.word	0x40021c00
 8004194:	40013c00 	.word	0x40013c00

08004198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	807b      	strh	r3, [r7, #2]
 80041a4:	4613      	mov	r3, r2
 80041a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041a8:	787b      	ldrb	r3, [r7, #1]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ae:	887a      	ldrh	r2, [r7, #2]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041b4:	e003      	b.n	80041be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041b6:	887b      	ldrh	r3, [r7, #2]
 80041b8:	041a      	lsls	r2, r3, #16
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	619a      	str	r2, [r3, #24]
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	460b      	mov	r3, r1
 80041d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041dc:	887a      	ldrh	r2, [r7, #2]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4013      	ands	r3, r2
 80041e2:	041a      	lsls	r2, r3, #16
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	43d9      	mvns	r1, r3
 80041e8:	887b      	ldrh	r3, [r7, #2]
 80041ea:	400b      	ands	r3, r1
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	619a      	str	r2, [r3, #24]
}
 80041f2:	bf00      	nop
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e12b      	b.n	800446a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fd ff18 	bl	800205c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2224      	movs	r2, #36	; 0x24
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004252:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004262:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004264:	f001 fbfc 	bl	8005a60 <HAL_RCC_GetPCLK1Freq>
 8004268:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4a81      	ldr	r2, [pc, #516]	; (8004474 <HAL_I2C_Init+0x274>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d807      	bhi.n	8004284 <HAL_I2C_Init+0x84>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4a80      	ldr	r2, [pc, #512]	; (8004478 <HAL_I2C_Init+0x278>)
 8004278:	4293      	cmp	r3, r2
 800427a:	bf94      	ite	ls
 800427c:	2301      	movls	r3, #1
 800427e:	2300      	movhi	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	e006      	b.n	8004292 <HAL_I2C_Init+0x92>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4a7d      	ldr	r2, [pc, #500]	; (800447c <HAL_I2C_Init+0x27c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	bf94      	ite	ls
 800428c:	2301      	movls	r3, #1
 800428e:	2300      	movhi	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e0e7      	b.n	800446a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4a78      	ldr	r2, [pc, #480]	; (8004480 <HAL_I2C_Init+0x280>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	0c9b      	lsrs	r3, r3, #18
 80042a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	4a6a      	ldr	r2, [pc, #424]	; (8004474 <HAL_I2C_Init+0x274>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d802      	bhi.n	80042d4 <HAL_I2C_Init+0xd4>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	3301      	adds	r3, #1
 80042d2:	e009      	b.n	80042e8 <HAL_I2C_Init+0xe8>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042da:	fb02 f303 	mul.w	r3, r2, r3
 80042de:	4a69      	ldr	r2, [pc, #420]	; (8004484 <HAL_I2C_Init+0x284>)
 80042e0:	fba2 2303 	umull	r2, r3, r2, r3
 80042e4:	099b      	lsrs	r3, r3, #6
 80042e6:	3301      	adds	r3, #1
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	430b      	orrs	r3, r1
 80042ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	495c      	ldr	r1, [pc, #368]	; (8004474 <HAL_I2C_Init+0x274>)
 8004304:	428b      	cmp	r3, r1
 8004306:	d819      	bhi.n	800433c <HAL_I2C_Init+0x13c>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	1e59      	subs	r1, r3, #1
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	fbb1 f3f3 	udiv	r3, r1, r3
 8004316:	1c59      	adds	r1, r3, #1
 8004318:	f640 73fc 	movw	r3, #4092	; 0xffc
 800431c:	400b      	ands	r3, r1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_I2C_Init+0x138>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	1e59      	subs	r1, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004330:	3301      	adds	r3, #1
 8004332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004336:	e051      	b.n	80043dc <HAL_I2C_Init+0x1dc>
 8004338:	2304      	movs	r3, #4
 800433a:	e04f      	b.n	80043dc <HAL_I2C_Init+0x1dc>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d111      	bne.n	8004368 <HAL_I2C_Init+0x168>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	1e58      	subs	r0, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6859      	ldr	r1, [r3, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	440b      	add	r3, r1
 8004352:	fbb0 f3f3 	udiv	r3, r0, r3
 8004356:	3301      	adds	r3, #1
 8004358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800435c:	2b00      	cmp	r3, #0
 800435e:	bf0c      	ite	eq
 8004360:	2301      	moveq	r3, #1
 8004362:	2300      	movne	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	e012      	b.n	800438e <HAL_I2C_Init+0x18e>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1e58      	subs	r0, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6859      	ldr	r1, [r3, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	0099      	lsls	r1, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	fbb0 f3f3 	udiv	r3, r0, r3
 800437e:	3301      	adds	r3, #1
 8004380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004384:	2b00      	cmp	r3, #0
 8004386:	bf0c      	ite	eq
 8004388:	2301      	moveq	r3, #1
 800438a:	2300      	movne	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_I2C_Init+0x196>
 8004392:	2301      	movs	r3, #1
 8004394:	e022      	b.n	80043dc <HAL_I2C_Init+0x1dc>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10e      	bne.n	80043bc <HAL_I2C_Init+0x1bc>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	1e58      	subs	r0, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6859      	ldr	r1, [r3, #4]
 80043a6:	460b      	mov	r3, r1
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	440b      	add	r3, r1
 80043ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80043b0:	3301      	adds	r3, #1
 80043b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ba:	e00f      	b.n	80043dc <HAL_I2C_Init+0x1dc>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	1e58      	subs	r0, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6859      	ldr	r1, [r3, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	0099      	lsls	r1, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80043d2:	3301      	adds	r3, #1
 80043d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	6809      	ldr	r1, [r1, #0]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69da      	ldr	r2, [r3, #28]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800440a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6911      	ldr	r1, [r2, #16]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68d2      	ldr	r2, [r2, #12]
 8004416:	4311      	orrs	r1, r2
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	430b      	orrs	r3, r1
 800441e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695a      	ldr	r2, [r3, #20]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	000186a0 	.word	0x000186a0
 8004478:	001e847f 	.word	0x001e847f
 800447c:	003d08ff 	.word	0x003d08ff
 8004480:	431bde83 	.word	0x431bde83
 8004484:	10624dd3 	.word	0x10624dd3

08004488 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	4608      	mov	r0, r1
 8004492:	4611      	mov	r1, r2
 8004494:	461a      	mov	r2, r3
 8004496:	4603      	mov	r3, r0
 8004498:	817b      	strh	r3, [r7, #10]
 800449a:	460b      	mov	r3, r1
 800449c:	813b      	strh	r3, [r7, #8]
 800449e:	4613      	mov	r3, r2
 80044a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044a2:	f7fe f8a7 	bl	80025f4 <HAL_GetTick>
 80044a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	f040 80d9 	bne.w	8004668 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	2319      	movs	r3, #25
 80044bc:	2201      	movs	r2, #1
 80044be:	496d      	ldr	r1, [pc, #436]	; (8004674 <HAL_I2C_Mem_Write+0x1ec>)
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fc7f 	bl	8004dc4 <I2C_WaitOnFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80044cc:	2302      	movs	r3, #2
 80044ce:	e0cc      	b.n	800466a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_I2C_Mem_Write+0x56>
 80044da:	2302      	movs	r3, #2
 80044dc:	e0c5      	b.n	800466a <HAL_I2C_Mem_Write+0x1e2>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d007      	beq.n	8004504 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004512:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2221      	movs	r2, #33	; 0x21
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2240      	movs	r2, #64	; 0x40
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a3a      	ldr	r2, [r7, #32]
 800452e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004534:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4a4d      	ldr	r2, [pc, #308]	; (8004678 <HAL_I2C_Mem_Write+0x1f0>)
 8004544:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004546:	88f8      	ldrh	r0, [r7, #6]
 8004548:	893a      	ldrh	r2, [r7, #8]
 800454a:	8979      	ldrh	r1, [r7, #10]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	4603      	mov	r3, r0
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fab6 	bl	8004ac8 <I2C_RequestMemoryWrite>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d052      	beq.n	8004608 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e081      	b.n	800466a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 fd00 	bl	8004f70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00d      	beq.n	8004592 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	2b04      	cmp	r3, #4
 800457c:	d107      	bne.n	800458e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800458c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e06b      	b.n	800466a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	781a      	ldrb	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d11b      	bne.n	8004608 <HAL_I2C_Mem_Write+0x180>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d017      	beq.n	8004608 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	781a      	ldrb	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1aa      	bne.n	8004566 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 fcec 	bl	8004ff2 <I2C_WaitOnBTFFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00d      	beq.n	800463c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	2b04      	cmp	r3, #4
 8004626:	d107      	bne.n	8004638 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004636:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e016      	b.n	800466a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800464a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	e000      	b.n	800466a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004668:	2302      	movs	r3, #2
  }
}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	00100002 	.word	0x00100002
 8004678:	ffff0000 	.word	0xffff0000

0800467c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08c      	sub	sp, #48	; 0x30
 8004680:	af02      	add	r7, sp, #8
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	4608      	mov	r0, r1
 8004686:	4611      	mov	r1, r2
 8004688:	461a      	mov	r2, r3
 800468a:	4603      	mov	r3, r0
 800468c:	817b      	strh	r3, [r7, #10]
 800468e:	460b      	mov	r3, r1
 8004690:	813b      	strh	r3, [r7, #8]
 8004692:	4613      	mov	r3, r2
 8004694:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004696:	f7fd ffad 	bl	80025f4 <HAL_GetTick>
 800469a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b20      	cmp	r3, #32
 80046a6:	f040 8208 	bne.w	8004aba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	2319      	movs	r3, #25
 80046b0:	2201      	movs	r2, #1
 80046b2:	497b      	ldr	r1, [pc, #492]	; (80048a0 <HAL_I2C_Mem_Read+0x224>)
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 fb85 	bl	8004dc4 <I2C_WaitOnFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80046c0:	2302      	movs	r3, #2
 80046c2:	e1fb      	b.n	8004abc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_I2C_Mem_Read+0x56>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e1f4      	b.n	8004abc <HAL_I2C_Mem_Read+0x440>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d007      	beq.n	80046f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004706:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2222      	movs	r2, #34	; 0x22
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2240      	movs	r2, #64	; 0x40
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004722:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004728:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4a5b      	ldr	r2, [pc, #364]	; (80048a4 <HAL_I2C_Mem_Read+0x228>)
 8004738:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800473a:	88f8      	ldrh	r0, [r7, #6]
 800473c:	893a      	ldrh	r2, [r7, #8]
 800473e:	8979      	ldrh	r1, [r7, #10]
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	9301      	str	r3, [sp, #4]
 8004744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	4603      	mov	r3, r0
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 fa52 	bl	8004bf4 <I2C_RequestMemoryRead>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e1b0      	b.n	8004abc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475e:	2b00      	cmp	r3, #0
 8004760:	d113      	bne.n	800478a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004762:	2300      	movs	r3, #0
 8004764:	623b      	str	r3, [r7, #32]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	623b      	str	r3, [r7, #32]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	623b      	str	r3, [r7, #32]
 8004776:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	e184      	b.n	8004a94 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478e:	2b01      	cmp	r3, #1
 8004790:	d11b      	bne.n	80047ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a2:	2300      	movs	r3, #0
 80047a4:	61fb      	str	r3, [r7, #28]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	61fb      	str	r3, [r7, #28]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	61fb      	str	r3, [r7, #28]
 80047b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	e164      	b.n	8004a94 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d11b      	bne.n	800480a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f2:	2300      	movs	r3, #0
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	e144      	b.n	8004a94 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004820:	e138      	b.n	8004a94 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004826:	2b03      	cmp	r3, #3
 8004828:	f200 80f1 	bhi.w	8004a0e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004830:	2b01      	cmp	r3, #1
 8004832:	d123      	bne.n	800487c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004836:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 fc1b 	bl	8005074 <I2C_WaitOnRXNEFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e139      	b.n	8004abc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	855a      	strh	r2, [r3, #42]	; 0x2a
 800487a:	e10b      	b.n	8004a94 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004880:	2b02      	cmp	r3, #2
 8004882:	d14e      	bne.n	8004922 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488a:	2200      	movs	r2, #0
 800488c:	4906      	ldr	r1, [pc, #24]	; (80048a8 <HAL_I2C_Mem_Read+0x22c>)
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 fa98 	bl	8004dc4 <I2C_WaitOnFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d008      	beq.n	80048ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e10e      	b.n	8004abc <HAL_I2C_Mem_Read+0x440>
 800489e:	bf00      	nop
 80048a0:	00100002 	.word	0x00100002
 80048a4:	ffff0000 	.word	0xffff0000
 80048a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490a:	3b01      	subs	r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004920:	e0b8      	b.n	8004a94 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004928:	2200      	movs	r2, #0
 800492a:	4966      	ldr	r1, [pc, #408]	; (8004ac4 <HAL_I2C_Mem_Read+0x448>)
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 fa49 	bl	8004dc4 <I2C_WaitOnFlagUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0bf      	b.n	8004abc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800494a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691a      	ldr	r2, [r3, #16]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004984:	2200      	movs	r2, #0
 8004986:	494f      	ldr	r1, [pc, #316]	; (8004ac4 <HAL_I2C_Mem_Read+0x448>)
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 fa1b 	bl	8004dc4 <I2C_WaitOnFlagUntilTimeout>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e091      	b.n	8004abc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a0c:	e042      	b.n	8004a94 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 fb2e 	bl	8005074 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e04c      	b.n	8004abc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	b2d2      	uxtb	r2, r2
 8004a2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d118      	bne.n	8004a94 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f47f aec2 	bne.w	8004822 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e000      	b.n	8004abc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004aba:	2302      	movs	r3, #2
  }
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3728      	adds	r7, #40	; 0x28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	00010004 	.word	0x00010004

08004ac8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	4608      	mov	r0, r1
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	817b      	strh	r3, [r7, #10]
 8004ada:	460b      	mov	r3, r1
 8004adc:	813b      	strh	r3, [r7, #8]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004af0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 f960 	bl	8004dc4 <I2C_WaitOnFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00d      	beq.n	8004b26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b18:	d103      	bne.n	8004b22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e05f      	b.n	8004be6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b26:	897b      	ldrh	r3, [r7, #10]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	6a3a      	ldr	r2, [r7, #32]
 8004b3a:	492d      	ldr	r1, [pc, #180]	; (8004bf0 <I2C_RequestMemoryWrite+0x128>)
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f998 	bl	8004e72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e04c      	b.n	8004be6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b64:	6a39      	ldr	r1, [r7, #32]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fa02 	bl	8004f70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00d      	beq.n	8004b8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d107      	bne.n	8004b8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e02b      	b.n	8004be6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d105      	bne.n	8004ba0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b94:	893b      	ldrh	r3, [r7, #8]
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	611a      	str	r2, [r3, #16]
 8004b9e:	e021      	b.n	8004be4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ba0:	893b      	ldrh	r3, [r7, #8]
 8004ba2:	0a1b      	lsrs	r3, r3, #8
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb0:	6a39      	ldr	r1, [r7, #32]
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 f9dc 	bl	8004f70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00d      	beq.n	8004bda <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d107      	bne.n	8004bd6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e005      	b.n	8004be6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bda:	893b      	ldrh	r3, [r7, #8]
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	00010002 	.word	0x00010002

08004bf4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	4611      	mov	r1, r2
 8004c00:	461a      	mov	r2, r3
 8004c02:	4603      	mov	r3, r0
 8004c04:	817b      	strh	r3, [r7, #10]
 8004c06:	460b      	mov	r3, r1
 8004c08:	813b      	strh	r3, [r7, #8]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f8c2 	bl	8004dc4 <I2C_WaitOnFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00d      	beq.n	8004c62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c54:	d103      	bne.n	8004c5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e0aa      	b.n	8004db8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c62:	897b      	ldrh	r3, [r7, #10]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	6a3a      	ldr	r2, [r7, #32]
 8004c76:	4952      	ldr	r1, [pc, #328]	; (8004dc0 <I2C_RequestMemoryRead+0x1cc>)
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f8fa 	bl	8004e72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e097      	b.n	8004db8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca0:	6a39      	ldr	r1, [r7, #32]
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 f964 	bl	8004f70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00d      	beq.n	8004cca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d107      	bne.n	8004cc6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e076      	b.n	8004db8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d105      	bne.n	8004cdc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cd0:	893b      	ldrh	r3, [r7, #8]
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	611a      	str	r2, [r3, #16]
 8004cda:	e021      	b.n	8004d20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cdc:	893b      	ldrh	r3, [r7, #8]
 8004cde:	0a1b      	lsrs	r3, r3, #8
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cec:	6a39      	ldr	r1, [r7, #32]
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f93e 	bl	8004f70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00d      	beq.n	8004d16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d107      	bne.n	8004d12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e050      	b.n	8004db8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d16:	893b      	ldrh	r3, [r7, #8]
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d22:	6a39      	ldr	r1, [r7, #32]
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 f923 	bl	8004f70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00d      	beq.n	8004d4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d107      	bne.n	8004d48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e035      	b.n	8004db8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 f82b 	bl	8004dc4 <I2C_WaitOnFlagUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00d      	beq.n	8004d90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d82:	d103      	bne.n	8004d8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e013      	b.n	8004db8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d90:	897b      	ldrh	r3, [r7, #10]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	f043 0301 	orr.w	r3, r3, #1
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	6a3a      	ldr	r2, [r7, #32]
 8004da4:	4906      	ldr	r1, [pc, #24]	; (8004dc0 <I2C_RequestMemoryRead+0x1cc>)
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f863 	bl	8004e72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	00010002 	.word	0x00010002

08004dc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dd4:	e025      	b.n	8004e22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ddc:	d021      	beq.n	8004e22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dde:	f7fd fc09 	bl	80025f4 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d302      	bcc.n	8004df4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d116      	bne.n	8004e22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f043 0220 	orr.w	r2, r3, #32
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e023      	b.n	8004e6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	0c1b      	lsrs	r3, r3, #16
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d10d      	bne.n	8004e48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	43da      	mvns	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4013      	ands	r3, r2
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	bf0c      	ite	eq
 8004e3e:	2301      	moveq	r3, #1
 8004e40:	2300      	movne	r3, #0
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	e00c      	b.n	8004e62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	43da      	mvns	r2, r3
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4013      	ands	r3, r2
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	bf0c      	ite	eq
 8004e5a:	2301      	moveq	r3, #1
 8004e5c:	2300      	movne	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	461a      	mov	r2, r3
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d0b6      	beq.n	8004dd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b084      	sub	sp, #16
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e80:	e051      	b.n	8004f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e90:	d123      	bne.n	8004eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004eaa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f043 0204 	orr.w	r2, r3, #4
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e046      	b.n	8004f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ee0:	d021      	beq.n	8004f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee2:	f7fd fb87 	bl	80025f4 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d302      	bcc.n	8004ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d116      	bne.n	8004f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	f043 0220 	orr.w	r2, r3, #32
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e020      	b.n	8004f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	0c1b      	lsrs	r3, r3, #16
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d10c      	bne.n	8004f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	43da      	mvns	r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	bf14      	ite	ne
 8004f42:	2301      	movne	r3, #1
 8004f44:	2300      	moveq	r3, #0
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	e00b      	b.n	8004f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	43da      	mvns	r2, r3
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4013      	ands	r3, r2
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf14      	ite	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	2300      	moveq	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d18d      	bne.n	8004e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f7c:	e02d      	b.n	8004fda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 f8ce 	bl	8005120 <I2C_IsAcknowledgeFailed>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e02d      	b.n	8004fea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f94:	d021      	beq.n	8004fda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f96:	f7fd fb2d 	bl	80025f4 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d302      	bcc.n	8004fac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d116      	bne.n	8004fda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	f043 0220 	orr.w	r2, r3, #32
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e007      	b.n	8004fea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe4:	2b80      	cmp	r3, #128	; 0x80
 8004fe6:	d1ca      	bne.n	8004f7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ffe:	e02d      	b.n	800505c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 f88d 	bl	8005120 <I2C_IsAcknowledgeFailed>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e02d      	b.n	800506c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005016:	d021      	beq.n	800505c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005018:	f7fd faec 	bl	80025f4 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	429a      	cmp	r2, r3
 8005026:	d302      	bcc.n	800502e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d116      	bne.n	800505c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	f043 0220 	orr.w	r2, r3, #32
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e007      	b.n	800506c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f003 0304 	and.w	r3, r3, #4
 8005066:	2b04      	cmp	r3, #4
 8005068:	d1ca      	bne.n	8005000 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005080:	e042      	b.n	8005108 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b10      	cmp	r3, #16
 800508e:	d119      	bne.n	80050c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0210 	mvn.w	r2, #16
 8005098:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e029      	b.n	8005118 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c4:	f7fd fa96 	bl	80025f4 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d302      	bcc.n	80050da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d116      	bne.n	8005108 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f4:	f043 0220 	orr.w	r2, r3, #32
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e007      	b.n	8005118 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b40      	cmp	r3, #64	; 0x40
 8005114:	d1b5      	bne.n	8005082 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005136:	d11b      	bne.n	8005170 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005140:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	f043 0204 	orr.w	r2, r3, #4
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
	...

08005180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e267      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d075      	beq.n	800528a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800519e:	4b88      	ldr	r3, [pc, #544]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 030c 	and.w	r3, r3, #12
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d00c      	beq.n	80051c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051aa:	4b85      	ldr	r3, [pc, #532]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051b2:	2b08      	cmp	r3, #8
 80051b4:	d112      	bne.n	80051dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051b6:	4b82      	ldr	r3, [pc, #520]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051c2:	d10b      	bne.n	80051dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c4:	4b7e      	ldr	r3, [pc, #504]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d05b      	beq.n	8005288 <HAL_RCC_OscConfig+0x108>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d157      	bne.n	8005288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e242      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e4:	d106      	bne.n	80051f4 <HAL_RCC_OscConfig+0x74>
 80051e6:	4b76      	ldr	r3, [pc, #472]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a75      	ldr	r2, [pc, #468]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80051ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	e01d      	b.n	8005230 <HAL_RCC_OscConfig+0xb0>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051fc:	d10c      	bne.n	8005218 <HAL_RCC_OscConfig+0x98>
 80051fe:	4b70      	ldr	r3, [pc, #448]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a6f      	ldr	r2, [pc, #444]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	4b6d      	ldr	r3, [pc, #436]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a6c      	ldr	r2, [pc, #432]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	e00b      	b.n	8005230 <HAL_RCC_OscConfig+0xb0>
 8005218:	4b69      	ldr	r3, [pc, #420]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a68      	ldr	r2, [pc, #416]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800521e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	4b66      	ldr	r3, [pc, #408]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a65      	ldr	r2, [pc, #404]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800522a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800522e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d013      	beq.n	8005260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005238:	f7fd f9dc 	bl	80025f4 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005240:	f7fd f9d8 	bl	80025f4 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b64      	cmp	r3, #100	; 0x64
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e207      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005252:	4b5b      	ldr	r3, [pc, #364]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0f0      	beq.n	8005240 <HAL_RCC_OscConfig+0xc0>
 800525e:	e014      	b.n	800528a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005260:	f7fd f9c8 	bl	80025f4 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005268:	f7fd f9c4 	bl	80025f4 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b64      	cmp	r3, #100	; 0x64
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e1f3      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800527a:	4b51      	ldr	r3, [pc, #324]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0xe8>
 8005286:	e000      	b.n	800528a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d063      	beq.n	800535e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005296:	4b4a      	ldr	r3, [pc, #296]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 030c 	and.w	r3, r3, #12
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00b      	beq.n	80052ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052a2:	4b47      	ldr	r3, [pc, #284]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d11c      	bne.n	80052e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ae:	4b44      	ldr	r3, [pc, #272]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d116      	bne.n	80052e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ba:	4b41      	ldr	r3, [pc, #260]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d005      	beq.n	80052d2 <HAL_RCC_OscConfig+0x152>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d001      	beq.n	80052d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e1c7      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d2:	4b3b      	ldr	r3, [pc, #236]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	4937      	ldr	r1, [pc, #220]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052e6:	e03a      	b.n	800535e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d020      	beq.n	8005332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052f0:	4b34      	ldr	r3, [pc, #208]	; (80053c4 <HAL_RCC_OscConfig+0x244>)
 80052f2:	2201      	movs	r2, #1
 80052f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f6:	f7fd f97d 	bl	80025f4 <HAL_GetTick>
 80052fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052fc:	e008      	b.n	8005310 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052fe:	f7fd f979 	bl	80025f4 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e1a8      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005310:	4b2b      	ldr	r3, [pc, #172]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0f0      	beq.n	80052fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800531c:	4b28      	ldr	r3, [pc, #160]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	4925      	ldr	r1, [pc, #148]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800532c:	4313      	orrs	r3, r2
 800532e:	600b      	str	r3, [r1, #0]
 8005330:	e015      	b.n	800535e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005332:	4b24      	ldr	r3, [pc, #144]	; (80053c4 <HAL_RCC_OscConfig+0x244>)
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005338:	f7fd f95c 	bl	80025f4 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005340:	f7fd f958 	bl	80025f4 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e187      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005352:	4b1b      	ldr	r3, [pc, #108]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f0      	bne.n	8005340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d036      	beq.n	80053d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d016      	beq.n	80053a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005372:	4b15      	ldr	r3, [pc, #84]	; (80053c8 <HAL_RCC_OscConfig+0x248>)
 8005374:	2201      	movs	r2, #1
 8005376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005378:	f7fd f93c 	bl	80025f4 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005380:	f7fd f938 	bl	80025f4 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e167      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005392:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f0      	beq.n	8005380 <HAL_RCC_OscConfig+0x200>
 800539e:	e01b      	b.n	80053d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053a0:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <HAL_RCC_OscConfig+0x248>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053a6:	f7fd f925 	bl	80025f4 <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053ac:	e00e      	b.n	80053cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053ae:	f7fd f921 	bl	80025f4 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d907      	bls.n	80053cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e150      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
 80053c0:	40023800 	.word	0x40023800
 80053c4:	42470000 	.word	0x42470000
 80053c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053cc:	4b88      	ldr	r3, [pc, #544]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80053ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1ea      	bne.n	80053ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 8097 	beq.w	8005514 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053e6:	2300      	movs	r3, #0
 80053e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ea:	4b81      	ldr	r3, [pc, #516]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10f      	bne.n	8005416 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053f6:	2300      	movs	r3, #0
 80053f8:	60bb      	str	r3, [r7, #8]
 80053fa:	4b7d      	ldr	r3, [pc, #500]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	4a7c      	ldr	r2, [pc, #496]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005404:	6413      	str	r3, [r2, #64]	; 0x40
 8005406:	4b7a      	ldr	r3, [pc, #488]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540e:	60bb      	str	r3, [r7, #8]
 8005410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005412:	2301      	movs	r3, #1
 8005414:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005416:	4b77      	ldr	r3, [pc, #476]	; (80055f4 <HAL_RCC_OscConfig+0x474>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541e:	2b00      	cmp	r3, #0
 8005420:	d118      	bne.n	8005454 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005422:	4b74      	ldr	r3, [pc, #464]	; (80055f4 <HAL_RCC_OscConfig+0x474>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a73      	ldr	r2, [pc, #460]	; (80055f4 <HAL_RCC_OscConfig+0x474>)
 8005428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800542c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800542e:	f7fd f8e1 	bl	80025f4 <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005436:	f7fd f8dd 	bl	80025f4 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e10c      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005448:	4b6a      	ldr	r3, [pc, #424]	; (80055f4 <HAL_RCC_OscConfig+0x474>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0f0      	beq.n	8005436 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d106      	bne.n	800546a <HAL_RCC_OscConfig+0x2ea>
 800545c:	4b64      	ldr	r3, [pc, #400]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 800545e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005460:	4a63      	ldr	r2, [pc, #396]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005462:	f043 0301 	orr.w	r3, r3, #1
 8005466:	6713      	str	r3, [r2, #112]	; 0x70
 8005468:	e01c      	b.n	80054a4 <HAL_RCC_OscConfig+0x324>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b05      	cmp	r3, #5
 8005470:	d10c      	bne.n	800548c <HAL_RCC_OscConfig+0x30c>
 8005472:	4b5f      	ldr	r3, [pc, #380]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005476:	4a5e      	ldr	r2, [pc, #376]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005478:	f043 0304 	orr.w	r3, r3, #4
 800547c:	6713      	str	r3, [r2, #112]	; 0x70
 800547e:	4b5c      	ldr	r3, [pc, #368]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005482:	4a5b      	ldr	r2, [pc, #364]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	6713      	str	r3, [r2, #112]	; 0x70
 800548a:	e00b      	b.n	80054a4 <HAL_RCC_OscConfig+0x324>
 800548c:	4b58      	ldr	r3, [pc, #352]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 800548e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005490:	4a57      	ldr	r2, [pc, #348]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005492:	f023 0301 	bic.w	r3, r3, #1
 8005496:	6713      	str	r3, [r2, #112]	; 0x70
 8005498:	4b55      	ldr	r3, [pc, #340]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 800549a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549c:	4a54      	ldr	r2, [pc, #336]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 800549e:	f023 0304 	bic.w	r3, r3, #4
 80054a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d015      	beq.n	80054d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ac:	f7fd f8a2 	bl	80025f4 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b2:	e00a      	b.n	80054ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054b4:	f7fd f89e 	bl	80025f4 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e0cb      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ca:	4b49      	ldr	r3, [pc, #292]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80054cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0ee      	beq.n	80054b4 <HAL_RCC_OscConfig+0x334>
 80054d6:	e014      	b.n	8005502 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054d8:	f7fd f88c 	bl	80025f4 <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054de:	e00a      	b.n	80054f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054e0:	f7fd f888 	bl	80025f4 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e0b5      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054f6:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1ee      	bne.n	80054e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005502:	7dfb      	ldrb	r3, [r7, #23]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d105      	bne.n	8005514 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005508:	4b39      	ldr	r3, [pc, #228]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	4a38      	ldr	r2, [pc, #224]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 800550e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005512:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 80a1 	beq.w	8005660 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800551e:	4b34      	ldr	r3, [pc, #208]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 030c 	and.w	r3, r3, #12
 8005526:	2b08      	cmp	r3, #8
 8005528:	d05c      	beq.n	80055e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d141      	bne.n	80055b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005532:	4b31      	ldr	r3, [pc, #196]	; (80055f8 <HAL_RCC_OscConfig+0x478>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005538:	f7fd f85c 	bl	80025f4 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005540:	f7fd f858 	bl	80025f4 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e087      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005552:	4b27      	ldr	r3, [pc, #156]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f0      	bne.n	8005540 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69da      	ldr	r2, [r3, #28]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	019b      	lsls	r3, r3, #6
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005574:	085b      	lsrs	r3, r3, #1
 8005576:	3b01      	subs	r3, #1
 8005578:	041b      	lsls	r3, r3, #16
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	061b      	lsls	r3, r3, #24
 8005582:	491b      	ldr	r1, [pc, #108]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005584:	4313      	orrs	r3, r2
 8005586:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005588:	4b1b      	ldr	r3, [pc, #108]	; (80055f8 <HAL_RCC_OscConfig+0x478>)
 800558a:	2201      	movs	r2, #1
 800558c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800558e:	f7fd f831 	bl	80025f4 <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005596:	f7fd f82d 	bl	80025f4 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e05c      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055a8:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0f0      	beq.n	8005596 <HAL_RCC_OscConfig+0x416>
 80055b4:	e054      	b.n	8005660 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b6:	4b10      	ldr	r3, [pc, #64]	; (80055f8 <HAL_RCC_OscConfig+0x478>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055bc:	f7fd f81a 	bl	80025f4 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055c4:	f7fd f816 	bl	80025f4 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e045      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d6:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_OscConfig+0x444>
 80055e2:	e03d      	b.n	8005660 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d107      	bne.n	80055fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e038      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
 80055f0:	40023800 	.word	0x40023800
 80055f4:	40007000 	.word	0x40007000
 80055f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055fc:	4b1b      	ldr	r3, [pc, #108]	; (800566c <HAL_RCC_OscConfig+0x4ec>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d028      	beq.n	800565c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005614:	429a      	cmp	r2, r3
 8005616:	d121      	bne.n	800565c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005622:	429a      	cmp	r2, r3
 8005624:	d11a      	bne.n	800565c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800562c:	4013      	ands	r3, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005634:	4293      	cmp	r3, r2
 8005636:	d111      	bne.n	800565c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005642:	085b      	lsrs	r3, r3, #1
 8005644:	3b01      	subs	r3, #1
 8005646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005648:	429a      	cmp	r2, r3
 800564a:	d107      	bne.n	800565c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005658:	429a      	cmp	r2, r3
 800565a:	d001      	beq.n	8005660 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	40023800 	.word	0x40023800

08005670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e0cc      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005684:	4b68      	ldr	r3, [pc, #416]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d90c      	bls.n	80056ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005692:	4b65      	ldr	r3, [pc, #404]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800569a:	4b63      	ldr	r3, [pc, #396]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d001      	beq.n	80056ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0b8      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d020      	beq.n	80056fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056c4:	4b59      	ldr	r3, [pc, #356]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	4a58      	ldr	r2, [pc, #352]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056dc:	4b53      	ldr	r3, [pc, #332]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4a52      	ldr	r2, [pc, #328]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056e8:	4b50      	ldr	r3, [pc, #320]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	494d      	ldr	r1, [pc, #308]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d044      	beq.n	8005790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d107      	bne.n	800571e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800570e:	4b47      	ldr	r3, [pc, #284]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d119      	bne.n	800574e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e07f      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d003      	beq.n	800572e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800572a:	2b03      	cmp	r3, #3
 800572c:	d107      	bne.n	800573e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800572e:	4b3f      	ldr	r3, [pc, #252]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d109      	bne.n	800574e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e06f      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800573e:	4b3b      	ldr	r3, [pc, #236]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e067      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800574e:	4b37      	ldr	r3, [pc, #220]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f023 0203 	bic.w	r2, r3, #3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	4934      	ldr	r1, [pc, #208]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 800575c:	4313      	orrs	r3, r2
 800575e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005760:	f7fc ff48 	bl	80025f4 <HAL_GetTick>
 8005764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005766:	e00a      	b.n	800577e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005768:	f7fc ff44 	bl	80025f4 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	f241 3288 	movw	r2, #5000	; 0x1388
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e04f      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577e:	4b2b      	ldr	r3, [pc, #172]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 020c 	and.w	r2, r3, #12
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	429a      	cmp	r2, r3
 800578e:	d1eb      	bne.n	8005768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005790:	4b25      	ldr	r3, [pc, #148]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d20c      	bcs.n	80057b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579e:	4b22      	ldr	r3, [pc, #136]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a6:	4b20      	ldr	r3, [pc, #128]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d001      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e032      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d008      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c4:	4b19      	ldr	r3, [pc, #100]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	4916      	ldr	r1, [pc, #88]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d009      	beq.n	80057f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057e2:	4b12      	ldr	r3, [pc, #72]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	490e      	ldr	r1, [pc, #56]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057f6:	f000 f821 	bl	800583c <HAL_RCC_GetSysClockFreq>
 80057fa:	4602      	mov	r2, r0
 80057fc:	4b0b      	ldr	r3, [pc, #44]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	490a      	ldr	r1, [pc, #40]	; (8005830 <HAL_RCC_ClockConfig+0x1c0>)
 8005808:	5ccb      	ldrb	r3, [r1, r3]
 800580a:	fa22 f303 	lsr.w	r3, r2, r3
 800580e:	4a09      	ldr	r2, [pc, #36]	; (8005834 <HAL_RCC_ClockConfig+0x1c4>)
 8005810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005812:	4b09      	ldr	r3, [pc, #36]	; (8005838 <HAL_RCC_ClockConfig+0x1c8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f7fc fea8 	bl	800256c <HAL_InitTick>

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	40023c00 	.word	0x40023c00
 800582c:	40023800 	.word	0x40023800
 8005830:	0800a9bc 	.word	0x0800a9bc
 8005834:	20000000 	.word	0x20000000
 8005838:	20000004 	.word	0x20000004

0800583c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800583c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005840:	b094      	sub	sp, #80	; 0x50
 8005842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	647b      	str	r3, [r7, #68]	; 0x44
 8005848:	2300      	movs	r3, #0
 800584a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800584c:	2300      	movs	r3, #0
 800584e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005854:	4b79      	ldr	r3, [pc, #484]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f003 030c 	and.w	r3, r3, #12
 800585c:	2b08      	cmp	r3, #8
 800585e:	d00d      	beq.n	800587c <HAL_RCC_GetSysClockFreq+0x40>
 8005860:	2b08      	cmp	r3, #8
 8005862:	f200 80e1 	bhi.w	8005a28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <HAL_RCC_GetSysClockFreq+0x34>
 800586a:	2b04      	cmp	r3, #4
 800586c:	d003      	beq.n	8005876 <HAL_RCC_GetSysClockFreq+0x3a>
 800586e:	e0db      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005870:	4b73      	ldr	r3, [pc, #460]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8005872:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005874:	e0db      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005876:	4b73      	ldr	r3, [pc, #460]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x208>)
 8005878:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800587a:	e0d8      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800587c:	4b6f      	ldr	r3, [pc, #444]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005884:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005886:	4b6d      	ldr	r3, [pc, #436]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d063      	beq.n	800595a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005892:	4b6a      	ldr	r3, [pc, #424]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	099b      	lsrs	r3, r3, #6
 8005898:	2200      	movs	r2, #0
 800589a:	63bb      	str	r3, [r7, #56]	; 0x38
 800589c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800589e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a4:	633b      	str	r3, [r7, #48]	; 0x30
 80058a6:	2300      	movs	r3, #0
 80058a8:	637b      	str	r3, [r7, #52]	; 0x34
 80058aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80058ae:	4622      	mov	r2, r4
 80058b0:	462b      	mov	r3, r5
 80058b2:	f04f 0000 	mov.w	r0, #0
 80058b6:	f04f 0100 	mov.w	r1, #0
 80058ba:	0159      	lsls	r1, r3, #5
 80058bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058c0:	0150      	lsls	r0, r2, #5
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4621      	mov	r1, r4
 80058c8:	1a51      	subs	r1, r2, r1
 80058ca:	6139      	str	r1, [r7, #16]
 80058cc:	4629      	mov	r1, r5
 80058ce:	eb63 0301 	sbc.w	r3, r3, r1
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058e0:	4659      	mov	r1, fp
 80058e2:	018b      	lsls	r3, r1, #6
 80058e4:	4651      	mov	r1, sl
 80058e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058ea:	4651      	mov	r1, sl
 80058ec:	018a      	lsls	r2, r1, #6
 80058ee:	4651      	mov	r1, sl
 80058f0:	ebb2 0801 	subs.w	r8, r2, r1
 80058f4:	4659      	mov	r1, fp
 80058f6:	eb63 0901 	sbc.w	r9, r3, r1
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	f04f 0300 	mov.w	r3, #0
 8005902:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005906:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800590a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800590e:	4690      	mov	r8, r2
 8005910:	4699      	mov	r9, r3
 8005912:	4623      	mov	r3, r4
 8005914:	eb18 0303 	adds.w	r3, r8, r3
 8005918:	60bb      	str	r3, [r7, #8]
 800591a:	462b      	mov	r3, r5
 800591c:	eb49 0303 	adc.w	r3, r9, r3
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	f04f 0200 	mov.w	r2, #0
 8005926:	f04f 0300 	mov.w	r3, #0
 800592a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800592e:	4629      	mov	r1, r5
 8005930:	024b      	lsls	r3, r1, #9
 8005932:	4621      	mov	r1, r4
 8005934:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005938:	4621      	mov	r1, r4
 800593a:	024a      	lsls	r2, r1, #9
 800593c:	4610      	mov	r0, r2
 800593e:	4619      	mov	r1, r3
 8005940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005942:	2200      	movs	r2, #0
 8005944:	62bb      	str	r3, [r7, #40]	; 0x28
 8005946:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005948:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800594c:	f7fb f97c 	bl	8000c48 <__aeabi_uldivmod>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	4613      	mov	r3, r2
 8005956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005958:	e058      	b.n	8005a0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800595a:	4b38      	ldr	r3, [pc, #224]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	099b      	lsrs	r3, r3, #6
 8005960:	2200      	movs	r2, #0
 8005962:	4618      	mov	r0, r3
 8005964:	4611      	mov	r1, r2
 8005966:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800596a:	623b      	str	r3, [r7, #32]
 800596c:	2300      	movs	r3, #0
 800596e:	627b      	str	r3, [r7, #36]	; 0x24
 8005970:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005974:	4642      	mov	r2, r8
 8005976:	464b      	mov	r3, r9
 8005978:	f04f 0000 	mov.w	r0, #0
 800597c:	f04f 0100 	mov.w	r1, #0
 8005980:	0159      	lsls	r1, r3, #5
 8005982:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005986:	0150      	lsls	r0, r2, #5
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	4641      	mov	r1, r8
 800598e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005992:	4649      	mov	r1, r9
 8005994:	eb63 0b01 	sbc.w	fp, r3, r1
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059ac:	ebb2 040a 	subs.w	r4, r2, sl
 80059b0:	eb63 050b 	sbc.w	r5, r3, fp
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	00eb      	lsls	r3, r5, #3
 80059be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059c2:	00e2      	lsls	r2, r4, #3
 80059c4:	4614      	mov	r4, r2
 80059c6:	461d      	mov	r5, r3
 80059c8:	4643      	mov	r3, r8
 80059ca:	18e3      	adds	r3, r4, r3
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	464b      	mov	r3, r9
 80059d0:	eb45 0303 	adc.w	r3, r5, r3
 80059d4:	607b      	str	r3, [r7, #4]
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	f04f 0300 	mov.w	r3, #0
 80059de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059e2:	4629      	mov	r1, r5
 80059e4:	028b      	lsls	r3, r1, #10
 80059e6:	4621      	mov	r1, r4
 80059e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059ec:	4621      	mov	r1, r4
 80059ee:	028a      	lsls	r2, r1, #10
 80059f0:	4610      	mov	r0, r2
 80059f2:	4619      	mov	r1, r3
 80059f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059f6:	2200      	movs	r2, #0
 80059f8:	61bb      	str	r3, [r7, #24]
 80059fa:	61fa      	str	r2, [r7, #28]
 80059fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a00:	f7fb f922 	bl	8000c48 <__aeabi_uldivmod>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4613      	mov	r3, r2
 8005a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	0c1b      	lsrs	r3, r3, #16
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	3301      	adds	r3, #1
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005a1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a26:	e002      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a28:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3750      	adds	r7, #80	; 0x50
 8005a34:	46bd      	mov	sp, r7
 8005a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a3a:	bf00      	nop
 8005a3c:	40023800 	.word	0x40023800
 8005a40:	00f42400 	.word	0x00f42400
 8005a44:	007a1200 	.word	0x007a1200

08005a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a4c:	4b03      	ldr	r3, [pc, #12]	; (8005a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	20000000 	.word	0x20000000

08005a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a64:	f7ff fff0 	bl	8005a48 <HAL_RCC_GetHCLKFreq>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	0a9b      	lsrs	r3, r3, #10
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	4903      	ldr	r1, [pc, #12]	; (8005a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a76:	5ccb      	ldrb	r3, [r1, r3]
 8005a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40023800 	.word	0x40023800
 8005a84:	0800a9cc 	.word	0x0800a9cc

08005a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a8c:	f7ff ffdc 	bl	8005a48 <HAL_RCC_GetHCLKFreq>
 8005a90:	4602      	mov	r2, r0
 8005a92:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	0b5b      	lsrs	r3, r3, #13
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	4903      	ldr	r1, [pc, #12]	; (8005aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a9e:	5ccb      	ldrb	r3, [r1, r3]
 8005aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	0800a9cc 	.word	0x0800a9cc

08005ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e041      	b.n	8005b46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7fc fb08 	bl	80020ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3304      	adds	r3, #4
 8005aec:	4619      	mov	r1, r3
 8005aee:	4610      	mov	r0, r2
 8005af0:	f000 f9ce 	bl	8005e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d001      	beq.n	8005b68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e04e      	b.n	8005c06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0201 	orr.w	r2, r2, #1
 8005b7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a23      	ldr	r2, [pc, #140]	; (8005c14 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d022      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b92:	d01d      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a1f      	ldr	r2, [pc, #124]	; (8005c18 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d018      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a1e      	ldr	r2, [pc, #120]	; (8005c1c <HAL_TIM_Base_Start_IT+0xcc>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d013      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a1c      	ldr	r2, [pc, #112]	; (8005c20 <HAL_TIM_Base_Start_IT+0xd0>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d00e      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1b      	ldr	r2, [pc, #108]	; (8005c24 <HAL_TIM_Base_Start_IT+0xd4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d009      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a19      	ldr	r2, [pc, #100]	; (8005c28 <HAL_TIM_Base_Start_IT+0xd8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d004      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a18      	ldr	r2, [pc, #96]	; (8005c2c <HAL_TIM_Base_Start_IT+0xdc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d111      	bne.n	8005bf4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b06      	cmp	r3, #6
 8005be0:	d010      	beq.n	8005c04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f042 0201 	orr.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf2:	e007      	b.n	8005c04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0201 	orr.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	40010000 	.word	0x40010000
 8005c18:	40000400 	.word	0x40000400
 8005c1c:	40000800 	.word	0x40000800
 8005c20:	40000c00 	.word	0x40000c00
 8005c24:	40010400 	.word	0x40010400
 8005c28:	40014000 	.word	0x40014000
 8005c2c:	40001800 	.word	0x40001800

08005c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d122      	bne.n	8005c8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d11b      	bne.n	8005c8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0202 	mvn.w	r2, #2
 8005c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	f003 0303 	and.w	r3, r3, #3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f8ee 	bl	8005e54 <HAL_TIM_IC_CaptureCallback>
 8005c78:	e005      	b.n	8005c86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f8e0 	bl	8005e40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f8f1 	bl	8005e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	f003 0304 	and.w	r3, r3, #4
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d122      	bne.n	8005ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d11b      	bne.n	8005ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f06f 0204 	mvn.w	r2, #4
 8005cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f8c4 	bl	8005e54 <HAL_TIM_IC_CaptureCallback>
 8005ccc:	e005      	b.n	8005cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f8b6 	bl	8005e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f8c7 	bl	8005e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f003 0308 	and.w	r3, r3, #8
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	d122      	bne.n	8005d34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d11b      	bne.n	8005d34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f06f 0208 	mvn.w	r2, #8
 8005d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2204      	movs	r2, #4
 8005d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f89a 	bl	8005e54 <HAL_TIM_IC_CaptureCallback>
 8005d20:	e005      	b.n	8005d2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f88c 	bl	8005e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f89d 	bl	8005e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f003 0310 	and.w	r3, r3, #16
 8005d3e:	2b10      	cmp	r3, #16
 8005d40:	d122      	bne.n	8005d88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f003 0310 	and.w	r3, r3, #16
 8005d4c:	2b10      	cmp	r3, #16
 8005d4e:	d11b      	bne.n	8005d88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f06f 0210 	mvn.w	r2, #16
 8005d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2208      	movs	r2, #8
 8005d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f870 	bl	8005e54 <HAL_TIM_IC_CaptureCallback>
 8005d74:	e005      	b.n	8005d82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f862 	bl	8005e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f873 	bl	8005e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d10e      	bne.n	8005db4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d107      	bne.n	8005db4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f06f 0201 	mvn.w	r2, #1
 8005dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7fb fdd2 	bl	8001958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dbe:	2b80      	cmp	r3, #128	; 0x80
 8005dc0:	d10e      	bne.n	8005de0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dcc:	2b80      	cmp	r3, #128	; 0x80
 8005dce:	d107      	bne.n	8005de0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f902 	bl	8005fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dea:	2b40      	cmp	r3, #64	; 0x40
 8005dec:	d10e      	bne.n	8005e0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df8:	2b40      	cmp	r3, #64	; 0x40
 8005dfa:	d107      	bne.n	8005e0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f838 	bl	8005e7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	d10e      	bne.n	8005e38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b20      	cmp	r3, #32
 8005e26:	d107      	bne.n	8005e38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f06f 0220 	mvn.w	r2, #32
 8005e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f8cc 	bl	8005fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e38:	bf00      	nop
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a40      	ldr	r2, [pc, #256]	; (8005fa4 <TIM_Base_SetConfig+0x114>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d013      	beq.n	8005ed0 <TIM_Base_SetConfig+0x40>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eae:	d00f      	beq.n	8005ed0 <TIM_Base_SetConfig+0x40>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a3d      	ldr	r2, [pc, #244]	; (8005fa8 <TIM_Base_SetConfig+0x118>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00b      	beq.n	8005ed0 <TIM_Base_SetConfig+0x40>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a3c      	ldr	r2, [pc, #240]	; (8005fac <TIM_Base_SetConfig+0x11c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d007      	beq.n	8005ed0 <TIM_Base_SetConfig+0x40>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a3b      	ldr	r2, [pc, #236]	; (8005fb0 <TIM_Base_SetConfig+0x120>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_Base_SetConfig+0x40>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a3a      	ldr	r2, [pc, #232]	; (8005fb4 <TIM_Base_SetConfig+0x124>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d108      	bne.n	8005ee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a2f      	ldr	r2, [pc, #188]	; (8005fa4 <TIM_Base_SetConfig+0x114>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d02b      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef0:	d027      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a2c      	ldr	r2, [pc, #176]	; (8005fa8 <TIM_Base_SetConfig+0x118>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d023      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a2b      	ldr	r2, [pc, #172]	; (8005fac <TIM_Base_SetConfig+0x11c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d01f      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a2a      	ldr	r2, [pc, #168]	; (8005fb0 <TIM_Base_SetConfig+0x120>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d01b      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a29      	ldr	r2, [pc, #164]	; (8005fb4 <TIM_Base_SetConfig+0x124>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d017      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a28      	ldr	r2, [pc, #160]	; (8005fb8 <TIM_Base_SetConfig+0x128>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d013      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a27      	ldr	r2, [pc, #156]	; (8005fbc <TIM_Base_SetConfig+0x12c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00f      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a26      	ldr	r2, [pc, #152]	; (8005fc0 <TIM_Base_SetConfig+0x130>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d00b      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a25      	ldr	r2, [pc, #148]	; (8005fc4 <TIM_Base_SetConfig+0x134>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d007      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a24      	ldr	r2, [pc, #144]	; (8005fc8 <TIM_Base_SetConfig+0x138>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d003      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a23      	ldr	r2, [pc, #140]	; (8005fcc <TIM_Base_SetConfig+0x13c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d108      	bne.n	8005f54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a0a      	ldr	r2, [pc, #40]	; (8005fa4 <TIM_Base_SetConfig+0x114>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d003      	beq.n	8005f88 <TIM_Base_SetConfig+0xf8>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a0c      	ldr	r2, [pc, #48]	; (8005fb4 <TIM_Base_SetConfig+0x124>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d103      	bne.n	8005f90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	615a      	str	r2, [r3, #20]
}
 8005f96:	bf00      	nop
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	40010000 	.word	0x40010000
 8005fa8:	40000400 	.word	0x40000400
 8005fac:	40000800 	.word	0x40000800
 8005fb0:	40000c00 	.word	0x40000c00
 8005fb4:	40010400 	.word	0x40010400
 8005fb8:	40014000 	.word	0x40014000
 8005fbc:	40014400 	.word	0x40014400
 8005fc0:	40014800 	.word	0x40014800
 8005fc4:	40001800 	.word	0x40001800
 8005fc8:	40001c00 	.word	0x40001c00
 8005fcc:	40002000 	.word	0x40002000

08005fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e03f      	b.n	800608a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fc f8aa 	bl	8002178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2224      	movs	r2, #36	; 0x24
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800603a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fddf 	bl	8006c00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	691a      	ldr	r2, [r3, #16]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	695a      	ldr	r2, [r3, #20]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2220      	movs	r2, #32
 8006084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b08a      	sub	sp, #40	; 0x28
 8006096:	af02      	add	r7, sp, #8
 8006098:	60f8      	str	r0, [r7, #12]
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	603b      	str	r3, [r7, #0]
 800609e:	4613      	mov	r3, r2
 80060a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	d17c      	bne.n	80061ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <HAL_UART_Transmit+0x2c>
 80060b8:	88fb      	ldrh	r3, [r7, #6]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e075      	b.n	80061ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_UART_Transmit+0x3e>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e06e      	b.n	80061ae <HAL_UART_Transmit+0x11c>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2221      	movs	r2, #33	; 0x21
 80060e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060e6:	f7fc fa85 	bl	80025f4 <HAL_GetTick>
 80060ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	88fa      	ldrh	r2, [r7, #6]
 80060f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	88fa      	ldrh	r2, [r7, #6]
 80060f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006100:	d108      	bne.n	8006114 <HAL_UART_Transmit+0x82>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d104      	bne.n	8006114 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800610a:	2300      	movs	r3, #0
 800610c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	61bb      	str	r3, [r7, #24]
 8006112:	e003      	b.n	800611c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006118:	2300      	movs	r3, #0
 800611a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006124:	e02a      	b.n	800617c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2200      	movs	r2, #0
 800612e:	2180      	movs	r1, #128	; 0x80
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 fb1f 	bl	8006774 <UART_WaitOnFlagUntilTimeout>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e036      	b.n	80061ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10b      	bne.n	800615e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006154:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	3302      	adds	r3, #2
 800615a:	61bb      	str	r3, [r7, #24]
 800615c:	e007      	b.n	800616e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	781a      	ldrb	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	3301      	adds	r3, #1
 800616c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006172:	b29b      	uxth	r3, r3
 8006174:	3b01      	subs	r3, #1
 8006176:	b29a      	uxth	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1cf      	bne.n	8006126 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2200      	movs	r2, #0
 800618e:	2140      	movs	r1, #64	; 0x40
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 faef 	bl	8006774 <UART_WaitOnFlagUntilTimeout>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e006      	b.n	80061ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	e000      	b.n	80061ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80061ac:	2302      	movs	r3, #2
  }
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3720      	adds	r7, #32
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	4613      	mov	r3, r2
 80061c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	d11d      	bne.n	800620c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <HAL_UART_Receive_IT+0x26>
 80061d6:	88fb      	ldrh	r3, [r7, #6]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e016      	b.n	800620e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d101      	bne.n	80061ee <HAL_UART_Receive_IT+0x38>
 80061ea:	2302      	movs	r3, #2
 80061ec:	e00f      	b.n	800620e <HAL_UART_Receive_IT+0x58>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061fc:	88fb      	ldrh	r3, [r7, #6]
 80061fe:	461a      	mov	r2, r3
 8006200:	68b9      	ldr	r1, [r7, #8]
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f000 fb24 	bl	8006850 <UART_Start_Receive_IT>
 8006208:	4603      	mov	r3, r0
 800620a:	e000      	b.n	800620e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800620c:	2302      	movs	r3, #2
  }
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b0ba      	sub	sp, #232	; 0xe8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800623e:	2300      	movs	r3, #0
 8006240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006244:	2300      	movs	r3, #0
 8006246:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800624a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10f      	bne.n	800627e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800625e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006262:	f003 0320 	and.w	r3, r3, #32
 8006266:	2b00      	cmp	r3, #0
 8006268:	d009      	beq.n	800627e <HAL_UART_IRQHandler+0x66>
 800626a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fc07 	bl	8006a8a <UART_Receive_IT>
      return;
 800627c:	e256      	b.n	800672c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800627e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 80de 	beq.w	8006444 <HAL_UART_IRQHandler+0x22c>
 8006288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d106      	bne.n	80062a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006298:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 80d1 	beq.w	8006444 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00b      	beq.n	80062c6 <HAL_UART_IRQHandler+0xae>
 80062ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d005      	beq.n	80062c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	f043 0201 	orr.w	r2, r3, #1
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00b      	beq.n	80062ea <HAL_UART_IRQHandler+0xd2>
 80062d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d005      	beq.n	80062ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	f043 0202 	orr.w	r2, r3, #2
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00b      	beq.n	800630e <HAL_UART_IRQHandler+0xf6>
 80062f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d005      	beq.n	800630e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	f043 0204 	orr.w	r2, r3, #4
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800630e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006312:	f003 0308 	and.w	r3, r3, #8
 8006316:	2b00      	cmp	r3, #0
 8006318:	d011      	beq.n	800633e <HAL_UART_IRQHandler+0x126>
 800631a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b00      	cmp	r3, #0
 8006324:	d105      	bne.n	8006332 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d005      	beq.n	800633e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	f043 0208 	orr.w	r2, r3, #8
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 81ed 	beq.w	8006722 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800634c:	f003 0320 	and.w	r3, r3, #32
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HAL_UART_IRQHandler+0x14e>
 8006354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fb92 	bl	8006a8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006370:	2b40      	cmp	r3, #64	; 0x40
 8006372:	bf0c      	ite	eq
 8006374:	2301      	moveq	r3, #1
 8006376:	2300      	movne	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d103      	bne.n	8006392 <HAL_UART_IRQHandler+0x17a>
 800638a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800638e:	2b00      	cmp	r3, #0
 8006390:	d04f      	beq.n	8006432 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fa9a 	bl	80068cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a2:	2b40      	cmp	r3, #64	; 0x40
 80063a4:	d141      	bne.n	800642a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3314      	adds	r3, #20
 80063ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063b4:	e853 3f00 	ldrex	r3, [r3]
 80063b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80063bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3314      	adds	r3, #20
 80063ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80063d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80063d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80063de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80063ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1d9      	bne.n	80063a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d013      	beq.n	8006422 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fe:	4a7d      	ldr	r2, [pc, #500]	; (80065f4 <HAL_UART_IRQHandler+0x3dc>)
 8006400:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	4618      	mov	r0, r3
 8006408:	f7fd fd07 	bl	8003e1a <HAL_DMA_Abort_IT>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d016      	beq.n	8006440 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800641c:	4610      	mov	r0, r2
 800641e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006420:	e00e      	b.n	8006440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f990 	bl	8006748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006428:	e00a      	b.n	8006440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f98c 	bl	8006748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006430:	e006      	b.n	8006440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f988 	bl	8006748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800643e:	e170      	b.n	8006722 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006440:	bf00      	nop
    return;
 8006442:	e16e      	b.n	8006722 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006448:	2b01      	cmp	r3, #1
 800644a:	f040 814a 	bne.w	80066e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800644e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 8143 	beq.w	80066e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800645c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 813c 	beq.w	80066e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800646a:	2300      	movs	r3, #0
 800646c:	60bb      	str	r3, [r7, #8]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60bb      	str	r3, [r7, #8]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	60bb      	str	r3, [r7, #8]
 800647e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648a:	2b40      	cmp	r3, #64	; 0x40
 800648c:	f040 80b4 	bne.w	80065f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800649c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 8140 	beq.w	8006726 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064ae:	429a      	cmp	r2, r3
 80064b0:	f080 8139 	bcs.w	8006726 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c6:	f000 8088 	beq.w	80065da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	330c      	adds	r3, #12
 80064d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064d8:	e853 3f00 	ldrex	r3, [r3]
 80064dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80064e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	330c      	adds	r3, #12
 80064f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80064f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006502:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006506:	e841 2300 	strex	r3, r2, [r1]
 800650a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800650e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1d9      	bne.n	80064ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3314      	adds	r3, #20
 800651c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006528:	f023 0301 	bic.w	r3, r3, #1
 800652c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3314      	adds	r3, #20
 8006536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800653a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800653e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006542:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006546:	e841 2300 	strex	r3, r2, [r1]
 800654a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800654c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1e1      	bne.n	8006516 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3314      	adds	r3, #20
 8006558:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3314      	adds	r3, #20
 8006572:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006576:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006578:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800657c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e3      	bne.n	8006552 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2220      	movs	r2, #32
 800658e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	330c      	adds	r3, #12
 800659e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a2:	e853 3f00 	ldrex	r3, [r3]
 80065a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065aa:	f023 0310 	bic.w	r3, r3, #16
 80065ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	330c      	adds	r3, #12
 80065b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80065bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80065be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e3      	bne.n	8006598 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fd fbb0 	bl	8003d3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	4619      	mov	r1, r3
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f8b6 	bl	800675c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065f0:	e099      	b.n	8006726 <HAL_UART_IRQHandler+0x50e>
 80065f2:	bf00      	nop
 80065f4:	08006993 	.word	0x08006993
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006600:	b29b      	uxth	r3, r3
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 808b 	beq.w	800672a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 8086 	beq.w	800672a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	330c      	adds	r3, #12
 8006624:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800662e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006630:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	330c      	adds	r3, #12
 800663e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006642:	647a      	str	r2, [r7, #68]	; 0x44
 8006644:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e3      	bne.n	800661e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3314      	adds	r3, #20
 800665c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	e853 3f00 	ldrex	r3, [r3]
 8006664:	623b      	str	r3, [r7, #32]
   return(result);
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	f023 0301 	bic.w	r3, r3, #1
 800666c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3314      	adds	r3, #20
 8006676:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800667a:	633a      	str	r2, [r7, #48]	; 0x30
 800667c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1e3      	bne.n	8006656 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2220      	movs	r2, #32
 8006692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	330c      	adds	r3, #12
 80066a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	e853 3f00 	ldrex	r3, [r3]
 80066aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 0310 	bic.w	r3, r3, #16
 80066b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	330c      	adds	r3, #12
 80066bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80066c0:	61fa      	str	r2, [r7, #28]
 80066c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c4:	69b9      	ldr	r1, [r7, #24]
 80066c6:	69fa      	ldr	r2, [r7, #28]
 80066c8:	e841 2300 	strex	r3, r2, [r1]
 80066cc:	617b      	str	r3, [r7, #20]
   return(result);
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1e3      	bne.n	800669c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f83e 	bl	800675c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066e0:	e023      	b.n	800672a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d009      	beq.n	8006702 <HAL_UART_IRQHandler+0x4ea>
 80066ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f95d 	bl	80069ba <UART_Transmit_IT>
    return;
 8006700:	e014      	b.n	800672c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00e      	beq.n	800672c <HAL_UART_IRQHandler+0x514>
 800670e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006716:	2b00      	cmp	r3, #0
 8006718:	d008      	beq.n	800672c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f99d 	bl	8006a5a <UART_EndTransmit_IT>
    return;
 8006720:	e004      	b.n	800672c <HAL_UART_IRQHandler+0x514>
    return;
 8006722:	bf00      	nop
 8006724:	e002      	b.n	800672c <HAL_UART_IRQHandler+0x514>
      return;
 8006726:	bf00      	nop
 8006728:	e000      	b.n	800672c <HAL_UART_IRQHandler+0x514>
      return;
 800672a:	bf00      	nop
  }
}
 800672c:	37e8      	adds	r7, #232	; 0xe8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop

08006734 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b090      	sub	sp, #64	; 0x40
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	603b      	str	r3, [r7, #0]
 8006780:	4613      	mov	r3, r2
 8006782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006784:	e050      	b.n	8006828 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800678c:	d04c      	beq.n	8006828 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800678e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006790:	2b00      	cmp	r3, #0
 8006792:	d007      	beq.n	80067a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006794:	f7fb ff2e 	bl	80025f4 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d241      	bcs.n	8006828 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	330c      	adds	r3, #12
 80067aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	e853 3f00 	ldrex	r3, [r3]
 80067b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	330c      	adds	r3, #12
 80067c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067c4:	637a      	str	r2, [r7, #52]	; 0x34
 80067c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067cc:	e841 2300 	strex	r3, r2, [r1]
 80067d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e5      	bne.n	80067a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3314      	adds	r3, #20
 80067de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	e853 3f00 	ldrex	r3, [r3]
 80067e6:	613b      	str	r3, [r7, #16]
   return(result);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f023 0301 	bic.w	r3, r3, #1
 80067ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3314      	adds	r3, #20
 80067f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067f8:	623a      	str	r2, [r7, #32]
 80067fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	69f9      	ldr	r1, [r7, #28]
 80067fe:	6a3a      	ldr	r2, [r7, #32]
 8006800:	e841 2300 	strex	r3, r2, [r1]
 8006804:	61bb      	str	r3, [r7, #24]
   return(result);
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e5      	bne.n	80067d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2220      	movs	r2, #32
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2220      	movs	r2, #32
 8006818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e00f      	b.n	8006848 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	4013      	ands	r3, r2
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	429a      	cmp	r2, r3
 8006836:	bf0c      	ite	eq
 8006838:	2301      	moveq	r3, #1
 800683a:	2300      	movne	r3, #0
 800683c:	b2db      	uxtb	r3, r3
 800683e:	461a      	mov	r2, r3
 8006840:	79fb      	ldrb	r3, [r7, #7]
 8006842:	429a      	cmp	r2, r3
 8006844:	d09f      	beq.n	8006786 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3740      	adds	r7, #64	; 0x40
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	4613      	mov	r3, r2
 800685c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	88fa      	ldrh	r2, [r7, #6]
 8006868:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	88fa      	ldrh	r2, [r7, #6]
 800686e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2222      	movs	r2, #34	; 0x22
 800687a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d007      	beq.n	800689e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800689c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	695a      	ldr	r2, [r3, #20]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f042 0201 	orr.w	r2, r2, #1
 80068ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f042 0220 	orr.w	r2, r2, #32
 80068bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b095      	sub	sp, #84	; 0x54
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	330c      	adds	r3, #12
 80068da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	330c      	adds	r3, #12
 80068f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068f4:	643a      	str	r2, [r7, #64]	; 0x40
 80068f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068fc:	e841 2300 	strex	r3, r2, [r1]
 8006900:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e5      	bne.n	80068d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3314      	adds	r3, #20
 800690e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	e853 3f00 	ldrex	r3, [r3]
 8006916:	61fb      	str	r3, [r7, #28]
   return(result);
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	f023 0301 	bic.w	r3, r3, #1
 800691e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3314      	adds	r3, #20
 8006926:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006928:	62fa      	str	r2, [r7, #44]	; 0x2c
 800692a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800692e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006930:	e841 2300 	strex	r3, r2, [r1]
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1e5      	bne.n	8006908 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006940:	2b01      	cmp	r3, #1
 8006942:	d119      	bne.n	8006978 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	330c      	adds	r3, #12
 800694a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	e853 3f00 	ldrex	r3, [r3]
 8006952:	60bb      	str	r3, [r7, #8]
   return(result);
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f023 0310 	bic.w	r3, r3, #16
 800695a:	647b      	str	r3, [r7, #68]	; 0x44
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	330c      	adds	r3, #12
 8006962:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006964:	61ba      	str	r2, [r7, #24]
 8006966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006968:	6979      	ldr	r1, [r7, #20]
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	e841 2300 	strex	r3, r2, [r1]
 8006970:	613b      	str	r3, [r7, #16]
   return(result);
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1e5      	bne.n	8006944 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2220      	movs	r2, #32
 800697c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006986:	bf00      	nop
 8006988:	3754      	adds	r7, #84	; 0x54
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b084      	sub	sp, #16
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f7ff fecb 	bl	8006748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069b2:	bf00      	nop
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b085      	sub	sp, #20
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b21      	cmp	r3, #33	; 0x21
 80069cc:	d13e      	bne.n	8006a4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d6:	d114      	bne.n	8006a02 <UART_Transmit_IT+0x48>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d110      	bne.n	8006a02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	1c9a      	adds	r2, r3, #2
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	621a      	str	r2, [r3, #32]
 8006a00:	e008      	b.n	8006a14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	1c59      	adds	r1, r3, #1
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	6211      	str	r1, [r2, #32]
 8006a0c:	781a      	ldrb	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	4619      	mov	r1, r3
 8006a22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10f      	bne.n	8006a48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	e000      	b.n	8006a4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a4c:	2302      	movs	r3, #2
  }
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b082      	sub	sp, #8
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68da      	ldr	r2, [r3, #12]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff fe5a 	bl	8006734 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b08c      	sub	sp, #48	; 0x30
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b22      	cmp	r3, #34	; 0x22
 8006a9c:	f040 80ab 	bne.w	8006bf6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa8:	d117      	bne.n	8006ada <UART_Receive_IT+0x50>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d113      	bne.n	8006ada <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad2:	1c9a      	adds	r2, r3, #2
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	629a      	str	r2, [r3, #40]	; 0x28
 8006ad8:	e026      	b.n	8006b28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aec:	d007      	beq.n	8006afe <UART_Receive_IT+0x74>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10a      	bne.n	8006b0c <UART_Receive_IT+0x82>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d106      	bne.n	8006b0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b08:	701a      	strb	r2, [r3, #0]
 8006b0a:	e008      	b.n	8006b1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	4619      	mov	r1, r3
 8006b36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d15a      	bne.n	8006bf2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68da      	ldr	r2, [r3, #12]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 0220 	bic.w	r2, r2, #32
 8006b4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68da      	ldr	r2, [r3, #12]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	695a      	ldr	r2, [r3, #20]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0201 	bic.w	r2, r2, #1
 8006b6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d135      	bne.n	8006be8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	330c      	adds	r3, #12
 8006b88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	e853 3f00 	ldrex	r3, [r3]
 8006b90:	613b      	str	r3, [r7, #16]
   return(result);
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f023 0310 	bic.w	r3, r3, #16
 8006b98:	627b      	str	r3, [r7, #36]	; 0x24
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	330c      	adds	r3, #12
 8006ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba2:	623a      	str	r2, [r7, #32]
 8006ba4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	69f9      	ldr	r1, [r7, #28]
 8006ba8:	6a3a      	ldr	r2, [r7, #32]
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e5      	bne.n	8006b82 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0310 	and.w	r3, r3, #16
 8006bc0:	2b10      	cmp	r3, #16
 8006bc2:	d10a      	bne.n	8006bda <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff fdbb 	bl	800675c <HAL_UARTEx_RxEventCallback>
 8006be6:	e002      	b.n	8006bee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7fa fed3 	bl	8001994 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	e002      	b.n	8006bf8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	e000      	b.n	8006bf8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006bf6:	2302      	movs	r3, #2
  }
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3730      	adds	r7, #48	; 0x30
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c04:	b0c0      	sub	sp, #256	; 0x100
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1c:	68d9      	ldr	r1, [r3, #12]
 8006c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	ea40 0301 	orr.w	r3, r0, r1
 8006c28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2e:	689a      	ldr	r2, [r3, #8]
 8006c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	431a      	orrs	r2, r3
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c58:	f021 010c 	bic.w	r1, r1, #12
 8006c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c66:	430b      	orrs	r3, r1
 8006c68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7a:	6999      	ldr	r1, [r3, #24]
 8006c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	ea40 0301 	orr.w	r3, r0, r1
 8006c86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4b8f      	ldr	r3, [pc, #572]	; (8006ecc <UART_SetConfig+0x2cc>)
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d005      	beq.n	8006ca0 <UART_SetConfig+0xa0>
 8006c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	4b8d      	ldr	r3, [pc, #564]	; (8006ed0 <UART_SetConfig+0x2d0>)
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d104      	bne.n	8006caa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ca0:	f7fe fef2 	bl	8005a88 <HAL_RCC_GetPCLK2Freq>
 8006ca4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ca8:	e003      	b.n	8006cb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006caa:	f7fe fed9 	bl	8005a60 <HAL_RCC_GetPCLK1Freq>
 8006cae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cbc:	f040 810c 	bne.w	8006ed8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006cce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006cd2:	4622      	mov	r2, r4
 8006cd4:	462b      	mov	r3, r5
 8006cd6:	1891      	adds	r1, r2, r2
 8006cd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8006cda:	415b      	adcs	r3, r3
 8006cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	eb12 0801 	adds.w	r8, r2, r1
 8006ce8:	4629      	mov	r1, r5
 8006cea:	eb43 0901 	adc.w	r9, r3, r1
 8006cee:	f04f 0200 	mov.w	r2, #0
 8006cf2:	f04f 0300 	mov.w	r3, #0
 8006cf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d02:	4690      	mov	r8, r2
 8006d04:	4699      	mov	r9, r3
 8006d06:	4623      	mov	r3, r4
 8006d08:	eb18 0303 	adds.w	r3, r8, r3
 8006d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d10:	462b      	mov	r3, r5
 8006d12:	eb49 0303 	adc.w	r3, r9, r3
 8006d16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d2e:	460b      	mov	r3, r1
 8006d30:	18db      	adds	r3, r3, r3
 8006d32:	653b      	str	r3, [r7, #80]	; 0x50
 8006d34:	4613      	mov	r3, r2
 8006d36:	eb42 0303 	adc.w	r3, r2, r3
 8006d3a:	657b      	str	r3, [r7, #84]	; 0x54
 8006d3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d44:	f7f9 ff80 	bl	8000c48 <__aeabi_uldivmod>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4b61      	ldr	r3, [pc, #388]	; (8006ed4 <UART_SetConfig+0x2d4>)
 8006d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d52:	095b      	lsrs	r3, r3, #5
 8006d54:	011c      	lsls	r4, r3, #4
 8006d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d68:	4642      	mov	r2, r8
 8006d6a:	464b      	mov	r3, r9
 8006d6c:	1891      	adds	r1, r2, r2
 8006d6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d70:	415b      	adcs	r3, r3
 8006d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d78:	4641      	mov	r1, r8
 8006d7a:	eb12 0a01 	adds.w	sl, r2, r1
 8006d7e:	4649      	mov	r1, r9
 8006d80:	eb43 0b01 	adc.w	fp, r3, r1
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d98:	4692      	mov	sl, r2
 8006d9a:	469b      	mov	fp, r3
 8006d9c:	4643      	mov	r3, r8
 8006d9e:	eb1a 0303 	adds.w	r3, sl, r3
 8006da2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006da6:	464b      	mov	r3, r9
 8006da8:	eb4b 0303 	adc.w	r3, fp, r3
 8006dac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006dc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	18db      	adds	r3, r3, r3
 8006dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8006dca:	4613      	mov	r3, r2
 8006dcc:	eb42 0303 	adc.w	r3, r2, r3
 8006dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8006dd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006dd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006dda:	f7f9 ff35 	bl	8000c48 <__aeabi_uldivmod>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	4611      	mov	r1, r2
 8006de4:	4b3b      	ldr	r3, [pc, #236]	; (8006ed4 <UART_SetConfig+0x2d4>)
 8006de6:	fba3 2301 	umull	r2, r3, r3, r1
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	2264      	movs	r2, #100	; 0x64
 8006dee:	fb02 f303 	mul.w	r3, r2, r3
 8006df2:	1acb      	subs	r3, r1, r3
 8006df4:	00db      	lsls	r3, r3, #3
 8006df6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006dfa:	4b36      	ldr	r3, [pc, #216]	; (8006ed4 <UART_SetConfig+0x2d4>)
 8006dfc:	fba3 2302 	umull	r2, r3, r3, r2
 8006e00:	095b      	lsrs	r3, r3, #5
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e08:	441c      	add	r4, r3
 8006e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e1c:	4642      	mov	r2, r8
 8006e1e:	464b      	mov	r3, r9
 8006e20:	1891      	adds	r1, r2, r2
 8006e22:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e24:	415b      	adcs	r3, r3
 8006e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e2c:	4641      	mov	r1, r8
 8006e2e:	1851      	adds	r1, r2, r1
 8006e30:	6339      	str	r1, [r7, #48]	; 0x30
 8006e32:	4649      	mov	r1, r9
 8006e34:	414b      	adcs	r3, r1
 8006e36:	637b      	str	r3, [r7, #52]	; 0x34
 8006e38:	f04f 0200 	mov.w	r2, #0
 8006e3c:	f04f 0300 	mov.w	r3, #0
 8006e40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e44:	4659      	mov	r1, fp
 8006e46:	00cb      	lsls	r3, r1, #3
 8006e48:	4651      	mov	r1, sl
 8006e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e4e:	4651      	mov	r1, sl
 8006e50:	00ca      	lsls	r2, r1, #3
 8006e52:	4610      	mov	r0, r2
 8006e54:	4619      	mov	r1, r3
 8006e56:	4603      	mov	r3, r0
 8006e58:	4642      	mov	r2, r8
 8006e5a:	189b      	adds	r3, r3, r2
 8006e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e60:	464b      	mov	r3, r9
 8006e62:	460a      	mov	r2, r1
 8006e64:	eb42 0303 	adc.w	r3, r2, r3
 8006e68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e80:	460b      	mov	r3, r1
 8006e82:	18db      	adds	r3, r3, r3
 8006e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e86:	4613      	mov	r3, r2
 8006e88:	eb42 0303 	adc.w	r3, r2, r3
 8006e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e96:	f7f9 fed7 	bl	8000c48 <__aeabi_uldivmod>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4b0d      	ldr	r3, [pc, #52]	; (8006ed4 <UART_SetConfig+0x2d4>)
 8006ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea4:	095b      	lsrs	r3, r3, #5
 8006ea6:	2164      	movs	r1, #100	; 0x64
 8006ea8:	fb01 f303 	mul.w	r3, r1, r3
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	3332      	adds	r3, #50	; 0x32
 8006eb2:	4a08      	ldr	r2, [pc, #32]	; (8006ed4 <UART_SetConfig+0x2d4>)
 8006eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb8:	095b      	lsrs	r3, r3, #5
 8006eba:	f003 0207 	and.w	r2, r3, #7
 8006ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4422      	add	r2, r4
 8006ec6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ec8:	e105      	b.n	80070d6 <UART_SetConfig+0x4d6>
 8006eca:	bf00      	nop
 8006ecc:	40011000 	.word	0x40011000
 8006ed0:	40011400 	.word	0x40011400
 8006ed4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006edc:	2200      	movs	r2, #0
 8006ede:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ee2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ee6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006eea:	4642      	mov	r2, r8
 8006eec:	464b      	mov	r3, r9
 8006eee:	1891      	adds	r1, r2, r2
 8006ef0:	6239      	str	r1, [r7, #32]
 8006ef2:	415b      	adcs	r3, r3
 8006ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006efa:	4641      	mov	r1, r8
 8006efc:	1854      	adds	r4, r2, r1
 8006efe:	4649      	mov	r1, r9
 8006f00:	eb43 0501 	adc.w	r5, r3, r1
 8006f04:	f04f 0200 	mov.w	r2, #0
 8006f08:	f04f 0300 	mov.w	r3, #0
 8006f0c:	00eb      	lsls	r3, r5, #3
 8006f0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f12:	00e2      	lsls	r2, r4, #3
 8006f14:	4614      	mov	r4, r2
 8006f16:	461d      	mov	r5, r3
 8006f18:	4643      	mov	r3, r8
 8006f1a:	18e3      	adds	r3, r4, r3
 8006f1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f20:	464b      	mov	r3, r9
 8006f22:	eb45 0303 	adc.w	r3, r5, r3
 8006f26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f3a:	f04f 0200 	mov.w	r2, #0
 8006f3e:	f04f 0300 	mov.w	r3, #0
 8006f42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f46:	4629      	mov	r1, r5
 8006f48:	008b      	lsls	r3, r1, #2
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f50:	4621      	mov	r1, r4
 8006f52:	008a      	lsls	r2, r1, #2
 8006f54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f58:	f7f9 fe76 	bl	8000c48 <__aeabi_uldivmod>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4b60      	ldr	r3, [pc, #384]	; (80070e4 <UART_SetConfig+0x4e4>)
 8006f62:	fba3 2302 	umull	r2, r3, r3, r2
 8006f66:	095b      	lsrs	r3, r3, #5
 8006f68:	011c      	lsls	r4, r3, #4
 8006f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f7c:	4642      	mov	r2, r8
 8006f7e:	464b      	mov	r3, r9
 8006f80:	1891      	adds	r1, r2, r2
 8006f82:	61b9      	str	r1, [r7, #24]
 8006f84:	415b      	adcs	r3, r3
 8006f86:	61fb      	str	r3, [r7, #28]
 8006f88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f8c:	4641      	mov	r1, r8
 8006f8e:	1851      	adds	r1, r2, r1
 8006f90:	6139      	str	r1, [r7, #16]
 8006f92:	4649      	mov	r1, r9
 8006f94:	414b      	adcs	r3, r1
 8006f96:	617b      	str	r3, [r7, #20]
 8006f98:	f04f 0200 	mov.w	r2, #0
 8006f9c:	f04f 0300 	mov.w	r3, #0
 8006fa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fa4:	4659      	mov	r1, fp
 8006fa6:	00cb      	lsls	r3, r1, #3
 8006fa8:	4651      	mov	r1, sl
 8006faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fae:	4651      	mov	r1, sl
 8006fb0:	00ca      	lsls	r2, r1, #3
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	4642      	mov	r2, r8
 8006fba:	189b      	adds	r3, r3, r2
 8006fbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fc0:	464b      	mov	r3, r9
 8006fc2:	460a      	mov	r2, r1
 8006fc4:	eb42 0303 	adc.w	r3, r2, r3
 8006fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006fd8:	f04f 0200 	mov.w	r2, #0
 8006fdc:	f04f 0300 	mov.w	r3, #0
 8006fe0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006fe4:	4649      	mov	r1, r9
 8006fe6:	008b      	lsls	r3, r1, #2
 8006fe8:	4641      	mov	r1, r8
 8006fea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fee:	4641      	mov	r1, r8
 8006ff0:	008a      	lsls	r2, r1, #2
 8006ff2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006ff6:	f7f9 fe27 	bl	8000c48 <__aeabi_uldivmod>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4b39      	ldr	r3, [pc, #228]	; (80070e4 <UART_SetConfig+0x4e4>)
 8007000:	fba3 1302 	umull	r1, r3, r3, r2
 8007004:	095b      	lsrs	r3, r3, #5
 8007006:	2164      	movs	r1, #100	; 0x64
 8007008:	fb01 f303 	mul.w	r3, r1, r3
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	3332      	adds	r3, #50	; 0x32
 8007012:	4a34      	ldr	r2, [pc, #208]	; (80070e4 <UART_SetConfig+0x4e4>)
 8007014:	fba2 2303 	umull	r2, r3, r2, r3
 8007018:	095b      	lsrs	r3, r3, #5
 800701a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800701e:	441c      	add	r4, r3
 8007020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007024:	2200      	movs	r2, #0
 8007026:	673b      	str	r3, [r7, #112]	; 0x70
 8007028:	677a      	str	r2, [r7, #116]	; 0x74
 800702a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800702e:	4642      	mov	r2, r8
 8007030:	464b      	mov	r3, r9
 8007032:	1891      	adds	r1, r2, r2
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	415b      	adcs	r3, r3
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800703e:	4641      	mov	r1, r8
 8007040:	1851      	adds	r1, r2, r1
 8007042:	6039      	str	r1, [r7, #0]
 8007044:	4649      	mov	r1, r9
 8007046:	414b      	adcs	r3, r1
 8007048:	607b      	str	r3, [r7, #4]
 800704a:	f04f 0200 	mov.w	r2, #0
 800704e:	f04f 0300 	mov.w	r3, #0
 8007052:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007056:	4659      	mov	r1, fp
 8007058:	00cb      	lsls	r3, r1, #3
 800705a:	4651      	mov	r1, sl
 800705c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007060:	4651      	mov	r1, sl
 8007062:	00ca      	lsls	r2, r1, #3
 8007064:	4610      	mov	r0, r2
 8007066:	4619      	mov	r1, r3
 8007068:	4603      	mov	r3, r0
 800706a:	4642      	mov	r2, r8
 800706c:	189b      	adds	r3, r3, r2
 800706e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007070:	464b      	mov	r3, r9
 8007072:	460a      	mov	r2, r1
 8007074:	eb42 0303 	adc.w	r3, r2, r3
 8007078:	66fb      	str	r3, [r7, #108]	; 0x6c
 800707a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	663b      	str	r3, [r7, #96]	; 0x60
 8007084:	667a      	str	r2, [r7, #100]	; 0x64
 8007086:	f04f 0200 	mov.w	r2, #0
 800708a:	f04f 0300 	mov.w	r3, #0
 800708e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007092:	4649      	mov	r1, r9
 8007094:	008b      	lsls	r3, r1, #2
 8007096:	4641      	mov	r1, r8
 8007098:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800709c:	4641      	mov	r1, r8
 800709e:	008a      	lsls	r2, r1, #2
 80070a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80070a4:	f7f9 fdd0 	bl	8000c48 <__aeabi_uldivmod>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4b0d      	ldr	r3, [pc, #52]	; (80070e4 <UART_SetConfig+0x4e4>)
 80070ae:	fba3 1302 	umull	r1, r3, r3, r2
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	2164      	movs	r1, #100	; 0x64
 80070b6:	fb01 f303 	mul.w	r3, r1, r3
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	011b      	lsls	r3, r3, #4
 80070be:	3332      	adds	r3, #50	; 0x32
 80070c0:	4a08      	ldr	r2, [pc, #32]	; (80070e4 <UART_SetConfig+0x4e4>)
 80070c2:	fba2 2303 	umull	r2, r3, r2, r3
 80070c6:	095b      	lsrs	r3, r3, #5
 80070c8:	f003 020f 	and.w	r2, r3, #15
 80070cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4422      	add	r2, r4
 80070d4:	609a      	str	r2, [r3, #8]
}
 80070d6:	bf00      	nop
 80070d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80070dc:	46bd      	mov	sp, r7
 80070de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070e2:	bf00      	nop
 80070e4:	51eb851f 	.word	0x51eb851f

080070e8 <__errno>:
 80070e8:	4b01      	ldr	r3, [pc, #4]	; (80070f0 <__errno+0x8>)
 80070ea:	6818      	ldr	r0, [r3, #0]
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	2000000c 	.word	0x2000000c

080070f4 <__libc_init_array>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	4d0d      	ldr	r5, [pc, #52]	; (800712c <__libc_init_array+0x38>)
 80070f8:	4c0d      	ldr	r4, [pc, #52]	; (8007130 <__libc_init_array+0x3c>)
 80070fa:	1b64      	subs	r4, r4, r5
 80070fc:	10a4      	asrs	r4, r4, #2
 80070fe:	2600      	movs	r6, #0
 8007100:	42a6      	cmp	r6, r4
 8007102:	d109      	bne.n	8007118 <__libc_init_array+0x24>
 8007104:	4d0b      	ldr	r5, [pc, #44]	; (8007134 <__libc_init_array+0x40>)
 8007106:	4c0c      	ldr	r4, [pc, #48]	; (8007138 <__libc_init_array+0x44>)
 8007108:	f003 fbd0 	bl	800a8ac <_init>
 800710c:	1b64      	subs	r4, r4, r5
 800710e:	10a4      	asrs	r4, r4, #2
 8007110:	2600      	movs	r6, #0
 8007112:	42a6      	cmp	r6, r4
 8007114:	d105      	bne.n	8007122 <__libc_init_array+0x2e>
 8007116:	bd70      	pop	{r4, r5, r6, pc}
 8007118:	f855 3b04 	ldr.w	r3, [r5], #4
 800711c:	4798      	blx	r3
 800711e:	3601      	adds	r6, #1
 8007120:	e7ee      	b.n	8007100 <__libc_init_array+0xc>
 8007122:	f855 3b04 	ldr.w	r3, [r5], #4
 8007126:	4798      	blx	r3
 8007128:	3601      	adds	r6, #1
 800712a:	e7f2      	b.n	8007112 <__libc_init_array+0x1e>
 800712c:	0800add4 	.word	0x0800add4
 8007130:	0800add4 	.word	0x0800add4
 8007134:	0800add4 	.word	0x0800add4
 8007138:	0800add8 	.word	0x0800add8

0800713c <memset>:
 800713c:	4402      	add	r2, r0
 800713e:	4603      	mov	r3, r0
 8007140:	4293      	cmp	r3, r2
 8007142:	d100      	bne.n	8007146 <memset+0xa>
 8007144:	4770      	bx	lr
 8007146:	f803 1b01 	strb.w	r1, [r3], #1
 800714a:	e7f9      	b.n	8007140 <memset+0x4>

0800714c <__cvt>:
 800714c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007150:	ec55 4b10 	vmov	r4, r5, d0
 8007154:	2d00      	cmp	r5, #0
 8007156:	460e      	mov	r6, r1
 8007158:	4619      	mov	r1, r3
 800715a:	462b      	mov	r3, r5
 800715c:	bfbb      	ittet	lt
 800715e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007162:	461d      	movlt	r5, r3
 8007164:	2300      	movge	r3, #0
 8007166:	232d      	movlt	r3, #45	; 0x2d
 8007168:	700b      	strb	r3, [r1, #0]
 800716a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800716c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007170:	4691      	mov	r9, r2
 8007172:	f023 0820 	bic.w	r8, r3, #32
 8007176:	bfbc      	itt	lt
 8007178:	4622      	movlt	r2, r4
 800717a:	4614      	movlt	r4, r2
 800717c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007180:	d005      	beq.n	800718e <__cvt+0x42>
 8007182:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007186:	d100      	bne.n	800718a <__cvt+0x3e>
 8007188:	3601      	adds	r6, #1
 800718a:	2102      	movs	r1, #2
 800718c:	e000      	b.n	8007190 <__cvt+0x44>
 800718e:	2103      	movs	r1, #3
 8007190:	ab03      	add	r3, sp, #12
 8007192:	9301      	str	r3, [sp, #4]
 8007194:	ab02      	add	r3, sp, #8
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	ec45 4b10 	vmov	d0, r4, r5
 800719c:	4653      	mov	r3, sl
 800719e:	4632      	mov	r2, r6
 80071a0:	f000 fd92 	bl	8007cc8 <_dtoa_r>
 80071a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80071a8:	4607      	mov	r7, r0
 80071aa:	d102      	bne.n	80071b2 <__cvt+0x66>
 80071ac:	f019 0f01 	tst.w	r9, #1
 80071b0:	d022      	beq.n	80071f8 <__cvt+0xac>
 80071b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071b6:	eb07 0906 	add.w	r9, r7, r6
 80071ba:	d110      	bne.n	80071de <__cvt+0x92>
 80071bc:	783b      	ldrb	r3, [r7, #0]
 80071be:	2b30      	cmp	r3, #48	; 0x30
 80071c0:	d10a      	bne.n	80071d8 <__cvt+0x8c>
 80071c2:	2200      	movs	r2, #0
 80071c4:	2300      	movs	r3, #0
 80071c6:	4620      	mov	r0, r4
 80071c8:	4629      	mov	r1, r5
 80071ca:	f7f9 fc7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80071ce:	b918      	cbnz	r0, 80071d8 <__cvt+0x8c>
 80071d0:	f1c6 0601 	rsb	r6, r6, #1
 80071d4:	f8ca 6000 	str.w	r6, [sl]
 80071d8:	f8da 3000 	ldr.w	r3, [sl]
 80071dc:	4499      	add	r9, r3
 80071de:	2200      	movs	r2, #0
 80071e0:	2300      	movs	r3, #0
 80071e2:	4620      	mov	r0, r4
 80071e4:	4629      	mov	r1, r5
 80071e6:	f7f9 fc6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80071ea:	b108      	cbz	r0, 80071f0 <__cvt+0xa4>
 80071ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80071f0:	2230      	movs	r2, #48	; 0x30
 80071f2:	9b03      	ldr	r3, [sp, #12]
 80071f4:	454b      	cmp	r3, r9
 80071f6:	d307      	bcc.n	8007208 <__cvt+0xbc>
 80071f8:	9b03      	ldr	r3, [sp, #12]
 80071fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071fc:	1bdb      	subs	r3, r3, r7
 80071fe:	4638      	mov	r0, r7
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	b004      	add	sp, #16
 8007204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007208:	1c59      	adds	r1, r3, #1
 800720a:	9103      	str	r1, [sp, #12]
 800720c:	701a      	strb	r2, [r3, #0]
 800720e:	e7f0      	b.n	80071f2 <__cvt+0xa6>

08007210 <__exponent>:
 8007210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007212:	4603      	mov	r3, r0
 8007214:	2900      	cmp	r1, #0
 8007216:	bfb8      	it	lt
 8007218:	4249      	neglt	r1, r1
 800721a:	f803 2b02 	strb.w	r2, [r3], #2
 800721e:	bfb4      	ite	lt
 8007220:	222d      	movlt	r2, #45	; 0x2d
 8007222:	222b      	movge	r2, #43	; 0x2b
 8007224:	2909      	cmp	r1, #9
 8007226:	7042      	strb	r2, [r0, #1]
 8007228:	dd2a      	ble.n	8007280 <__exponent+0x70>
 800722a:	f10d 0407 	add.w	r4, sp, #7
 800722e:	46a4      	mov	ip, r4
 8007230:	270a      	movs	r7, #10
 8007232:	46a6      	mov	lr, r4
 8007234:	460a      	mov	r2, r1
 8007236:	fb91 f6f7 	sdiv	r6, r1, r7
 800723a:	fb07 1516 	mls	r5, r7, r6, r1
 800723e:	3530      	adds	r5, #48	; 0x30
 8007240:	2a63      	cmp	r2, #99	; 0x63
 8007242:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007246:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800724a:	4631      	mov	r1, r6
 800724c:	dcf1      	bgt.n	8007232 <__exponent+0x22>
 800724e:	3130      	adds	r1, #48	; 0x30
 8007250:	f1ae 0502 	sub.w	r5, lr, #2
 8007254:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007258:	1c44      	adds	r4, r0, #1
 800725a:	4629      	mov	r1, r5
 800725c:	4561      	cmp	r1, ip
 800725e:	d30a      	bcc.n	8007276 <__exponent+0x66>
 8007260:	f10d 0209 	add.w	r2, sp, #9
 8007264:	eba2 020e 	sub.w	r2, r2, lr
 8007268:	4565      	cmp	r5, ip
 800726a:	bf88      	it	hi
 800726c:	2200      	movhi	r2, #0
 800726e:	4413      	add	r3, r2
 8007270:	1a18      	subs	r0, r3, r0
 8007272:	b003      	add	sp, #12
 8007274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800727a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800727e:	e7ed      	b.n	800725c <__exponent+0x4c>
 8007280:	2330      	movs	r3, #48	; 0x30
 8007282:	3130      	adds	r1, #48	; 0x30
 8007284:	7083      	strb	r3, [r0, #2]
 8007286:	70c1      	strb	r1, [r0, #3]
 8007288:	1d03      	adds	r3, r0, #4
 800728a:	e7f1      	b.n	8007270 <__exponent+0x60>

0800728c <_printf_float>:
 800728c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007290:	ed2d 8b02 	vpush	{d8}
 8007294:	b08d      	sub	sp, #52	; 0x34
 8007296:	460c      	mov	r4, r1
 8007298:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800729c:	4616      	mov	r6, r2
 800729e:	461f      	mov	r7, r3
 80072a0:	4605      	mov	r5, r0
 80072a2:	f001 faff 	bl	80088a4 <_localeconv_r>
 80072a6:	f8d0 a000 	ldr.w	sl, [r0]
 80072aa:	4650      	mov	r0, sl
 80072ac:	f7f8 ff90 	bl	80001d0 <strlen>
 80072b0:	2300      	movs	r3, #0
 80072b2:	930a      	str	r3, [sp, #40]	; 0x28
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	9305      	str	r3, [sp, #20]
 80072b8:	f8d8 3000 	ldr.w	r3, [r8]
 80072bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80072c0:	3307      	adds	r3, #7
 80072c2:	f023 0307 	bic.w	r3, r3, #7
 80072c6:	f103 0208 	add.w	r2, r3, #8
 80072ca:	f8c8 2000 	str.w	r2, [r8]
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80072d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80072da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80072de:	9307      	str	r3, [sp, #28]
 80072e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80072e4:	ee08 0a10 	vmov	s16, r0
 80072e8:	4b9f      	ldr	r3, [pc, #636]	; (8007568 <_printf_float+0x2dc>)
 80072ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072f2:	f7f9 fc1b 	bl	8000b2c <__aeabi_dcmpun>
 80072f6:	bb88      	cbnz	r0, 800735c <_printf_float+0xd0>
 80072f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072fc:	4b9a      	ldr	r3, [pc, #616]	; (8007568 <_printf_float+0x2dc>)
 80072fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007302:	f7f9 fbf5 	bl	8000af0 <__aeabi_dcmple>
 8007306:	bb48      	cbnz	r0, 800735c <_printf_float+0xd0>
 8007308:	2200      	movs	r2, #0
 800730a:	2300      	movs	r3, #0
 800730c:	4640      	mov	r0, r8
 800730e:	4649      	mov	r1, r9
 8007310:	f7f9 fbe4 	bl	8000adc <__aeabi_dcmplt>
 8007314:	b110      	cbz	r0, 800731c <_printf_float+0x90>
 8007316:	232d      	movs	r3, #45	; 0x2d
 8007318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800731c:	4b93      	ldr	r3, [pc, #588]	; (800756c <_printf_float+0x2e0>)
 800731e:	4894      	ldr	r0, [pc, #592]	; (8007570 <_printf_float+0x2e4>)
 8007320:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007324:	bf94      	ite	ls
 8007326:	4698      	movls	r8, r3
 8007328:	4680      	movhi	r8, r0
 800732a:	2303      	movs	r3, #3
 800732c:	6123      	str	r3, [r4, #16]
 800732e:	9b05      	ldr	r3, [sp, #20]
 8007330:	f023 0204 	bic.w	r2, r3, #4
 8007334:	6022      	str	r2, [r4, #0]
 8007336:	f04f 0900 	mov.w	r9, #0
 800733a:	9700      	str	r7, [sp, #0]
 800733c:	4633      	mov	r3, r6
 800733e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007340:	4621      	mov	r1, r4
 8007342:	4628      	mov	r0, r5
 8007344:	f000 f9d8 	bl	80076f8 <_printf_common>
 8007348:	3001      	adds	r0, #1
 800734a:	f040 8090 	bne.w	800746e <_printf_float+0x1e2>
 800734e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007352:	b00d      	add	sp, #52	; 0x34
 8007354:	ecbd 8b02 	vpop	{d8}
 8007358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735c:	4642      	mov	r2, r8
 800735e:	464b      	mov	r3, r9
 8007360:	4640      	mov	r0, r8
 8007362:	4649      	mov	r1, r9
 8007364:	f7f9 fbe2 	bl	8000b2c <__aeabi_dcmpun>
 8007368:	b140      	cbz	r0, 800737c <_printf_float+0xf0>
 800736a:	464b      	mov	r3, r9
 800736c:	2b00      	cmp	r3, #0
 800736e:	bfbc      	itt	lt
 8007370:	232d      	movlt	r3, #45	; 0x2d
 8007372:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007376:	487f      	ldr	r0, [pc, #508]	; (8007574 <_printf_float+0x2e8>)
 8007378:	4b7f      	ldr	r3, [pc, #508]	; (8007578 <_printf_float+0x2ec>)
 800737a:	e7d1      	b.n	8007320 <_printf_float+0x94>
 800737c:	6863      	ldr	r3, [r4, #4]
 800737e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007382:	9206      	str	r2, [sp, #24]
 8007384:	1c5a      	adds	r2, r3, #1
 8007386:	d13f      	bne.n	8007408 <_printf_float+0x17c>
 8007388:	2306      	movs	r3, #6
 800738a:	6063      	str	r3, [r4, #4]
 800738c:	9b05      	ldr	r3, [sp, #20]
 800738e:	6861      	ldr	r1, [r4, #4]
 8007390:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007394:	2300      	movs	r3, #0
 8007396:	9303      	str	r3, [sp, #12]
 8007398:	ab0a      	add	r3, sp, #40	; 0x28
 800739a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800739e:	ab09      	add	r3, sp, #36	; 0x24
 80073a0:	ec49 8b10 	vmov	d0, r8, r9
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	6022      	str	r2, [r4, #0]
 80073a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80073ac:	4628      	mov	r0, r5
 80073ae:	f7ff fecd 	bl	800714c <__cvt>
 80073b2:	9b06      	ldr	r3, [sp, #24]
 80073b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073b6:	2b47      	cmp	r3, #71	; 0x47
 80073b8:	4680      	mov	r8, r0
 80073ba:	d108      	bne.n	80073ce <_printf_float+0x142>
 80073bc:	1cc8      	adds	r0, r1, #3
 80073be:	db02      	blt.n	80073c6 <_printf_float+0x13a>
 80073c0:	6863      	ldr	r3, [r4, #4]
 80073c2:	4299      	cmp	r1, r3
 80073c4:	dd41      	ble.n	800744a <_printf_float+0x1be>
 80073c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80073ca:	fa5f fb8b 	uxtb.w	fp, fp
 80073ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80073d2:	d820      	bhi.n	8007416 <_printf_float+0x18a>
 80073d4:	3901      	subs	r1, #1
 80073d6:	465a      	mov	r2, fp
 80073d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80073dc:	9109      	str	r1, [sp, #36]	; 0x24
 80073de:	f7ff ff17 	bl	8007210 <__exponent>
 80073e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073e4:	1813      	adds	r3, r2, r0
 80073e6:	2a01      	cmp	r2, #1
 80073e8:	4681      	mov	r9, r0
 80073ea:	6123      	str	r3, [r4, #16]
 80073ec:	dc02      	bgt.n	80073f4 <_printf_float+0x168>
 80073ee:	6822      	ldr	r2, [r4, #0]
 80073f0:	07d2      	lsls	r2, r2, #31
 80073f2:	d501      	bpl.n	80073f8 <_printf_float+0x16c>
 80073f4:	3301      	adds	r3, #1
 80073f6:	6123      	str	r3, [r4, #16]
 80073f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d09c      	beq.n	800733a <_printf_float+0xae>
 8007400:	232d      	movs	r3, #45	; 0x2d
 8007402:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007406:	e798      	b.n	800733a <_printf_float+0xae>
 8007408:	9a06      	ldr	r2, [sp, #24]
 800740a:	2a47      	cmp	r2, #71	; 0x47
 800740c:	d1be      	bne.n	800738c <_printf_float+0x100>
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1bc      	bne.n	800738c <_printf_float+0x100>
 8007412:	2301      	movs	r3, #1
 8007414:	e7b9      	b.n	800738a <_printf_float+0xfe>
 8007416:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800741a:	d118      	bne.n	800744e <_printf_float+0x1c2>
 800741c:	2900      	cmp	r1, #0
 800741e:	6863      	ldr	r3, [r4, #4]
 8007420:	dd0b      	ble.n	800743a <_printf_float+0x1ae>
 8007422:	6121      	str	r1, [r4, #16]
 8007424:	b913      	cbnz	r3, 800742c <_printf_float+0x1a0>
 8007426:	6822      	ldr	r2, [r4, #0]
 8007428:	07d0      	lsls	r0, r2, #31
 800742a:	d502      	bpl.n	8007432 <_printf_float+0x1a6>
 800742c:	3301      	adds	r3, #1
 800742e:	440b      	add	r3, r1
 8007430:	6123      	str	r3, [r4, #16]
 8007432:	65a1      	str	r1, [r4, #88]	; 0x58
 8007434:	f04f 0900 	mov.w	r9, #0
 8007438:	e7de      	b.n	80073f8 <_printf_float+0x16c>
 800743a:	b913      	cbnz	r3, 8007442 <_printf_float+0x1b6>
 800743c:	6822      	ldr	r2, [r4, #0]
 800743e:	07d2      	lsls	r2, r2, #31
 8007440:	d501      	bpl.n	8007446 <_printf_float+0x1ba>
 8007442:	3302      	adds	r3, #2
 8007444:	e7f4      	b.n	8007430 <_printf_float+0x1a4>
 8007446:	2301      	movs	r3, #1
 8007448:	e7f2      	b.n	8007430 <_printf_float+0x1a4>
 800744a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800744e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007450:	4299      	cmp	r1, r3
 8007452:	db05      	blt.n	8007460 <_printf_float+0x1d4>
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	6121      	str	r1, [r4, #16]
 8007458:	07d8      	lsls	r0, r3, #31
 800745a:	d5ea      	bpl.n	8007432 <_printf_float+0x1a6>
 800745c:	1c4b      	adds	r3, r1, #1
 800745e:	e7e7      	b.n	8007430 <_printf_float+0x1a4>
 8007460:	2900      	cmp	r1, #0
 8007462:	bfd4      	ite	le
 8007464:	f1c1 0202 	rsble	r2, r1, #2
 8007468:	2201      	movgt	r2, #1
 800746a:	4413      	add	r3, r2
 800746c:	e7e0      	b.n	8007430 <_printf_float+0x1a4>
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	055a      	lsls	r2, r3, #21
 8007472:	d407      	bmi.n	8007484 <_printf_float+0x1f8>
 8007474:	6923      	ldr	r3, [r4, #16]
 8007476:	4642      	mov	r2, r8
 8007478:	4631      	mov	r1, r6
 800747a:	4628      	mov	r0, r5
 800747c:	47b8      	blx	r7
 800747e:	3001      	adds	r0, #1
 8007480:	d12c      	bne.n	80074dc <_printf_float+0x250>
 8007482:	e764      	b.n	800734e <_printf_float+0xc2>
 8007484:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007488:	f240 80e0 	bls.w	800764c <_printf_float+0x3c0>
 800748c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007490:	2200      	movs	r2, #0
 8007492:	2300      	movs	r3, #0
 8007494:	f7f9 fb18 	bl	8000ac8 <__aeabi_dcmpeq>
 8007498:	2800      	cmp	r0, #0
 800749a:	d034      	beq.n	8007506 <_printf_float+0x27a>
 800749c:	4a37      	ldr	r2, [pc, #220]	; (800757c <_printf_float+0x2f0>)
 800749e:	2301      	movs	r3, #1
 80074a0:	4631      	mov	r1, r6
 80074a2:	4628      	mov	r0, r5
 80074a4:	47b8      	blx	r7
 80074a6:	3001      	adds	r0, #1
 80074a8:	f43f af51 	beq.w	800734e <_printf_float+0xc2>
 80074ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074b0:	429a      	cmp	r2, r3
 80074b2:	db02      	blt.n	80074ba <_printf_float+0x22e>
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	07d8      	lsls	r0, r3, #31
 80074b8:	d510      	bpl.n	80074dc <_printf_float+0x250>
 80074ba:	ee18 3a10 	vmov	r3, s16
 80074be:	4652      	mov	r2, sl
 80074c0:	4631      	mov	r1, r6
 80074c2:	4628      	mov	r0, r5
 80074c4:	47b8      	blx	r7
 80074c6:	3001      	adds	r0, #1
 80074c8:	f43f af41 	beq.w	800734e <_printf_float+0xc2>
 80074cc:	f04f 0800 	mov.w	r8, #0
 80074d0:	f104 091a 	add.w	r9, r4, #26
 80074d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074d6:	3b01      	subs	r3, #1
 80074d8:	4543      	cmp	r3, r8
 80074da:	dc09      	bgt.n	80074f0 <_printf_float+0x264>
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	079b      	lsls	r3, r3, #30
 80074e0:	f100 8105 	bmi.w	80076ee <_printf_float+0x462>
 80074e4:	68e0      	ldr	r0, [r4, #12]
 80074e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074e8:	4298      	cmp	r0, r3
 80074ea:	bfb8      	it	lt
 80074ec:	4618      	movlt	r0, r3
 80074ee:	e730      	b.n	8007352 <_printf_float+0xc6>
 80074f0:	2301      	movs	r3, #1
 80074f2:	464a      	mov	r2, r9
 80074f4:	4631      	mov	r1, r6
 80074f6:	4628      	mov	r0, r5
 80074f8:	47b8      	blx	r7
 80074fa:	3001      	adds	r0, #1
 80074fc:	f43f af27 	beq.w	800734e <_printf_float+0xc2>
 8007500:	f108 0801 	add.w	r8, r8, #1
 8007504:	e7e6      	b.n	80074d4 <_printf_float+0x248>
 8007506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007508:	2b00      	cmp	r3, #0
 800750a:	dc39      	bgt.n	8007580 <_printf_float+0x2f4>
 800750c:	4a1b      	ldr	r2, [pc, #108]	; (800757c <_printf_float+0x2f0>)
 800750e:	2301      	movs	r3, #1
 8007510:	4631      	mov	r1, r6
 8007512:	4628      	mov	r0, r5
 8007514:	47b8      	blx	r7
 8007516:	3001      	adds	r0, #1
 8007518:	f43f af19 	beq.w	800734e <_printf_float+0xc2>
 800751c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007520:	4313      	orrs	r3, r2
 8007522:	d102      	bne.n	800752a <_printf_float+0x29e>
 8007524:	6823      	ldr	r3, [r4, #0]
 8007526:	07d9      	lsls	r1, r3, #31
 8007528:	d5d8      	bpl.n	80074dc <_printf_float+0x250>
 800752a:	ee18 3a10 	vmov	r3, s16
 800752e:	4652      	mov	r2, sl
 8007530:	4631      	mov	r1, r6
 8007532:	4628      	mov	r0, r5
 8007534:	47b8      	blx	r7
 8007536:	3001      	adds	r0, #1
 8007538:	f43f af09 	beq.w	800734e <_printf_float+0xc2>
 800753c:	f04f 0900 	mov.w	r9, #0
 8007540:	f104 0a1a 	add.w	sl, r4, #26
 8007544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007546:	425b      	negs	r3, r3
 8007548:	454b      	cmp	r3, r9
 800754a:	dc01      	bgt.n	8007550 <_printf_float+0x2c4>
 800754c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800754e:	e792      	b.n	8007476 <_printf_float+0x1ea>
 8007550:	2301      	movs	r3, #1
 8007552:	4652      	mov	r2, sl
 8007554:	4631      	mov	r1, r6
 8007556:	4628      	mov	r0, r5
 8007558:	47b8      	blx	r7
 800755a:	3001      	adds	r0, #1
 800755c:	f43f aef7 	beq.w	800734e <_printf_float+0xc2>
 8007560:	f109 0901 	add.w	r9, r9, #1
 8007564:	e7ee      	b.n	8007544 <_printf_float+0x2b8>
 8007566:	bf00      	nop
 8007568:	7fefffff 	.word	0x7fefffff
 800756c:	0800a9d8 	.word	0x0800a9d8
 8007570:	0800a9dc 	.word	0x0800a9dc
 8007574:	0800a9e4 	.word	0x0800a9e4
 8007578:	0800a9e0 	.word	0x0800a9e0
 800757c:	0800ac09 	.word	0x0800ac09
 8007580:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007582:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007584:	429a      	cmp	r2, r3
 8007586:	bfa8      	it	ge
 8007588:	461a      	movge	r2, r3
 800758a:	2a00      	cmp	r2, #0
 800758c:	4691      	mov	r9, r2
 800758e:	dc37      	bgt.n	8007600 <_printf_float+0x374>
 8007590:	f04f 0b00 	mov.w	fp, #0
 8007594:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007598:	f104 021a 	add.w	r2, r4, #26
 800759c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800759e:	9305      	str	r3, [sp, #20]
 80075a0:	eba3 0309 	sub.w	r3, r3, r9
 80075a4:	455b      	cmp	r3, fp
 80075a6:	dc33      	bgt.n	8007610 <_printf_float+0x384>
 80075a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075ac:	429a      	cmp	r2, r3
 80075ae:	db3b      	blt.n	8007628 <_printf_float+0x39c>
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	07da      	lsls	r2, r3, #31
 80075b4:	d438      	bmi.n	8007628 <_printf_float+0x39c>
 80075b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b8:	9a05      	ldr	r2, [sp, #20]
 80075ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075bc:	1a9a      	subs	r2, r3, r2
 80075be:	eba3 0901 	sub.w	r9, r3, r1
 80075c2:	4591      	cmp	r9, r2
 80075c4:	bfa8      	it	ge
 80075c6:	4691      	movge	r9, r2
 80075c8:	f1b9 0f00 	cmp.w	r9, #0
 80075cc:	dc35      	bgt.n	800763a <_printf_float+0x3ae>
 80075ce:	f04f 0800 	mov.w	r8, #0
 80075d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075d6:	f104 0a1a 	add.w	sl, r4, #26
 80075da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075de:	1a9b      	subs	r3, r3, r2
 80075e0:	eba3 0309 	sub.w	r3, r3, r9
 80075e4:	4543      	cmp	r3, r8
 80075e6:	f77f af79 	ble.w	80074dc <_printf_float+0x250>
 80075ea:	2301      	movs	r3, #1
 80075ec:	4652      	mov	r2, sl
 80075ee:	4631      	mov	r1, r6
 80075f0:	4628      	mov	r0, r5
 80075f2:	47b8      	blx	r7
 80075f4:	3001      	adds	r0, #1
 80075f6:	f43f aeaa 	beq.w	800734e <_printf_float+0xc2>
 80075fa:	f108 0801 	add.w	r8, r8, #1
 80075fe:	e7ec      	b.n	80075da <_printf_float+0x34e>
 8007600:	4613      	mov	r3, r2
 8007602:	4631      	mov	r1, r6
 8007604:	4642      	mov	r2, r8
 8007606:	4628      	mov	r0, r5
 8007608:	47b8      	blx	r7
 800760a:	3001      	adds	r0, #1
 800760c:	d1c0      	bne.n	8007590 <_printf_float+0x304>
 800760e:	e69e      	b.n	800734e <_printf_float+0xc2>
 8007610:	2301      	movs	r3, #1
 8007612:	4631      	mov	r1, r6
 8007614:	4628      	mov	r0, r5
 8007616:	9205      	str	r2, [sp, #20]
 8007618:	47b8      	blx	r7
 800761a:	3001      	adds	r0, #1
 800761c:	f43f ae97 	beq.w	800734e <_printf_float+0xc2>
 8007620:	9a05      	ldr	r2, [sp, #20]
 8007622:	f10b 0b01 	add.w	fp, fp, #1
 8007626:	e7b9      	b.n	800759c <_printf_float+0x310>
 8007628:	ee18 3a10 	vmov	r3, s16
 800762c:	4652      	mov	r2, sl
 800762e:	4631      	mov	r1, r6
 8007630:	4628      	mov	r0, r5
 8007632:	47b8      	blx	r7
 8007634:	3001      	adds	r0, #1
 8007636:	d1be      	bne.n	80075b6 <_printf_float+0x32a>
 8007638:	e689      	b.n	800734e <_printf_float+0xc2>
 800763a:	9a05      	ldr	r2, [sp, #20]
 800763c:	464b      	mov	r3, r9
 800763e:	4442      	add	r2, r8
 8007640:	4631      	mov	r1, r6
 8007642:	4628      	mov	r0, r5
 8007644:	47b8      	blx	r7
 8007646:	3001      	adds	r0, #1
 8007648:	d1c1      	bne.n	80075ce <_printf_float+0x342>
 800764a:	e680      	b.n	800734e <_printf_float+0xc2>
 800764c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800764e:	2a01      	cmp	r2, #1
 8007650:	dc01      	bgt.n	8007656 <_printf_float+0x3ca>
 8007652:	07db      	lsls	r3, r3, #31
 8007654:	d538      	bpl.n	80076c8 <_printf_float+0x43c>
 8007656:	2301      	movs	r3, #1
 8007658:	4642      	mov	r2, r8
 800765a:	4631      	mov	r1, r6
 800765c:	4628      	mov	r0, r5
 800765e:	47b8      	blx	r7
 8007660:	3001      	adds	r0, #1
 8007662:	f43f ae74 	beq.w	800734e <_printf_float+0xc2>
 8007666:	ee18 3a10 	vmov	r3, s16
 800766a:	4652      	mov	r2, sl
 800766c:	4631      	mov	r1, r6
 800766e:	4628      	mov	r0, r5
 8007670:	47b8      	blx	r7
 8007672:	3001      	adds	r0, #1
 8007674:	f43f ae6b 	beq.w	800734e <_printf_float+0xc2>
 8007678:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800767c:	2200      	movs	r2, #0
 800767e:	2300      	movs	r3, #0
 8007680:	f7f9 fa22 	bl	8000ac8 <__aeabi_dcmpeq>
 8007684:	b9d8      	cbnz	r0, 80076be <_printf_float+0x432>
 8007686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007688:	f108 0201 	add.w	r2, r8, #1
 800768c:	3b01      	subs	r3, #1
 800768e:	4631      	mov	r1, r6
 8007690:	4628      	mov	r0, r5
 8007692:	47b8      	blx	r7
 8007694:	3001      	adds	r0, #1
 8007696:	d10e      	bne.n	80076b6 <_printf_float+0x42a>
 8007698:	e659      	b.n	800734e <_printf_float+0xc2>
 800769a:	2301      	movs	r3, #1
 800769c:	4652      	mov	r2, sl
 800769e:	4631      	mov	r1, r6
 80076a0:	4628      	mov	r0, r5
 80076a2:	47b8      	blx	r7
 80076a4:	3001      	adds	r0, #1
 80076a6:	f43f ae52 	beq.w	800734e <_printf_float+0xc2>
 80076aa:	f108 0801 	add.w	r8, r8, #1
 80076ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b0:	3b01      	subs	r3, #1
 80076b2:	4543      	cmp	r3, r8
 80076b4:	dcf1      	bgt.n	800769a <_printf_float+0x40e>
 80076b6:	464b      	mov	r3, r9
 80076b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80076bc:	e6dc      	b.n	8007478 <_printf_float+0x1ec>
 80076be:	f04f 0800 	mov.w	r8, #0
 80076c2:	f104 0a1a 	add.w	sl, r4, #26
 80076c6:	e7f2      	b.n	80076ae <_printf_float+0x422>
 80076c8:	2301      	movs	r3, #1
 80076ca:	4642      	mov	r2, r8
 80076cc:	e7df      	b.n	800768e <_printf_float+0x402>
 80076ce:	2301      	movs	r3, #1
 80076d0:	464a      	mov	r2, r9
 80076d2:	4631      	mov	r1, r6
 80076d4:	4628      	mov	r0, r5
 80076d6:	47b8      	blx	r7
 80076d8:	3001      	adds	r0, #1
 80076da:	f43f ae38 	beq.w	800734e <_printf_float+0xc2>
 80076de:	f108 0801 	add.w	r8, r8, #1
 80076e2:	68e3      	ldr	r3, [r4, #12]
 80076e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076e6:	1a5b      	subs	r3, r3, r1
 80076e8:	4543      	cmp	r3, r8
 80076ea:	dcf0      	bgt.n	80076ce <_printf_float+0x442>
 80076ec:	e6fa      	b.n	80074e4 <_printf_float+0x258>
 80076ee:	f04f 0800 	mov.w	r8, #0
 80076f2:	f104 0919 	add.w	r9, r4, #25
 80076f6:	e7f4      	b.n	80076e2 <_printf_float+0x456>

080076f8 <_printf_common>:
 80076f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076fc:	4616      	mov	r6, r2
 80076fe:	4699      	mov	r9, r3
 8007700:	688a      	ldr	r2, [r1, #8]
 8007702:	690b      	ldr	r3, [r1, #16]
 8007704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007708:	4293      	cmp	r3, r2
 800770a:	bfb8      	it	lt
 800770c:	4613      	movlt	r3, r2
 800770e:	6033      	str	r3, [r6, #0]
 8007710:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007714:	4607      	mov	r7, r0
 8007716:	460c      	mov	r4, r1
 8007718:	b10a      	cbz	r2, 800771e <_printf_common+0x26>
 800771a:	3301      	adds	r3, #1
 800771c:	6033      	str	r3, [r6, #0]
 800771e:	6823      	ldr	r3, [r4, #0]
 8007720:	0699      	lsls	r1, r3, #26
 8007722:	bf42      	ittt	mi
 8007724:	6833      	ldrmi	r3, [r6, #0]
 8007726:	3302      	addmi	r3, #2
 8007728:	6033      	strmi	r3, [r6, #0]
 800772a:	6825      	ldr	r5, [r4, #0]
 800772c:	f015 0506 	ands.w	r5, r5, #6
 8007730:	d106      	bne.n	8007740 <_printf_common+0x48>
 8007732:	f104 0a19 	add.w	sl, r4, #25
 8007736:	68e3      	ldr	r3, [r4, #12]
 8007738:	6832      	ldr	r2, [r6, #0]
 800773a:	1a9b      	subs	r3, r3, r2
 800773c:	42ab      	cmp	r3, r5
 800773e:	dc26      	bgt.n	800778e <_printf_common+0x96>
 8007740:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007744:	1e13      	subs	r3, r2, #0
 8007746:	6822      	ldr	r2, [r4, #0]
 8007748:	bf18      	it	ne
 800774a:	2301      	movne	r3, #1
 800774c:	0692      	lsls	r2, r2, #26
 800774e:	d42b      	bmi.n	80077a8 <_printf_common+0xb0>
 8007750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007754:	4649      	mov	r1, r9
 8007756:	4638      	mov	r0, r7
 8007758:	47c0      	blx	r8
 800775a:	3001      	adds	r0, #1
 800775c:	d01e      	beq.n	800779c <_printf_common+0xa4>
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	68e5      	ldr	r5, [r4, #12]
 8007762:	6832      	ldr	r2, [r6, #0]
 8007764:	f003 0306 	and.w	r3, r3, #6
 8007768:	2b04      	cmp	r3, #4
 800776a:	bf08      	it	eq
 800776c:	1aad      	subeq	r5, r5, r2
 800776e:	68a3      	ldr	r3, [r4, #8]
 8007770:	6922      	ldr	r2, [r4, #16]
 8007772:	bf0c      	ite	eq
 8007774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007778:	2500      	movne	r5, #0
 800777a:	4293      	cmp	r3, r2
 800777c:	bfc4      	itt	gt
 800777e:	1a9b      	subgt	r3, r3, r2
 8007780:	18ed      	addgt	r5, r5, r3
 8007782:	2600      	movs	r6, #0
 8007784:	341a      	adds	r4, #26
 8007786:	42b5      	cmp	r5, r6
 8007788:	d11a      	bne.n	80077c0 <_printf_common+0xc8>
 800778a:	2000      	movs	r0, #0
 800778c:	e008      	b.n	80077a0 <_printf_common+0xa8>
 800778e:	2301      	movs	r3, #1
 8007790:	4652      	mov	r2, sl
 8007792:	4649      	mov	r1, r9
 8007794:	4638      	mov	r0, r7
 8007796:	47c0      	blx	r8
 8007798:	3001      	adds	r0, #1
 800779a:	d103      	bne.n	80077a4 <_printf_common+0xac>
 800779c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a4:	3501      	adds	r5, #1
 80077a6:	e7c6      	b.n	8007736 <_printf_common+0x3e>
 80077a8:	18e1      	adds	r1, r4, r3
 80077aa:	1c5a      	adds	r2, r3, #1
 80077ac:	2030      	movs	r0, #48	; 0x30
 80077ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077b2:	4422      	add	r2, r4
 80077b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077bc:	3302      	adds	r3, #2
 80077be:	e7c7      	b.n	8007750 <_printf_common+0x58>
 80077c0:	2301      	movs	r3, #1
 80077c2:	4622      	mov	r2, r4
 80077c4:	4649      	mov	r1, r9
 80077c6:	4638      	mov	r0, r7
 80077c8:	47c0      	blx	r8
 80077ca:	3001      	adds	r0, #1
 80077cc:	d0e6      	beq.n	800779c <_printf_common+0xa4>
 80077ce:	3601      	adds	r6, #1
 80077d0:	e7d9      	b.n	8007786 <_printf_common+0x8e>
	...

080077d4 <_printf_i>:
 80077d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077d8:	7e0f      	ldrb	r7, [r1, #24]
 80077da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077dc:	2f78      	cmp	r7, #120	; 0x78
 80077de:	4691      	mov	r9, r2
 80077e0:	4680      	mov	r8, r0
 80077e2:	460c      	mov	r4, r1
 80077e4:	469a      	mov	sl, r3
 80077e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077ea:	d807      	bhi.n	80077fc <_printf_i+0x28>
 80077ec:	2f62      	cmp	r7, #98	; 0x62
 80077ee:	d80a      	bhi.n	8007806 <_printf_i+0x32>
 80077f0:	2f00      	cmp	r7, #0
 80077f2:	f000 80d8 	beq.w	80079a6 <_printf_i+0x1d2>
 80077f6:	2f58      	cmp	r7, #88	; 0x58
 80077f8:	f000 80a3 	beq.w	8007942 <_printf_i+0x16e>
 80077fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007804:	e03a      	b.n	800787c <_printf_i+0xa8>
 8007806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800780a:	2b15      	cmp	r3, #21
 800780c:	d8f6      	bhi.n	80077fc <_printf_i+0x28>
 800780e:	a101      	add	r1, pc, #4	; (adr r1, 8007814 <_printf_i+0x40>)
 8007810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007814:	0800786d 	.word	0x0800786d
 8007818:	08007881 	.word	0x08007881
 800781c:	080077fd 	.word	0x080077fd
 8007820:	080077fd 	.word	0x080077fd
 8007824:	080077fd 	.word	0x080077fd
 8007828:	080077fd 	.word	0x080077fd
 800782c:	08007881 	.word	0x08007881
 8007830:	080077fd 	.word	0x080077fd
 8007834:	080077fd 	.word	0x080077fd
 8007838:	080077fd 	.word	0x080077fd
 800783c:	080077fd 	.word	0x080077fd
 8007840:	0800798d 	.word	0x0800798d
 8007844:	080078b1 	.word	0x080078b1
 8007848:	0800796f 	.word	0x0800796f
 800784c:	080077fd 	.word	0x080077fd
 8007850:	080077fd 	.word	0x080077fd
 8007854:	080079af 	.word	0x080079af
 8007858:	080077fd 	.word	0x080077fd
 800785c:	080078b1 	.word	0x080078b1
 8007860:	080077fd 	.word	0x080077fd
 8007864:	080077fd 	.word	0x080077fd
 8007868:	08007977 	.word	0x08007977
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	1d1a      	adds	r2, r3, #4
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	602a      	str	r2, [r5, #0]
 8007874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800787c:	2301      	movs	r3, #1
 800787e:	e0a3      	b.n	80079c8 <_printf_i+0x1f4>
 8007880:	6820      	ldr	r0, [r4, #0]
 8007882:	6829      	ldr	r1, [r5, #0]
 8007884:	0606      	lsls	r6, r0, #24
 8007886:	f101 0304 	add.w	r3, r1, #4
 800788a:	d50a      	bpl.n	80078a2 <_printf_i+0xce>
 800788c:	680e      	ldr	r6, [r1, #0]
 800788e:	602b      	str	r3, [r5, #0]
 8007890:	2e00      	cmp	r6, #0
 8007892:	da03      	bge.n	800789c <_printf_i+0xc8>
 8007894:	232d      	movs	r3, #45	; 0x2d
 8007896:	4276      	negs	r6, r6
 8007898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800789c:	485e      	ldr	r0, [pc, #376]	; (8007a18 <_printf_i+0x244>)
 800789e:	230a      	movs	r3, #10
 80078a0:	e019      	b.n	80078d6 <_printf_i+0x102>
 80078a2:	680e      	ldr	r6, [r1, #0]
 80078a4:	602b      	str	r3, [r5, #0]
 80078a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078aa:	bf18      	it	ne
 80078ac:	b236      	sxthne	r6, r6
 80078ae:	e7ef      	b.n	8007890 <_printf_i+0xbc>
 80078b0:	682b      	ldr	r3, [r5, #0]
 80078b2:	6820      	ldr	r0, [r4, #0]
 80078b4:	1d19      	adds	r1, r3, #4
 80078b6:	6029      	str	r1, [r5, #0]
 80078b8:	0601      	lsls	r1, r0, #24
 80078ba:	d501      	bpl.n	80078c0 <_printf_i+0xec>
 80078bc:	681e      	ldr	r6, [r3, #0]
 80078be:	e002      	b.n	80078c6 <_printf_i+0xf2>
 80078c0:	0646      	lsls	r6, r0, #25
 80078c2:	d5fb      	bpl.n	80078bc <_printf_i+0xe8>
 80078c4:	881e      	ldrh	r6, [r3, #0]
 80078c6:	4854      	ldr	r0, [pc, #336]	; (8007a18 <_printf_i+0x244>)
 80078c8:	2f6f      	cmp	r7, #111	; 0x6f
 80078ca:	bf0c      	ite	eq
 80078cc:	2308      	moveq	r3, #8
 80078ce:	230a      	movne	r3, #10
 80078d0:	2100      	movs	r1, #0
 80078d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078d6:	6865      	ldr	r5, [r4, #4]
 80078d8:	60a5      	str	r5, [r4, #8]
 80078da:	2d00      	cmp	r5, #0
 80078dc:	bfa2      	ittt	ge
 80078de:	6821      	ldrge	r1, [r4, #0]
 80078e0:	f021 0104 	bicge.w	r1, r1, #4
 80078e4:	6021      	strge	r1, [r4, #0]
 80078e6:	b90e      	cbnz	r6, 80078ec <_printf_i+0x118>
 80078e8:	2d00      	cmp	r5, #0
 80078ea:	d04d      	beq.n	8007988 <_printf_i+0x1b4>
 80078ec:	4615      	mov	r5, r2
 80078ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80078f2:	fb03 6711 	mls	r7, r3, r1, r6
 80078f6:	5dc7      	ldrb	r7, [r0, r7]
 80078f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078fc:	4637      	mov	r7, r6
 80078fe:	42bb      	cmp	r3, r7
 8007900:	460e      	mov	r6, r1
 8007902:	d9f4      	bls.n	80078ee <_printf_i+0x11a>
 8007904:	2b08      	cmp	r3, #8
 8007906:	d10b      	bne.n	8007920 <_printf_i+0x14c>
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	07de      	lsls	r6, r3, #31
 800790c:	d508      	bpl.n	8007920 <_printf_i+0x14c>
 800790e:	6923      	ldr	r3, [r4, #16]
 8007910:	6861      	ldr	r1, [r4, #4]
 8007912:	4299      	cmp	r1, r3
 8007914:	bfde      	ittt	le
 8007916:	2330      	movle	r3, #48	; 0x30
 8007918:	f805 3c01 	strble.w	r3, [r5, #-1]
 800791c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007920:	1b52      	subs	r2, r2, r5
 8007922:	6122      	str	r2, [r4, #16]
 8007924:	f8cd a000 	str.w	sl, [sp]
 8007928:	464b      	mov	r3, r9
 800792a:	aa03      	add	r2, sp, #12
 800792c:	4621      	mov	r1, r4
 800792e:	4640      	mov	r0, r8
 8007930:	f7ff fee2 	bl	80076f8 <_printf_common>
 8007934:	3001      	adds	r0, #1
 8007936:	d14c      	bne.n	80079d2 <_printf_i+0x1fe>
 8007938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800793c:	b004      	add	sp, #16
 800793e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007942:	4835      	ldr	r0, [pc, #212]	; (8007a18 <_printf_i+0x244>)
 8007944:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007948:	6829      	ldr	r1, [r5, #0]
 800794a:	6823      	ldr	r3, [r4, #0]
 800794c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007950:	6029      	str	r1, [r5, #0]
 8007952:	061d      	lsls	r5, r3, #24
 8007954:	d514      	bpl.n	8007980 <_printf_i+0x1ac>
 8007956:	07df      	lsls	r7, r3, #31
 8007958:	bf44      	itt	mi
 800795a:	f043 0320 	orrmi.w	r3, r3, #32
 800795e:	6023      	strmi	r3, [r4, #0]
 8007960:	b91e      	cbnz	r6, 800796a <_printf_i+0x196>
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	f023 0320 	bic.w	r3, r3, #32
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	2310      	movs	r3, #16
 800796c:	e7b0      	b.n	80078d0 <_printf_i+0xfc>
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	f043 0320 	orr.w	r3, r3, #32
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	2378      	movs	r3, #120	; 0x78
 8007978:	4828      	ldr	r0, [pc, #160]	; (8007a1c <_printf_i+0x248>)
 800797a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800797e:	e7e3      	b.n	8007948 <_printf_i+0x174>
 8007980:	0659      	lsls	r1, r3, #25
 8007982:	bf48      	it	mi
 8007984:	b2b6      	uxthmi	r6, r6
 8007986:	e7e6      	b.n	8007956 <_printf_i+0x182>
 8007988:	4615      	mov	r5, r2
 800798a:	e7bb      	b.n	8007904 <_printf_i+0x130>
 800798c:	682b      	ldr	r3, [r5, #0]
 800798e:	6826      	ldr	r6, [r4, #0]
 8007990:	6961      	ldr	r1, [r4, #20]
 8007992:	1d18      	adds	r0, r3, #4
 8007994:	6028      	str	r0, [r5, #0]
 8007996:	0635      	lsls	r5, r6, #24
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	d501      	bpl.n	80079a0 <_printf_i+0x1cc>
 800799c:	6019      	str	r1, [r3, #0]
 800799e:	e002      	b.n	80079a6 <_printf_i+0x1d2>
 80079a0:	0670      	lsls	r0, r6, #25
 80079a2:	d5fb      	bpl.n	800799c <_printf_i+0x1c8>
 80079a4:	8019      	strh	r1, [r3, #0]
 80079a6:	2300      	movs	r3, #0
 80079a8:	6123      	str	r3, [r4, #16]
 80079aa:	4615      	mov	r5, r2
 80079ac:	e7ba      	b.n	8007924 <_printf_i+0x150>
 80079ae:	682b      	ldr	r3, [r5, #0]
 80079b0:	1d1a      	adds	r2, r3, #4
 80079b2:	602a      	str	r2, [r5, #0]
 80079b4:	681d      	ldr	r5, [r3, #0]
 80079b6:	6862      	ldr	r2, [r4, #4]
 80079b8:	2100      	movs	r1, #0
 80079ba:	4628      	mov	r0, r5
 80079bc:	f7f8 fc10 	bl	80001e0 <memchr>
 80079c0:	b108      	cbz	r0, 80079c6 <_printf_i+0x1f2>
 80079c2:	1b40      	subs	r0, r0, r5
 80079c4:	6060      	str	r0, [r4, #4]
 80079c6:	6863      	ldr	r3, [r4, #4]
 80079c8:	6123      	str	r3, [r4, #16]
 80079ca:	2300      	movs	r3, #0
 80079cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079d0:	e7a8      	b.n	8007924 <_printf_i+0x150>
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	462a      	mov	r2, r5
 80079d6:	4649      	mov	r1, r9
 80079d8:	4640      	mov	r0, r8
 80079da:	47d0      	blx	sl
 80079dc:	3001      	adds	r0, #1
 80079de:	d0ab      	beq.n	8007938 <_printf_i+0x164>
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	079b      	lsls	r3, r3, #30
 80079e4:	d413      	bmi.n	8007a0e <_printf_i+0x23a>
 80079e6:	68e0      	ldr	r0, [r4, #12]
 80079e8:	9b03      	ldr	r3, [sp, #12]
 80079ea:	4298      	cmp	r0, r3
 80079ec:	bfb8      	it	lt
 80079ee:	4618      	movlt	r0, r3
 80079f0:	e7a4      	b.n	800793c <_printf_i+0x168>
 80079f2:	2301      	movs	r3, #1
 80079f4:	4632      	mov	r2, r6
 80079f6:	4649      	mov	r1, r9
 80079f8:	4640      	mov	r0, r8
 80079fa:	47d0      	blx	sl
 80079fc:	3001      	adds	r0, #1
 80079fe:	d09b      	beq.n	8007938 <_printf_i+0x164>
 8007a00:	3501      	adds	r5, #1
 8007a02:	68e3      	ldr	r3, [r4, #12]
 8007a04:	9903      	ldr	r1, [sp, #12]
 8007a06:	1a5b      	subs	r3, r3, r1
 8007a08:	42ab      	cmp	r3, r5
 8007a0a:	dcf2      	bgt.n	80079f2 <_printf_i+0x21e>
 8007a0c:	e7eb      	b.n	80079e6 <_printf_i+0x212>
 8007a0e:	2500      	movs	r5, #0
 8007a10:	f104 0619 	add.w	r6, r4, #25
 8007a14:	e7f5      	b.n	8007a02 <_printf_i+0x22e>
 8007a16:	bf00      	nop
 8007a18:	0800a9e8 	.word	0x0800a9e8
 8007a1c:	0800a9f9 	.word	0x0800a9f9

08007a20 <siprintf>:
 8007a20:	b40e      	push	{r1, r2, r3}
 8007a22:	b500      	push	{lr}
 8007a24:	b09c      	sub	sp, #112	; 0x70
 8007a26:	ab1d      	add	r3, sp, #116	; 0x74
 8007a28:	9002      	str	r0, [sp, #8]
 8007a2a:	9006      	str	r0, [sp, #24]
 8007a2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a30:	4809      	ldr	r0, [pc, #36]	; (8007a58 <siprintf+0x38>)
 8007a32:	9107      	str	r1, [sp, #28]
 8007a34:	9104      	str	r1, [sp, #16]
 8007a36:	4909      	ldr	r1, [pc, #36]	; (8007a5c <siprintf+0x3c>)
 8007a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a3c:	9105      	str	r1, [sp, #20]
 8007a3e:	6800      	ldr	r0, [r0, #0]
 8007a40:	9301      	str	r3, [sp, #4]
 8007a42:	a902      	add	r1, sp, #8
 8007a44:	f001 fc30 	bl	80092a8 <_svfiprintf_r>
 8007a48:	9b02      	ldr	r3, [sp, #8]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	701a      	strb	r2, [r3, #0]
 8007a4e:	b01c      	add	sp, #112	; 0x70
 8007a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a54:	b003      	add	sp, #12
 8007a56:	4770      	bx	lr
 8007a58:	2000000c 	.word	0x2000000c
 8007a5c:	ffff0208 	.word	0xffff0208

08007a60 <siscanf>:
 8007a60:	b40e      	push	{r1, r2, r3}
 8007a62:	b510      	push	{r4, lr}
 8007a64:	b09f      	sub	sp, #124	; 0x7c
 8007a66:	ac21      	add	r4, sp, #132	; 0x84
 8007a68:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007a6c:	f854 2b04 	ldr.w	r2, [r4], #4
 8007a70:	9201      	str	r2, [sp, #4]
 8007a72:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007a76:	9004      	str	r0, [sp, #16]
 8007a78:	9008      	str	r0, [sp, #32]
 8007a7a:	f7f8 fba9 	bl	80001d0 <strlen>
 8007a7e:	4b0c      	ldr	r3, [pc, #48]	; (8007ab0 <siscanf+0x50>)
 8007a80:	9005      	str	r0, [sp, #20]
 8007a82:	9009      	str	r0, [sp, #36]	; 0x24
 8007a84:	930d      	str	r3, [sp, #52]	; 0x34
 8007a86:	480b      	ldr	r0, [pc, #44]	; (8007ab4 <siscanf+0x54>)
 8007a88:	9a01      	ldr	r2, [sp, #4]
 8007a8a:	6800      	ldr	r0, [r0, #0]
 8007a8c:	9403      	str	r4, [sp, #12]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	9311      	str	r3, [sp, #68]	; 0x44
 8007a92:	9316      	str	r3, [sp, #88]	; 0x58
 8007a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a98:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007a9c:	a904      	add	r1, sp, #16
 8007a9e:	4623      	mov	r3, r4
 8007aa0:	f001 fd5c 	bl	800955c <__ssvfiscanf_r>
 8007aa4:	b01f      	add	sp, #124	; 0x7c
 8007aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aaa:	b003      	add	sp, #12
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	08007adb 	.word	0x08007adb
 8007ab4:	2000000c 	.word	0x2000000c

08007ab8 <__sread>:
 8007ab8:	b510      	push	{r4, lr}
 8007aba:	460c      	mov	r4, r1
 8007abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac0:	f002 f816 	bl	8009af0 <_read_r>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	bfab      	itete	ge
 8007ac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007aca:	89a3      	ldrhlt	r3, [r4, #12]
 8007acc:	181b      	addge	r3, r3, r0
 8007ace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ad2:	bfac      	ite	ge
 8007ad4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ad6:	81a3      	strhlt	r3, [r4, #12]
 8007ad8:	bd10      	pop	{r4, pc}

08007ada <__seofread>:
 8007ada:	2000      	movs	r0, #0
 8007adc:	4770      	bx	lr

08007ade <__swrite>:
 8007ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae2:	461f      	mov	r7, r3
 8007ae4:	898b      	ldrh	r3, [r1, #12]
 8007ae6:	05db      	lsls	r3, r3, #23
 8007ae8:	4605      	mov	r5, r0
 8007aea:	460c      	mov	r4, r1
 8007aec:	4616      	mov	r6, r2
 8007aee:	d505      	bpl.n	8007afc <__swrite+0x1e>
 8007af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af4:	2302      	movs	r3, #2
 8007af6:	2200      	movs	r2, #0
 8007af8:	f000 fed8 	bl	80088ac <_lseek_r>
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b06:	81a3      	strh	r3, [r4, #12]
 8007b08:	4632      	mov	r2, r6
 8007b0a:	463b      	mov	r3, r7
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b12:	f000 b82b 	b.w	8007b6c <_write_r>

08007b16 <__sseek>:
 8007b16:	b510      	push	{r4, lr}
 8007b18:	460c      	mov	r4, r1
 8007b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b1e:	f000 fec5 	bl	80088ac <_lseek_r>
 8007b22:	1c43      	adds	r3, r0, #1
 8007b24:	89a3      	ldrh	r3, [r4, #12]
 8007b26:	bf15      	itete	ne
 8007b28:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b32:	81a3      	strheq	r3, [r4, #12]
 8007b34:	bf18      	it	ne
 8007b36:	81a3      	strhne	r3, [r4, #12]
 8007b38:	bd10      	pop	{r4, pc}

08007b3a <__sclose>:
 8007b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b3e:	f000 b827 	b.w	8007b90 <_close_r>

08007b42 <strncmp>:
 8007b42:	b510      	push	{r4, lr}
 8007b44:	b17a      	cbz	r2, 8007b66 <strncmp+0x24>
 8007b46:	4603      	mov	r3, r0
 8007b48:	3901      	subs	r1, #1
 8007b4a:	1884      	adds	r4, r0, r2
 8007b4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007b50:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007b54:	4290      	cmp	r0, r2
 8007b56:	d101      	bne.n	8007b5c <strncmp+0x1a>
 8007b58:	42a3      	cmp	r3, r4
 8007b5a:	d101      	bne.n	8007b60 <strncmp+0x1e>
 8007b5c:	1a80      	subs	r0, r0, r2
 8007b5e:	bd10      	pop	{r4, pc}
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d1f3      	bne.n	8007b4c <strncmp+0xa>
 8007b64:	e7fa      	b.n	8007b5c <strncmp+0x1a>
 8007b66:	4610      	mov	r0, r2
 8007b68:	e7f9      	b.n	8007b5e <strncmp+0x1c>
	...

08007b6c <_write_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	4d07      	ldr	r5, [pc, #28]	; (8007b8c <_write_r+0x20>)
 8007b70:	4604      	mov	r4, r0
 8007b72:	4608      	mov	r0, r1
 8007b74:	4611      	mov	r1, r2
 8007b76:	2200      	movs	r2, #0
 8007b78:	602a      	str	r2, [r5, #0]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	f7fa fc11 	bl	80023a2 <_write>
 8007b80:	1c43      	adds	r3, r0, #1
 8007b82:	d102      	bne.n	8007b8a <_write_r+0x1e>
 8007b84:	682b      	ldr	r3, [r5, #0]
 8007b86:	b103      	cbz	r3, 8007b8a <_write_r+0x1e>
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	bd38      	pop	{r3, r4, r5, pc}
 8007b8c:	20000590 	.word	0x20000590

08007b90 <_close_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	4d06      	ldr	r5, [pc, #24]	; (8007bac <_close_r+0x1c>)
 8007b94:	2300      	movs	r3, #0
 8007b96:	4604      	mov	r4, r0
 8007b98:	4608      	mov	r0, r1
 8007b9a:	602b      	str	r3, [r5, #0]
 8007b9c:	f7fa fc1d 	bl	80023da <_close>
 8007ba0:	1c43      	adds	r3, r0, #1
 8007ba2:	d102      	bne.n	8007baa <_close_r+0x1a>
 8007ba4:	682b      	ldr	r3, [r5, #0]
 8007ba6:	b103      	cbz	r3, 8007baa <_close_r+0x1a>
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	bd38      	pop	{r3, r4, r5, pc}
 8007bac:	20000590 	.word	0x20000590

08007bb0 <quorem>:
 8007bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	6903      	ldr	r3, [r0, #16]
 8007bb6:	690c      	ldr	r4, [r1, #16]
 8007bb8:	42a3      	cmp	r3, r4
 8007bba:	4607      	mov	r7, r0
 8007bbc:	f2c0 8081 	blt.w	8007cc2 <quorem+0x112>
 8007bc0:	3c01      	subs	r4, #1
 8007bc2:	f101 0814 	add.w	r8, r1, #20
 8007bc6:	f100 0514 	add.w	r5, r0, #20
 8007bca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bce:	9301      	str	r3, [sp, #4]
 8007bd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007be0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007be4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007be8:	d331      	bcc.n	8007c4e <quorem+0x9e>
 8007bea:	f04f 0e00 	mov.w	lr, #0
 8007bee:	4640      	mov	r0, r8
 8007bf0:	46ac      	mov	ip, r5
 8007bf2:	46f2      	mov	sl, lr
 8007bf4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bf8:	b293      	uxth	r3, r2
 8007bfa:	fb06 e303 	mla	r3, r6, r3, lr
 8007bfe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	ebaa 0303 	sub.w	r3, sl, r3
 8007c08:	f8dc a000 	ldr.w	sl, [ip]
 8007c0c:	0c12      	lsrs	r2, r2, #16
 8007c0e:	fa13 f38a 	uxtah	r3, r3, sl
 8007c12:	fb06 e202 	mla	r2, r6, r2, lr
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	9b00      	ldr	r3, [sp, #0]
 8007c1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c1e:	b292      	uxth	r2, r2
 8007c20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c28:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c2c:	4581      	cmp	r9, r0
 8007c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c32:	f84c 3b04 	str.w	r3, [ip], #4
 8007c36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c3a:	d2db      	bcs.n	8007bf4 <quorem+0x44>
 8007c3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c40:	b92b      	cbnz	r3, 8007c4e <quorem+0x9e>
 8007c42:	9b01      	ldr	r3, [sp, #4]
 8007c44:	3b04      	subs	r3, #4
 8007c46:	429d      	cmp	r5, r3
 8007c48:	461a      	mov	r2, r3
 8007c4a:	d32e      	bcc.n	8007caa <quorem+0xfa>
 8007c4c:	613c      	str	r4, [r7, #16]
 8007c4e:	4638      	mov	r0, r7
 8007c50:	f001 f8d6 	bl	8008e00 <__mcmp>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	db24      	blt.n	8007ca2 <quorem+0xf2>
 8007c58:	3601      	adds	r6, #1
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f04f 0c00 	mov.w	ip, #0
 8007c60:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c64:	f8d0 e000 	ldr.w	lr, [r0]
 8007c68:	b293      	uxth	r3, r2
 8007c6a:	ebac 0303 	sub.w	r3, ip, r3
 8007c6e:	0c12      	lsrs	r2, r2, #16
 8007c70:	fa13 f38e 	uxtah	r3, r3, lr
 8007c74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c82:	45c1      	cmp	r9, r8
 8007c84:	f840 3b04 	str.w	r3, [r0], #4
 8007c88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c8c:	d2e8      	bcs.n	8007c60 <quorem+0xb0>
 8007c8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c96:	b922      	cbnz	r2, 8007ca2 <quorem+0xf2>
 8007c98:	3b04      	subs	r3, #4
 8007c9a:	429d      	cmp	r5, r3
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	d30a      	bcc.n	8007cb6 <quorem+0x106>
 8007ca0:	613c      	str	r4, [r7, #16]
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	b003      	add	sp, #12
 8007ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007caa:	6812      	ldr	r2, [r2, #0]
 8007cac:	3b04      	subs	r3, #4
 8007cae:	2a00      	cmp	r2, #0
 8007cb0:	d1cc      	bne.n	8007c4c <quorem+0x9c>
 8007cb2:	3c01      	subs	r4, #1
 8007cb4:	e7c7      	b.n	8007c46 <quorem+0x96>
 8007cb6:	6812      	ldr	r2, [r2, #0]
 8007cb8:	3b04      	subs	r3, #4
 8007cba:	2a00      	cmp	r2, #0
 8007cbc:	d1f0      	bne.n	8007ca0 <quorem+0xf0>
 8007cbe:	3c01      	subs	r4, #1
 8007cc0:	e7eb      	b.n	8007c9a <quorem+0xea>
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	e7ee      	b.n	8007ca4 <quorem+0xf4>
	...

08007cc8 <_dtoa_r>:
 8007cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ccc:	ed2d 8b04 	vpush	{d8-d9}
 8007cd0:	ec57 6b10 	vmov	r6, r7, d0
 8007cd4:	b093      	sub	sp, #76	; 0x4c
 8007cd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007cd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007cdc:	9106      	str	r1, [sp, #24]
 8007cde:	ee10 aa10 	vmov	sl, s0
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ce6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ce8:	46bb      	mov	fp, r7
 8007cea:	b975      	cbnz	r5, 8007d0a <_dtoa_r+0x42>
 8007cec:	2010      	movs	r0, #16
 8007cee:	f000 fdef 	bl	80088d0 <malloc>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	6260      	str	r0, [r4, #36]	; 0x24
 8007cf6:	b920      	cbnz	r0, 8007d02 <_dtoa_r+0x3a>
 8007cf8:	4ba7      	ldr	r3, [pc, #668]	; (8007f98 <_dtoa_r+0x2d0>)
 8007cfa:	21ea      	movs	r1, #234	; 0xea
 8007cfc:	48a7      	ldr	r0, [pc, #668]	; (8007f9c <_dtoa_r+0x2d4>)
 8007cfe:	f002 f883 	bl	8009e08 <__assert_func>
 8007d02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d06:	6005      	str	r5, [r0, #0]
 8007d08:	60c5      	str	r5, [r0, #12]
 8007d0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d0c:	6819      	ldr	r1, [r3, #0]
 8007d0e:	b151      	cbz	r1, 8007d26 <_dtoa_r+0x5e>
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	604a      	str	r2, [r1, #4]
 8007d14:	2301      	movs	r3, #1
 8007d16:	4093      	lsls	r3, r2
 8007d18:	608b      	str	r3, [r1, #8]
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f000 fe2e 	bl	800897c <_Bfree>
 8007d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	1e3b      	subs	r3, r7, #0
 8007d28:	bfaa      	itet	ge
 8007d2a:	2300      	movge	r3, #0
 8007d2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007d30:	f8c8 3000 	strge.w	r3, [r8]
 8007d34:	4b9a      	ldr	r3, [pc, #616]	; (8007fa0 <_dtoa_r+0x2d8>)
 8007d36:	bfbc      	itt	lt
 8007d38:	2201      	movlt	r2, #1
 8007d3a:	f8c8 2000 	strlt.w	r2, [r8]
 8007d3e:	ea33 030b 	bics.w	r3, r3, fp
 8007d42:	d11b      	bne.n	8007d7c <_dtoa_r+0xb4>
 8007d44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d46:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d50:	4333      	orrs	r3, r6
 8007d52:	f000 8592 	beq.w	800887a <_dtoa_r+0xbb2>
 8007d56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d58:	b963      	cbnz	r3, 8007d74 <_dtoa_r+0xac>
 8007d5a:	4b92      	ldr	r3, [pc, #584]	; (8007fa4 <_dtoa_r+0x2dc>)
 8007d5c:	e022      	b.n	8007da4 <_dtoa_r+0xdc>
 8007d5e:	4b92      	ldr	r3, [pc, #584]	; (8007fa8 <_dtoa_r+0x2e0>)
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	3308      	adds	r3, #8
 8007d64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d66:	6013      	str	r3, [r2, #0]
 8007d68:	9801      	ldr	r0, [sp, #4]
 8007d6a:	b013      	add	sp, #76	; 0x4c
 8007d6c:	ecbd 8b04 	vpop	{d8-d9}
 8007d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d74:	4b8b      	ldr	r3, [pc, #556]	; (8007fa4 <_dtoa_r+0x2dc>)
 8007d76:	9301      	str	r3, [sp, #4]
 8007d78:	3303      	adds	r3, #3
 8007d7a:	e7f3      	b.n	8007d64 <_dtoa_r+0x9c>
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2300      	movs	r3, #0
 8007d80:	4650      	mov	r0, sl
 8007d82:	4659      	mov	r1, fp
 8007d84:	f7f8 fea0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d88:	ec4b ab19 	vmov	d9, sl, fp
 8007d8c:	4680      	mov	r8, r0
 8007d8e:	b158      	cbz	r0, 8007da8 <_dtoa_r+0xe0>
 8007d90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d92:	2301      	movs	r3, #1
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 856b 	beq.w	8008874 <_dtoa_r+0xbac>
 8007d9e:	4883      	ldr	r0, [pc, #524]	; (8007fac <_dtoa_r+0x2e4>)
 8007da0:	6018      	str	r0, [r3, #0]
 8007da2:	1e43      	subs	r3, r0, #1
 8007da4:	9301      	str	r3, [sp, #4]
 8007da6:	e7df      	b.n	8007d68 <_dtoa_r+0xa0>
 8007da8:	ec4b ab10 	vmov	d0, sl, fp
 8007dac:	aa10      	add	r2, sp, #64	; 0x40
 8007dae:	a911      	add	r1, sp, #68	; 0x44
 8007db0:	4620      	mov	r0, r4
 8007db2:	f001 f8cb 	bl	8008f4c <__d2b>
 8007db6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007dba:	ee08 0a10 	vmov	s16, r0
 8007dbe:	2d00      	cmp	r5, #0
 8007dc0:	f000 8084 	beq.w	8007ecc <_dtoa_r+0x204>
 8007dc4:	ee19 3a90 	vmov	r3, s19
 8007dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dcc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007dd0:	4656      	mov	r6, sl
 8007dd2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007dd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007dda:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007dde:	4b74      	ldr	r3, [pc, #464]	; (8007fb0 <_dtoa_r+0x2e8>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	4630      	mov	r0, r6
 8007de4:	4639      	mov	r1, r7
 8007de6:	f7f8 fa4f 	bl	8000288 <__aeabi_dsub>
 8007dea:	a365      	add	r3, pc, #404	; (adr r3, 8007f80 <_dtoa_r+0x2b8>)
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	f7f8 fc02 	bl	80005f8 <__aeabi_dmul>
 8007df4:	a364      	add	r3, pc, #400	; (adr r3, 8007f88 <_dtoa_r+0x2c0>)
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	f7f8 fa47 	bl	800028c <__adddf3>
 8007dfe:	4606      	mov	r6, r0
 8007e00:	4628      	mov	r0, r5
 8007e02:	460f      	mov	r7, r1
 8007e04:	f7f8 fb8e 	bl	8000524 <__aeabi_i2d>
 8007e08:	a361      	add	r3, pc, #388	; (adr r3, 8007f90 <_dtoa_r+0x2c8>)
 8007e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0e:	f7f8 fbf3 	bl	80005f8 <__aeabi_dmul>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4630      	mov	r0, r6
 8007e18:	4639      	mov	r1, r7
 8007e1a:	f7f8 fa37 	bl	800028c <__adddf3>
 8007e1e:	4606      	mov	r6, r0
 8007e20:	460f      	mov	r7, r1
 8007e22:	f7f8 fe99 	bl	8000b58 <__aeabi_d2iz>
 8007e26:	2200      	movs	r2, #0
 8007e28:	9000      	str	r0, [sp, #0]
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	4639      	mov	r1, r7
 8007e30:	f7f8 fe54 	bl	8000adc <__aeabi_dcmplt>
 8007e34:	b150      	cbz	r0, 8007e4c <_dtoa_r+0x184>
 8007e36:	9800      	ldr	r0, [sp, #0]
 8007e38:	f7f8 fb74 	bl	8000524 <__aeabi_i2d>
 8007e3c:	4632      	mov	r2, r6
 8007e3e:	463b      	mov	r3, r7
 8007e40:	f7f8 fe42 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e44:	b910      	cbnz	r0, 8007e4c <_dtoa_r+0x184>
 8007e46:	9b00      	ldr	r3, [sp, #0]
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	9b00      	ldr	r3, [sp, #0]
 8007e4e:	2b16      	cmp	r3, #22
 8007e50:	d85a      	bhi.n	8007f08 <_dtoa_r+0x240>
 8007e52:	9a00      	ldr	r2, [sp, #0]
 8007e54:	4b57      	ldr	r3, [pc, #348]	; (8007fb4 <_dtoa_r+0x2ec>)
 8007e56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	ec51 0b19 	vmov	r0, r1, d9
 8007e62:	f7f8 fe3b 	bl	8000adc <__aeabi_dcmplt>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d050      	beq.n	8007f0c <_dtoa_r+0x244>
 8007e6a:	9b00      	ldr	r3, [sp, #0]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	2300      	movs	r3, #0
 8007e72:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e76:	1b5d      	subs	r5, r3, r5
 8007e78:	1e6b      	subs	r3, r5, #1
 8007e7a:	9305      	str	r3, [sp, #20]
 8007e7c:	bf45      	ittet	mi
 8007e7e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007e82:	9304      	strmi	r3, [sp, #16]
 8007e84:	2300      	movpl	r3, #0
 8007e86:	2300      	movmi	r3, #0
 8007e88:	bf4c      	ite	mi
 8007e8a:	9305      	strmi	r3, [sp, #20]
 8007e8c:	9304      	strpl	r3, [sp, #16]
 8007e8e:	9b00      	ldr	r3, [sp, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	db3d      	blt.n	8007f10 <_dtoa_r+0x248>
 8007e94:	9b05      	ldr	r3, [sp, #20]
 8007e96:	9a00      	ldr	r2, [sp, #0]
 8007e98:	920a      	str	r2, [sp, #40]	; 0x28
 8007e9a:	4413      	add	r3, r2
 8007e9c:	9305      	str	r3, [sp, #20]
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	9307      	str	r3, [sp, #28]
 8007ea2:	9b06      	ldr	r3, [sp, #24]
 8007ea4:	2b09      	cmp	r3, #9
 8007ea6:	f200 8089 	bhi.w	8007fbc <_dtoa_r+0x2f4>
 8007eaa:	2b05      	cmp	r3, #5
 8007eac:	bfc4      	itt	gt
 8007eae:	3b04      	subgt	r3, #4
 8007eb0:	9306      	strgt	r3, [sp, #24]
 8007eb2:	9b06      	ldr	r3, [sp, #24]
 8007eb4:	f1a3 0302 	sub.w	r3, r3, #2
 8007eb8:	bfcc      	ite	gt
 8007eba:	2500      	movgt	r5, #0
 8007ebc:	2501      	movle	r5, #1
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	f200 8087 	bhi.w	8007fd2 <_dtoa_r+0x30a>
 8007ec4:	e8df f003 	tbb	[pc, r3]
 8007ec8:	59383a2d 	.word	0x59383a2d
 8007ecc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007ed0:	441d      	add	r5, r3
 8007ed2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	bfc1      	itttt	gt
 8007eda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ede:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007ee2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007ee6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007eea:	bfda      	itte	le
 8007eec:	f1c3 0320 	rsble	r3, r3, #32
 8007ef0:	fa06 f003 	lslle.w	r0, r6, r3
 8007ef4:	4318      	orrgt	r0, r3
 8007ef6:	f7f8 fb05 	bl	8000504 <__aeabi_ui2d>
 8007efa:	2301      	movs	r3, #1
 8007efc:	4606      	mov	r6, r0
 8007efe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007f02:	3d01      	subs	r5, #1
 8007f04:	930e      	str	r3, [sp, #56]	; 0x38
 8007f06:	e76a      	b.n	8007dde <_dtoa_r+0x116>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e7b2      	b.n	8007e72 <_dtoa_r+0x1aa>
 8007f0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007f0e:	e7b1      	b.n	8007e74 <_dtoa_r+0x1ac>
 8007f10:	9b04      	ldr	r3, [sp, #16]
 8007f12:	9a00      	ldr	r2, [sp, #0]
 8007f14:	1a9b      	subs	r3, r3, r2
 8007f16:	9304      	str	r3, [sp, #16]
 8007f18:	4253      	negs	r3, r2
 8007f1a:	9307      	str	r3, [sp, #28]
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f20:	e7bf      	b.n	8007ea2 <_dtoa_r+0x1da>
 8007f22:	2300      	movs	r3, #0
 8007f24:	9308      	str	r3, [sp, #32]
 8007f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	dc55      	bgt.n	8007fd8 <_dtoa_r+0x310>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f32:	461a      	mov	r2, r3
 8007f34:	9209      	str	r2, [sp, #36]	; 0x24
 8007f36:	e00c      	b.n	8007f52 <_dtoa_r+0x28a>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e7f3      	b.n	8007f24 <_dtoa_r+0x25c>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f40:	9308      	str	r3, [sp, #32]
 8007f42:	9b00      	ldr	r3, [sp, #0]
 8007f44:	4413      	add	r3, r2
 8007f46:	9302      	str	r3, [sp, #8]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	9303      	str	r3, [sp, #12]
 8007f4e:	bfb8      	it	lt
 8007f50:	2301      	movlt	r3, #1
 8007f52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007f54:	2200      	movs	r2, #0
 8007f56:	6042      	str	r2, [r0, #4]
 8007f58:	2204      	movs	r2, #4
 8007f5a:	f102 0614 	add.w	r6, r2, #20
 8007f5e:	429e      	cmp	r6, r3
 8007f60:	6841      	ldr	r1, [r0, #4]
 8007f62:	d93d      	bls.n	8007fe0 <_dtoa_r+0x318>
 8007f64:	4620      	mov	r0, r4
 8007f66:	f000 fcc9 	bl	80088fc <_Balloc>
 8007f6a:	9001      	str	r0, [sp, #4]
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d13b      	bne.n	8007fe8 <_dtoa_r+0x320>
 8007f70:	4b11      	ldr	r3, [pc, #68]	; (8007fb8 <_dtoa_r+0x2f0>)
 8007f72:	4602      	mov	r2, r0
 8007f74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f78:	e6c0      	b.n	8007cfc <_dtoa_r+0x34>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e7df      	b.n	8007f3e <_dtoa_r+0x276>
 8007f7e:	bf00      	nop
 8007f80:	636f4361 	.word	0x636f4361
 8007f84:	3fd287a7 	.word	0x3fd287a7
 8007f88:	8b60c8b3 	.word	0x8b60c8b3
 8007f8c:	3fc68a28 	.word	0x3fc68a28
 8007f90:	509f79fb 	.word	0x509f79fb
 8007f94:	3fd34413 	.word	0x3fd34413
 8007f98:	0800aa17 	.word	0x0800aa17
 8007f9c:	0800aa2e 	.word	0x0800aa2e
 8007fa0:	7ff00000 	.word	0x7ff00000
 8007fa4:	0800aa13 	.word	0x0800aa13
 8007fa8:	0800aa0a 	.word	0x0800aa0a
 8007fac:	0800ac0a 	.word	0x0800ac0a
 8007fb0:	3ff80000 	.word	0x3ff80000
 8007fb4:	0800ab20 	.word	0x0800ab20
 8007fb8:	0800aa89 	.word	0x0800aa89
 8007fbc:	2501      	movs	r5, #1
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9306      	str	r3, [sp, #24]
 8007fc2:	9508      	str	r5, [sp, #32]
 8007fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	2312      	movs	r3, #18
 8007fd0:	e7b0      	b.n	8007f34 <_dtoa_r+0x26c>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	9308      	str	r3, [sp, #32]
 8007fd6:	e7f5      	b.n	8007fc4 <_dtoa_r+0x2fc>
 8007fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fde:	e7b8      	b.n	8007f52 <_dtoa_r+0x28a>
 8007fe0:	3101      	adds	r1, #1
 8007fe2:	6041      	str	r1, [r0, #4]
 8007fe4:	0052      	lsls	r2, r2, #1
 8007fe6:	e7b8      	b.n	8007f5a <_dtoa_r+0x292>
 8007fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fea:	9a01      	ldr	r2, [sp, #4]
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	9b03      	ldr	r3, [sp, #12]
 8007ff0:	2b0e      	cmp	r3, #14
 8007ff2:	f200 809d 	bhi.w	8008130 <_dtoa_r+0x468>
 8007ff6:	2d00      	cmp	r5, #0
 8007ff8:	f000 809a 	beq.w	8008130 <_dtoa_r+0x468>
 8007ffc:	9b00      	ldr	r3, [sp, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	dd32      	ble.n	8008068 <_dtoa_r+0x3a0>
 8008002:	4ab7      	ldr	r2, [pc, #732]	; (80082e0 <_dtoa_r+0x618>)
 8008004:	f003 030f 	and.w	r3, r3, #15
 8008008:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800800c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008010:	9b00      	ldr	r3, [sp, #0]
 8008012:	05d8      	lsls	r0, r3, #23
 8008014:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008018:	d516      	bpl.n	8008048 <_dtoa_r+0x380>
 800801a:	4bb2      	ldr	r3, [pc, #712]	; (80082e4 <_dtoa_r+0x61c>)
 800801c:	ec51 0b19 	vmov	r0, r1, d9
 8008020:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008024:	f7f8 fc12 	bl	800084c <__aeabi_ddiv>
 8008028:	f007 070f 	and.w	r7, r7, #15
 800802c:	4682      	mov	sl, r0
 800802e:	468b      	mov	fp, r1
 8008030:	2503      	movs	r5, #3
 8008032:	4eac      	ldr	r6, [pc, #688]	; (80082e4 <_dtoa_r+0x61c>)
 8008034:	b957      	cbnz	r7, 800804c <_dtoa_r+0x384>
 8008036:	4642      	mov	r2, r8
 8008038:	464b      	mov	r3, r9
 800803a:	4650      	mov	r0, sl
 800803c:	4659      	mov	r1, fp
 800803e:	f7f8 fc05 	bl	800084c <__aeabi_ddiv>
 8008042:	4682      	mov	sl, r0
 8008044:	468b      	mov	fp, r1
 8008046:	e028      	b.n	800809a <_dtoa_r+0x3d2>
 8008048:	2502      	movs	r5, #2
 800804a:	e7f2      	b.n	8008032 <_dtoa_r+0x36a>
 800804c:	07f9      	lsls	r1, r7, #31
 800804e:	d508      	bpl.n	8008062 <_dtoa_r+0x39a>
 8008050:	4640      	mov	r0, r8
 8008052:	4649      	mov	r1, r9
 8008054:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008058:	f7f8 face 	bl	80005f8 <__aeabi_dmul>
 800805c:	3501      	adds	r5, #1
 800805e:	4680      	mov	r8, r0
 8008060:	4689      	mov	r9, r1
 8008062:	107f      	asrs	r7, r7, #1
 8008064:	3608      	adds	r6, #8
 8008066:	e7e5      	b.n	8008034 <_dtoa_r+0x36c>
 8008068:	f000 809b 	beq.w	80081a2 <_dtoa_r+0x4da>
 800806c:	9b00      	ldr	r3, [sp, #0]
 800806e:	4f9d      	ldr	r7, [pc, #628]	; (80082e4 <_dtoa_r+0x61c>)
 8008070:	425e      	negs	r6, r3
 8008072:	4b9b      	ldr	r3, [pc, #620]	; (80082e0 <_dtoa_r+0x618>)
 8008074:	f006 020f 	and.w	r2, r6, #15
 8008078:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	ec51 0b19 	vmov	r0, r1, d9
 8008084:	f7f8 fab8 	bl	80005f8 <__aeabi_dmul>
 8008088:	1136      	asrs	r6, r6, #4
 800808a:	4682      	mov	sl, r0
 800808c:	468b      	mov	fp, r1
 800808e:	2300      	movs	r3, #0
 8008090:	2502      	movs	r5, #2
 8008092:	2e00      	cmp	r6, #0
 8008094:	d17a      	bne.n	800818c <_dtoa_r+0x4c4>
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1d3      	bne.n	8008042 <_dtoa_r+0x37a>
 800809a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 8082 	beq.w	80081a6 <_dtoa_r+0x4de>
 80080a2:	4b91      	ldr	r3, [pc, #580]	; (80082e8 <_dtoa_r+0x620>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	4650      	mov	r0, sl
 80080a8:	4659      	mov	r1, fp
 80080aa:	f7f8 fd17 	bl	8000adc <__aeabi_dcmplt>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d079      	beq.n	80081a6 <_dtoa_r+0x4de>
 80080b2:	9b03      	ldr	r3, [sp, #12]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d076      	beq.n	80081a6 <_dtoa_r+0x4de>
 80080b8:	9b02      	ldr	r3, [sp, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	dd36      	ble.n	800812c <_dtoa_r+0x464>
 80080be:	9b00      	ldr	r3, [sp, #0]
 80080c0:	4650      	mov	r0, sl
 80080c2:	4659      	mov	r1, fp
 80080c4:	1e5f      	subs	r7, r3, #1
 80080c6:	2200      	movs	r2, #0
 80080c8:	4b88      	ldr	r3, [pc, #544]	; (80082ec <_dtoa_r+0x624>)
 80080ca:	f7f8 fa95 	bl	80005f8 <__aeabi_dmul>
 80080ce:	9e02      	ldr	r6, [sp, #8]
 80080d0:	4682      	mov	sl, r0
 80080d2:	468b      	mov	fp, r1
 80080d4:	3501      	adds	r5, #1
 80080d6:	4628      	mov	r0, r5
 80080d8:	f7f8 fa24 	bl	8000524 <__aeabi_i2d>
 80080dc:	4652      	mov	r2, sl
 80080de:	465b      	mov	r3, fp
 80080e0:	f7f8 fa8a 	bl	80005f8 <__aeabi_dmul>
 80080e4:	4b82      	ldr	r3, [pc, #520]	; (80082f0 <_dtoa_r+0x628>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	f7f8 f8d0 	bl	800028c <__adddf3>
 80080ec:	46d0      	mov	r8, sl
 80080ee:	46d9      	mov	r9, fp
 80080f0:	4682      	mov	sl, r0
 80080f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80080f6:	2e00      	cmp	r6, #0
 80080f8:	d158      	bne.n	80081ac <_dtoa_r+0x4e4>
 80080fa:	4b7e      	ldr	r3, [pc, #504]	; (80082f4 <_dtoa_r+0x62c>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	4640      	mov	r0, r8
 8008100:	4649      	mov	r1, r9
 8008102:	f7f8 f8c1 	bl	8000288 <__aeabi_dsub>
 8008106:	4652      	mov	r2, sl
 8008108:	465b      	mov	r3, fp
 800810a:	4680      	mov	r8, r0
 800810c:	4689      	mov	r9, r1
 800810e:	f7f8 fd03 	bl	8000b18 <__aeabi_dcmpgt>
 8008112:	2800      	cmp	r0, #0
 8008114:	f040 8295 	bne.w	8008642 <_dtoa_r+0x97a>
 8008118:	4652      	mov	r2, sl
 800811a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800811e:	4640      	mov	r0, r8
 8008120:	4649      	mov	r1, r9
 8008122:	f7f8 fcdb 	bl	8000adc <__aeabi_dcmplt>
 8008126:	2800      	cmp	r0, #0
 8008128:	f040 8289 	bne.w	800863e <_dtoa_r+0x976>
 800812c:	ec5b ab19 	vmov	sl, fp, d9
 8008130:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008132:	2b00      	cmp	r3, #0
 8008134:	f2c0 8148 	blt.w	80083c8 <_dtoa_r+0x700>
 8008138:	9a00      	ldr	r2, [sp, #0]
 800813a:	2a0e      	cmp	r2, #14
 800813c:	f300 8144 	bgt.w	80083c8 <_dtoa_r+0x700>
 8008140:	4b67      	ldr	r3, [pc, #412]	; (80082e0 <_dtoa_r+0x618>)
 8008142:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008146:	e9d3 8900 	ldrd	r8, r9, [r3]
 800814a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814c:	2b00      	cmp	r3, #0
 800814e:	f280 80d5 	bge.w	80082fc <_dtoa_r+0x634>
 8008152:	9b03      	ldr	r3, [sp, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	f300 80d1 	bgt.w	80082fc <_dtoa_r+0x634>
 800815a:	f040 826f 	bne.w	800863c <_dtoa_r+0x974>
 800815e:	4b65      	ldr	r3, [pc, #404]	; (80082f4 <_dtoa_r+0x62c>)
 8008160:	2200      	movs	r2, #0
 8008162:	4640      	mov	r0, r8
 8008164:	4649      	mov	r1, r9
 8008166:	f7f8 fa47 	bl	80005f8 <__aeabi_dmul>
 800816a:	4652      	mov	r2, sl
 800816c:	465b      	mov	r3, fp
 800816e:	f7f8 fcc9 	bl	8000b04 <__aeabi_dcmpge>
 8008172:	9e03      	ldr	r6, [sp, #12]
 8008174:	4637      	mov	r7, r6
 8008176:	2800      	cmp	r0, #0
 8008178:	f040 8245 	bne.w	8008606 <_dtoa_r+0x93e>
 800817c:	9d01      	ldr	r5, [sp, #4]
 800817e:	2331      	movs	r3, #49	; 0x31
 8008180:	f805 3b01 	strb.w	r3, [r5], #1
 8008184:	9b00      	ldr	r3, [sp, #0]
 8008186:	3301      	adds	r3, #1
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	e240      	b.n	800860e <_dtoa_r+0x946>
 800818c:	07f2      	lsls	r2, r6, #31
 800818e:	d505      	bpl.n	800819c <_dtoa_r+0x4d4>
 8008190:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008194:	f7f8 fa30 	bl	80005f8 <__aeabi_dmul>
 8008198:	3501      	adds	r5, #1
 800819a:	2301      	movs	r3, #1
 800819c:	1076      	asrs	r6, r6, #1
 800819e:	3708      	adds	r7, #8
 80081a0:	e777      	b.n	8008092 <_dtoa_r+0x3ca>
 80081a2:	2502      	movs	r5, #2
 80081a4:	e779      	b.n	800809a <_dtoa_r+0x3d2>
 80081a6:	9f00      	ldr	r7, [sp, #0]
 80081a8:	9e03      	ldr	r6, [sp, #12]
 80081aa:	e794      	b.n	80080d6 <_dtoa_r+0x40e>
 80081ac:	9901      	ldr	r1, [sp, #4]
 80081ae:	4b4c      	ldr	r3, [pc, #304]	; (80082e0 <_dtoa_r+0x618>)
 80081b0:	4431      	add	r1, r6
 80081b2:	910d      	str	r1, [sp, #52]	; 0x34
 80081b4:	9908      	ldr	r1, [sp, #32]
 80081b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80081ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081be:	2900      	cmp	r1, #0
 80081c0:	d043      	beq.n	800824a <_dtoa_r+0x582>
 80081c2:	494d      	ldr	r1, [pc, #308]	; (80082f8 <_dtoa_r+0x630>)
 80081c4:	2000      	movs	r0, #0
 80081c6:	f7f8 fb41 	bl	800084c <__aeabi_ddiv>
 80081ca:	4652      	mov	r2, sl
 80081cc:	465b      	mov	r3, fp
 80081ce:	f7f8 f85b 	bl	8000288 <__aeabi_dsub>
 80081d2:	9d01      	ldr	r5, [sp, #4]
 80081d4:	4682      	mov	sl, r0
 80081d6:	468b      	mov	fp, r1
 80081d8:	4649      	mov	r1, r9
 80081da:	4640      	mov	r0, r8
 80081dc:	f7f8 fcbc 	bl	8000b58 <__aeabi_d2iz>
 80081e0:	4606      	mov	r6, r0
 80081e2:	f7f8 f99f 	bl	8000524 <__aeabi_i2d>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	4640      	mov	r0, r8
 80081ec:	4649      	mov	r1, r9
 80081ee:	f7f8 f84b 	bl	8000288 <__aeabi_dsub>
 80081f2:	3630      	adds	r6, #48	; 0x30
 80081f4:	f805 6b01 	strb.w	r6, [r5], #1
 80081f8:	4652      	mov	r2, sl
 80081fa:	465b      	mov	r3, fp
 80081fc:	4680      	mov	r8, r0
 80081fe:	4689      	mov	r9, r1
 8008200:	f7f8 fc6c 	bl	8000adc <__aeabi_dcmplt>
 8008204:	2800      	cmp	r0, #0
 8008206:	d163      	bne.n	80082d0 <_dtoa_r+0x608>
 8008208:	4642      	mov	r2, r8
 800820a:	464b      	mov	r3, r9
 800820c:	4936      	ldr	r1, [pc, #216]	; (80082e8 <_dtoa_r+0x620>)
 800820e:	2000      	movs	r0, #0
 8008210:	f7f8 f83a 	bl	8000288 <__aeabi_dsub>
 8008214:	4652      	mov	r2, sl
 8008216:	465b      	mov	r3, fp
 8008218:	f7f8 fc60 	bl	8000adc <__aeabi_dcmplt>
 800821c:	2800      	cmp	r0, #0
 800821e:	f040 80b5 	bne.w	800838c <_dtoa_r+0x6c4>
 8008222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008224:	429d      	cmp	r5, r3
 8008226:	d081      	beq.n	800812c <_dtoa_r+0x464>
 8008228:	4b30      	ldr	r3, [pc, #192]	; (80082ec <_dtoa_r+0x624>)
 800822a:	2200      	movs	r2, #0
 800822c:	4650      	mov	r0, sl
 800822e:	4659      	mov	r1, fp
 8008230:	f7f8 f9e2 	bl	80005f8 <__aeabi_dmul>
 8008234:	4b2d      	ldr	r3, [pc, #180]	; (80082ec <_dtoa_r+0x624>)
 8008236:	4682      	mov	sl, r0
 8008238:	468b      	mov	fp, r1
 800823a:	4640      	mov	r0, r8
 800823c:	4649      	mov	r1, r9
 800823e:	2200      	movs	r2, #0
 8008240:	f7f8 f9da 	bl	80005f8 <__aeabi_dmul>
 8008244:	4680      	mov	r8, r0
 8008246:	4689      	mov	r9, r1
 8008248:	e7c6      	b.n	80081d8 <_dtoa_r+0x510>
 800824a:	4650      	mov	r0, sl
 800824c:	4659      	mov	r1, fp
 800824e:	f7f8 f9d3 	bl	80005f8 <__aeabi_dmul>
 8008252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008254:	9d01      	ldr	r5, [sp, #4]
 8008256:	930f      	str	r3, [sp, #60]	; 0x3c
 8008258:	4682      	mov	sl, r0
 800825a:	468b      	mov	fp, r1
 800825c:	4649      	mov	r1, r9
 800825e:	4640      	mov	r0, r8
 8008260:	f7f8 fc7a 	bl	8000b58 <__aeabi_d2iz>
 8008264:	4606      	mov	r6, r0
 8008266:	f7f8 f95d 	bl	8000524 <__aeabi_i2d>
 800826a:	3630      	adds	r6, #48	; 0x30
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4640      	mov	r0, r8
 8008272:	4649      	mov	r1, r9
 8008274:	f7f8 f808 	bl	8000288 <__aeabi_dsub>
 8008278:	f805 6b01 	strb.w	r6, [r5], #1
 800827c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800827e:	429d      	cmp	r5, r3
 8008280:	4680      	mov	r8, r0
 8008282:	4689      	mov	r9, r1
 8008284:	f04f 0200 	mov.w	r2, #0
 8008288:	d124      	bne.n	80082d4 <_dtoa_r+0x60c>
 800828a:	4b1b      	ldr	r3, [pc, #108]	; (80082f8 <_dtoa_r+0x630>)
 800828c:	4650      	mov	r0, sl
 800828e:	4659      	mov	r1, fp
 8008290:	f7f7 fffc 	bl	800028c <__adddf3>
 8008294:	4602      	mov	r2, r0
 8008296:	460b      	mov	r3, r1
 8008298:	4640      	mov	r0, r8
 800829a:	4649      	mov	r1, r9
 800829c:	f7f8 fc3c 	bl	8000b18 <__aeabi_dcmpgt>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	d173      	bne.n	800838c <_dtoa_r+0x6c4>
 80082a4:	4652      	mov	r2, sl
 80082a6:	465b      	mov	r3, fp
 80082a8:	4913      	ldr	r1, [pc, #76]	; (80082f8 <_dtoa_r+0x630>)
 80082aa:	2000      	movs	r0, #0
 80082ac:	f7f7 ffec 	bl	8000288 <__aeabi_dsub>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4640      	mov	r0, r8
 80082b6:	4649      	mov	r1, r9
 80082b8:	f7f8 fc10 	bl	8000adc <__aeabi_dcmplt>
 80082bc:	2800      	cmp	r0, #0
 80082be:	f43f af35 	beq.w	800812c <_dtoa_r+0x464>
 80082c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80082c4:	1e6b      	subs	r3, r5, #1
 80082c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80082c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082cc:	2b30      	cmp	r3, #48	; 0x30
 80082ce:	d0f8      	beq.n	80082c2 <_dtoa_r+0x5fa>
 80082d0:	9700      	str	r7, [sp, #0]
 80082d2:	e049      	b.n	8008368 <_dtoa_r+0x6a0>
 80082d4:	4b05      	ldr	r3, [pc, #20]	; (80082ec <_dtoa_r+0x624>)
 80082d6:	f7f8 f98f 	bl	80005f8 <__aeabi_dmul>
 80082da:	4680      	mov	r8, r0
 80082dc:	4689      	mov	r9, r1
 80082de:	e7bd      	b.n	800825c <_dtoa_r+0x594>
 80082e0:	0800ab20 	.word	0x0800ab20
 80082e4:	0800aaf8 	.word	0x0800aaf8
 80082e8:	3ff00000 	.word	0x3ff00000
 80082ec:	40240000 	.word	0x40240000
 80082f0:	401c0000 	.word	0x401c0000
 80082f4:	40140000 	.word	0x40140000
 80082f8:	3fe00000 	.word	0x3fe00000
 80082fc:	9d01      	ldr	r5, [sp, #4]
 80082fe:	4656      	mov	r6, sl
 8008300:	465f      	mov	r7, fp
 8008302:	4642      	mov	r2, r8
 8008304:	464b      	mov	r3, r9
 8008306:	4630      	mov	r0, r6
 8008308:	4639      	mov	r1, r7
 800830a:	f7f8 fa9f 	bl	800084c <__aeabi_ddiv>
 800830e:	f7f8 fc23 	bl	8000b58 <__aeabi_d2iz>
 8008312:	4682      	mov	sl, r0
 8008314:	f7f8 f906 	bl	8000524 <__aeabi_i2d>
 8008318:	4642      	mov	r2, r8
 800831a:	464b      	mov	r3, r9
 800831c:	f7f8 f96c 	bl	80005f8 <__aeabi_dmul>
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	4630      	mov	r0, r6
 8008326:	4639      	mov	r1, r7
 8008328:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800832c:	f7f7 ffac 	bl	8000288 <__aeabi_dsub>
 8008330:	f805 6b01 	strb.w	r6, [r5], #1
 8008334:	9e01      	ldr	r6, [sp, #4]
 8008336:	9f03      	ldr	r7, [sp, #12]
 8008338:	1bae      	subs	r6, r5, r6
 800833a:	42b7      	cmp	r7, r6
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	d135      	bne.n	80083ae <_dtoa_r+0x6e6>
 8008342:	f7f7 ffa3 	bl	800028c <__adddf3>
 8008346:	4642      	mov	r2, r8
 8008348:	464b      	mov	r3, r9
 800834a:	4606      	mov	r6, r0
 800834c:	460f      	mov	r7, r1
 800834e:	f7f8 fbe3 	bl	8000b18 <__aeabi_dcmpgt>
 8008352:	b9d0      	cbnz	r0, 800838a <_dtoa_r+0x6c2>
 8008354:	4642      	mov	r2, r8
 8008356:	464b      	mov	r3, r9
 8008358:	4630      	mov	r0, r6
 800835a:	4639      	mov	r1, r7
 800835c:	f7f8 fbb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008360:	b110      	cbz	r0, 8008368 <_dtoa_r+0x6a0>
 8008362:	f01a 0f01 	tst.w	sl, #1
 8008366:	d110      	bne.n	800838a <_dtoa_r+0x6c2>
 8008368:	4620      	mov	r0, r4
 800836a:	ee18 1a10 	vmov	r1, s16
 800836e:	f000 fb05 	bl	800897c <_Bfree>
 8008372:	2300      	movs	r3, #0
 8008374:	9800      	ldr	r0, [sp, #0]
 8008376:	702b      	strb	r3, [r5, #0]
 8008378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800837a:	3001      	adds	r0, #1
 800837c:	6018      	str	r0, [r3, #0]
 800837e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008380:	2b00      	cmp	r3, #0
 8008382:	f43f acf1 	beq.w	8007d68 <_dtoa_r+0xa0>
 8008386:	601d      	str	r5, [r3, #0]
 8008388:	e4ee      	b.n	8007d68 <_dtoa_r+0xa0>
 800838a:	9f00      	ldr	r7, [sp, #0]
 800838c:	462b      	mov	r3, r5
 800838e:	461d      	mov	r5, r3
 8008390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008394:	2a39      	cmp	r2, #57	; 0x39
 8008396:	d106      	bne.n	80083a6 <_dtoa_r+0x6de>
 8008398:	9a01      	ldr	r2, [sp, #4]
 800839a:	429a      	cmp	r2, r3
 800839c:	d1f7      	bne.n	800838e <_dtoa_r+0x6c6>
 800839e:	9901      	ldr	r1, [sp, #4]
 80083a0:	2230      	movs	r2, #48	; 0x30
 80083a2:	3701      	adds	r7, #1
 80083a4:	700a      	strb	r2, [r1, #0]
 80083a6:	781a      	ldrb	r2, [r3, #0]
 80083a8:	3201      	adds	r2, #1
 80083aa:	701a      	strb	r2, [r3, #0]
 80083ac:	e790      	b.n	80082d0 <_dtoa_r+0x608>
 80083ae:	4ba6      	ldr	r3, [pc, #664]	; (8008648 <_dtoa_r+0x980>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	f7f8 f921 	bl	80005f8 <__aeabi_dmul>
 80083b6:	2200      	movs	r2, #0
 80083b8:	2300      	movs	r3, #0
 80083ba:	4606      	mov	r6, r0
 80083bc:	460f      	mov	r7, r1
 80083be:	f7f8 fb83 	bl	8000ac8 <__aeabi_dcmpeq>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	d09d      	beq.n	8008302 <_dtoa_r+0x63a>
 80083c6:	e7cf      	b.n	8008368 <_dtoa_r+0x6a0>
 80083c8:	9a08      	ldr	r2, [sp, #32]
 80083ca:	2a00      	cmp	r2, #0
 80083cc:	f000 80d7 	beq.w	800857e <_dtoa_r+0x8b6>
 80083d0:	9a06      	ldr	r2, [sp, #24]
 80083d2:	2a01      	cmp	r2, #1
 80083d4:	f300 80ba 	bgt.w	800854c <_dtoa_r+0x884>
 80083d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083da:	2a00      	cmp	r2, #0
 80083dc:	f000 80b2 	beq.w	8008544 <_dtoa_r+0x87c>
 80083e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083e4:	9e07      	ldr	r6, [sp, #28]
 80083e6:	9d04      	ldr	r5, [sp, #16]
 80083e8:	9a04      	ldr	r2, [sp, #16]
 80083ea:	441a      	add	r2, r3
 80083ec:	9204      	str	r2, [sp, #16]
 80083ee:	9a05      	ldr	r2, [sp, #20]
 80083f0:	2101      	movs	r1, #1
 80083f2:	441a      	add	r2, r3
 80083f4:	4620      	mov	r0, r4
 80083f6:	9205      	str	r2, [sp, #20]
 80083f8:	f000 fb78 	bl	8008aec <__i2b>
 80083fc:	4607      	mov	r7, r0
 80083fe:	2d00      	cmp	r5, #0
 8008400:	dd0c      	ble.n	800841c <_dtoa_r+0x754>
 8008402:	9b05      	ldr	r3, [sp, #20]
 8008404:	2b00      	cmp	r3, #0
 8008406:	dd09      	ble.n	800841c <_dtoa_r+0x754>
 8008408:	42ab      	cmp	r3, r5
 800840a:	9a04      	ldr	r2, [sp, #16]
 800840c:	bfa8      	it	ge
 800840e:	462b      	movge	r3, r5
 8008410:	1ad2      	subs	r2, r2, r3
 8008412:	9204      	str	r2, [sp, #16]
 8008414:	9a05      	ldr	r2, [sp, #20]
 8008416:	1aed      	subs	r5, r5, r3
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	9305      	str	r3, [sp, #20]
 800841c:	9b07      	ldr	r3, [sp, #28]
 800841e:	b31b      	cbz	r3, 8008468 <_dtoa_r+0x7a0>
 8008420:	9b08      	ldr	r3, [sp, #32]
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 80af 	beq.w	8008586 <_dtoa_r+0x8be>
 8008428:	2e00      	cmp	r6, #0
 800842a:	dd13      	ble.n	8008454 <_dtoa_r+0x78c>
 800842c:	4639      	mov	r1, r7
 800842e:	4632      	mov	r2, r6
 8008430:	4620      	mov	r0, r4
 8008432:	f000 fc1b 	bl	8008c6c <__pow5mult>
 8008436:	ee18 2a10 	vmov	r2, s16
 800843a:	4601      	mov	r1, r0
 800843c:	4607      	mov	r7, r0
 800843e:	4620      	mov	r0, r4
 8008440:	f000 fb6a 	bl	8008b18 <__multiply>
 8008444:	ee18 1a10 	vmov	r1, s16
 8008448:	4680      	mov	r8, r0
 800844a:	4620      	mov	r0, r4
 800844c:	f000 fa96 	bl	800897c <_Bfree>
 8008450:	ee08 8a10 	vmov	s16, r8
 8008454:	9b07      	ldr	r3, [sp, #28]
 8008456:	1b9a      	subs	r2, r3, r6
 8008458:	d006      	beq.n	8008468 <_dtoa_r+0x7a0>
 800845a:	ee18 1a10 	vmov	r1, s16
 800845e:	4620      	mov	r0, r4
 8008460:	f000 fc04 	bl	8008c6c <__pow5mult>
 8008464:	ee08 0a10 	vmov	s16, r0
 8008468:	2101      	movs	r1, #1
 800846a:	4620      	mov	r0, r4
 800846c:	f000 fb3e 	bl	8008aec <__i2b>
 8008470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008472:	2b00      	cmp	r3, #0
 8008474:	4606      	mov	r6, r0
 8008476:	f340 8088 	ble.w	800858a <_dtoa_r+0x8c2>
 800847a:	461a      	mov	r2, r3
 800847c:	4601      	mov	r1, r0
 800847e:	4620      	mov	r0, r4
 8008480:	f000 fbf4 	bl	8008c6c <__pow5mult>
 8008484:	9b06      	ldr	r3, [sp, #24]
 8008486:	2b01      	cmp	r3, #1
 8008488:	4606      	mov	r6, r0
 800848a:	f340 8081 	ble.w	8008590 <_dtoa_r+0x8c8>
 800848e:	f04f 0800 	mov.w	r8, #0
 8008492:	6933      	ldr	r3, [r6, #16]
 8008494:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008498:	6918      	ldr	r0, [r3, #16]
 800849a:	f000 fad7 	bl	8008a4c <__hi0bits>
 800849e:	f1c0 0020 	rsb	r0, r0, #32
 80084a2:	9b05      	ldr	r3, [sp, #20]
 80084a4:	4418      	add	r0, r3
 80084a6:	f010 001f 	ands.w	r0, r0, #31
 80084aa:	f000 8092 	beq.w	80085d2 <_dtoa_r+0x90a>
 80084ae:	f1c0 0320 	rsb	r3, r0, #32
 80084b2:	2b04      	cmp	r3, #4
 80084b4:	f340 808a 	ble.w	80085cc <_dtoa_r+0x904>
 80084b8:	f1c0 001c 	rsb	r0, r0, #28
 80084bc:	9b04      	ldr	r3, [sp, #16]
 80084be:	4403      	add	r3, r0
 80084c0:	9304      	str	r3, [sp, #16]
 80084c2:	9b05      	ldr	r3, [sp, #20]
 80084c4:	4403      	add	r3, r0
 80084c6:	4405      	add	r5, r0
 80084c8:	9305      	str	r3, [sp, #20]
 80084ca:	9b04      	ldr	r3, [sp, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	dd07      	ble.n	80084e0 <_dtoa_r+0x818>
 80084d0:	ee18 1a10 	vmov	r1, s16
 80084d4:	461a      	mov	r2, r3
 80084d6:	4620      	mov	r0, r4
 80084d8:	f000 fc22 	bl	8008d20 <__lshift>
 80084dc:	ee08 0a10 	vmov	s16, r0
 80084e0:	9b05      	ldr	r3, [sp, #20]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	dd05      	ble.n	80084f2 <_dtoa_r+0x82a>
 80084e6:	4631      	mov	r1, r6
 80084e8:	461a      	mov	r2, r3
 80084ea:	4620      	mov	r0, r4
 80084ec:	f000 fc18 	bl	8008d20 <__lshift>
 80084f0:	4606      	mov	r6, r0
 80084f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d06e      	beq.n	80085d6 <_dtoa_r+0x90e>
 80084f8:	ee18 0a10 	vmov	r0, s16
 80084fc:	4631      	mov	r1, r6
 80084fe:	f000 fc7f 	bl	8008e00 <__mcmp>
 8008502:	2800      	cmp	r0, #0
 8008504:	da67      	bge.n	80085d6 <_dtoa_r+0x90e>
 8008506:	9b00      	ldr	r3, [sp, #0]
 8008508:	3b01      	subs	r3, #1
 800850a:	ee18 1a10 	vmov	r1, s16
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	220a      	movs	r2, #10
 8008512:	2300      	movs	r3, #0
 8008514:	4620      	mov	r0, r4
 8008516:	f000 fa53 	bl	80089c0 <__multadd>
 800851a:	9b08      	ldr	r3, [sp, #32]
 800851c:	ee08 0a10 	vmov	s16, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 81b1 	beq.w	8008888 <_dtoa_r+0xbc0>
 8008526:	2300      	movs	r3, #0
 8008528:	4639      	mov	r1, r7
 800852a:	220a      	movs	r2, #10
 800852c:	4620      	mov	r0, r4
 800852e:	f000 fa47 	bl	80089c0 <__multadd>
 8008532:	9b02      	ldr	r3, [sp, #8]
 8008534:	2b00      	cmp	r3, #0
 8008536:	4607      	mov	r7, r0
 8008538:	f300 808e 	bgt.w	8008658 <_dtoa_r+0x990>
 800853c:	9b06      	ldr	r3, [sp, #24]
 800853e:	2b02      	cmp	r3, #2
 8008540:	dc51      	bgt.n	80085e6 <_dtoa_r+0x91e>
 8008542:	e089      	b.n	8008658 <_dtoa_r+0x990>
 8008544:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008546:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800854a:	e74b      	b.n	80083e4 <_dtoa_r+0x71c>
 800854c:	9b03      	ldr	r3, [sp, #12]
 800854e:	1e5e      	subs	r6, r3, #1
 8008550:	9b07      	ldr	r3, [sp, #28]
 8008552:	42b3      	cmp	r3, r6
 8008554:	bfbf      	itttt	lt
 8008556:	9b07      	ldrlt	r3, [sp, #28]
 8008558:	9607      	strlt	r6, [sp, #28]
 800855a:	1af2      	sublt	r2, r6, r3
 800855c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800855e:	bfb6      	itet	lt
 8008560:	189b      	addlt	r3, r3, r2
 8008562:	1b9e      	subge	r6, r3, r6
 8008564:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008566:	9b03      	ldr	r3, [sp, #12]
 8008568:	bfb8      	it	lt
 800856a:	2600      	movlt	r6, #0
 800856c:	2b00      	cmp	r3, #0
 800856e:	bfb7      	itett	lt
 8008570:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008574:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008578:	1a9d      	sublt	r5, r3, r2
 800857a:	2300      	movlt	r3, #0
 800857c:	e734      	b.n	80083e8 <_dtoa_r+0x720>
 800857e:	9e07      	ldr	r6, [sp, #28]
 8008580:	9d04      	ldr	r5, [sp, #16]
 8008582:	9f08      	ldr	r7, [sp, #32]
 8008584:	e73b      	b.n	80083fe <_dtoa_r+0x736>
 8008586:	9a07      	ldr	r2, [sp, #28]
 8008588:	e767      	b.n	800845a <_dtoa_r+0x792>
 800858a:	9b06      	ldr	r3, [sp, #24]
 800858c:	2b01      	cmp	r3, #1
 800858e:	dc18      	bgt.n	80085c2 <_dtoa_r+0x8fa>
 8008590:	f1ba 0f00 	cmp.w	sl, #0
 8008594:	d115      	bne.n	80085c2 <_dtoa_r+0x8fa>
 8008596:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800859a:	b993      	cbnz	r3, 80085c2 <_dtoa_r+0x8fa>
 800859c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80085a0:	0d1b      	lsrs	r3, r3, #20
 80085a2:	051b      	lsls	r3, r3, #20
 80085a4:	b183      	cbz	r3, 80085c8 <_dtoa_r+0x900>
 80085a6:	9b04      	ldr	r3, [sp, #16]
 80085a8:	3301      	adds	r3, #1
 80085aa:	9304      	str	r3, [sp, #16]
 80085ac:	9b05      	ldr	r3, [sp, #20]
 80085ae:	3301      	adds	r3, #1
 80085b0:	9305      	str	r3, [sp, #20]
 80085b2:	f04f 0801 	mov.w	r8, #1
 80085b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f47f af6a 	bne.w	8008492 <_dtoa_r+0x7ca>
 80085be:	2001      	movs	r0, #1
 80085c0:	e76f      	b.n	80084a2 <_dtoa_r+0x7da>
 80085c2:	f04f 0800 	mov.w	r8, #0
 80085c6:	e7f6      	b.n	80085b6 <_dtoa_r+0x8ee>
 80085c8:	4698      	mov	r8, r3
 80085ca:	e7f4      	b.n	80085b6 <_dtoa_r+0x8ee>
 80085cc:	f43f af7d 	beq.w	80084ca <_dtoa_r+0x802>
 80085d0:	4618      	mov	r0, r3
 80085d2:	301c      	adds	r0, #28
 80085d4:	e772      	b.n	80084bc <_dtoa_r+0x7f4>
 80085d6:	9b03      	ldr	r3, [sp, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	dc37      	bgt.n	800864c <_dtoa_r+0x984>
 80085dc:	9b06      	ldr	r3, [sp, #24]
 80085de:	2b02      	cmp	r3, #2
 80085e0:	dd34      	ble.n	800864c <_dtoa_r+0x984>
 80085e2:	9b03      	ldr	r3, [sp, #12]
 80085e4:	9302      	str	r3, [sp, #8]
 80085e6:	9b02      	ldr	r3, [sp, #8]
 80085e8:	b96b      	cbnz	r3, 8008606 <_dtoa_r+0x93e>
 80085ea:	4631      	mov	r1, r6
 80085ec:	2205      	movs	r2, #5
 80085ee:	4620      	mov	r0, r4
 80085f0:	f000 f9e6 	bl	80089c0 <__multadd>
 80085f4:	4601      	mov	r1, r0
 80085f6:	4606      	mov	r6, r0
 80085f8:	ee18 0a10 	vmov	r0, s16
 80085fc:	f000 fc00 	bl	8008e00 <__mcmp>
 8008600:	2800      	cmp	r0, #0
 8008602:	f73f adbb 	bgt.w	800817c <_dtoa_r+0x4b4>
 8008606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008608:	9d01      	ldr	r5, [sp, #4]
 800860a:	43db      	mvns	r3, r3
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	f04f 0800 	mov.w	r8, #0
 8008612:	4631      	mov	r1, r6
 8008614:	4620      	mov	r0, r4
 8008616:	f000 f9b1 	bl	800897c <_Bfree>
 800861a:	2f00      	cmp	r7, #0
 800861c:	f43f aea4 	beq.w	8008368 <_dtoa_r+0x6a0>
 8008620:	f1b8 0f00 	cmp.w	r8, #0
 8008624:	d005      	beq.n	8008632 <_dtoa_r+0x96a>
 8008626:	45b8      	cmp	r8, r7
 8008628:	d003      	beq.n	8008632 <_dtoa_r+0x96a>
 800862a:	4641      	mov	r1, r8
 800862c:	4620      	mov	r0, r4
 800862e:	f000 f9a5 	bl	800897c <_Bfree>
 8008632:	4639      	mov	r1, r7
 8008634:	4620      	mov	r0, r4
 8008636:	f000 f9a1 	bl	800897c <_Bfree>
 800863a:	e695      	b.n	8008368 <_dtoa_r+0x6a0>
 800863c:	2600      	movs	r6, #0
 800863e:	4637      	mov	r7, r6
 8008640:	e7e1      	b.n	8008606 <_dtoa_r+0x93e>
 8008642:	9700      	str	r7, [sp, #0]
 8008644:	4637      	mov	r7, r6
 8008646:	e599      	b.n	800817c <_dtoa_r+0x4b4>
 8008648:	40240000 	.word	0x40240000
 800864c:	9b08      	ldr	r3, [sp, #32]
 800864e:	2b00      	cmp	r3, #0
 8008650:	f000 80ca 	beq.w	80087e8 <_dtoa_r+0xb20>
 8008654:	9b03      	ldr	r3, [sp, #12]
 8008656:	9302      	str	r3, [sp, #8]
 8008658:	2d00      	cmp	r5, #0
 800865a:	dd05      	ble.n	8008668 <_dtoa_r+0x9a0>
 800865c:	4639      	mov	r1, r7
 800865e:	462a      	mov	r2, r5
 8008660:	4620      	mov	r0, r4
 8008662:	f000 fb5d 	bl	8008d20 <__lshift>
 8008666:	4607      	mov	r7, r0
 8008668:	f1b8 0f00 	cmp.w	r8, #0
 800866c:	d05b      	beq.n	8008726 <_dtoa_r+0xa5e>
 800866e:	6879      	ldr	r1, [r7, #4]
 8008670:	4620      	mov	r0, r4
 8008672:	f000 f943 	bl	80088fc <_Balloc>
 8008676:	4605      	mov	r5, r0
 8008678:	b928      	cbnz	r0, 8008686 <_dtoa_r+0x9be>
 800867a:	4b87      	ldr	r3, [pc, #540]	; (8008898 <_dtoa_r+0xbd0>)
 800867c:	4602      	mov	r2, r0
 800867e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008682:	f7ff bb3b 	b.w	8007cfc <_dtoa_r+0x34>
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	3202      	adds	r2, #2
 800868a:	0092      	lsls	r2, r2, #2
 800868c:	f107 010c 	add.w	r1, r7, #12
 8008690:	300c      	adds	r0, #12
 8008692:	f000 f925 	bl	80088e0 <memcpy>
 8008696:	2201      	movs	r2, #1
 8008698:	4629      	mov	r1, r5
 800869a:	4620      	mov	r0, r4
 800869c:	f000 fb40 	bl	8008d20 <__lshift>
 80086a0:	9b01      	ldr	r3, [sp, #4]
 80086a2:	f103 0901 	add.w	r9, r3, #1
 80086a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80086aa:	4413      	add	r3, r2
 80086ac:	9305      	str	r3, [sp, #20]
 80086ae:	f00a 0301 	and.w	r3, sl, #1
 80086b2:	46b8      	mov	r8, r7
 80086b4:	9304      	str	r3, [sp, #16]
 80086b6:	4607      	mov	r7, r0
 80086b8:	4631      	mov	r1, r6
 80086ba:	ee18 0a10 	vmov	r0, s16
 80086be:	f7ff fa77 	bl	8007bb0 <quorem>
 80086c2:	4641      	mov	r1, r8
 80086c4:	9002      	str	r0, [sp, #8]
 80086c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80086ca:	ee18 0a10 	vmov	r0, s16
 80086ce:	f000 fb97 	bl	8008e00 <__mcmp>
 80086d2:	463a      	mov	r2, r7
 80086d4:	9003      	str	r0, [sp, #12]
 80086d6:	4631      	mov	r1, r6
 80086d8:	4620      	mov	r0, r4
 80086da:	f000 fbad 	bl	8008e38 <__mdiff>
 80086de:	68c2      	ldr	r2, [r0, #12]
 80086e0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80086e4:	4605      	mov	r5, r0
 80086e6:	bb02      	cbnz	r2, 800872a <_dtoa_r+0xa62>
 80086e8:	4601      	mov	r1, r0
 80086ea:	ee18 0a10 	vmov	r0, s16
 80086ee:	f000 fb87 	bl	8008e00 <__mcmp>
 80086f2:	4602      	mov	r2, r0
 80086f4:	4629      	mov	r1, r5
 80086f6:	4620      	mov	r0, r4
 80086f8:	9207      	str	r2, [sp, #28]
 80086fa:	f000 f93f 	bl	800897c <_Bfree>
 80086fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008702:	ea43 0102 	orr.w	r1, r3, r2
 8008706:	9b04      	ldr	r3, [sp, #16]
 8008708:	430b      	orrs	r3, r1
 800870a:	464d      	mov	r5, r9
 800870c:	d10f      	bne.n	800872e <_dtoa_r+0xa66>
 800870e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008712:	d02a      	beq.n	800876a <_dtoa_r+0xaa2>
 8008714:	9b03      	ldr	r3, [sp, #12]
 8008716:	2b00      	cmp	r3, #0
 8008718:	dd02      	ble.n	8008720 <_dtoa_r+0xa58>
 800871a:	9b02      	ldr	r3, [sp, #8]
 800871c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008720:	f88b a000 	strb.w	sl, [fp]
 8008724:	e775      	b.n	8008612 <_dtoa_r+0x94a>
 8008726:	4638      	mov	r0, r7
 8008728:	e7ba      	b.n	80086a0 <_dtoa_r+0x9d8>
 800872a:	2201      	movs	r2, #1
 800872c:	e7e2      	b.n	80086f4 <_dtoa_r+0xa2c>
 800872e:	9b03      	ldr	r3, [sp, #12]
 8008730:	2b00      	cmp	r3, #0
 8008732:	db04      	blt.n	800873e <_dtoa_r+0xa76>
 8008734:	9906      	ldr	r1, [sp, #24]
 8008736:	430b      	orrs	r3, r1
 8008738:	9904      	ldr	r1, [sp, #16]
 800873a:	430b      	orrs	r3, r1
 800873c:	d122      	bne.n	8008784 <_dtoa_r+0xabc>
 800873e:	2a00      	cmp	r2, #0
 8008740:	ddee      	ble.n	8008720 <_dtoa_r+0xa58>
 8008742:	ee18 1a10 	vmov	r1, s16
 8008746:	2201      	movs	r2, #1
 8008748:	4620      	mov	r0, r4
 800874a:	f000 fae9 	bl	8008d20 <__lshift>
 800874e:	4631      	mov	r1, r6
 8008750:	ee08 0a10 	vmov	s16, r0
 8008754:	f000 fb54 	bl	8008e00 <__mcmp>
 8008758:	2800      	cmp	r0, #0
 800875a:	dc03      	bgt.n	8008764 <_dtoa_r+0xa9c>
 800875c:	d1e0      	bne.n	8008720 <_dtoa_r+0xa58>
 800875e:	f01a 0f01 	tst.w	sl, #1
 8008762:	d0dd      	beq.n	8008720 <_dtoa_r+0xa58>
 8008764:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008768:	d1d7      	bne.n	800871a <_dtoa_r+0xa52>
 800876a:	2339      	movs	r3, #57	; 0x39
 800876c:	f88b 3000 	strb.w	r3, [fp]
 8008770:	462b      	mov	r3, r5
 8008772:	461d      	mov	r5, r3
 8008774:	3b01      	subs	r3, #1
 8008776:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800877a:	2a39      	cmp	r2, #57	; 0x39
 800877c:	d071      	beq.n	8008862 <_dtoa_r+0xb9a>
 800877e:	3201      	adds	r2, #1
 8008780:	701a      	strb	r2, [r3, #0]
 8008782:	e746      	b.n	8008612 <_dtoa_r+0x94a>
 8008784:	2a00      	cmp	r2, #0
 8008786:	dd07      	ble.n	8008798 <_dtoa_r+0xad0>
 8008788:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800878c:	d0ed      	beq.n	800876a <_dtoa_r+0xaa2>
 800878e:	f10a 0301 	add.w	r3, sl, #1
 8008792:	f88b 3000 	strb.w	r3, [fp]
 8008796:	e73c      	b.n	8008612 <_dtoa_r+0x94a>
 8008798:	9b05      	ldr	r3, [sp, #20]
 800879a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800879e:	4599      	cmp	r9, r3
 80087a0:	d047      	beq.n	8008832 <_dtoa_r+0xb6a>
 80087a2:	ee18 1a10 	vmov	r1, s16
 80087a6:	2300      	movs	r3, #0
 80087a8:	220a      	movs	r2, #10
 80087aa:	4620      	mov	r0, r4
 80087ac:	f000 f908 	bl	80089c0 <__multadd>
 80087b0:	45b8      	cmp	r8, r7
 80087b2:	ee08 0a10 	vmov	s16, r0
 80087b6:	f04f 0300 	mov.w	r3, #0
 80087ba:	f04f 020a 	mov.w	r2, #10
 80087be:	4641      	mov	r1, r8
 80087c0:	4620      	mov	r0, r4
 80087c2:	d106      	bne.n	80087d2 <_dtoa_r+0xb0a>
 80087c4:	f000 f8fc 	bl	80089c0 <__multadd>
 80087c8:	4680      	mov	r8, r0
 80087ca:	4607      	mov	r7, r0
 80087cc:	f109 0901 	add.w	r9, r9, #1
 80087d0:	e772      	b.n	80086b8 <_dtoa_r+0x9f0>
 80087d2:	f000 f8f5 	bl	80089c0 <__multadd>
 80087d6:	4639      	mov	r1, r7
 80087d8:	4680      	mov	r8, r0
 80087da:	2300      	movs	r3, #0
 80087dc:	220a      	movs	r2, #10
 80087de:	4620      	mov	r0, r4
 80087e0:	f000 f8ee 	bl	80089c0 <__multadd>
 80087e4:	4607      	mov	r7, r0
 80087e6:	e7f1      	b.n	80087cc <_dtoa_r+0xb04>
 80087e8:	9b03      	ldr	r3, [sp, #12]
 80087ea:	9302      	str	r3, [sp, #8]
 80087ec:	9d01      	ldr	r5, [sp, #4]
 80087ee:	ee18 0a10 	vmov	r0, s16
 80087f2:	4631      	mov	r1, r6
 80087f4:	f7ff f9dc 	bl	8007bb0 <quorem>
 80087f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80087fc:	9b01      	ldr	r3, [sp, #4]
 80087fe:	f805 ab01 	strb.w	sl, [r5], #1
 8008802:	1aea      	subs	r2, r5, r3
 8008804:	9b02      	ldr	r3, [sp, #8]
 8008806:	4293      	cmp	r3, r2
 8008808:	dd09      	ble.n	800881e <_dtoa_r+0xb56>
 800880a:	ee18 1a10 	vmov	r1, s16
 800880e:	2300      	movs	r3, #0
 8008810:	220a      	movs	r2, #10
 8008812:	4620      	mov	r0, r4
 8008814:	f000 f8d4 	bl	80089c0 <__multadd>
 8008818:	ee08 0a10 	vmov	s16, r0
 800881c:	e7e7      	b.n	80087ee <_dtoa_r+0xb26>
 800881e:	9b02      	ldr	r3, [sp, #8]
 8008820:	2b00      	cmp	r3, #0
 8008822:	bfc8      	it	gt
 8008824:	461d      	movgt	r5, r3
 8008826:	9b01      	ldr	r3, [sp, #4]
 8008828:	bfd8      	it	le
 800882a:	2501      	movle	r5, #1
 800882c:	441d      	add	r5, r3
 800882e:	f04f 0800 	mov.w	r8, #0
 8008832:	ee18 1a10 	vmov	r1, s16
 8008836:	2201      	movs	r2, #1
 8008838:	4620      	mov	r0, r4
 800883a:	f000 fa71 	bl	8008d20 <__lshift>
 800883e:	4631      	mov	r1, r6
 8008840:	ee08 0a10 	vmov	s16, r0
 8008844:	f000 fadc 	bl	8008e00 <__mcmp>
 8008848:	2800      	cmp	r0, #0
 800884a:	dc91      	bgt.n	8008770 <_dtoa_r+0xaa8>
 800884c:	d102      	bne.n	8008854 <_dtoa_r+0xb8c>
 800884e:	f01a 0f01 	tst.w	sl, #1
 8008852:	d18d      	bne.n	8008770 <_dtoa_r+0xaa8>
 8008854:	462b      	mov	r3, r5
 8008856:	461d      	mov	r5, r3
 8008858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800885c:	2a30      	cmp	r2, #48	; 0x30
 800885e:	d0fa      	beq.n	8008856 <_dtoa_r+0xb8e>
 8008860:	e6d7      	b.n	8008612 <_dtoa_r+0x94a>
 8008862:	9a01      	ldr	r2, [sp, #4]
 8008864:	429a      	cmp	r2, r3
 8008866:	d184      	bne.n	8008772 <_dtoa_r+0xaaa>
 8008868:	9b00      	ldr	r3, [sp, #0]
 800886a:	3301      	adds	r3, #1
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	2331      	movs	r3, #49	; 0x31
 8008870:	7013      	strb	r3, [r2, #0]
 8008872:	e6ce      	b.n	8008612 <_dtoa_r+0x94a>
 8008874:	4b09      	ldr	r3, [pc, #36]	; (800889c <_dtoa_r+0xbd4>)
 8008876:	f7ff ba95 	b.w	8007da4 <_dtoa_r+0xdc>
 800887a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800887c:	2b00      	cmp	r3, #0
 800887e:	f47f aa6e 	bne.w	8007d5e <_dtoa_r+0x96>
 8008882:	4b07      	ldr	r3, [pc, #28]	; (80088a0 <_dtoa_r+0xbd8>)
 8008884:	f7ff ba8e 	b.w	8007da4 <_dtoa_r+0xdc>
 8008888:	9b02      	ldr	r3, [sp, #8]
 800888a:	2b00      	cmp	r3, #0
 800888c:	dcae      	bgt.n	80087ec <_dtoa_r+0xb24>
 800888e:	9b06      	ldr	r3, [sp, #24]
 8008890:	2b02      	cmp	r3, #2
 8008892:	f73f aea8 	bgt.w	80085e6 <_dtoa_r+0x91e>
 8008896:	e7a9      	b.n	80087ec <_dtoa_r+0xb24>
 8008898:	0800aa89 	.word	0x0800aa89
 800889c:	0800ac09 	.word	0x0800ac09
 80088a0:	0800aa0a 	.word	0x0800aa0a

080088a4 <_localeconv_r>:
 80088a4:	4800      	ldr	r0, [pc, #0]	; (80088a8 <_localeconv_r+0x4>)
 80088a6:	4770      	bx	lr
 80088a8:	20000160 	.word	0x20000160

080088ac <_lseek_r>:
 80088ac:	b538      	push	{r3, r4, r5, lr}
 80088ae:	4d07      	ldr	r5, [pc, #28]	; (80088cc <_lseek_r+0x20>)
 80088b0:	4604      	mov	r4, r0
 80088b2:	4608      	mov	r0, r1
 80088b4:	4611      	mov	r1, r2
 80088b6:	2200      	movs	r2, #0
 80088b8:	602a      	str	r2, [r5, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	f7f9 fdb4 	bl	8002428 <_lseek>
 80088c0:	1c43      	adds	r3, r0, #1
 80088c2:	d102      	bne.n	80088ca <_lseek_r+0x1e>
 80088c4:	682b      	ldr	r3, [r5, #0]
 80088c6:	b103      	cbz	r3, 80088ca <_lseek_r+0x1e>
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	20000590 	.word	0x20000590

080088d0 <malloc>:
 80088d0:	4b02      	ldr	r3, [pc, #8]	; (80088dc <malloc+0xc>)
 80088d2:	4601      	mov	r1, r0
 80088d4:	6818      	ldr	r0, [r3, #0]
 80088d6:	f000 bc17 	b.w	8009108 <_malloc_r>
 80088da:	bf00      	nop
 80088dc:	2000000c 	.word	0x2000000c

080088e0 <memcpy>:
 80088e0:	440a      	add	r2, r1
 80088e2:	4291      	cmp	r1, r2
 80088e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80088e8:	d100      	bne.n	80088ec <memcpy+0xc>
 80088ea:	4770      	bx	lr
 80088ec:	b510      	push	{r4, lr}
 80088ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088f6:	4291      	cmp	r1, r2
 80088f8:	d1f9      	bne.n	80088ee <memcpy+0xe>
 80088fa:	bd10      	pop	{r4, pc}

080088fc <_Balloc>:
 80088fc:	b570      	push	{r4, r5, r6, lr}
 80088fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008900:	4604      	mov	r4, r0
 8008902:	460d      	mov	r5, r1
 8008904:	b976      	cbnz	r6, 8008924 <_Balloc+0x28>
 8008906:	2010      	movs	r0, #16
 8008908:	f7ff ffe2 	bl	80088d0 <malloc>
 800890c:	4602      	mov	r2, r0
 800890e:	6260      	str	r0, [r4, #36]	; 0x24
 8008910:	b920      	cbnz	r0, 800891c <_Balloc+0x20>
 8008912:	4b18      	ldr	r3, [pc, #96]	; (8008974 <_Balloc+0x78>)
 8008914:	4818      	ldr	r0, [pc, #96]	; (8008978 <_Balloc+0x7c>)
 8008916:	2166      	movs	r1, #102	; 0x66
 8008918:	f001 fa76 	bl	8009e08 <__assert_func>
 800891c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008920:	6006      	str	r6, [r0, #0]
 8008922:	60c6      	str	r6, [r0, #12]
 8008924:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008926:	68f3      	ldr	r3, [r6, #12]
 8008928:	b183      	cbz	r3, 800894c <_Balloc+0x50>
 800892a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008932:	b9b8      	cbnz	r0, 8008964 <_Balloc+0x68>
 8008934:	2101      	movs	r1, #1
 8008936:	fa01 f605 	lsl.w	r6, r1, r5
 800893a:	1d72      	adds	r2, r6, #5
 800893c:	0092      	lsls	r2, r2, #2
 800893e:	4620      	mov	r0, r4
 8008940:	f000 fb60 	bl	8009004 <_calloc_r>
 8008944:	b160      	cbz	r0, 8008960 <_Balloc+0x64>
 8008946:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800894a:	e00e      	b.n	800896a <_Balloc+0x6e>
 800894c:	2221      	movs	r2, #33	; 0x21
 800894e:	2104      	movs	r1, #4
 8008950:	4620      	mov	r0, r4
 8008952:	f000 fb57 	bl	8009004 <_calloc_r>
 8008956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008958:	60f0      	str	r0, [r6, #12]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1e4      	bne.n	800892a <_Balloc+0x2e>
 8008960:	2000      	movs	r0, #0
 8008962:	bd70      	pop	{r4, r5, r6, pc}
 8008964:	6802      	ldr	r2, [r0, #0]
 8008966:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800896a:	2300      	movs	r3, #0
 800896c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008970:	e7f7      	b.n	8008962 <_Balloc+0x66>
 8008972:	bf00      	nop
 8008974:	0800aa17 	.word	0x0800aa17
 8008978:	0800aa9a 	.word	0x0800aa9a

0800897c <_Bfree>:
 800897c:	b570      	push	{r4, r5, r6, lr}
 800897e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008980:	4605      	mov	r5, r0
 8008982:	460c      	mov	r4, r1
 8008984:	b976      	cbnz	r6, 80089a4 <_Bfree+0x28>
 8008986:	2010      	movs	r0, #16
 8008988:	f7ff ffa2 	bl	80088d0 <malloc>
 800898c:	4602      	mov	r2, r0
 800898e:	6268      	str	r0, [r5, #36]	; 0x24
 8008990:	b920      	cbnz	r0, 800899c <_Bfree+0x20>
 8008992:	4b09      	ldr	r3, [pc, #36]	; (80089b8 <_Bfree+0x3c>)
 8008994:	4809      	ldr	r0, [pc, #36]	; (80089bc <_Bfree+0x40>)
 8008996:	218a      	movs	r1, #138	; 0x8a
 8008998:	f001 fa36 	bl	8009e08 <__assert_func>
 800899c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089a0:	6006      	str	r6, [r0, #0]
 80089a2:	60c6      	str	r6, [r0, #12]
 80089a4:	b13c      	cbz	r4, 80089b6 <_Bfree+0x3a>
 80089a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089a8:	6862      	ldr	r2, [r4, #4]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089b0:	6021      	str	r1, [r4, #0]
 80089b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089b6:	bd70      	pop	{r4, r5, r6, pc}
 80089b8:	0800aa17 	.word	0x0800aa17
 80089bc:	0800aa9a 	.word	0x0800aa9a

080089c0 <__multadd>:
 80089c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c4:	690d      	ldr	r5, [r1, #16]
 80089c6:	4607      	mov	r7, r0
 80089c8:	460c      	mov	r4, r1
 80089ca:	461e      	mov	r6, r3
 80089cc:	f101 0c14 	add.w	ip, r1, #20
 80089d0:	2000      	movs	r0, #0
 80089d2:	f8dc 3000 	ldr.w	r3, [ip]
 80089d6:	b299      	uxth	r1, r3
 80089d8:	fb02 6101 	mla	r1, r2, r1, r6
 80089dc:	0c1e      	lsrs	r6, r3, #16
 80089de:	0c0b      	lsrs	r3, r1, #16
 80089e0:	fb02 3306 	mla	r3, r2, r6, r3
 80089e4:	b289      	uxth	r1, r1
 80089e6:	3001      	adds	r0, #1
 80089e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80089ec:	4285      	cmp	r5, r0
 80089ee:	f84c 1b04 	str.w	r1, [ip], #4
 80089f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80089f6:	dcec      	bgt.n	80089d2 <__multadd+0x12>
 80089f8:	b30e      	cbz	r6, 8008a3e <__multadd+0x7e>
 80089fa:	68a3      	ldr	r3, [r4, #8]
 80089fc:	42ab      	cmp	r3, r5
 80089fe:	dc19      	bgt.n	8008a34 <__multadd+0x74>
 8008a00:	6861      	ldr	r1, [r4, #4]
 8008a02:	4638      	mov	r0, r7
 8008a04:	3101      	adds	r1, #1
 8008a06:	f7ff ff79 	bl	80088fc <_Balloc>
 8008a0a:	4680      	mov	r8, r0
 8008a0c:	b928      	cbnz	r0, 8008a1a <__multadd+0x5a>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	4b0c      	ldr	r3, [pc, #48]	; (8008a44 <__multadd+0x84>)
 8008a12:	480d      	ldr	r0, [pc, #52]	; (8008a48 <__multadd+0x88>)
 8008a14:	21b5      	movs	r1, #181	; 0xb5
 8008a16:	f001 f9f7 	bl	8009e08 <__assert_func>
 8008a1a:	6922      	ldr	r2, [r4, #16]
 8008a1c:	3202      	adds	r2, #2
 8008a1e:	f104 010c 	add.w	r1, r4, #12
 8008a22:	0092      	lsls	r2, r2, #2
 8008a24:	300c      	adds	r0, #12
 8008a26:	f7ff ff5b 	bl	80088e0 <memcpy>
 8008a2a:	4621      	mov	r1, r4
 8008a2c:	4638      	mov	r0, r7
 8008a2e:	f7ff ffa5 	bl	800897c <_Bfree>
 8008a32:	4644      	mov	r4, r8
 8008a34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a38:	3501      	adds	r5, #1
 8008a3a:	615e      	str	r6, [r3, #20]
 8008a3c:	6125      	str	r5, [r4, #16]
 8008a3e:	4620      	mov	r0, r4
 8008a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a44:	0800aa89 	.word	0x0800aa89
 8008a48:	0800aa9a 	.word	0x0800aa9a

08008a4c <__hi0bits>:
 8008a4c:	0c03      	lsrs	r3, r0, #16
 8008a4e:	041b      	lsls	r3, r3, #16
 8008a50:	b9d3      	cbnz	r3, 8008a88 <__hi0bits+0x3c>
 8008a52:	0400      	lsls	r0, r0, #16
 8008a54:	2310      	movs	r3, #16
 8008a56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a5a:	bf04      	itt	eq
 8008a5c:	0200      	lsleq	r0, r0, #8
 8008a5e:	3308      	addeq	r3, #8
 8008a60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a64:	bf04      	itt	eq
 8008a66:	0100      	lsleq	r0, r0, #4
 8008a68:	3304      	addeq	r3, #4
 8008a6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a6e:	bf04      	itt	eq
 8008a70:	0080      	lsleq	r0, r0, #2
 8008a72:	3302      	addeq	r3, #2
 8008a74:	2800      	cmp	r0, #0
 8008a76:	db05      	blt.n	8008a84 <__hi0bits+0x38>
 8008a78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a7c:	f103 0301 	add.w	r3, r3, #1
 8008a80:	bf08      	it	eq
 8008a82:	2320      	moveq	r3, #32
 8008a84:	4618      	mov	r0, r3
 8008a86:	4770      	bx	lr
 8008a88:	2300      	movs	r3, #0
 8008a8a:	e7e4      	b.n	8008a56 <__hi0bits+0xa>

08008a8c <__lo0bits>:
 8008a8c:	6803      	ldr	r3, [r0, #0]
 8008a8e:	f013 0207 	ands.w	r2, r3, #7
 8008a92:	4601      	mov	r1, r0
 8008a94:	d00b      	beq.n	8008aae <__lo0bits+0x22>
 8008a96:	07da      	lsls	r2, r3, #31
 8008a98:	d423      	bmi.n	8008ae2 <__lo0bits+0x56>
 8008a9a:	0798      	lsls	r0, r3, #30
 8008a9c:	bf49      	itett	mi
 8008a9e:	085b      	lsrmi	r3, r3, #1
 8008aa0:	089b      	lsrpl	r3, r3, #2
 8008aa2:	2001      	movmi	r0, #1
 8008aa4:	600b      	strmi	r3, [r1, #0]
 8008aa6:	bf5c      	itt	pl
 8008aa8:	600b      	strpl	r3, [r1, #0]
 8008aaa:	2002      	movpl	r0, #2
 8008aac:	4770      	bx	lr
 8008aae:	b298      	uxth	r0, r3
 8008ab0:	b9a8      	cbnz	r0, 8008ade <__lo0bits+0x52>
 8008ab2:	0c1b      	lsrs	r3, r3, #16
 8008ab4:	2010      	movs	r0, #16
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	b90a      	cbnz	r2, 8008abe <__lo0bits+0x32>
 8008aba:	3008      	adds	r0, #8
 8008abc:	0a1b      	lsrs	r3, r3, #8
 8008abe:	071a      	lsls	r2, r3, #28
 8008ac0:	bf04      	itt	eq
 8008ac2:	091b      	lsreq	r3, r3, #4
 8008ac4:	3004      	addeq	r0, #4
 8008ac6:	079a      	lsls	r2, r3, #30
 8008ac8:	bf04      	itt	eq
 8008aca:	089b      	lsreq	r3, r3, #2
 8008acc:	3002      	addeq	r0, #2
 8008ace:	07da      	lsls	r2, r3, #31
 8008ad0:	d403      	bmi.n	8008ada <__lo0bits+0x4e>
 8008ad2:	085b      	lsrs	r3, r3, #1
 8008ad4:	f100 0001 	add.w	r0, r0, #1
 8008ad8:	d005      	beq.n	8008ae6 <__lo0bits+0x5a>
 8008ada:	600b      	str	r3, [r1, #0]
 8008adc:	4770      	bx	lr
 8008ade:	4610      	mov	r0, r2
 8008ae0:	e7e9      	b.n	8008ab6 <__lo0bits+0x2a>
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	4770      	bx	lr
 8008ae6:	2020      	movs	r0, #32
 8008ae8:	4770      	bx	lr
	...

08008aec <__i2b>:
 8008aec:	b510      	push	{r4, lr}
 8008aee:	460c      	mov	r4, r1
 8008af0:	2101      	movs	r1, #1
 8008af2:	f7ff ff03 	bl	80088fc <_Balloc>
 8008af6:	4602      	mov	r2, r0
 8008af8:	b928      	cbnz	r0, 8008b06 <__i2b+0x1a>
 8008afa:	4b05      	ldr	r3, [pc, #20]	; (8008b10 <__i2b+0x24>)
 8008afc:	4805      	ldr	r0, [pc, #20]	; (8008b14 <__i2b+0x28>)
 8008afe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008b02:	f001 f981 	bl	8009e08 <__assert_func>
 8008b06:	2301      	movs	r3, #1
 8008b08:	6144      	str	r4, [r0, #20]
 8008b0a:	6103      	str	r3, [r0, #16]
 8008b0c:	bd10      	pop	{r4, pc}
 8008b0e:	bf00      	nop
 8008b10:	0800aa89 	.word	0x0800aa89
 8008b14:	0800aa9a 	.word	0x0800aa9a

08008b18 <__multiply>:
 8008b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1c:	4691      	mov	r9, r2
 8008b1e:	690a      	ldr	r2, [r1, #16]
 8008b20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	bfb8      	it	lt
 8008b28:	460b      	movlt	r3, r1
 8008b2a:	460c      	mov	r4, r1
 8008b2c:	bfbc      	itt	lt
 8008b2e:	464c      	movlt	r4, r9
 8008b30:	4699      	movlt	r9, r3
 8008b32:	6927      	ldr	r7, [r4, #16]
 8008b34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b38:	68a3      	ldr	r3, [r4, #8]
 8008b3a:	6861      	ldr	r1, [r4, #4]
 8008b3c:	eb07 060a 	add.w	r6, r7, sl
 8008b40:	42b3      	cmp	r3, r6
 8008b42:	b085      	sub	sp, #20
 8008b44:	bfb8      	it	lt
 8008b46:	3101      	addlt	r1, #1
 8008b48:	f7ff fed8 	bl	80088fc <_Balloc>
 8008b4c:	b930      	cbnz	r0, 8008b5c <__multiply+0x44>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	4b44      	ldr	r3, [pc, #272]	; (8008c64 <__multiply+0x14c>)
 8008b52:	4845      	ldr	r0, [pc, #276]	; (8008c68 <__multiply+0x150>)
 8008b54:	f240 115d 	movw	r1, #349	; 0x15d
 8008b58:	f001 f956 	bl	8009e08 <__assert_func>
 8008b5c:	f100 0514 	add.w	r5, r0, #20
 8008b60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b64:	462b      	mov	r3, r5
 8008b66:	2200      	movs	r2, #0
 8008b68:	4543      	cmp	r3, r8
 8008b6a:	d321      	bcc.n	8008bb0 <__multiply+0x98>
 8008b6c:	f104 0314 	add.w	r3, r4, #20
 8008b70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008b74:	f109 0314 	add.w	r3, r9, #20
 8008b78:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008b7c:	9202      	str	r2, [sp, #8]
 8008b7e:	1b3a      	subs	r2, r7, r4
 8008b80:	3a15      	subs	r2, #21
 8008b82:	f022 0203 	bic.w	r2, r2, #3
 8008b86:	3204      	adds	r2, #4
 8008b88:	f104 0115 	add.w	r1, r4, #21
 8008b8c:	428f      	cmp	r7, r1
 8008b8e:	bf38      	it	cc
 8008b90:	2204      	movcc	r2, #4
 8008b92:	9201      	str	r2, [sp, #4]
 8008b94:	9a02      	ldr	r2, [sp, #8]
 8008b96:	9303      	str	r3, [sp, #12]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d80c      	bhi.n	8008bb6 <__multiply+0x9e>
 8008b9c:	2e00      	cmp	r6, #0
 8008b9e:	dd03      	ble.n	8008ba8 <__multiply+0x90>
 8008ba0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d05a      	beq.n	8008c5e <__multiply+0x146>
 8008ba8:	6106      	str	r6, [r0, #16]
 8008baa:	b005      	add	sp, #20
 8008bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb0:	f843 2b04 	str.w	r2, [r3], #4
 8008bb4:	e7d8      	b.n	8008b68 <__multiply+0x50>
 8008bb6:	f8b3 a000 	ldrh.w	sl, [r3]
 8008bba:	f1ba 0f00 	cmp.w	sl, #0
 8008bbe:	d024      	beq.n	8008c0a <__multiply+0xf2>
 8008bc0:	f104 0e14 	add.w	lr, r4, #20
 8008bc4:	46a9      	mov	r9, r5
 8008bc6:	f04f 0c00 	mov.w	ip, #0
 8008bca:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008bce:	f8d9 1000 	ldr.w	r1, [r9]
 8008bd2:	fa1f fb82 	uxth.w	fp, r2
 8008bd6:	b289      	uxth	r1, r1
 8008bd8:	fb0a 110b 	mla	r1, sl, fp, r1
 8008bdc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008be0:	f8d9 2000 	ldr.w	r2, [r9]
 8008be4:	4461      	add	r1, ip
 8008be6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008bea:	fb0a c20b 	mla	r2, sl, fp, ip
 8008bee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008bf2:	b289      	uxth	r1, r1
 8008bf4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008bf8:	4577      	cmp	r7, lr
 8008bfa:	f849 1b04 	str.w	r1, [r9], #4
 8008bfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c02:	d8e2      	bhi.n	8008bca <__multiply+0xb2>
 8008c04:	9a01      	ldr	r2, [sp, #4]
 8008c06:	f845 c002 	str.w	ip, [r5, r2]
 8008c0a:	9a03      	ldr	r2, [sp, #12]
 8008c0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c10:	3304      	adds	r3, #4
 8008c12:	f1b9 0f00 	cmp.w	r9, #0
 8008c16:	d020      	beq.n	8008c5a <__multiply+0x142>
 8008c18:	6829      	ldr	r1, [r5, #0]
 8008c1a:	f104 0c14 	add.w	ip, r4, #20
 8008c1e:	46ae      	mov	lr, r5
 8008c20:	f04f 0a00 	mov.w	sl, #0
 8008c24:	f8bc b000 	ldrh.w	fp, [ip]
 8008c28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008c2c:	fb09 220b 	mla	r2, r9, fp, r2
 8008c30:	4492      	add	sl, r2
 8008c32:	b289      	uxth	r1, r1
 8008c34:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008c38:	f84e 1b04 	str.w	r1, [lr], #4
 8008c3c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008c40:	f8be 1000 	ldrh.w	r1, [lr]
 8008c44:	0c12      	lsrs	r2, r2, #16
 8008c46:	fb09 1102 	mla	r1, r9, r2, r1
 8008c4a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008c4e:	4567      	cmp	r7, ip
 8008c50:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c54:	d8e6      	bhi.n	8008c24 <__multiply+0x10c>
 8008c56:	9a01      	ldr	r2, [sp, #4]
 8008c58:	50a9      	str	r1, [r5, r2]
 8008c5a:	3504      	adds	r5, #4
 8008c5c:	e79a      	b.n	8008b94 <__multiply+0x7c>
 8008c5e:	3e01      	subs	r6, #1
 8008c60:	e79c      	b.n	8008b9c <__multiply+0x84>
 8008c62:	bf00      	nop
 8008c64:	0800aa89 	.word	0x0800aa89
 8008c68:	0800aa9a 	.word	0x0800aa9a

08008c6c <__pow5mult>:
 8008c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c70:	4615      	mov	r5, r2
 8008c72:	f012 0203 	ands.w	r2, r2, #3
 8008c76:	4606      	mov	r6, r0
 8008c78:	460f      	mov	r7, r1
 8008c7a:	d007      	beq.n	8008c8c <__pow5mult+0x20>
 8008c7c:	4c25      	ldr	r4, [pc, #148]	; (8008d14 <__pow5mult+0xa8>)
 8008c7e:	3a01      	subs	r2, #1
 8008c80:	2300      	movs	r3, #0
 8008c82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c86:	f7ff fe9b 	bl	80089c0 <__multadd>
 8008c8a:	4607      	mov	r7, r0
 8008c8c:	10ad      	asrs	r5, r5, #2
 8008c8e:	d03d      	beq.n	8008d0c <__pow5mult+0xa0>
 8008c90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c92:	b97c      	cbnz	r4, 8008cb4 <__pow5mult+0x48>
 8008c94:	2010      	movs	r0, #16
 8008c96:	f7ff fe1b 	bl	80088d0 <malloc>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	6270      	str	r0, [r6, #36]	; 0x24
 8008c9e:	b928      	cbnz	r0, 8008cac <__pow5mult+0x40>
 8008ca0:	4b1d      	ldr	r3, [pc, #116]	; (8008d18 <__pow5mult+0xac>)
 8008ca2:	481e      	ldr	r0, [pc, #120]	; (8008d1c <__pow5mult+0xb0>)
 8008ca4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008ca8:	f001 f8ae 	bl	8009e08 <__assert_func>
 8008cac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cb0:	6004      	str	r4, [r0, #0]
 8008cb2:	60c4      	str	r4, [r0, #12]
 8008cb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008cb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cbc:	b94c      	cbnz	r4, 8008cd2 <__pow5mult+0x66>
 8008cbe:	f240 2171 	movw	r1, #625	; 0x271
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	f7ff ff12 	bl	8008aec <__i2b>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cce:	4604      	mov	r4, r0
 8008cd0:	6003      	str	r3, [r0, #0]
 8008cd2:	f04f 0900 	mov.w	r9, #0
 8008cd6:	07eb      	lsls	r3, r5, #31
 8008cd8:	d50a      	bpl.n	8008cf0 <__pow5mult+0x84>
 8008cda:	4639      	mov	r1, r7
 8008cdc:	4622      	mov	r2, r4
 8008cde:	4630      	mov	r0, r6
 8008ce0:	f7ff ff1a 	bl	8008b18 <__multiply>
 8008ce4:	4639      	mov	r1, r7
 8008ce6:	4680      	mov	r8, r0
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f7ff fe47 	bl	800897c <_Bfree>
 8008cee:	4647      	mov	r7, r8
 8008cf0:	106d      	asrs	r5, r5, #1
 8008cf2:	d00b      	beq.n	8008d0c <__pow5mult+0xa0>
 8008cf4:	6820      	ldr	r0, [r4, #0]
 8008cf6:	b938      	cbnz	r0, 8008d08 <__pow5mult+0x9c>
 8008cf8:	4622      	mov	r2, r4
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f7ff ff0b 	bl	8008b18 <__multiply>
 8008d02:	6020      	str	r0, [r4, #0]
 8008d04:	f8c0 9000 	str.w	r9, [r0]
 8008d08:	4604      	mov	r4, r0
 8008d0a:	e7e4      	b.n	8008cd6 <__pow5mult+0x6a>
 8008d0c:	4638      	mov	r0, r7
 8008d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d12:	bf00      	nop
 8008d14:	0800abe8 	.word	0x0800abe8
 8008d18:	0800aa17 	.word	0x0800aa17
 8008d1c:	0800aa9a 	.word	0x0800aa9a

08008d20 <__lshift>:
 8008d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d24:	460c      	mov	r4, r1
 8008d26:	6849      	ldr	r1, [r1, #4]
 8008d28:	6923      	ldr	r3, [r4, #16]
 8008d2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d2e:	68a3      	ldr	r3, [r4, #8]
 8008d30:	4607      	mov	r7, r0
 8008d32:	4691      	mov	r9, r2
 8008d34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d38:	f108 0601 	add.w	r6, r8, #1
 8008d3c:	42b3      	cmp	r3, r6
 8008d3e:	db0b      	blt.n	8008d58 <__lshift+0x38>
 8008d40:	4638      	mov	r0, r7
 8008d42:	f7ff fddb 	bl	80088fc <_Balloc>
 8008d46:	4605      	mov	r5, r0
 8008d48:	b948      	cbnz	r0, 8008d5e <__lshift+0x3e>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	4b2a      	ldr	r3, [pc, #168]	; (8008df8 <__lshift+0xd8>)
 8008d4e:	482b      	ldr	r0, [pc, #172]	; (8008dfc <__lshift+0xdc>)
 8008d50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008d54:	f001 f858 	bl	8009e08 <__assert_func>
 8008d58:	3101      	adds	r1, #1
 8008d5a:	005b      	lsls	r3, r3, #1
 8008d5c:	e7ee      	b.n	8008d3c <__lshift+0x1c>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f100 0114 	add.w	r1, r0, #20
 8008d64:	f100 0210 	add.w	r2, r0, #16
 8008d68:	4618      	mov	r0, r3
 8008d6a:	4553      	cmp	r3, sl
 8008d6c:	db37      	blt.n	8008dde <__lshift+0xbe>
 8008d6e:	6920      	ldr	r0, [r4, #16]
 8008d70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d74:	f104 0314 	add.w	r3, r4, #20
 8008d78:	f019 091f 	ands.w	r9, r9, #31
 8008d7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008d84:	d02f      	beq.n	8008de6 <__lshift+0xc6>
 8008d86:	f1c9 0e20 	rsb	lr, r9, #32
 8008d8a:	468a      	mov	sl, r1
 8008d8c:	f04f 0c00 	mov.w	ip, #0
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	fa02 f209 	lsl.w	r2, r2, r9
 8008d96:	ea42 020c 	orr.w	r2, r2, ip
 8008d9a:	f84a 2b04 	str.w	r2, [sl], #4
 8008d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008da2:	4298      	cmp	r0, r3
 8008da4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008da8:	d8f2      	bhi.n	8008d90 <__lshift+0x70>
 8008daa:	1b03      	subs	r3, r0, r4
 8008dac:	3b15      	subs	r3, #21
 8008dae:	f023 0303 	bic.w	r3, r3, #3
 8008db2:	3304      	adds	r3, #4
 8008db4:	f104 0215 	add.w	r2, r4, #21
 8008db8:	4290      	cmp	r0, r2
 8008dba:	bf38      	it	cc
 8008dbc:	2304      	movcc	r3, #4
 8008dbe:	f841 c003 	str.w	ip, [r1, r3]
 8008dc2:	f1bc 0f00 	cmp.w	ip, #0
 8008dc6:	d001      	beq.n	8008dcc <__lshift+0xac>
 8008dc8:	f108 0602 	add.w	r6, r8, #2
 8008dcc:	3e01      	subs	r6, #1
 8008dce:	4638      	mov	r0, r7
 8008dd0:	612e      	str	r6, [r5, #16]
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	f7ff fdd2 	bl	800897c <_Bfree>
 8008dd8:	4628      	mov	r0, r5
 8008dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dde:	f842 0f04 	str.w	r0, [r2, #4]!
 8008de2:	3301      	adds	r3, #1
 8008de4:	e7c1      	b.n	8008d6a <__lshift+0x4a>
 8008de6:	3904      	subs	r1, #4
 8008de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dec:	f841 2f04 	str.w	r2, [r1, #4]!
 8008df0:	4298      	cmp	r0, r3
 8008df2:	d8f9      	bhi.n	8008de8 <__lshift+0xc8>
 8008df4:	e7ea      	b.n	8008dcc <__lshift+0xac>
 8008df6:	bf00      	nop
 8008df8:	0800aa89 	.word	0x0800aa89
 8008dfc:	0800aa9a 	.word	0x0800aa9a

08008e00 <__mcmp>:
 8008e00:	b530      	push	{r4, r5, lr}
 8008e02:	6902      	ldr	r2, [r0, #16]
 8008e04:	690c      	ldr	r4, [r1, #16]
 8008e06:	1b12      	subs	r2, r2, r4
 8008e08:	d10e      	bne.n	8008e28 <__mcmp+0x28>
 8008e0a:	f100 0314 	add.w	r3, r0, #20
 8008e0e:	3114      	adds	r1, #20
 8008e10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e20:	42a5      	cmp	r5, r4
 8008e22:	d003      	beq.n	8008e2c <__mcmp+0x2c>
 8008e24:	d305      	bcc.n	8008e32 <__mcmp+0x32>
 8008e26:	2201      	movs	r2, #1
 8008e28:	4610      	mov	r0, r2
 8008e2a:	bd30      	pop	{r4, r5, pc}
 8008e2c:	4283      	cmp	r3, r0
 8008e2e:	d3f3      	bcc.n	8008e18 <__mcmp+0x18>
 8008e30:	e7fa      	b.n	8008e28 <__mcmp+0x28>
 8008e32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e36:	e7f7      	b.n	8008e28 <__mcmp+0x28>

08008e38 <__mdiff>:
 8008e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	4606      	mov	r6, r0
 8008e40:	4611      	mov	r1, r2
 8008e42:	4620      	mov	r0, r4
 8008e44:	4690      	mov	r8, r2
 8008e46:	f7ff ffdb 	bl	8008e00 <__mcmp>
 8008e4a:	1e05      	subs	r5, r0, #0
 8008e4c:	d110      	bne.n	8008e70 <__mdiff+0x38>
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4630      	mov	r0, r6
 8008e52:	f7ff fd53 	bl	80088fc <_Balloc>
 8008e56:	b930      	cbnz	r0, 8008e66 <__mdiff+0x2e>
 8008e58:	4b3a      	ldr	r3, [pc, #232]	; (8008f44 <__mdiff+0x10c>)
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	f240 2132 	movw	r1, #562	; 0x232
 8008e60:	4839      	ldr	r0, [pc, #228]	; (8008f48 <__mdiff+0x110>)
 8008e62:	f000 ffd1 	bl	8009e08 <__assert_func>
 8008e66:	2301      	movs	r3, #1
 8008e68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e70:	bfa4      	itt	ge
 8008e72:	4643      	movge	r3, r8
 8008e74:	46a0      	movge	r8, r4
 8008e76:	4630      	mov	r0, r6
 8008e78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e7c:	bfa6      	itte	ge
 8008e7e:	461c      	movge	r4, r3
 8008e80:	2500      	movge	r5, #0
 8008e82:	2501      	movlt	r5, #1
 8008e84:	f7ff fd3a 	bl	80088fc <_Balloc>
 8008e88:	b920      	cbnz	r0, 8008e94 <__mdiff+0x5c>
 8008e8a:	4b2e      	ldr	r3, [pc, #184]	; (8008f44 <__mdiff+0x10c>)
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008e92:	e7e5      	b.n	8008e60 <__mdiff+0x28>
 8008e94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e98:	6926      	ldr	r6, [r4, #16]
 8008e9a:	60c5      	str	r5, [r0, #12]
 8008e9c:	f104 0914 	add.w	r9, r4, #20
 8008ea0:	f108 0514 	add.w	r5, r8, #20
 8008ea4:	f100 0e14 	add.w	lr, r0, #20
 8008ea8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008eac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008eb0:	f108 0210 	add.w	r2, r8, #16
 8008eb4:	46f2      	mov	sl, lr
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ebc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ec0:	fa1f f883 	uxth.w	r8, r3
 8008ec4:	fa11 f18b 	uxtah	r1, r1, fp
 8008ec8:	0c1b      	lsrs	r3, r3, #16
 8008eca:	eba1 0808 	sub.w	r8, r1, r8
 8008ece:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008ed2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008ed6:	fa1f f888 	uxth.w	r8, r8
 8008eda:	1419      	asrs	r1, r3, #16
 8008edc:	454e      	cmp	r6, r9
 8008ede:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ee2:	f84a 3b04 	str.w	r3, [sl], #4
 8008ee6:	d8e7      	bhi.n	8008eb8 <__mdiff+0x80>
 8008ee8:	1b33      	subs	r3, r6, r4
 8008eea:	3b15      	subs	r3, #21
 8008eec:	f023 0303 	bic.w	r3, r3, #3
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	3415      	adds	r4, #21
 8008ef4:	42a6      	cmp	r6, r4
 8008ef6:	bf38      	it	cc
 8008ef8:	2304      	movcc	r3, #4
 8008efa:	441d      	add	r5, r3
 8008efc:	4473      	add	r3, lr
 8008efe:	469e      	mov	lr, r3
 8008f00:	462e      	mov	r6, r5
 8008f02:	4566      	cmp	r6, ip
 8008f04:	d30e      	bcc.n	8008f24 <__mdiff+0xec>
 8008f06:	f10c 0203 	add.w	r2, ip, #3
 8008f0a:	1b52      	subs	r2, r2, r5
 8008f0c:	f022 0203 	bic.w	r2, r2, #3
 8008f10:	3d03      	subs	r5, #3
 8008f12:	45ac      	cmp	ip, r5
 8008f14:	bf38      	it	cc
 8008f16:	2200      	movcc	r2, #0
 8008f18:	441a      	add	r2, r3
 8008f1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008f1e:	b17b      	cbz	r3, 8008f40 <__mdiff+0x108>
 8008f20:	6107      	str	r7, [r0, #16]
 8008f22:	e7a3      	b.n	8008e6c <__mdiff+0x34>
 8008f24:	f856 8b04 	ldr.w	r8, [r6], #4
 8008f28:	fa11 f288 	uxtah	r2, r1, r8
 8008f2c:	1414      	asrs	r4, r2, #16
 8008f2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008f32:	b292      	uxth	r2, r2
 8008f34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008f38:	f84e 2b04 	str.w	r2, [lr], #4
 8008f3c:	1421      	asrs	r1, r4, #16
 8008f3e:	e7e0      	b.n	8008f02 <__mdiff+0xca>
 8008f40:	3f01      	subs	r7, #1
 8008f42:	e7ea      	b.n	8008f1a <__mdiff+0xe2>
 8008f44:	0800aa89 	.word	0x0800aa89
 8008f48:	0800aa9a 	.word	0x0800aa9a

08008f4c <__d2b>:
 8008f4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f50:	4689      	mov	r9, r1
 8008f52:	2101      	movs	r1, #1
 8008f54:	ec57 6b10 	vmov	r6, r7, d0
 8008f58:	4690      	mov	r8, r2
 8008f5a:	f7ff fccf 	bl	80088fc <_Balloc>
 8008f5e:	4604      	mov	r4, r0
 8008f60:	b930      	cbnz	r0, 8008f70 <__d2b+0x24>
 8008f62:	4602      	mov	r2, r0
 8008f64:	4b25      	ldr	r3, [pc, #148]	; (8008ffc <__d2b+0xb0>)
 8008f66:	4826      	ldr	r0, [pc, #152]	; (8009000 <__d2b+0xb4>)
 8008f68:	f240 310a 	movw	r1, #778	; 0x30a
 8008f6c:	f000 ff4c 	bl	8009e08 <__assert_func>
 8008f70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008f74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f78:	bb35      	cbnz	r5, 8008fc8 <__d2b+0x7c>
 8008f7a:	2e00      	cmp	r6, #0
 8008f7c:	9301      	str	r3, [sp, #4]
 8008f7e:	d028      	beq.n	8008fd2 <__d2b+0x86>
 8008f80:	4668      	mov	r0, sp
 8008f82:	9600      	str	r6, [sp, #0]
 8008f84:	f7ff fd82 	bl	8008a8c <__lo0bits>
 8008f88:	9900      	ldr	r1, [sp, #0]
 8008f8a:	b300      	cbz	r0, 8008fce <__d2b+0x82>
 8008f8c:	9a01      	ldr	r2, [sp, #4]
 8008f8e:	f1c0 0320 	rsb	r3, r0, #32
 8008f92:	fa02 f303 	lsl.w	r3, r2, r3
 8008f96:	430b      	orrs	r3, r1
 8008f98:	40c2      	lsrs	r2, r0
 8008f9a:	6163      	str	r3, [r4, #20]
 8008f9c:	9201      	str	r2, [sp, #4]
 8008f9e:	9b01      	ldr	r3, [sp, #4]
 8008fa0:	61a3      	str	r3, [r4, #24]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	bf14      	ite	ne
 8008fa6:	2202      	movne	r2, #2
 8008fa8:	2201      	moveq	r2, #1
 8008faa:	6122      	str	r2, [r4, #16]
 8008fac:	b1d5      	cbz	r5, 8008fe4 <__d2b+0x98>
 8008fae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008fb2:	4405      	add	r5, r0
 8008fb4:	f8c9 5000 	str.w	r5, [r9]
 8008fb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008fbc:	f8c8 0000 	str.w	r0, [r8]
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	b003      	add	sp, #12
 8008fc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fcc:	e7d5      	b.n	8008f7a <__d2b+0x2e>
 8008fce:	6161      	str	r1, [r4, #20]
 8008fd0:	e7e5      	b.n	8008f9e <__d2b+0x52>
 8008fd2:	a801      	add	r0, sp, #4
 8008fd4:	f7ff fd5a 	bl	8008a8c <__lo0bits>
 8008fd8:	9b01      	ldr	r3, [sp, #4]
 8008fda:	6163      	str	r3, [r4, #20]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	6122      	str	r2, [r4, #16]
 8008fe0:	3020      	adds	r0, #32
 8008fe2:	e7e3      	b.n	8008fac <__d2b+0x60>
 8008fe4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008fe8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008fec:	f8c9 0000 	str.w	r0, [r9]
 8008ff0:	6918      	ldr	r0, [r3, #16]
 8008ff2:	f7ff fd2b 	bl	8008a4c <__hi0bits>
 8008ff6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ffa:	e7df      	b.n	8008fbc <__d2b+0x70>
 8008ffc:	0800aa89 	.word	0x0800aa89
 8009000:	0800aa9a 	.word	0x0800aa9a

08009004 <_calloc_r>:
 8009004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009006:	fba1 2402 	umull	r2, r4, r1, r2
 800900a:	b94c      	cbnz	r4, 8009020 <_calloc_r+0x1c>
 800900c:	4611      	mov	r1, r2
 800900e:	9201      	str	r2, [sp, #4]
 8009010:	f000 f87a 	bl	8009108 <_malloc_r>
 8009014:	9a01      	ldr	r2, [sp, #4]
 8009016:	4605      	mov	r5, r0
 8009018:	b930      	cbnz	r0, 8009028 <_calloc_r+0x24>
 800901a:	4628      	mov	r0, r5
 800901c:	b003      	add	sp, #12
 800901e:	bd30      	pop	{r4, r5, pc}
 8009020:	220c      	movs	r2, #12
 8009022:	6002      	str	r2, [r0, #0]
 8009024:	2500      	movs	r5, #0
 8009026:	e7f8      	b.n	800901a <_calloc_r+0x16>
 8009028:	4621      	mov	r1, r4
 800902a:	f7fe f887 	bl	800713c <memset>
 800902e:	e7f4      	b.n	800901a <_calloc_r+0x16>

08009030 <_free_r>:
 8009030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009032:	2900      	cmp	r1, #0
 8009034:	d044      	beq.n	80090c0 <_free_r+0x90>
 8009036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800903a:	9001      	str	r0, [sp, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	f1a1 0404 	sub.w	r4, r1, #4
 8009042:	bfb8      	it	lt
 8009044:	18e4      	addlt	r4, r4, r3
 8009046:	f001 f8f5 	bl	800a234 <__malloc_lock>
 800904a:	4a1e      	ldr	r2, [pc, #120]	; (80090c4 <_free_r+0x94>)
 800904c:	9801      	ldr	r0, [sp, #4]
 800904e:	6813      	ldr	r3, [r2, #0]
 8009050:	b933      	cbnz	r3, 8009060 <_free_r+0x30>
 8009052:	6063      	str	r3, [r4, #4]
 8009054:	6014      	str	r4, [r2, #0]
 8009056:	b003      	add	sp, #12
 8009058:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800905c:	f001 b8f0 	b.w	800a240 <__malloc_unlock>
 8009060:	42a3      	cmp	r3, r4
 8009062:	d908      	bls.n	8009076 <_free_r+0x46>
 8009064:	6825      	ldr	r5, [r4, #0]
 8009066:	1961      	adds	r1, r4, r5
 8009068:	428b      	cmp	r3, r1
 800906a:	bf01      	itttt	eq
 800906c:	6819      	ldreq	r1, [r3, #0]
 800906e:	685b      	ldreq	r3, [r3, #4]
 8009070:	1949      	addeq	r1, r1, r5
 8009072:	6021      	streq	r1, [r4, #0]
 8009074:	e7ed      	b.n	8009052 <_free_r+0x22>
 8009076:	461a      	mov	r2, r3
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	b10b      	cbz	r3, 8009080 <_free_r+0x50>
 800907c:	42a3      	cmp	r3, r4
 800907e:	d9fa      	bls.n	8009076 <_free_r+0x46>
 8009080:	6811      	ldr	r1, [r2, #0]
 8009082:	1855      	adds	r5, r2, r1
 8009084:	42a5      	cmp	r5, r4
 8009086:	d10b      	bne.n	80090a0 <_free_r+0x70>
 8009088:	6824      	ldr	r4, [r4, #0]
 800908a:	4421      	add	r1, r4
 800908c:	1854      	adds	r4, r2, r1
 800908e:	42a3      	cmp	r3, r4
 8009090:	6011      	str	r1, [r2, #0]
 8009092:	d1e0      	bne.n	8009056 <_free_r+0x26>
 8009094:	681c      	ldr	r4, [r3, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	6053      	str	r3, [r2, #4]
 800909a:	4421      	add	r1, r4
 800909c:	6011      	str	r1, [r2, #0]
 800909e:	e7da      	b.n	8009056 <_free_r+0x26>
 80090a0:	d902      	bls.n	80090a8 <_free_r+0x78>
 80090a2:	230c      	movs	r3, #12
 80090a4:	6003      	str	r3, [r0, #0]
 80090a6:	e7d6      	b.n	8009056 <_free_r+0x26>
 80090a8:	6825      	ldr	r5, [r4, #0]
 80090aa:	1961      	adds	r1, r4, r5
 80090ac:	428b      	cmp	r3, r1
 80090ae:	bf04      	itt	eq
 80090b0:	6819      	ldreq	r1, [r3, #0]
 80090b2:	685b      	ldreq	r3, [r3, #4]
 80090b4:	6063      	str	r3, [r4, #4]
 80090b6:	bf04      	itt	eq
 80090b8:	1949      	addeq	r1, r1, r5
 80090ba:	6021      	streq	r1, [r4, #0]
 80090bc:	6054      	str	r4, [r2, #4]
 80090be:	e7ca      	b.n	8009056 <_free_r+0x26>
 80090c0:	b003      	add	sp, #12
 80090c2:	bd30      	pop	{r4, r5, pc}
 80090c4:	20000588 	.word	0x20000588

080090c8 <sbrk_aligned>:
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	4e0e      	ldr	r6, [pc, #56]	; (8009104 <sbrk_aligned+0x3c>)
 80090cc:	460c      	mov	r4, r1
 80090ce:	6831      	ldr	r1, [r6, #0]
 80090d0:	4605      	mov	r5, r0
 80090d2:	b911      	cbnz	r1, 80090da <sbrk_aligned+0x12>
 80090d4:	f000 fd1e 	bl	8009b14 <_sbrk_r>
 80090d8:	6030      	str	r0, [r6, #0]
 80090da:	4621      	mov	r1, r4
 80090dc:	4628      	mov	r0, r5
 80090de:	f000 fd19 	bl	8009b14 <_sbrk_r>
 80090e2:	1c43      	adds	r3, r0, #1
 80090e4:	d00a      	beq.n	80090fc <sbrk_aligned+0x34>
 80090e6:	1cc4      	adds	r4, r0, #3
 80090e8:	f024 0403 	bic.w	r4, r4, #3
 80090ec:	42a0      	cmp	r0, r4
 80090ee:	d007      	beq.n	8009100 <sbrk_aligned+0x38>
 80090f0:	1a21      	subs	r1, r4, r0
 80090f2:	4628      	mov	r0, r5
 80090f4:	f000 fd0e 	bl	8009b14 <_sbrk_r>
 80090f8:	3001      	adds	r0, #1
 80090fa:	d101      	bne.n	8009100 <sbrk_aligned+0x38>
 80090fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009100:	4620      	mov	r0, r4
 8009102:	bd70      	pop	{r4, r5, r6, pc}
 8009104:	2000058c 	.word	0x2000058c

08009108 <_malloc_r>:
 8009108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800910c:	1ccd      	adds	r5, r1, #3
 800910e:	f025 0503 	bic.w	r5, r5, #3
 8009112:	3508      	adds	r5, #8
 8009114:	2d0c      	cmp	r5, #12
 8009116:	bf38      	it	cc
 8009118:	250c      	movcc	r5, #12
 800911a:	2d00      	cmp	r5, #0
 800911c:	4607      	mov	r7, r0
 800911e:	db01      	blt.n	8009124 <_malloc_r+0x1c>
 8009120:	42a9      	cmp	r1, r5
 8009122:	d905      	bls.n	8009130 <_malloc_r+0x28>
 8009124:	230c      	movs	r3, #12
 8009126:	603b      	str	r3, [r7, #0]
 8009128:	2600      	movs	r6, #0
 800912a:	4630      	mov	r0, r6
 800912c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009130:	4e2e      	ldr	r6, [pc, #184]	; (80091ec <_malloc_r+0xe4>)
 8009132:	f001 f87f 	bl	800a234 <__malloc_lock>
 8009136:	6833      	ldr	r3, [r6, #0]
 8009138:	461c      	mov	r4, r3
 800913a:	bb34      	cbnz	r4, 800918a <_malloc_r+0x82>
 800913c:	4629      	mov	r1, r5
 800913e:	4638      	mov	r0, r7
 8009140:	f7ff ffc2 	bl	80090c8 <sbrk_aligned>
 8009144:	1c43      	adds	r3, r0, #1
 8009146:	4604      	mov	r4, r0
 8009148:	d14d      	bne.n	80091e6 <_malloc_r+0xde>
 800914a:	6834      	ldr	r4, [r6, #0]
 800914c:	4626      	mov	r6, r4
 800914e:	2e00      	cmp	r6, #0
 8009150:	d140      	bne.n	80091d4 <_malloc_r+0xcc>
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	4631      	mov	r1, r6
 8009156:	4638      	mov	r0, r7
 8009158:	eb04 0803 	add.w	r8, r4, r3
 800915c:	f000 fcda 	bl	8009b14 <_sbrk_r>
 8009160:	4580      	cmp	r8, r0
 8009162:	d13a      	bne.n	80091da <_malloc_r+0xd2>
 8009164:	6821      	ldr	r1, [r4, #0]
 8009166:	3503      	adds	r5, #3
 8009168:	1a6d      	subs	r5, r5, r1
 800916a:	f025 0503 	bic.w	r5, r5, #3
 800916e:	3508      	adds	r5, #8
 8009170:	2d0c      	cmp	r5, #12
 8009172:	bf38      	it	cc
 8009174:	250c      	movcc	r5, #12
 8009176:	4629      	mov	r1, r5
 8009178:	4638      	mov	r0, r7
 800917a:	f7ff ffa5 	bl	80090c8 <sbrk_aligned>
 800917e:	3001      	adds	r0, #1
 8009180:	d02b      	beq.n	80091da <_malloc_r+0xd2>
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	442b      	add	r3, r5
 8009186:	6023      	str	r3, [r4, #0]
 8009188:	e00e      	b.n	80091a8 <_malloc_r+0xa0>
 800918a:	6822      	ldr	r2, [r4, #0]
 800918c:	1b52      	subs	r2, r2, r5
 800918e:	d41e      	bmi.n	80091ce <_malloc_r+0xc6>
 8009190:	2a0b      	cmp	r2, #11
 8009192:	d916      	bls.n	80091c2 <_malloc_r+0xba>
 8009194:	1961      	adds	r1, r4, r5
 8009196:	42a3      	cmp	r3, r4
 8009198:	6025      	str	r5, [r4, #0]
 800919a:	bf18      	it	ne
 800919c:	6059      	strne	r1, [r3, #4]
 800919e:	6863      	ldr	r3, [r4, #4]
 80091a0:	bf08      	it	eq
 80091a2:	6031      	streq	r1, [r6, #0]
 80091a4:	5162      	str	r2, [r4, r5]
 80091a6:	604b      	str	r3, [r1, #4]
 80091a8:	4638      	mov	r0, r7
 80091aa:	f104 060b 	add.w	r6, r4, #11
 80091ae:	f001 f847 	bl	800a240 <__malloc_unlock>
 80091b2:	f026 0607 	bic.w	r6, r6, #7
 80091b6:	1d23      	adds	r3, r4, #4
 80091b8:	1af2      	subs	r2, r6, r3
 80091ba:	d0b6      	beq.n	800912a <_malloc_r+0x22>
 80091bc:	1b9b      	subs	r3, r3, r6
 80091be:	50a3      	str	r3, [r4, r2]
 80091c0:	e7b3      	b.n	800912a <_malloc_r+0x22>
 80091c2:	6862      	ldr	r2, [r4, #4]
 80091c4:	42a3      	cmp	r3, r4
 80091c6:	bf0c      	ite	eq
 80091c8:	6032      	streq	r2, [r6, #0]
 80091ca:	605a      	strne	r2, [r3, #4]
 80091cc:	e7ec      	b.n	80091a8 <_malloc_r+0xa0>
 80091ce:	4623      	mov	r3, r4
 80091d0:	6864      	ldr	r4, [r4, #4]
 80091d2:	e7b2      	b.n	800913a <_malloc_r+0x32>
 80091d4:	4634      	mov	r4, r6
 80091d6:	6876      	ldr	r6, [r6, #4]
 80091d8:	e7b9      	b.n	800914e <_malloc_r+0x46>
 80091da:	230c      	movs	r3, #12
 80091dc:	603b      	str	r3, [r7, #0]
 80091de:	4638      	mov	r0, r7
 80091e0:	f001 f82e 	bl	800a240 <__malloc_unlock>
 80091e4:	e7a1      	b.n	800912a <_malloc_r+0x22>
 80091e6:	6025      	str	r5, [r4, #0]
 80091e8:	e7de      	b.n	80091a8 <_malloc_r+0xa0>
 80091ea:	bf00      	nop
 80091ec:	20000588 	.word	0x20000588

080091f0 <__ssputs_r>:
 80091f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091f4:	688e      	ldr	r6, [r1, #8]
 80091f6:	429e      	cmp	r6, r3
 80091f8:	4682      	mov	sl, r0
 80091fa:	460c      	mov	r4, r1
 80091fc:	4690      	mov	r8, r2
 80091fe:	461f      	mov	r7, r3
 8009200:	d838      	bhi.n	8009274 <__ssputs_r+0x84>
 8009202:	898a      	ldrh	r2, [r1, #12]
 8009204:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009208:	d032      	beq.n	8009270 <__ssputs_r+0x80>
 800920a:	6825      	ldr	r5, [r4, #0]
 800920c:	6909      	ldr	r1, [r1, #16]
 800920e:	eba5 0901 	sub.w	r9, r5, r1
 8009212:	6965      	ldr	r5, [r4, #20]
 8009214:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009218:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800921c:	3301      	adds	r3, #1
 800921e:	444b      	add	r3, r9
 8009220:	106d      	asrs	r5, r5, #1
 8009222:	429d      	cmp	r5, r3
 8009224:	bf38      	it	cc
 8009226:	461d      	movcc	r5, r3
 8009228:	0553      	lsls	r3, r2, #21
 800922a:	d531      	bpl.n	8009290 <__ssputs_r+0xa0>
 800922c:	4629      	mov	r1, r5
 800922e:	f7ff ff6b 	bl	8009108 <_malloc_r>
 8009232:	4606      	mov	r6, r0
 8009234:	b950      	cbnz	r0, 800924c <__ssputs_r+0x5c>
 8009236:	230c      	movs	r3, #12
 8009238:	f8ca 3000 	str.w	r3, [sl]
 800923c:	89a3      	ldrh	r3, [r4, #12]
 800923e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009242:	81a3      	strh	r3, [r4, #12]
 8009244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800924c:	6921      	ldr	r1, [r4, #16]
 800924e:	464a      	mov	r2, r9
 8009250:	f7ff fb46 	bl	80088e0 <memcpy>
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800925a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800925e:	81a3      	strh	r3, [r4, #12]
 8009260:	6126      	str	r6, [r4, #16]
 8009262:	6165      	str	r5, [r4, #20]
 8009264:	444e      	add	r6, r9
 8009266:	eba5 0509 	sub.w	r5, r5, r9
 800926a:	6026      	str	r6, [r4, #0]
 800926c:	60a5      	str	r5, [r4, #8]
 800926e:	463e      	mov	r6, r7
 8009270:	42be      	cmp	r6, r7
 8009272:	d900      	bls.n	8009276 <__ssputs_r+0x86>
 8009274:	463e      	mov	r6, r7
 8009276:	6820      	ldr	r0, [r4, #0]
 8009278:	4632      	mov	r2, r6
 800927a:	4641      	mov	r1, r8
 800927c:	f000 ffc0 	bl	800a200 <memmove>
 8009280:	68a3      	ldr	r3, [r4, #8]
 8009282:	1b9b      	subs	r3, r3, r6
 8009284:	60a3      	str	r3, [r4, #8]
 8009286:	6823      	ldr	r3, [r4, #0]
 8009288:	4433      	add	r3, r6
 800928a:	6023      	str	r3, [r4, #0]
 800928c:	2000      	movs	r0, #0
 800928e:	e7db      	b.n	8009248 <__ssputs_r+0x58>
 8009290:	462a      	mov	r2, r5
 8009292:	f000 ffdb 	bl	800a24c <_realloc_r>
 8009296:	4606      	mov	r6, r0
 8009298:	2800      	cmp	r0, #0
 800929a:	d1e1      	bne.n	8009260 <__ssputs_r+0x70>
 800929c:	6921      	ldr	r1, [r4, #16]
 800929e:	4650      	mov	r0, sl
 80092a0:	f7ff fec6 	bl	8009030 <_free_r>
 80092a4:	e7c7      	b.n	8009236 <__ssputs_r+0x46>
	...

080092a8 <_svfiprintf_r>:
 80092a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ac:	4698      	mov	r8, r3
 80092ae:	898b      	ldrh	r3, [r1, #12]
 80092b0:	061b      	lsls	r3, r3, #24
 80092b2:	b09d      	sub	sp, #116	; 0x74
 80092b4:	4607      	mov	r7, r0
 80092b6:	460d      	mov	r5, r1
 80092b8:	4614      	mov	r4, r2
 80092ba:	d50e      	bpl.n	80092da <_svfiprintf_r+0x32>
 80092bc:	690b      	ldr	r3, [r1, #16]
 80092be:	b963      	cbnz	r3, 80092da <_svfiprintf_r+0x32>
 80092c0:	2140      	movs	r1, #64	; 0x40
 80092c2:	f7ff ff21 	bl	8009108 <_malloc_r>
 80092c6:	6028      	str	r0, [r5, #0]
 80092c8:	6128      	str	r0, [r5, #16]
 80092ca:	b920      	cbnz	r0, 80092d6 <_svfiprintf_r+0x2e>
 80092cc:	230c      	movs	r3, #12
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092d4:	e0d1      	b.n	800947a <_svfiprintf_r+0x1d2>
 80092d6:	2340      	movs	r3, #64	; 0x40
 80092d8:	616b      	str	r3, [r5, #20]
 80092da:	2300      	movs	r3, #0
 80092dc:	9309      	str	r3, [sp, #36]	; 0x24
 80092de:	2320      	movs	r3, #32
 80092e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80092e8:	2330      	movs	r3, #48	; 0x30
 80092ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009494 <_svfiprintf_r+0x1ec>
 80092ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092f2:	f04f 0901 	mov.w	r9, #1
 80092f6:	4623      	mov	r3, r4
 80092f8:	469a      	mov	sl, r3
 80092fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092fe:	b10a      	cbz	r2, 8009304 <_svfiprintf_r+0x5c>
 8009300:	2a25      	cmp	r2, #37	; 0x25
 8009302:	d1f9      	bne.n	80092f8 <_svfiprintf_r+0x50>
 8009304:	ebba 0b04 	subs.w	fp, sl, r4
 8009308:	d00b      	beq.n	8009322 <_svfiprintf_r+0x7a>
 800930a:	465b      	mov	r3, fp
 800930c:	4622      	mov	r2, r4
 800930e:	4629      	mov	r1, r5
 8009310:	4638      	mov	r0, r7
 8009312:	f7ff ff6d 	bl	80091f0 <__ssputs_r>
 8009316:	3001      	adds	r0, #1
 8009318:	f000 80aa 	beq.w	8009470 <_svfiprintf_r+0x1c8>
 800931c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800931e:	445a      	add	r2, fp
 8009320:	9209      	str	r2, [sp, #36]	; 0x24
 8009322:	f89a 3000 	ldrb.w	r3, [sl]
 8009326:	2b00      	cmp	r3, #0
 8009328:	f000 80a2 	beq.w	8009470 <_svfiprintf_r+0x1c8>
 800932c:	2300      	movs	r3, #0
 800932e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009336:	f10a 0a01 	add.w	sl, sl, #1
 800933a:	9304      	str	r3, [sp, #16]
 800933c:	9307      	str	r3, [sp, #28]
 800933e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009342:	931a      	str	r3, [sp, #104]	; 0x68
 8009344:	4654      	mov	r4, sl
 8009346:	2205      	movs	r2, #5
 8009348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800934c:	4851      	ldr	r0, [pc, #324]	; (8009494 <_svfiprintf_r+0x1ec>)
 800934e:	f7f6 ff47 	bl	80001e0 <memchr>
 8009352:	9a04      	ldr	r2, [sp, #16]
 8009354:	b9d8      	cbnz	r0, 800938e <_svfiprintf_r+0xe6>
 8009356:	06d0      	lsls	r0, r2, #27
 8009358:	bf44      	itt	mi
 800935a:	2320      	movmi	r3, #32
 800935c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009360:	0711      	lsls	r1, r2, #28
 8009362:	bf44      	itt	mi
 8009364:	232b      	movmi	r3, #43	; 0x2b
 8009366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800936a:	f89a 3000 	ldrb.w	r3, [sl]
 800936e:	2b2a      	cmp	r3, #42	; 0x2a
 8009370:	d015      	beq.n	800939e <_svfiprintf_r+0xf6>
 8009372:	9a07      	ldr	r2, [sp, #28]
 8009374:	4654      	mov	r4, sl
 8009376:	2000      	movs	r0, #0
 8009378:	f04f 0c0a 	mov.w	ip, #10
 800937c:	4621      	mov	r1, r4
 800937e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009382:	3b30      	subs	r3, #48	; 0x30
 8009384:	2b09      	cmp	r3, #9
 8009386:	d94e      	bls.n	8009426 <_svfiprintf_r+0x17e>
 8009388:	b1b0      	cbz	r0, 80093b8 <_svfiprintf_r+0x110>
 800938a:	9207      	str	r2, [sp, #28]
 800938c:	e014      	b.n	80093b8 <_svfiprintf_r+0x110>
 800938e:	eba0 0308 	sub.w	r3, r0, r8
 8009392:	fa09 f303 	lsl.w	r3, r9, r3
 8009396:	4313      	orrs	r3, r2
 8009398:	9304      	str	r3, [sp, #16]
 800939a:	46a2      	mov	sl, r4
 800939c:	e7d2      	b.n	8009344 <_svfiprintf_r+0x9c>
 800939e:	9b03      	ldr	r3, [sp, #12]
 80093a0:	1d19      	adds	r1, r3, #4
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	9103      	str	r1, [sp, #12]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	bfbb      	ittet	lt
 80093aa:	425b      	neglt	r3, r3
 80093ac:	f042 0202 	orrlt.w	r2, r2, #2
 80093b0:	9307      	strge	r3, [sp, #28]
 80093b2:	9307      	strlt	r3, [sp, #28]
 80093b4:	bfb8      	it	lt
 80093b6:	9204      	strlt	r2, [sp, #16]
 80093b8:	7823      	ldrb	r3, [r4, #0]
 80093ba:	2b2e      	cmp	r3, #46	; 0x2e
 80093bc:	d10c      	bne.n	80093d8 <_svfiprintf_r+0x130>
 80093be:	7863      	ldrb	r3, [r4, #1]
 80093c0:	2b2a      	cmp	r3, #42	; 0x2a
 80093c2:	d135      	bne.n	8009430 <_svfiprintf_r+0x188>
 80093c4:	9b03      	ldr	r3, [sp, #12]
 80093c6:	1d1a      	adds	r2, r3, #4
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	9203      	str	r2, [sp, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	bfb8      	it	lt
 80093d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80093d4:	3402      	adds	r4, #2
 80093d6:	9305      	str	r3, [sp, #20]
 80093d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094a4 <_svfiprintf_r+0x1fc>
 80093dc:	7821      	ldrb	r1, [r4, #0]
 80093de:	2203      	movs	r2, #3
 80093e0:	4650      	mov	r0, sl
 80093e2:	f7f6 fefd 	bl	80001e0 <memchr>
 80093e6:	b140      	cbz	r0, 80093fa <_svfiprintf_r+0x152>
 80093e8:	2340      	movs	r3, #64	; 0x40
 80093ea:	eba0 000a 	sub.w	r0, r0, sl
 80093ee:	fa03 f000 	lsl.w	r0, r3, r0
 80093f2:	9b04      	ldr	r3, [sp, #16]
 80093f4:	4303      	orrs	r3, r0
 80093f6:	3401      	adds	r4, #1
 80093f8:	9304      	str	r3, [sp, #16]
 80093fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093fe:	4826      	ldr	r0, [pc, #152]	; (8009498 <_svfiprintf_r+0x1f0>)
 8009400:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009404:	2206      	movs	r2, #6
 8009406:	f7f6 feeb 	bl	80001e0 <memchr>
 800940a:	2800      	cmp	r0, #0
 800940c:	d038      	beq.n	8009480 <_svfiprintf_r+0x1d8>
 800940e:	4b23      	ldr	r3, [pc, #140]	; (800949c <_svfiprintf_r+0x1f4>)
 8009410:	bb1b      	cbnz	r3, 800945a <_svfiprintf_r+0x1b2>
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	3307      	adds	r3, #7
 8009416:	f023 0307 	bic.w	r3, r3, #7
 800941a:	3308      	adds	r3, #8
 800941c:	9303      	str	r3, [sp, #12]
 800941e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009420:	4433      	add	r3, r6
 8009422:	9309      	str	r3, [sp, #36]	; 0x24
 8009424:	e767      	b.n	80092f6 <_svfiprintf_r+0x4e>
 8009426:	fb0c 3202 	mla	r2, ip, r2, r3
 800942a:	460c      	mov	r4, r1
 800942c:	2001      	movs	r0, #1
 800942e:	e7a5      	b.n	800937c <_svfiprintf_r+0xd4>
 8009430:	2300      	movs	r3, #0
 8009432:	3401      	adds	r4, #1
 8009434:	9305      	str	r3, [sp, #20]
 8009436:	4619      	mov	r1, r3
 8009438:	f04f 0c0a 	mov.w	ip, #10
 800943c:	4620      	mov	r0, r4
 800943e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009442:	3a30      	subs	r2, #48	; 0x30
 8009444:	2a09      	cmp	r2, #9
 8009446:	d903      	bls.n	8009450 <_svfiprintf_r+0x1a8>
 8009448:	2b00      	cmp	r3, #0
 800944a:	d0c5      	beq.n	80093d8 <_svfiprintf_r+0x130>
 800944c:	9105      	str	r1, [sp, #20]
 800944e:	e7c3      	b.n	80093d8 <_svfiprintf_r+0x130>
 8009450:	fb0c 2101 	mla	r1, ip, r1, r2
 8009454:	4604      	mov	r4, r0
 8009456:	2301      	movs	r3, #1
 8009458:	e7f0      	b.n	800943c <_svfiprintf_r+0x194>
 800945a:	ab03      	add	r3, sp, #12
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	462a      	mov	r2, r5
 8009460:	4b0f      	ldr	r3, [pc, #60]	; (80094a0 <_svfiprintf_r+0x1f8>)
 8009462:	a904      	add	r1, sp, #16
 8009464:	4638      	mov	r0, r7
 8009466:	f7fd ff11 	bl	800728c <_printf_float>
 800946a:	1c42      	adds	r2, r0, #1
 800946c:	4606      	mov	r6, r0
 800946e:	d1d6      	bne.n	800941e <_svfiprintf_r+0x176>
 8009470:	89ab      	ldrh	r3, [r5, #12]
 8009472:	065b      	lsls	r3, r3, #25
 8009474:	f53f af2c 	bmi.w	80092d0 <_svfiprintf_r+0x28>
 8009478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800947a:	b01d      	add	sp, #116	; 0x74
 800947c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009480:	ab03      	add	r3, sp, #12
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	462a      	mov	r2, r5
 8009486:	4b06      	ldr	r3, [pc, #24]	; (80094a0 <_svfiprintf_r+0x1f8>)
 8009488:	a904      	add	r1, sp, #16
 800948a:	4638      	mov	r0, r7
 800948c:	f7fe f9a2 	bl	80077d4 <_printf_i>
 8009490:	e7eb      	b.n	800946a <_svfiprintf_r+0x1c2>
 8009492:	bf00      	nop
 8009494:	0800abf4 	.word	0x0800abf4
 8009498:	0800abfe 	.word	0x0800abfe
 800949c:	0800728d 	.word	0x0800728d
 80094a0:	080091f1 	.word	0x080091f1
 80094a4:	0800abfa 	.word	0x0800abfa

080094a8 <_sungetc_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	1c4b      	adds	r3, r1, #1
 80094ac:	4614      	mov	r4, r2
 80094ae:	d103      	bne.n	80094b8 <_sungetc_r+0x10>
 80094b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80094b4:	4628      	mov	r0, r5
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	8993      	ldrh	r3, [r2, #12]
 80094ba:	f023 0320 	bic.w	r3, r3, #32
 80094be:	8193      	strh	r3, [r2, #12]
 80094c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094c2:	6852      	ldr	r2, [r2, #4]
 80094c4:	b2cd      	uxtb	r5, r1
 80094c6:	b18b      	cbz	r3, 80094ec <_sungetc_r+0x44>
 80094c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80094ca:	4293      	cmp	r3, r2
 80094cc:	dd08      	ble.n	80094e0 <_sungetc_r+0x38>
 80094ce:	6823      	ldr	r3, [r4, #0]
 80094d0:	1e5a      	subs	r2, r3, #1
 80094d2:	6022      	str	r2, [r4, #0]
 80094d4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80094d8:	6863      	ldr	r3, [r4, #4]
 80094da:	3301      	adds	r3, #1
 80094dc:	6063      	str	r3, [r4, #4]
 80094de:	e7e9      	b.n	80094b4 <_sungetc_r+0xc>
 80094e0:	4621      	mov	r1, r4
 80094e2:	f000 fc57 	bl	8009d94 <__submore>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	d0f1      	beq.n	80094ce <_sungetc_r+0x26>
 80094ea:	e7e1      	b.n	80094b0 <_sungetc_r+0x8>
 80094ec:	6921      	ldr	r1, [r4, #16]
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	b151      	cbz	r1, 8009508 <_sungetc_r+0x60>
 80094f2:	4299      	cmp	r1, r3
 80094f4:	d208      	bcs.n	8009508 <_sungetc_r+0x60>
 80094f6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80094fa:	42a9      	cmp	r1, r5
 80094fc:	d104      	bne.n	8009508 <_sungetc_r+0x60>
 80094fe:	3b01      	subs	r3, #1
 8009500:	3201      	adds	r2, #1
 8009502:	6023      	str	r3, [r4, #0]
 8009504:	6062      	str	r2, [r4, #4]
 8009506:	e7d5      	b.n	80094b4 <_sungetc_r+0xc>
 8009508:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800950c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009510:	6363      	str	r3, [r4, #52]	; 0x34
 8009512:	2303      	movs	r3, #3
 8009514:	63a3      	str	r3, [r4, #56]	; 0x38
 8009516:	4623      	mov	r3, r4
 8009518:	f803 5f46 	strb.w	r5, [r3, #70]!
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	2301      	movs	r3, #1
 8009520:	e7dc      	b.n	80094dc <_sungetc_r+0x34>

08009522 <__ssrefill_r>:
 8009522:	b510      	push	{r4, lr}
 8009524:	460c      	mov	r4, r1
 8009526:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009528:	b169      	cbz	r1, 8009546 <__ssrefill_r+0x24>
 800952a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800952e:	4299      	cmp	r1, r3
 8009530:	d001      	beq.n	8009536 <__ssrefill_r+0x14>
 8009532:	f7ff fd7d 	bl	8009030 <_free_r>
 8009536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009538:	6063      	str	r3, [r4, #4]
 800953a:	2000      	movs	r0, #0
 800953c:	6360      	str	r0, [r4, #52]	; 0x34
 800953e:	b113      	cbz	r3, 8009546 <__ssrefill_r+0x24>
 8009540:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009542:	6023      	str	r3, [r4, #0]
 8009544:	bd10      	pop	{r4, pc}
 8009546:	6923      	ldr	r3, [r4, #16]
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	2300      	movs	r3, #0
 800954c:	6063      	str	r3, [r4, #4]
 800954e:	89a3      	ldrh	r3, [r4, #12]
 8009550:	f043 0320 	orr.w	r3, r3, #32
 8009554:	81a3      	strh	r3, [r4, #12]
 8009556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800955a:	e7f3      	b.n	8009544 <__ssrefill_r+0x22>

0800955c <__ssvfiscanf_r>:
 800955c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009560:	460c      	mov	r4, r1
 8009562:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009566:	2100      	movs	r1, #0
 8009568:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800956c:	49a6      	ldr	r1, [pc, #664]	; (8009808 <__ssvfiscanf_r+0x2ac>)
 800956e:	91a0      	str	r1, [sp, #640]	; 0x280
 8009570:	f10d 0804 	add.w	r8, sp, #4
 8009574:	49a5      	ldr	r1, [pc, #660]	; (800980c <__ssvfiscanf_r+0x2b0>)
 8009576:	4fa6      	ldr	r7, [pc, #664]	; (8009810 <__ssvfiscanf_r+0x2b4>)
 8009578:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009814 <__ssvfiscanf_r+0x2b8>
 800957c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009580:	4606      	mov	r6, r0
 8009582:	91a1      	str	r1, [sp, #644]	; 0x284
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	7813      	ldrb	r3, [r2, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 815a 	beq.w	8009842 <__ssvfiscanf_r+0x2e6>
 800958e:	5dd9      	ldrb	r1, [r3, r7]
 8009590:	f011 0108 	ands.w	r1, r1, #8
 8009594:	f102 0501 	add.w	r5, r2, #1
 8009598:	d019      	beq.n	80095ce <__ssvfiscanf_r+0x72>
 800959a:	6863      	ldr	r3, [r4, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	dd0f      	ble.n	80095c0 <__ssvfiscanf_r+0x64>
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	781a      	ldrb	r2, [r3, #0]
 80095a4:	5cba      	ldrb	r2, [r7, r2]
 80095a6:	0712      	lsls	r2, r2, #28
 80095a8:	d401      	bmi.n	80095ae <__ssvfiscanf_r+0x52>
 80095aa:	462a      	mov	r2, r5
 80095ac:	e7eb      	b.n	8009586 <__ssvfiscanf_r+0x2a>
 80095ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80095b0:	3201      	adds	r2, #1
 80095b2:	9245      	str	r2, [sp, #276]	; 0x114
 80095b4:	6862      	ldr	r2, [r4, #4]
 80095b6:	3301      	adds	r3, #1
 80095b8:	3a01      	subs	r2, #1
 80095ba:	6062      	str	r2, [r4, #4]
 80095bc:	6023      	str	r3, [r4, #0]
 80095be:	e7ec      	b.n	800959a <__ssvfiscanf_r+0x3e>
 80095c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80095c2:	4621      	mov	r1, r4
 80095c4:	4630      	mov	r0, r6
 80095c6:	4798      	blx	r3
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d0e9      	beq.n	80095a0 <__ssvfiscanf_r+0x44>
 80095cc:	e7ed      	b.n	80095aa <__ssvfiscanf_r+0x4e>
 80095ce:	2b25      	cmp	r3, #37	; 0x25
 80095d0:	d012      	beq.n	80095f8 <__ssvfiscanf_r+0x9c>
 80095d2:	469a      	mov	sl, r3
 80095d4:	6863      	ldr	r3, [r4, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f340 8091 	ble.w	80096fe <__ssvfiscanf_r+0x1a2>
 80095dc:	6822      	ldr	r2, [r4, #0]
 80095de:	7813      	ldrb	r3, [r2, #0]
 80095e0:	4553      	cmp	r3, sl
 80095e2:	f040 812e 	bne.w	8009842 <__ssvfiscanf_r+0x2e6>
 80095e6:	6863      	ldr	r3, [r4, #4]
 80095e8:	3b01      	subs	r3, #1
 80095ea:	6063      	str	r3, [r4, #4]
 80095ec:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80095ee:	3201      	adds	r2, #1
 80095f0:	3301      	adds	r3, #1
 80095f2:	6022      	str	r2, [r4, #0]
 80095f4:	9345      	str	r3, [sp, #276]	; 0x114
 80095f6:	e7d8      	b.n	80095aa <__ssvfiscanf_r+0x4e>
 80095f8:	9141      	str	r1, [sp, #260]	; 0x104
 80095fa:	9143      	str	r1, [sp, #268]	; 0x10c
 80095fc:	7853      	ldrb	r3, [r2, #1]
 80095fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009600:	bf02      	ittt	eq
 8009602:	2310      	moveq	r3, #16
 8009604:	1c95      	addeq	r5, r2, #2
 8009606:	9341      	streq	r3, [sp, #260]	; 0x104
 8009608:	220a      	movs	r2, #10
 800960a:	46aa      	mov	sl, r5
 800960c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009610:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009614:	2b09      	cmp	r3, #9
 8009616:	d91d      	bls.n	8009654 <__ssvfiscanf_r+0xf8>
 8009618:	487e      	ldr	r0, [pc, #504]	; (8009814 <__ssvfiscanf_r+0x2b8>)
 800961a:	2203      	movs	r2, #3
 800961c:	f7f6 fde0 	bl	80001e0 <memchr>
 8009620:	b140      	cbz	r0, 8009634 <__ssvfiscanf_r+0xd8>
 8009622:	2301      	movs	r3, #1
 8009624:	eba0 0009 	sub.w	r0, r0, r9
 8009628:	fa03 f000 	lsl.w	r0, r3, r0
 800962c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800962e:	4318      	orrs	r0, r3
 8009630:	9041      	str	r0, [sp, #260]	; 0x104
 8009632:	4655      	mov	r5, sl
 8009634:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009638:	2b78      	cmp	r3, #120	; 0x78
 800963a:	d806      	bhi.n	800964a <__ssvfiscanf_r+0xee>
 800963c:	2b57      	cmp	r3, #87	; 0x57
 800963e:	d810      	bhi.n	8009662 <__ssvfiscanf_r+0x106>
 8009640:	2b25      	cmp	r3, #37	; 0x25
 8009642:	d0c6      	beq.n	80095d2 <__ssvfiscanf_r+0x76>
 8009644:	d856      	bhi.n	80096f4 <__ssvfiscanf_r+0x198>
 8009646:	2b00      	cmp	r3, #0
 8009648:	d064      	beq.n	8009714 <__ssvfiscanf_r+0x1b8>
 800964a:	2303      	movs	r3, #3
 800964c:	9347      	str	r3, [sp, #284]	; 0x11c
 800964e:	230a      	movs	r3, #10
 8009650:	9342      	str	r3, [sp, #264]	; 0x108
 8009652:	e071      	b.n	8009738 <__ssvfiscanf_r+0x1dc>
 8009654:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009656:	fb02 1103 	mla	r1, r2, r3, r1
 800965a:	3930      	subs	r1, #48	; 0x30
 800965c:	9143      	str	r1, [sp, #268]	; 0x10c
 800965e:	4655      	mov	r5, sl
 8009660:	e7d3      	b.n	800960a <__ssvfiscanf_r+0xae>
 8009662:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009666:	2a20      	cmp	r2, #32
 8009668:	d8ef      	bhi.n	800964a <__ssvfiscanf_r+0xee>
 800966a:	a101      	add	r1, pc, #4	; (adr r1, 8009670 <__ssvfiscanf_r+0x114>)
 800966c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009670:	08009723 	.word	0x08009723
 8009674:	0800964b 	.word	0x0800964b
 8009678:	0800964b 	.word	0x0800964b
 800967c:	08009781 	.word	0x08009781
 8009680:	0800964b 	.word	0x0800964b
 8009684:	0800964b 	.word	0x0800964b
 8009688:	0800964b 	.word	0x0800964b
 800968c:	0800964b 	.word	0x0800964b
 8009690:	0800964b 	.word	0x0800964b
 8009694:	0800964b 	.word	0x0800964b
 8009698:	0800964b 	.word	0x0800964b
 800969c:	08009797 	.word	0x08009797
 80096a0:	0800976d 	.word	0x0800976d
 80096a4:	080096fb 	.word	0x080096fb
 80096a8:	080096fb 	.word	0x080096fb
 80096ac:	080096fb 	.word	0x080096fb
 80096b0:	0800964b 	.word	0x0800964b
 80096b4:	08009771 	.word	0x08009771
 80096b8:	0800964b 	.word	0x0800964b
 80096bc:	0800964b 	.word	0x0800964b
 80096c0:	0800964b 	.word	0x0800964b
 80096c4:	0800964b 	.word	0x0800964b
 80096c8:	080097a7 	.word	0x080097a7
 80096cc:	08009779 	.word	0x08009779
 80096d0:	0800971b 	.word	0x0800971b
 80096d4:	0800964b 	.word	0x0800964b
 80096d8:	0800964b 	.word	0x0800964b
 80096dc:	080097a3 	.word	0x080097a3
 80096e0:	0800964b 	.word	0x0800964b
 80096e4:	0800976d 	.word	0x0800976d
 80096e8:	0800964b 	.word	0x0800964b
 80096ec:	0800964b 	.word	0x0800964b
 80096f0:	08009723 	.word	0x08009723
 80096f4:	3b45      	subs	r3, #69	; 0x45
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d8a7      	bhi.n	800964a <__ssvfiscanf_r+0xee>
 80096fa:	2305      	movs	r3, #5
 80096fc:	e01b      	b.n	8009736 <__ssvfiscanf_r+0x1da>
 80096fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009700:	4621      	mov	r1, r4
 8009702:	4630      	mov	r0, r6
 8009704:	4798      	blx	r3
 8009706:	2800      	cmp	r0, #0
 8009708:	f43f af68 	beq.w	80095dc <__ssvfiscanf_r+0x80>
 800970c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800970e:	2800      	cmp	r0, #0
 8009710:	f040 808d 	bne.w	800982e <__ssvfiscanf_r+0x2d2>
 8009714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009718:	e08f      	b.n	800983a <__ssvfiscanf_r+0x2de>
 800971a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800971c:	f042 0220 	orr.w	r2, r2, #32
 8009720:	9241      	str	r2, [sp, #260]	; 0x104
 8009722:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009728:	9241      	str	r2, [sp, #260]	; 0x104
 800972a:	2210      	movs	r2, #16
 800972c:	2b6f      	cmp	r3, #111	; 0x6f
 800972e:	9242      	str	r2, [sp, #264]	; 0x108
 8009730:	bf34      	ite	cc
 8009732:	2303      	movcc	r3, #3
 8009734:	2304      	movcs	r3, #4
 8009736:	9347      	str	r3, [sp, #284]	; 0x11c
 8009738:	6863      	ldr	r3, [r4, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	dd42      	ble.n	80097c4 <__ssvfiscanf_r+0x268>
 800973e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009740:	0659      	lsls	r1, r3, #25
 8009742:	d404      	bmi.n	800974e <__ssvfiscanf_r+0x1f2>
 8009744:	6823      	ldr	r3, [r4, #0]
 8009746:	781a      	ldrb	r2, [r3, #0]
 8009748:	5cba      	ldrb	r2, [r7, r2]
 800974a:	0712      	lsls	r2, r2, #28
 800974c:	d441      	bmi.n	80097d2 <__ssvfiscanf_r+0x276>
 800974e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009750:	2b02      	cmp	r3, #2
 8009752:	dc50      	bgt.n	80097f6 <__ssvfiscanf_r+0x29a>
 8009754:	466b      	mov	r3, sp
 8009756:	4622      	mov	r2, r4
 8009758:	a941      	add	r1, sp, #260	; 0x104
 800975a:	4630      	mov	r0, r6
 800975c:	f000 f876 	bl	800984c <_scanf_chars>
 8009760:	2801      	cmp	r0, #1
 8009762:	d06e      	beq.n	8009842 <__ssvfiscanf_r+0x2e6>
 8009764:	2802      	cmp	r0, #2
 8009766:	f47f af20 	bne.w	80095aa <__ssvfiscanf_r+0x4e>
 800976a:	e7cf      	b.n	800970c <__ssvfiscanf_r+0x1b0>
 800976c:	220a      	movs	r2, #10
 800976e:	e7dd      	b.n	800972c <__ssvfiscanf_r+0x1d0>
 8009770:	2300      	movs	r3, #0
 8009772:	9342      	str	r3, [sp, #264]	; 0x108
 8009774:	2303      	movs	r3, #3
 8009776:	e7de      	b.n	8009736 <__ssvfiscanf_r+0x1da>
 8009778:	2308      	movs	r3, #8
 800977a:	9342      	str	r3, [sp, #264]	; 0x108
 800977c:	2304      	movs	r3, #4
 800977e:	e7da      	b.n	8009736 <__ssvfiscanf_r+0x1da>
 8009780:	4629      	mov	r1, r5
 8009782:	4640      	mov	r0, r8
 8009784:	f000 f9d6 	bl	8009b34 <__sccl>
 8009788:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800978a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800978e:	9341      	str	r3, [sp, #260]	; 0x104
 8009790:	4605      	mov	r5, r0
 8009792:	2301      	movs	r3, #1
 8009794:	e7cf      	b.n	8009736 <__ssvfiscanf_r+0x1da>
 8009796:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800979c:	9341      	str	r3, [sp, #260]	; 0x104
 800979e:	2300      	movs	r3, #0
 80097a0:	e7c9      	b.n	8009736 <__ssvfiscanf_r+0x1da>
 80097a2:	2302      	movs	r3, #2
 80097a4:	e7c7      	b.n	8009736 <__ssvfiscanf_r+0x1da>
 80097a6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80097a8:	06c3      	lsls	r3, r0, #27
 80097aa:	f53f aefe 	bmi.w	80095aa <__ssvfiscanf_r+0x4e>
 80097ae:	9b00      	ldr	r3, [sp, #0]
 80097b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80097b2:	1d19      	adds	r1, r3, #4
 80097b4:	9100      	str	r1, [sp, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f010 0f01 	tst.w	r0, #1
 80097bc:	bf14      	ite	ne
 80097be:	801a      	strhne	r2, [r3, #0]
 80097c0:	601a      	streq	r2, [r3, #0]
 80097c2:	e6f2      	b.n	80095aa <__ssvfiscanf_r+0x4e>
 80097c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80097c6:	4621      	mov	r1, r4
 80097c8:	4630      	mov	r0, r6
 80097ca:	4798      	blx	r3
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d0b6      	beq.n	800973e <__ssvfiscanf_r+0x1e2>
 80097d0:	e79c      	b.n	800970c <__ssvfiscanf_r+0x1b0>
 80097d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80097d4:	3201      	adds	r2, #1
 80097d6:	9245      	str	r2, [sp, #276]	; 0x114
 80097d8:	6862      	ldr	r2, [r4, #4]
 80097da:	3a01      	subs	r2, #1
 80097dc:	2a00      	cmp	r2, #0
 80097de:	6062      	str	r2, [r4, #4]
 80097e0:	dd02      	ble.n	80097e8 <__ssvfiscanf_r+0x28c>
 80097e2:	3301      	adds	r3, #1
 80097e4:	6023      	str	r3, [r4, #0]
 80097e6:	e7ad      	b.n	8009744 <__ssvfiscanf_r+0x1e8>
 80097e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80097ea:	4621      	mov	r1, r4
 80097ec:	4630      	mov	r0, r6
 80097ee:	4798      	blx	r3
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d0a7      	beq.n	8009744 <__ssvfiscanf_r+0x1e8>
 80097f4:	e78a      	b.n	800970c <__ssvfiscanf_r+0x1b0>
 80097f6:	2b04      	cmp	r3, #4
 80097f8:	dc0e      	bgt.n	8009818 <__ssvfiscanf_r+0x2bc>
 80097fa:	466b      	mov	r3, sp
 80097fc:	4622      	mov	r2, r4
 80097fe:	a941      	add	r1, sp, #260	; 0x104
 8009800:	4630      	mov	r0, r6
 8009802:	f000 f87d 	bl	8009900 <_scanf_i>
 8009806:	e7ab      	b.n	8009760 <__ssvfiscanf_r+0x204>
 8009808:	080094a9 	.word	0x080094a9
 800980c:	08009523 	.word	0x08009523
 8009810:	0800ac5d 	.word	0x0800ac5d
 8009814:	0800abfa 	.word	0x0800abfa
 8009818:	4b0b      	ldr	r3, [pc, #44]	; (8009848 <__ssvfiscanf_r+0x2ec>)
 800981a:	2b00      	cmp	r3, #0
 800981c:	f43f aec5 	beq.w	80095aa <__ssvfiscanf_r+0x4e>
 8009820:	466b      	mov	r3, sp
 8009822:	4622      	mov	r2, r4
 8009824:	a941      	add	r1, sp, #260	; 0x104
 8009826:	4630      	mov	r0, r6
 8009828:	f3af 8000 	nop.w
 800982c:	e798      	b.n	8009760 <__ssvfiscanf_r+0x204>
 800982e:	89a3      	ldrh	r3, [r4, #12]
 8009830:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009834:	bf18      	it	ne
 8009836:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800983a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800983e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009842:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009844:	e7f9      	b.n	800983a <__ssvfiscanf_r+0x2de>
 8009846:	bf00      	nop
 8009848:	00000000 	.word	0x00000000

0800984c <_scanf_chars>:
 800984c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009850:	4615      	mov	r5, r2
 8009852:	688a      	ldr	r2, [r1, #8]
 8009854:	4680      	mov	r8, r0
 8009856:	460c      	mov	r4, r1
 8009858:	b932      	cbnz	r2, 8009868 <_scanf_chars+0x1c>
 800985a:	698a      	ldr	r2, [r1, #24]
 800985c:	2a00      	cmp	r2, #0
 800985e:	bf0c      	ite	eq
 8009860:	2201      	moveq	r2, #1
 8009862:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8009866:	608a      	str	r2, [r1, #8]
 8009868:	6822      	ldr	r2, [r4, #0]
 800986a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80098fc <_scanf_chars+0xb0>
 800986e:	06d1      	lsls	r1, r2, #27
 8009870:	bf5f      	itttt	pl
 8009872:	681a      	ldrpl	r2, [r3, #0]
 8009874:	1d11      	addpl	r1, r2, #4
 8009876:	6019      	strpl	r1, [r3, #0]
 8009878:	6816      	ldrpl	r6, [r2, #0]
 800987a:	2700      	movs	r7, #0
 800987c:	69a0      	ldr	r0, [r4, #24]
 800987e:	b188      	cbz	r0, 80098a4 <_scanf_chars+0x58>
 8009880:	2801      	cmp	r0, #1
 8009882:	d107      	bne.n	8009894 <_scanf_chars+0x48>
 8009884:	682a      	ldr	r2, [r5, #0]
 8009886:	7811      	ldrb	r1, [r2, #0]
 8009888:	6962      	ldr	r2, [r4, #20]
 800988a:	5c52      	ldrb	r2, [r2, r1]
 800988c:	b952      	cbnz	r2, 80098a4 <_scanf_chars+0x58>
 800988e:	2f00      	cmp	r7, #0
 8009890:	d031      	beq.n	80098f6 <_scanf_chars+0xaa>
 8009892:	e022      	b.n	80098da <_scanf_chars+0x8e>
 8009894:	2802      	cmp	r0, #2
 8009896:	d120      	bne.n	80098da <_scanf_chars+0x8e>
 8009898:	682b      	ldr	r3, [r5, #0]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	f813 3009 	ldrb.w	r3, [r3, r9]
 80098a0:	071b      	lsls	r3, r3, #28
 80098a2:	d41a      	bmi.n	80098da <_scanf_chars+0x8e>
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	06da      	lsls	r2, r3, #27
 80098a8:	bf5e      	ittt	pl
 80098aa:	682b      	ldrpl	r3, [r5, #0]
 80098ac:	781b      	ldrbpl	r3, [r3, #0]
 80098ae:	f806 3b01 	strbpl.w	r3, [r6], #1
 80098b2:	682a      	ldr	r2, [r5, #0]
 80098b4:	686b      	ldr	r3, [r5, #4]
 80098b6:	3201      	adds	r2, #1
 80098b8:	602a      	str	r2, [r5, #0]
 80098ba:	68a2      	ldr	r2, [r4, #8]
 80098bc:	3b01      	subs	r3, #1
 80098be:	3a01      	subs	r2, #1
 80098c0:	606b      	str	r3, [r5, #4]
 80098c2:	3701      	adds	r7, #1
 80098c4:	60a2      	str	r2, [r4, #8]
 80098c6:	b142      	cbz	r2, 80098da <_scanf_chars+0x8e>
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	dcd7      	bgt.n	800987c <_scanf_chars+0x30>
 80098cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80098d0:	4629      	mov	r1, r5
 80098d2:	4640      	mov	r0, r8
 80098d4:	4798      	blx	r3
 80098d6:	2800      	cmp	r0, #0
 80098d8:	d0d0      	beq.n	800987c <_scanf_chars+0x30>
 80098da:	6823      	ldr	r3, [r4, #0]
 80098dc:	f013 0310 	ands.w	r3, r3, #16
 80098e0:	d105      	bne.n	80098ee <_scanf_chars+0xa2>
 80098e2:	68e2      	ldr	r2, [r4, #12]
 80098e4:	3201      	adds	r2, #1
 80098e6:	60e2      	str	r2, [r4, #12]
 80098e8:	69a2      	ldr	r2, [r4, #24]
 80098ea:	b102      	cbz	r2, 80098ee <_scanf_chars+0xa2>
 80098ec:	7033      	strb	r3, [r6, #0]
 80098ee:	6923      	ldr	r3, [r4, #16]
 80098f0:	443b      	add	r3, r7
 80098f2:	6123      	str	r3, [r4, #16]
 80098f4:	2000      	movs	r0, #0
 80098f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098fa:	bf00      	nop
 80098fc:	0800ac5d 	.word	0x0800ac5d

08009900 <_scanf_i>:
 8009900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009904:	4698      	mov	r8, r3
 8009906:	4b76      	ldr	r3, [pc, #472]	; (8009ae0 <_scanf_i+0x1e0>)
 8009908:	460c      	mov	r4, r1
 800990a:	4682      	mov	sl, r0
 800990c:	4616      	mov	r6, r2
 800990e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009912:	b087      	sub	sp, #28
 8009914:	ab03      	add	r3, sp, #12
 8009916:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800991a:	4b72      	ldr	r3, [pc, #456]	; (8009ae4 <_scanf_i+0x1e4>)
 800991c:	69a1      	ldr	r1, [r4, #24]
 800991e:	4a72      	ldr	r2, [pc, #456]	; (8009ae8 <_scanf_i+0x1e8>)
 8009920:	2903      	cmp	r1, #3
 8009922:	bf18      	it	ne
 8009924:	461a      	movne	r2, r3
 8009926:	68a3      	ldr	r3, [r4, #8]
 8009928:	9201      	str	r2, [sp, #4]
 800992a:	1e5a      	subs	r2, r3, #1
 800992c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009930:	bf88      	it	hi
 8009932:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009936:	4627      	mov	r7, r4
 8009938:	bf82      	ittt	hi
 800993a:	eb03 0905 	addhi.w	r9, r3, r5
 800993e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009942:	60a3      	strhi	r3, [r4, #8]
 8009944:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009948:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800994c:	bf98      	it	ls
 800994e:	f04f 0900 	movls.w	r9, #0
 8009952:	6023      	str	r3, [r4, #0]
 8009954:	463d      	mov	r5, r7
 8009956:	f04f 0b00 	mov.w	fp, #0
 800995a:	6831      	ldr	r1, [r6, #0]
 800995c:	ab03      	add	r3, sp, #12
 800995e:	7809      	ldrb	r1, [r1, #0]
 8009960:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009964:	2202      	movs	r2, #2
 8009966:	f7f6 fc3b 	bl	80001e0 <memchr>
 800996a:	b328      	cbz	r0, 80099b8 <_scanf_i+0xb8>
 800996c:	f1bb 0f01 	cmp.w	fp, #1
 8009970:	d159      	bne.n	8009a26 <_scanf_i+0x126>
 8009972:	6862      	ldr	r2, [r4, #4]
 8009974:	b92a      	cbnz	r2, 8009982 <_scanf_i+0x82>
 8009976:	6822      	ldr	r2, [r4, #0]
 8009978:	2308      	movs	r3, #8
 800997a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800997e:	6063      	str	r3, [r4, #4]
 8009980:	6022      	str	r2, [r4, #0]
 8009982:	6822      	ldr	r2, [r4, #0]
 8009984:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009988:	6022      	str	r2, [r4, #0]
 800998a:	68a2      	ldr	r2, [r4, #8]
 800998c:	1e51      	subs	r1, r2, #1
 800998e:	60a1      	str	r1, [r4, #8]
 8009990:	b192      	cbz	r2, 80099b8 <_scanf_i+0xb8>
 8009992:	6832      	ldr	r2, [r6, #0]
 8009994:	1c51      	adds	r1, r2, #1
 8009996:	6031      	str	r1, [r6, #0]
 8009998:	7812      	ldrb	r2, [r2, #0]
 800999a:	f805 2b01 	strb.w	r2, [r5], #1
 800999e:	6872      	ldr	r2, [r6, #4]
 80099a0:	3a01      	subs	r2, #1
 80099a2:	2a00      	cmp	r2, #0
 80099a4:	6072      	str	r2, [r6, #4]
 80099a6:	dc07      	bgt.n	80099b8 <_scanf_i+0xb8>
 80099a8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80099ac:	4631      	mov	r1, r6
 80099ae:	4650      	mov	r0, sl
 80099b0:	4790      	blx	r2
 80099b2:	2800      	cmp	r0, #0
 80099b4:	f040 8085 	bne.w	8009ac2 <_scanf_i+0x1c2>
 80099b8:	f10b 0b01 	add.w	fp, fp, #1
 80099bc:	f1bb 0f03 	cmp.w	fp, #3
 80099c0:	d1cb      	bne.n	800995a <_scanf_i+0x5a>
 80099c2:	6863      	ldr	r3, [r4, #4]
 80099c4:	b90b      	cbnz	r3, 80099ca <_scanf_i+0xca>
 80099c6:	230a      	movs	r3, #10
 80099c8:	6063      	str	r3, [r4, #4]
 80099ca:	6863      	ldr	r3, [r4, #4]
 80099cc:	4947      	ldr	r1, [pc, #284]	; (8009aec <_scanf_i+0x1ec>)
 80099ce:	6960      	ldr	r0, [r4, #20]
 80099d0:	1ac9      	subs	r1, r1, r3
 80099d2:	f000 f8af 	bl	8009b34 <__sccl>
 80099d6:	f04f 0b00 	mov.w	fp, #0
 80099da:	68a3      	ldr	r3, [r4, #8]
 80099dc:	6822      	ldr	r2, [r4, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d03d      	beq.n	8009a5e <_scanf_i+0x15e>
 80099e2:	6831      	ldr	r1, [r6, #0]
 80099e4:	6960      	ldr	r0, [r4, #20]
 80099e6:	f891 c000 	ldrb.w	ip, [r1]
 80099ea:	f810 000c 	ldrb.w	r0, [r0, ip]
 80099ee:	2800      	cmp	r0, #0
 80099f0:	d035      	beq.n	8009a5e <_scanf_i+0x15e>
 80099f2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80099f6:	d124      	bne.n	8009a42 <_scanf_i+0x142>
 80099f8:	0510      	lsls	r0, r2, #20
 80099fa:	d522      	bpl.n	8009a42 <_scanf_i+0x142>
 80099fc:	f10b 0b01 	add.w	fp, fp, #1
 8009a00:	f1b9 0f00 	cmp.w	r9, #0
 8009a04:	d003      	beq.n	8009a0e <_scanf_i+0x10e>
 8009a06:	3301      	adds	r3, #1
 8009a08:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009a0c:	60a3      	str	r3, [r4, #8]
 8009a0e:	6873      	ldr	r3, [r6, #4]
 8009a10:	3b01      	subs	r3, #1
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	6073      	str	r3, [r6, #4]
 8009a16:	dd1b      	ble.n	8009a50 <_scanf_i+0x150>
 8009a18:	6833      	ldr	r3, [r6, #0]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	6033      	str	r3, [r6, #0]
 8009a1e:	68a3      	ldr	r3, [r4, #8]
 8009a20:	3b01      	subs	r3, #1
 8009a22:	60a3      	str	r3, [r4, #8]
 8009a24:	e7d9      	b.n	80099da <_scanf_i+0xda>
 8009a26:	f1bb 0f02 	cmp.w	fp, #2
 8009a2a:	d1ae      	bne.n	800998a <_scanf_i+0x8a>
 8009a2c:	6822      	ldr	r2, [r4, #0]
 8009a2e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009a32:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009a36:	d1bf      	bne.n	80099b8 <_scanf_i+0xb8>
 8009a38:	2310      	movs	r3, #16
 8009a3a:	6063      	str	r3, [r4, #4]
 8009a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a40:	e7a2      	b.n	8009988 <_scanf_i+0x88>
 8009a42:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009a46:	6022      	str	r2, [r4, #0]
 8009a48:	780b      	ldrb	r3, [r1, #0]
 8009a4a:	f805 3b01 	strb.w	r3, [r5], #1
 8009a4e:	e7de      	b.n	8009a0e <_scanf_i+0x10e>
 8009a50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009a54:	4631      	mov	r1, r6
 8009a56:	4650      	mov	r0, sl
 8009a58:	4798      	blx	r3
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d0df      	beq.n	8009a1e <_scanf_i+0x11e>
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	05db      	lsls	r3, r3, #23
 8009a62:	d50d      	bpl.n	8009a80 <_scanf_i+0x180>
 8009a64:	42bd      	cmp	r5, r7
 8009a66:	d909      	bls.n	8009a7c <_scanf_i+0x17c>
 8009a68:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009a6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a70:	4632      	mov	r2, r6
 8009a72:	4650      	mov	r0, sl
 8009a74:	4798      	blx	r3
 8009a76:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009a7a:	464d      	mov	r5, r9
 8009a7c:	42bd      	cmp	r5, r7
 8009a7e:	d02d      	beq.n	8009adc <_scanf_i+0x1dc>
 8009a80:	6822      	ldr	r2, [r4, #0]
 8009a82:	f012 0210 	ands.w	r2, r2, #16
 8009a86:	d113      	bne.n	8009ab0 <_scanf_i+0x1b0>
 8009a88:	702a      	strb	r2, [r5, #0]
 8009a8a:	6863      	ldr	r3, [r4, #4]
 8009a8c:	9e01      	ldr	r6, [sp, #4]
 8009a8e:	4639      	mov	r1, r7
 8009a90:	4650      	mov	r0, sl
 8009a92:	47b0      	blx	r6
 8009a94:	6821      	ldr	r1, [r4, #0]
 8009a96:	f8d8 3000 	ldr.w	r3, [r8]
 8009a9a:	f011 0f20 	tst.w	r1, #32
 8009a9e:	d013      	beq.n	8009ac8 <_scanf_i+0x1c8>
 8009aa0:	1d1a      	adds	r2, r3, #4
 8009aa2:	f8c8 2000 	str.w	r2, [r8]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6018      	str	r0, [r3, #0]
 8009aaa:	68e3      	ldr	r3, [r4, #12]
 8009aac:	3301      	adds	r3, #1
 8009aae:	60e3      	str	r3, [r4, #12]
 8009ab0:	1bed      	subs	r5, r5, r7
 8009ab2:	44ab      	add	fp, r5
 8009ab4:	6925      	ldr	r5, [r4, #16]
 8009ab6:	445d      	add	r5, fp
 8009ab8:	6125      	str	r5, [r4, #16]
 8009aba:	2000      	movs	r0, #0
 8009abc:	b007      	add	sp, #28
 8009abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac2:	f04f 0b00 	mov.w	fp, #0
 8009ac6:	e7ca      	b.n	8009a5e <_scanf_i+0x15e>
 8009ac8:	1d1a      	adds	r2, r3, #4
 8009aca:	f8c8 2000 	str.w	r2, [r8]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f011 0f01 	tst.w	r1, #1
 8009ad4:	bf14      	ite	ne
 8009ad6:	8018      	strhne	r0, [r3, #0]
 8009ad8:	6018      	streq	r0, [r3, #0]
 8009ada:	e7e6      	b.n	8009aaa <_scanf_i+0x1aa>
 8009adc:	2001      	movs	r0, #1
 8009ade:	e7ed      	b.n	8009abc <_scanf_i+0x1bc>
 8009ae0:	0800a9b0 	.word	0x0800a9b0
 8009ae4:	08009d91 	.word	0x08009d91
 8009ae8:	08009ca9 	.word	0x08009ca9
 8009aec:	0800ac1e 	.word	0x0800ac1e

08009af0 <_read_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	4d07      	ldr	r5, [pc, #28]	; (8009b10 <_read_r+0x20>)
 8009af4:	4604      	mov	r4, r0
 8009af6:	4608      	mov	r0, r1
 8009af8:	4611      	mov	r1, r2
 8009afa:	2200      	movs	r2, #0
 8009afc:	602a      	str	r2, [r5, #0]
 8009afe:	461a      	mov	r2, r3
 8009b00:	f7f8 fc32 	bl	8002368 <_read>
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	d102      	bne.n	8009b0e <_read_r+0x1e>
 8009b08:	682b      	ldr	r3, [r5, #0]
 8009b0a:	b103      	cbz	r3, 8009b0e <_read_r+0x1e>
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	bd38      	pop	{r3, r4, r5, pc}
 8009b10:	20000590 	.word	0x20000590

08009b14 <_sbrk_r>:
 8009b14:	b538      	push	{r3, r4, r5, lr}
 8009b16:	4d06      	ldr	r5, [pc, #24]	; (8009b30 <_sbrk_r+0x1c>)
 8009b18:	2300      	movs	r3, #0
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	4608      	mov	r0, r1
 8009b1e:	602b      	str	r3, [r5, #0]
 8009b20:	f7f8 fc90 	bl	8002444 <_sbrk>
 8009b24:	1c43      	adds	r3, r0, #1
 8009b26:	d102      	bne.n	8009b2e <_sbrk_r+0x1a>
 8009b28:	682b      	ldr	r3, [r5, #0]
 8009b2a:	b103      	cbz	r3, 8009b2e <_sbrk_r+0x1a>
 8009b2c:	6023      	str	r3, [r4, #0]
 8009b2e:	bd38      	pop	{r3, r4, r5, pc}
 8009b30:	20000590 	.word	0x20000590

08009b34 <__sccl>:
 8009b34:	b570      	push	{r4, r5, r6, lr}
 8009b36:	780b      	ldrb	r3, [r1, #0]
 8009b38:	4604      	mov	r4, r0
 8009b3a:	2b5e      	cmp	r3, #94	; 0x5e
 8009b3c:	bf0b      	itete	eq
 8009b3e:	784b      	ldrbeq	r3, [r1, #1]
 8009b40:	1c48      	addne	r0, r1, #1
 8009b42:	1c88      	addeq	r0, r1, #2
 8009b44:	2200      	movne	r2, #0
 8009b46:	bf08      	it	eq
 8009b48:	2201      	moveq	r2, #1
 8009b4a:	1e61      	subs	r1, r4, #1
 8009b4c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009b50:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009b54:	42a9      	cmp	r1, r5
 8009b56:	d1fb      	bne.n	8009b50 <__sccl+0x1c>
 8009b58:	b90b      	cbnz	r3, 8009b5e <__sccl+0x2a>
 8009b5a:	3801      	subs	r0, #1
 8009b5c:	bd70      	pop	{r4, r5, r6, pc}
 8009b5e:	f082 0201 	eor.w	r2, r2, #1
 8009b62:	54e2      	strb	r2, [r4, r3]
 8009b64:	4605      	mov	r5, r0
 8009b66:	4628      	mov	r0, r5
 8009b68:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009b6c:	292d      	cmp	r1, #45	; 0x2d
 8009b6e:	d006      	beq.n	8009b7e <__sccl+0x4a>
 8009b70:	295d      	cmp	r1, #93	; 0x5d
 8009b72:	d0f3      	beq.n	8009b5c <__sccl+0x28>
 8009b74:	b909      	cbnz	r1, 8009b7a <__sccl+0x46>
 8009b76:	4628      	mov	r0, r5
 8009b78:	e7f0      	b.n	8009b5c <__sccl+0x28>
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	e7f1      	b.n	8009b62 <__sccl+0x2e>
 8009b7e:	786e      	ldrb	r6, [r5, #1]
 8009b80:	2e5d      	cmp	r6, #93	; 0x5d
 8009b82:	d0fa      	beq.n	8009b7a <__sccl+0x46>
 8009b84:	42b3      	cmp	r3, r6
 8009b86:	dcf8      	bgt.n	8009b7a <__sccl+0x46>
 8009b88:	3502      	adds	r5, #2
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	3101      	adds	r1, #1
 8009b8e:	428e      	cmp	r6, r1
 8009b90:	5462      	strb	r2, [r4, r1]
 8009b92:	dcfb      	bgt.n	8009b8c <__sccl+0x58>
 8009b94:	1af1      	subs	r1, r6, r3
 8009b96:	3901      	subs	r1, #1
 8009b98:	1c58      	adds	r0, r3, #1
 8009b9a:	42b3      	cmp	r3, r6
 8009b9c:	bfa8      	it	ge
 8009b9e:	2100      	movge	r1, #0
 8009ba0:	1843      	adds	r3, r0, r1
 8009ba2:	e7e0      	b.n	8009b66 <__sccl+0x32>

08009ba4 <_strtol_l.constprop.0>:
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009baa:	d001      	beq.n	8009bb0 <_strtol_l.constprop.0+0xc>
 8009bac:	2b24      	cmp	r3, #36	; 0x24
 8009bae:	d906      	bls.n	8009bbe <_strtol_l.constprop.0+0x1a>
 8009bb0:	f7fd fa9a 	bl	80070e8 <__errno>
 8009bb4:	2316      	movs	r3, #22
 8009bb6:	6003      	str	r3, [r0, #0]
 8009bb8:	2000      	movs	r0, #0
 8009bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bbe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009ca4 <_strtol_l.constprop.0+0x100>
 8009bc2:	460d      	mov	r5, r1
 8009bc4:	462e      	mov	r6, r5
 8009bc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bca:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009bce:	f017 0708 	ands.w	r7, r7, #8
 8009bd2:	d1f7      	bne.n	8009bc4 <_strtol_l.constprop.0+0x20>
 8009bd4:	2c2d      	cmp	r4, #45	; 0x2d
 8009bd6:	d132      	bne.n	8009c3e <_strtol_l.constprop.0+0x9a>
 8009bd8:	782c      	ldrb	r4, [r5, #0]
 8009bda:	2701      	movs	r7, #1
 8009bdc:	1cb5      	adds	r5, r6, #2
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d05b      	beq.n	8009c9a <_strtol_l.constprop.0+0xf6>
 8009be2:	2b10      	cmp	r3, #16
 8009be4:	d109      	bne.n	8009bfa <_strtol_l.constprop.0+0x56>
 8009be6:	2c30      	cmp	r4, #48	; 0x30
 8009be8:	d107      	bne.n	8009bfa <_strtol_l.constprop.0+0x56>
 8009bea:	782c      	ldrb	r4, [r5, #0]
 8009bec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009bf0:	2c58      	cmp	r4, #88	; 0x58
 8009bf2:	d14d      	bne.n	8009c90 <_strtol_l.constprop.0+0xec>
 8009bf4:	786c      	ldrb	r4, [r5, #1]
 8009bf6:	2310      	movs	r3, #16
 8009bf8:	3502      	adds	r5, #2
 8009bfa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009bfe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009c02:	f04f 0c00 	mov.w	ip, #0
 8009c06:	fbb8 f9f3 	udiv	r9, r8, r3
 8009c0a:	4666      	mov	r6, ip
 8009c0c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009c10:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009c14:	f1be 0f09 	cmp.w	lr, #9
 8009c18:	d816      	bhi.n	8009c48 <_strtol_l.constprop.0+0xa4>
 8009c1a:	4674      	mov	r4, lr
 8009c1c:	42a3      	cmp	r3, r4
 8009c1e:	dd24      	ble.n	8009c6a <_strtol_l.constprop.0+0xc6>
 8009c20:	f1bc 0f00 	cmp.w	ip, #0
 8009c24:	db1e      	blt.n	8009c64 <_strtol_l.constprop.0+0xc0>
 8009c26:	45b1      	cmp	r9, r6
 8009c28:	d31c      	bcc.n	8009c64 <_strtol_l.constprop.0+0xc0>
 8009c2a:	d101      	bne.n	8009c30 <_strtol_l.constprop.0+0x8c>
 8009c2c:	45a2      	cmp	sl, r4
 8009c2e:	db19      	blt.n	8009c64 <_strtol_l.constprop.0+0xc0>
 8009c30:	fb06 4603 	mla	r6, r6, r3, r4
 8009c34:	f04f 0c01 	mov.w	ip, #1
 8009c38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c3c:	e7e8      	b.n	8009c10 <_strtol_l.constprop.0+0x6c>
 8009c3e:	2c2b      	cmp	r4, #43	; 0x2b
 8009c40:	bf04      	itt	eq
 8009c42:	782c      	ldrbeq	r4, [r5, #0]
 8009c44:	1cb5      	addeq	r5, r6, #2
 8009c46:	e7ca      	b.n	8009bde <_strtol_l.constprop.0+0x3a>
 8009c48:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009c4c:	f1be 0f19 	cmp.w	lr, #25
 8009c50:	d801      	bhi.n	8009c56 <_strtol_l.constprop.0+0xb2>
 8009c52:	3c37      	subs	r4, #55	; 0x37
 8009c54:	e7e2      	b.n	8009c1c <_strtol_l.constprop.0+0x78>
 8009c56:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009c5a:	f1be 0f19 	cmp.w	lr, #25
 8009c5e:	d804      	bhi.n	8009c6a <_strtol_l.constprop.0+0xc6>
 8009c60:	3c57      	subs	r4, #87	; 0x57
 8009c62:	e7db      	b.n	8009c1c <_strtol_l.constprop.0+0x78>
 8009c64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009c68:	e7e6      	b.n	8009c38 <_strtol_l.constprop.0+0x94>
 8009c6a:	f1bc 0f00 	cmp.w	ip, #0
 8009c6e:	da05      	bge.n	8009c7c <_strtol_l.constprop.0+0xd8>
 8009c70:	2322      	movs	r3, #34	; 0x22
 8009c72:	6003      	str	r3, [r0, #0]
 8009c74:	4646      	mov	r6, r8
 8009c76:	b942      	cbnz	r2, 8009c8a <_strtol_l.constprop.0+0xe6>
 8009c78:	4630      	mov	r0, r6
 8009c7a:	e79e      	b.n	8009bba <_strtol_l.constprop.0+0x16>
 8009c7c:	b107      	cbz	r7, 8009c80 <_strtol_l.constprop.0+0xdc>
 8009c7e:	4276      	negs	r6, r6
 8009c80:	2a00      	cmp	r2, #0
 8009c82:	d0f9      	beq.n	8009c78 <_strtol_l.constprop.0+0xd4>
 8009c84:	f1bc 0f00 	cmp.w	ip, #0
 8009c88:	d000      	beq.n	8009c8c <_strtol_l.constprop.0+0xe8>
 8009c8a:	1e69      	subs	r1, r5, #1
 8009c8c:	6011      	str	r1, [r2, #0]
 8009c8e:	e7f3      	b.n	8009c78 <_strtol_l.constprop.0+0xd4>
 8009c90:	2430      	movs	r4, #48	; 0x30
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1b1      	bne.n	8009bfa <_strtol_l.constprop.0+0x56>
 8009c96:	2308      	movs	r3, #8
 8009c98:	e7af      	b.n	8009bfa <_strtol_l.constprop.0+0x56>
 8009c9a:	2c30      	cmp	r4, #48	; 0x30
 8009c9c:	d0a5      	beq.n	8009bea <_strtol_l.constprop.0+0x46>
 8009c9e:	230a      	movs	r3, #10
 8009ca0:	e7ab      	b.n	8009bfa <_strtol_l.constprop.0+0x56>
 8009ca2:	bf00      	nop
 8009ca4:	0800ac5d 	.word	0x0800ac5d

08009ca8 <_strtol_r>:
 8009ca8:	f7ff bf7c 	b.w	8009ba4 <_strtol_l.constprop.0>

08009cac <_strtoul_l.constprop.0>:
 8009cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cb0:	4f36      	ldr	r7, [pc, #216]	; (8009d8c <_strtoul_l.constprop.0+0xe0>)
 8009cb2:	4686      	mov	lr, r0
 8009cb4:	460d      	mov	r5, r1
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cbc:	5de6      	ldrb	r6, [r4, r7]
 8009cbe:	f016 0608 	ands.w	r6, r6, #8
 8009cc2:	d1f8      	bne.n	8009cb6 <_strtoul_l.constprop.0+0xa>
 8009cc4:	2c2d      	cmp	r4, #45	; 0x2d
 8009cc6:	d12f      	bne.n	8009d28 <_strtoul_l.constprop.0+0x7c>
 8009cc8:	782c      	ldrb	r4, [r5, #0]
 8009cca:	2601      	movs	r6, #1
 8009ccc:	1c85      	adds	r5, r0, #2
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d057      	beq.n	8009d82 <_strtoul_l.constprop.0+0xd6>
 8009cd2:	2b10      	cmp	r3, #16
 8009cd4:	d109      	bne.n	8009cea <_strtoul_l.constprop.0+0x3e>
 8009cd6:	2c30      	cmp	r4, #48	; 0x30
 8009cd8:	d107      	bne.n	8009cea <_strtoul_l.constprop.0+0x3e>
 8009cda:	7828      	ldrb	r0, [r5, #0]
 8009cdc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009ce0:	2858      	cmp	r0, #88	; 0x58
 8009ce2:	d149      	bne.n	8009d78 <_strtoul_l.constprop.0+0xcc>
 8009ce4:	786c      	ldrb	r4, [r5, #1]
 8009ce6:	2310      	movs	r3, #16
 8009ce8:	3502      	adds	r5, #2
 8009cea:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009cee:	2700      	movs	r7, #0
 8009cf0:	fbb8 f8f3 	udiv	r8, r8, r3
 8009cf4:	fb03 f908 	mul.w	r9, r3, r8
 8009cf8:	ea6f 0909 	mvn.w	r9, r9
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009d02:	f1bc 0f09 	cmp.w	ip, #9
 8009d06:	d814      	bhi.n	8009d32 <_strtoul_l.constprop.0+0x86>
 8009d08:	4664      	mov	r4, ip
 8009d0a:	42a3      	cmp	r3, r4
 8009d0c:	dd22      	ble.n	8009d54 <_strtoul_l.constprop.0+0xa8>
 8009d0e:	2f00      	cmp	r7, #0
 8009d10:	db1d      	blt.n	8009d4e <_strtoul_l.constprop.0+0xa2>
 8009d12:	4580      	cmp	r8, r0
 8009d14:	d31b      	bcc.n	8009d4e <_strtoul_l.constprop.0+0xa2>
 8009d16:	d101      	bne.n	8009d1c <_strtoul_l.constprop.0+0x70>
 8009d18:	45a1      	cmp	r9, r4
 8009d1a:	db18      	blt.n	8009d4e <_strtoul_l.constprop.0+0xa2>
 8009d1c:	fb00 4003 	mla	r0, r0, r3, r4
 8009d20:	2701      	movs	r7, #1
 8009d22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d26:	e7ea      	b.n	8009cfe <_strtoul_l.constprop.0+0x52>
 8009d28:	2c2b      	cmp	r4, #43	; 0x2b
 8009d2a:	bf04      	itt	eq
 8009d2c:	782c      	ldrbeq	r4, [r5, #0]
 8009d2e:	1c85      	addeq	r5, r0, #2
 8009d30:	e7cd      	b.n	8009cce <_strtoul_l.constprop.0+0x22>
 8009d32:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009d36:	f1bc 0f19 	cmp.w	ip, #25
 8009d3a:	d801      	bhi.n	8009d40 <_strtoul_l.constprop.0+0x94>
 8009d3c:	3c37      	subs	r4, #55	; 0x37
 8009d3e:	e7e4      	b.n	8009d0a <_strtoul_l.constprop.0+0x5e>
 8009d40:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009d44:	f1bc 0f19 	cmp.w	ip, #25
 8009d48:	d804      	bhi.n	8009d54 <_strtoul_l.constprop.0+0xa8>
 8009d4a:	3c57      	subs	r4, #87	; 0x57
 8009d4c:	e7dd      	b.n	8009d0a <_strtoul_l.constprop.0+0x5e>
 8009d4e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009d52:	e7e6      	b.n	8009d22 <_strtoul_l.constprop.0+0x76>
 8009d54:	2f00      	cmp	r7, #0
 8009d56:	da07      	bge.n	8009d68 <_strtoul_l.constprop.0+0xbc>
 8009d58:	2322      	movs	r3, #34	; 0x22
 8009d5a:	f8ce 3000 	str.w	r3, [lr]
 8009d5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d62:	b932      	cbnz	r2, 8009d72 <_strtoul_l.constprop.0+0xc6>
 8009d64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d68:	b106      	cbz	r6, 8009d6c <_strtoul_l.constprop.0+0xc0>
 8009d6a:	4240      	negs	r0, r0
 8009d6c:	2a00      	cmp	r2, #0
 8009d6e:	d0f9      	beq.n	8009d64 <_strtoul_l.constprop.0+0xb8>
 8009d70:	b107      	cbz	r7, 8009d74 <_strtoul_l.constprop.0+0xc8>
 8009d72:	1e69      	subs	r1, r5, #1
 8009d74:	6011      	str	r1, [r2, #0]
 8009d76:	e7f5      	b.n	8009d64 <_strtoul_l.constprop.0+0xb8>
 8009d78:	2430      	movs	r4, #48	; 0x30
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1b5      	bne.n	8009cea <_strtoul_l.constprop.0+0x3e>
 8009d7e:	2308      	movs	r3, #8
 8009d80:	e7b3      	b.n	8009cea <_strtoul_l.constprop.0+0x3e>
 8009d82:	2c30      	cmp	r4, #48	; 0x30
 8009d84:	d0a9      	beq.n	8009cda <_strtoul_l.constprop.0+0x2e>
 8009d86:	230a      	movs	r3, #10
 8009d88:	e7af      	b.n	8009cea <_strtoul_l.constprop.0+0x3e>
 8009d8a:	bf00      	nop
 8009d8c:	0800ac5d 	.word	0x0800ac5d

08009d90 <_strtoul_r>:
 8009d90:	f7ff bf8c 	b.w	8009cac <_strtoul_l.constprop.0>

08009d94 <__submore>:
 8009d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d98:	460c      	mov	r4, r1
 8009d9a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009d9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009da0:	4299      	cmp	r1, r3
 8009da2:	d11d      	bne.n	8009de0 <__submore+0x4c>
 8009da4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009da8:	f7ff f9ae 	bl	8009108 <_malloc_r>
 8009dac:	b918      	cbnz	r0, 8009db6 <__submore+0x22>
 8009dae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dba:	63a3      	str	r3, [r4, #56]	; 0x38
 8009dbc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009dc0:	6360      	str	r0, [r4, #52]	; 0x34
 8009dc2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009dc6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009dca:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009dce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009dd2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009dd6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009dda:	6020      	str	r0, [r4, #0]
 8009ddc:	2000      	movs	r0, #0
 8009dde:	e7e8      	b.n	8009db2 <__submore+0x1e>
 8009de0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009de2:	0077      	lsls	r7, r6, #1
 8009de4:	463a      	mov	r2, r7
 8009de6:	f000 fa31 	bl	800a24c <_realloc_r>
 8009dea:	4605      	mov	r5, r0
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d0de      	beq.n	8009dae <__submore+0x1a>
 8009df0:	eb00 0806 	add.w	r8, r0, r6
 8009df4:	4601      	mov	r1, r0
 8009df6:	4632      	mov	r2, r6
 8009df8:	4640      	mov	r0, r8
 8009dfa:	f7fe fd71 	bl	80088e0 <memcpy>
 8009dfe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009e02:	f8c4 8000 	str.w	r8, [r4]
 8009e06:	e7e9      	b.n	8009ddc <__submore+0x48>

08009e08 <__assert_func>:
 8009e08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e0a:	4614      	mov	r4, r2
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	4b09      	ldr	r3, [pc, #36]	; (8009e34 <__assert_func+0x2c>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4605      	mov	r5, r0
 8009e14:	68d8      	ldr	r0, [r3, #12]
 8009e16:	b14c      	cbz	r4, 8009e2c <__assert_func+0x24>
 8009e18:	4b07      	ldr	r3, [pc, #28]	; (8009e38 <__assert_func+0x30>)
 8009e1a:	9100      	str	r1, [sp, #0]
 8009e1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e20:	4906      	ldr	r1, [pc, #24]	; (8009e3c <__assert_func+0x34>)
 8009e22:	462b      	mov	r3, r5
 8009e24:	f000 f9a6 	bl	800a174 <fiprintf>
 8009e28:	f000 fc66 	bl	800a6f8 <abort>
 8009e2c:	4b04      	ldr	r3, [pc, #16]	; (8009e40 <__assert_func+0x38>)
 8009e2e:	461c      	mov	r4, r3
 8009e30:	e7f3      	b.n	8009e1a <__assert_func+0x12>
 8009e32:	bf00      	nop
 8009e34:	2000000c 	.word	0x2000000c
 8009e38:	0800ac20 	.word	0x0800ac20
 8009e3c:	0800ac2d 	.word	0x0800ac2d
 8009e40:	0800ac5b 	.word	0x0800ac5b

08009e44 <__sflush_r>:
 8009e44:	898a      	ldrh	r2, [r1, #12]
 8009e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4a:	4605      	mov	r5, r0
 8009e4c:	0710      	lsls	r0, r2, #28
 8009e4e:	460c      	mov	r4, r1
 8009e50:	d458      	bmi.n	8009f04 <__sflush_r+0xc0>
 8009e52:	684b      	ldr	r3, [r1, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	dc05      	bgt.n	8009e64 <__sflush_r+0x20>
 8009e58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	dc02      	bgt.n	8009e64 <__sflush_r+0x20>
 8009e5e:	2000      	movs	r0, #0
 8009e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e66:	2e00      	cmp	r6, #0
 8009e68:	d0f9      	beq.n	8009e5e <__sflush_r+0x1a>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e70:	682f      	ldr	r7, [r5, #0]
 8009e72:	602b      	str	r3, [r5, #0]
 8009e74:	d032      	beq.n	8009edc <__sflush_r+0x98>
 8009e76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	075a      	lsls	r2, r3, #29
 8009e7c:	d505      	bpl.n	8009e8a <__sflush_r+0x46>
 8009e7e:	6863      	ldr	r3, [r4, #4]
 8009e80:	1ac0      	subs	r0, r0, r3
 8009e82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e84:	b10b      	cbz	r3, 8009e8a <__sflush_r+0x46>
 8009e86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e88:	1ac0      	subs	r0, r0, r3
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e90:	6a21      	ldr	r1, [r4, #32]
 8009e92:	4628      	mov	r0, r5
 8009e94:	47b0      	blx	r6
 8009e96:	1c43      	adds	r3, r0, #1
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	d106      	bne.n	8009eaa <__sflush_r+0x66>
 8009e9c:	6829      	ldr	r1, [r5, #0]
 8009e9e:	291d      	cmp	r1, #29
 8009ea0:	d82c      	bhi.n	8009efc <__sflush_r+0xb8>
 8009ea2:	4a2a      	ldr	r2, [pc, #168]	; (8009f4c <__sflush_r+0x108>)
 8009ea4:	40ca      	lsrs	r2, r1
 8009ea6:	07d6      	lsls	r6, r2, #31
 8009ea8:	d528      	bpl.n	8009efc <__sflush_r+0xb8>
 8009eaa:	2200      	movs	r2, #0
 8009eac:	6062      	str	r2, [r4, #4]
 8009eae:	04d9      	lsls	r1, r3, #19
 8009eb0:	6922      	ldr	r2, [r4, #16]
 8009eb2:	6022      	str	r2, [r4, #0]
 8009eb4:	d504      	bpl.n	8009ec0 <__sflush_r+0x7c>
 8009eb6:	1c42      	adds	r2, r0, #1
 8009eb8:	d101      	bne.n	8009ebe <__sflush_r+0x7a>
 8009eba:	682b      	ldr	r3, [r5, #0]
 8009ebc:	b903      	cbnz	r3, 8009ec0 <__sflush_r+0x7c>
 8009ebe:	6560      	str	r0, [r4, #84]	; 0x54
 8009ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ec2:	602f      	str	r7, [r5, #0]
 8009ec4:	2900      	cmp	r1, #0
 8009ec6:	d0ca      	beq.n	8009e5e <__sflush_r+0x1a>
 8009ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ecc:	4299      	cmp	r1, r3
 8009ece:	d002      	beq.n	8009ed6 <__sflush_r+0x92>
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	f7ff f8ad 	bl	8009030 <_free_r>
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	6360      	str	r0, [r4, #52]	; 0x34
 8009eda:	e7c1      	b.n	8009e60 <__sflush_r+0x1c>
 8009edc:	6a21      	ldr	r1, [r4, #32]
 8009ede:	2301      	movs	r3, #1
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	47b0      	blx	r6
 8009ee4:	1c41      	adds	r1, r0, #1
 8009ee6:	d1c7      	bne.n	8009e78 <__sflush_r+0x34>
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d0c4      	beq.n	8009e78 <__sflush_r+0x34>
 8009eee:	2b1d      	cmp	r3, #29
 8009ef0:	d001      	beq.n	8009ef6 <__sflush_r+0xb2>
 8009ef2:	2b16      	cmp	r3, #22
 8009ef4:	d101      	bne.n	8009efa <__sflush_r+0xb6>
 8009ef6:	602f      	str	r7, [r5, #0]
 8009ef8:	e7b1      	b.n	8009e5e <__sflush_r+0x1a>
 8009efa:	89a3      	ldrh	r3, [r4, #12]
 8009efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f00:	81a3      	strh	r3, [r4, #12]
 8009f02:	e7ad      	b.n	8009e60 <__sflush_r+0x1c>
 8009f04:	690f      	ldr	r7, [r1, #16]
 8009f06:	2f00      	cmp	r7, #0
 8009f08:	d0a9      	beq.n	8009e5e <__sflush_r+0x1a>
 8009f0a:	0793      	lsls	r3, r2, #30
 8009f0c:	680e      	ldr	r6, [r1, #0]
 8009f0e:	bf08      	it	eq
 8009f10:	694b      	ldreq	r3, [r1, #20]
 8009f12:	600f      	str	r7, [r1, #0]
 8009f14:	bf18      	it	ne
 8009f16:	2300      	movne	r3, #0
 8009f18:	eba6 0807 	sub.w	r8, r6, r7
 8009f1c:	608b      	str	r3, [r1, #8]
 8009f1e:	f1b8 0f00 	cmp.w	r8, #0
 8009f22:	dd9c      	ble.n	8009e5e <__sflush_r+0x1a>
 8009f24:	6a21      	ldr	r1, [r4, #32]
 8009f26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f28:	4643      	mov	r3, r8
 8009f2a:	463a      	mov	r2, r7
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	47b0      	blx	r6
 8009f30:	2800      	cmp	r0, #0
 8009f32:	dc06      	bgt.n	8009f42 <__sflush_r+0xfe>
 8009f34:	89a3      	ldrh	r3, [r4, #12]
 8009f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f3a:	81a3      	strh	r3, [r4, #12]
 8009f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f40:	e78e      	b.n	8009e60 <__sflush_r+0x1c>
 8009f42:	4407      	add	r7, r0
 8009f44:	eba8 0800 	sub.w	r8, r8, r0
 8009f48:	e7e9      	b.n	8009f1e <__sflush_r+0xda>
 8009f4a:	bf00      	nop
 8009f4c:	20400001 	.word	0x20400001

08009f50 <_fflush_r>:
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	690b      	ldr	r3, [r1, #16]
 8009f54:	4605      	mov	r5, r0
 8009f56:	460c      	mov	r4, r1
 8009f58:	b913      	cbnz	r3, 8009f60 <_fflush_r+0x10>
 8009f5a:	2500      	movs	r5, #0
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	bd38      	pop	{r3, r4, r5, pc}
 8009f60:	b118      	cbz	r0, 8009f6a <_fflush_r+0x1a>
 8009f62:	6983      	ldr	r3, [r0, #24]
 8009f64:	b90b      	cbnz	r3, 8009f6a <_fflush_r+0x1a>
 8009f66:	f000 f887 	bl	800a078 <__sinit>
 8009f6a:	4b14      	ldr	r3, [pc, #80]	; (8009fbc <_fflush_r+0x6c>)
 8009f6c:	429c      	cmp	r4, r3
 8009f6e:	d11b      	bne.n	8009fa8 <_fflush_r+0x58>
 8009f70:	686c      	ldr	r4, [r5, #4]
 8009f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d0ef      	beq.n	8009f5a <_fflush_r+0xa>
 8009f7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f7c:	07d0      	lsls	r0, r2, #31
 8009f7e:	d404      	bmi.n	8009f8a <_fflush_r+0x3a>
 8009f80:	0599      	lsls	r1, r3, #22
 8009f82:	d402      	bmi.n	8009f8a <_fflush_r+0x3a>
 8009f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f86:	f000 f927 	bl	800a1d8 <__retarget_lock_acquire_recursive>
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	f7ff ff59 	bl	8009e44 <__sflush_r>
 8009f92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f94:	07da      	lsls	r2, r3, #31
 8009f96:	4605      	mov	r5, r0
 8009f98:	d4e0      	bmi.n	8009f5c <_fflush_r+0xc>
 8009f9a:	89a3      	ldrh	r3, [r4, #12]
 8009f9c:	059b      	lsls	r3, r3, #22
 8009f9e:	d4dd      	bmi.n	8009f5c <_fflush_r+0xc>
 8009fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fa2:	f000 f91a 	bl	800a1da <__retarget_lock_release_recursive>
 8009fa6:	e7d9      	b.n	8009f5c <_fflush_r+0xc>
 8009fa8:	4b05      	ldr	r3, [pc, #20]	; (8009fc0 <_fflush_r+0x70>)
 8009faa:	429c      	cmp	r4, r3
 8009fac:	d101      	bne.n	8009fb2 <_fflush_r+0x62>
 8009fae:	68ac      	ldr	r4, [r5, #8]
 8009fb0:	e7df      	b.n	8009f72 <_fflush_r+0x22>
 8009fb2:	4b04      	ldr	r3, [pc, #16]	; (8009fc4 <_fflush_r+0x74>)
 8009fb4:	429c      	cmp	r4, r3
 8009fb6:	bf08      	it	eq
 8009fb8:	68ec      	ldreq	r4, [r5, #12]
 8009fba:	e7da      	b.n	8009f72 <_fflush_r+0x22>
 8009fbc:	0800ad80 	.word	0x0800ad80
 8009fc0:	0800ada0 	.word	0x0800ada0
 8009fc4:	0800ad60 	.word	0x0800ad60

08009fc8 <std>:
 8009fc8:	2300      	movs	r3, #0
 8009fca:	b510      	push	{r4, lr}
 8009fcc:	4604      	mov	r4, r0
 8009fce:	e9c0 3300 	strd	r3, r3, [r0]
 8009fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fd6:	6083      	str	r3, [r0, #8]
 8009fd8:	8181      	strh	r1, [r0, #12]
 8009fda:	6643      	str	r3, [r0, #100]	; 0x64
 8009fdc:	81c2      	strh	r2, [r0, #14]
 8009fde:	6183      	str	r3, [r0, #24]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	2208      	movs	r2, #8
 8009fe4:	305c      	adds	r0, #92	; 0x5c
 8009fe6:	f7fd f8a9 	bl	800713c <memset>
 8009fea:	4b05      	ldr	r3, [pc, #20]	; (800a000 <std+0x38>)
 8009fec:	6263      	str	r3, [r4, #36]	; 0x24
 8009fee:	4b05      	ldr	r3, [pc, #20]	; (800a004 <std+0x3c>)
 8009ff0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ff2:	4b05      	ldr	r3, [pc, #20]	; (800a008 <std+0x40>)
 8009ff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ff6:	4b05      	ldr	r3, [pc, #20]	; (800a00c <std+0x44>)
 8009ff8:	6224      	str	r4, [r4, #32]
 8009ffa:	6323      	str	r3, [r4, #48]	; 0x30
 8009ffc:	bd10      	pop	{r4, pc}
 8009ffe:	bf00      	nop
 800a000:	08007ab9 	.word	0x08007ab9
 800a004:	08007adf 	.word	0x08007adf
 800a008:	08007b17 	.word	0x08007b17
 800a00c:	08007b3b 	.word	0x08007b3b

0800a010 <_cleanup_r>:
 800a010:	4901      	ldr	r1, [pc, #4]	; (800a018 <_cleanup_r+0x8>)
 800a012:	f000 b8c1 	b.w	800a198 <_fwalk_reent>
 800a016:	bf00      	nop
 800a018:	08009f51 	.word	0x08009f51

0800a01c <__sfmoreglue>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	2268      	movs	r2, #104	; 0x68
 800a020:	1e4d      	subs	r5, r1, #1
 800a022:	4355      	muls	r5, r2
 800a024:	460e      	mov	r6, r1
 800a026:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a02a:	f7ff f86d 	bl	8009108 <_malloc_r>
 800a02e:	4604      	mov	r4, r0
 800a030:	b140      	cbz	r0, 800a044 <__sfmoreglue+0x28>
 800a032:	2100      	movs	r1, #0
 800a034:	e9c0 1600 	strd	r1, r6, [r0]
 800a038:	300c      	adds	r0, #12
 800a03a:	60a0      	str	r0, [r4, #8]
 800a03c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a040:	f7fd f87c 	bl	800713c <memset>
 800a044:	4620      	mov	r0, r4
 800a046:	bd70      	pop	{r4, r5, r6, pc}

0800a048 <__sfp_lock_acquire>:
 800a048:	4801      	ldr	r0, [pc, #4]	; (800a050 <__sfp_lock_acquire+0x8>)
 800a04a:	f000 b8c5 	b.w	800a1d8 <__retarget_lock_acquire_recursive>
 800a04e:	bf00      	nop
 800a050:	20000595 	.word	0x20000595

0800a054 <__sfp_lock_release>:
 800a054:	4801      	ldr	r0, [pc, #4]	; (800a05c <__sfp_lock_release+0x8>)
 800a056:	f000 b8c0 	b.w	800a1da <__retarget_lock_release_recursive>
 800a05a:	bf00      	nop
 800a05c:	20000595 	.word	0x20000595

0800a060 <__sinit_lock_acquire>:
 800a060:	4801      	ldr	r0, [pc, #4]	; (800a068 <__sinit_lock_acquire+0x8>)
 800a062:	f000 b8b9 	b.w	800a1d8 <__retarget_lock_acquire_recursive>
 800a066:	bf00      	nop
 800a068:	20000596 	.word	0x20000596

0800a06c <__sinit_lock_release>:
 800a06c:	4801      	ldr	r0, [pc, #4]	; (800a074 <__sinit_lock_release+0x8>)
 800a06e:	f000 b8b4 	b.w	800a1da <__retarget_lock_release_recursive>
 800a072:	bf00      	nop
 800a074:	20000596 	.word	0x20000596

0800a078 <__sinit>:
 800a078:	b510      	push	{r4, lr}
 800a07a:	4604      	mov	r4, r0
 800a07c:	f7ff fff0 	bl	800a060 <__sinit_lock_acquire>
 800a080:	69a3      	ldr	r3, [r4, #24]
 800a082:	b11b      	cbz	r3, 800a08c <__sinit+0x14>
 800a084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a088:	f7ff bff0 	b.w	800a06c <__sinit_lock_release>
 800a08c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a090:	6523      	str	r3, [r4, #80]	; 0x50
 800a092:	4b13      	ldr	r3, [pc, #76]	; (800a0e0 <__sinit+0x68>)
 800a094:	4a13      	ldr	r2, [pc, #76]	; (800a0e4 <__sinit+0x6c>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	62a2      	str	r2, [r4, #40]	; 0x28
 800a09a:	42a3      	cmp	r3, r4
 800a09c:	bf04      	itt	eq
 800a09e:	2301      	moveq	r3, #1
 800a0a0:	61a3      	streq	r3, [r4, #24]
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f000 f820 	bl	800a0e8 <__sfp>
 800a0a8:	6060      	str	r0, [r4, #4]
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f000 f81c 	bl	800a0e8 <__sfp>
 800a0b0:	60a0      	str	r0, [r4, #8]
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f000 f818 	bl	800a0e8 <__sfp>
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	60e0      	str	r0, [r4, #12]
 800a0bc:	2104      	movs	r1, #4
 800a0be:	6860      	ldr	r0, [r4, #4]
 800a0c0:	f7ff ff82 	bl	8009fc8 <std>
 800a0c4:	68a0      	ldr	r0, [r4, #8]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	2109      	movs	r1, #9
 800a0ca:	f7ff ff7d 	bl	8009fc8 <std>
 800a0ce:	68e0      	ldr	r0, [r4, #12]
 800a0d0:	2202      	movs	r2, #2
 800a0d2:	2112      	movs	r1, #18
 800a0d4:	f7ff ff78 	bl	8009fc8 <std>
 800a0d8:	2301      	movs	r3, #1
 800a0da:	61a3      	str	r3, [r4, #24]
 800a0dc:	e7d2      	b.n	800a084 <__sinit+0xc>
 800a0de:	bf00      	nop
 800a0e0:	0800a9d4 	.word	0x0800a9d4
 800a0e4:	0800a011 	.word	0x0800a011

0800a0e8 <__sfp>:
 800a0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ea:	4607      	mov	r7, r0
 800a0ec:	f7ff ffac 	bl	800a048 <__sfp_lock_acquire>
 800a0f0:	4b1e      	ldr	r3, [pc, #120]	; (800a16c <__sfp+0x84>)
 800a0f2:	681e      	ldr	r6, [r3, #0]
 800a0f4:	69b3      	ldr	r3, [r6, #24]
 800a0f6:	b913      	cbnz	r3, 800a0fe <__sfp+0x16>
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	f7ff ffbd 	bl	800a078 <__sinit>
 800a0fe:	3648      	adds	r6, #72	; 0x48
 800a100:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a104:	3b01      	subs	r3, #1
 800a106:	d503      	bpl.n	800a110 <__sfp+0x28>
 800a108:	6833      	ldr	r3, [r6, #0]
 800a10a:	b30b      	cbz	r3, 800a150 <__sfp+0x68>
 800a10c:	6836      	ldr	r6, [r6, #0]
 800a10e:	e7f7      	b.n	800a100 <__sfp+0x18>
 800a110:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a114:	b9d5      	cbnz	r5, 800a14c <__sfp+0x64>
 800a116:	4b16      	ldr	r3, [pc, #88]	; (800a170 <__sfp+0x88>)
 800a118:	60e3      	str	r3, [r4, #12]
 800a11a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a11e:	6665      	str	r5, [r4, #100]	; 0x64
 800a120:	f000 f859 	bl	800a1d6 <__retarget_lock_init_recursive>
 800a124:	f7ff ff96 	bl	800a054 <__sfp_lock_release>
 800a128:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a12c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a130:	6025      	str	r5, [r4, #0]
 800a132:	61a5      	str	r5, [r4, #24]
 800a134:	2208      	movs	r2, #8
 800a136:	4629      	mov	r1, r5
 800a138:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a13c:	f7fc fffe 	bl	800713c <memset>
 800a140:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a144:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a148:	4620      	mov	r0, r4
 800a14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a14c:	3468      	adds	r4, #104	; 0x68
 800a14e:	e7d9      	b.n	800a104 <__sfp+0x1c>
 800a150:	2104      	movs	r1, #4
 800a152:	4638      	mov	r0, r7
 800a154:	f7ff ff62 	bl	800a01c <__sfmoreglue>
 800a158:	4604      	mov	r4, r0
 800a15a:	6030      	str	r0, [r6, #0]
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d1d5      	bne.n	800a10c <__sfp+0x24>
 800a160:	f7ff ff78 	bl	800a054 <__sfp_lock_release>
 800a164:	230c      	movs	r3, #12
 800a166:	603b      	str	r3, [r7, #0]
 800a168:	e7ee      	b.n	800a148 <__sfp+0x60>
 800a16a:	bf00      	nop
 800a16c:	0800a9d4 	.word	0x0800a9d4
 800a170:	ffff0001 	.word	0xffff0001

0800a174 <fiprintf>:
 800a174:	b40e      	push	{r1, r2, r3}
 800a176:	b503      	push	{r0, r1, lr}
 800a178:	4601      	mov	r1, r0
 800a17a:	ab03      	add	r3, sp, #12
 800a17c:	4805      	ldr	r0, [pc, #20]	; (800a194 <fiprintf+0x20>)
 800a17e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a182:	6800      	ldr	r0, [r0, #0]
 800a184:	9301      	str	r3, [sp, #4]
 800a186:	f000 f8b9 	bl	800a2fc <_vfiprintf_r>
 800a18a:	b002      	add	sp, #8
 800a18c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a190:	b003      	add	sp, #12
 800a192:	4770      	bx	lr
 800a194:	2000000c 	.word	0x2000000c

0800a198 <_fwalk_reent>:
 800a198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a19c:	4606      	mov	r6, r0
 800a19e:	4688      	mov	r8, r1
 800a1a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a1a4:	2700      	movs	r7, #0
 800a1a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1aa:	f1b9 0901 	subs.w	r9, r9, #1
 800a1ae:	d505      	bpl.n	800a1bc <_fwalk_reent+0x24>
 800a1b0:	6824      	ldr	r4, [r4, #0]
 800a1b2:	2c00      	cmp	r4, #0
 800a1b4:	d1f7      	bne.n	800a1a6 <_fwalk_reent+0xe>
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1bc:	89ab      	ldrh	r3, [r5, #12]
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d907      	bls.n	800a1d2 <_fwalk_reent+0x3a>
 800a1c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	d003      	beq.n	800a1d2 <_fwalk_reent+0x3a>
 800a1ca:	4629      	mov	r1, r5
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	47c0      	blx	r8
 800a1d0:	4307      	orrs	r7, r0
 800a1d2:	3568      	adds	r5, #104	; 0x68
 800a1d4:	e7e9      	b.n	800a1aa <_fwalk_reent+0x12>

0800a1d6 <__retarget_lock_init_recursive>:
 800a1d6:	4770      	bx	lr

0800a1d8 <__retarget_lock_acquire_recursive>:
 800a1d8:	4770      	bx	lr

0800a1da <__retarget_lock_release_recursive>:
 800a1da:	4770      	bx	lr

0800a1dc <__ascii_mbtowc>:
 800a1dc:	b082      	sub	sp, #8
 800a1de:	b901      	cbnz	r1, 800a1e2 <__ascii_mbtowc+0x6>
 800a1e0:	a901      	add	r1, sp, #4
 800a1e2:	b142      	cbz	r2, 800a1f6 <__ascii_mbtowc+0x1a>
 800a1e4:	b14b      	cbz	r3, 800a1fa <__ascii_mbtowc+0x1e>
 800a1e6:	7813      	ldrb	r3, [r2, #0]
 800a1e8:	600b      	str	r3, [r1, #0]
 800a1ea:	7812      	ldrb	r2, [r2, #0]
 800a1ec:	1e10      	subs	r0, r2, #0
 800a1ee:	bf18      	it	ne
 800a1f0:	2001      	movne	r0, #1
 800a1f2:	b002      	add	sp, #8
 800a1f4:	4770      	bx	lr
 800a1f6:	4610      	mov	r0, r2
 800a1f8:	e7fb      	b.n	800a1f2 <__ascii_mbtowc+0x16>
 800a1fa:	f06f 0001 	mvn.w	r0, #1
 800a1fe:	e7f8      	b.n	800a1f2 <__ascii_mbtowc+0x16>

0800a200 <memmove>:
 800a200:	4288      	cmp	r0, r1
 800a202:	b510      	push	{r4, lr}
 800a204:	eb01 0402 	add.w	r4, r1, r2
 800a208:	d902      	bls.n	800a210 <memmove+0x10>
 800a20a:	4284      	cmp	r4, r0
 800a20c:	4623      	mov	r3, r4
 800a20e:	d807      	bhi.n	800a220 <memmove+0x20>
 800a210:	1e43      	subs	r3, r0, #1
 800a212:	42a1      	cmp	r1, r4
 800a214:	d008      	beq.n	800a228 <memmove+0x28>
 800a216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a21a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a21e:	e7f8      	b.n	800a212 <memmove+0x12>
 800a220:	4402      	add	r2, r0
 800a222:	4601      	mov	r1, r0
 800a224:	428a      	cmp	r2, r1
 800a226:	d100      	bne.n	800a22a <memmove+0x2a>
 800a228:	bd10      	pop	{r4, pc}
 800a22a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a22e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a232:	e7f7      	b.n	800a224 <memmove+0x24>

0800a234 <__malloc_lock>:
 800a234:	4801      	ldr	r0, [pc, #4]	; (800a23c <__malloc_lock+0x8>)
 800a236:	f7ff bfcf 	b.w	800a1d8 <__retarget_lock_acquire_recursive>
 800a23a:	bf00      	nop
 800a23c:	20000594 	.word	0x20000594

0800a240 <__malloc_unlock>:
 800a240:	4801      	ldr	r0, [pc, #4]	; (800a248 <__malloc_unlock+0x8>)
 800a242:	f7ff bfca 	b.w	800a1da <__retarget_lock_release_recursive>
 800a246:	bf00      	nop
 800a248:	20000594 	.word	0x20000594

0800a24c <_realloc_r>:
 800a24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a250:	4680      	mov	r8, r0
 800a252:	4614      	mov	r4, r2
 800a254:	460e      	mov	r6, r1
 800a256:	b921      	cbnz	r1, 800a262 <_realloc_r+0x16>
 800a258:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a25c:	4611      	mov	r1, r2
 800a25e:	f7fe bf53 	b.w	8009108 <_malloc_r>
 800a262:	b92a      	cbnz	r2, 800a270 <_realloc_r+0x24>
 800a264:	f7fe fee4 	bl	8009030 <_free_r>
 800a268:	4625      	mov	r5, r4
 800a26a:	4628      	mov	r0, r5
 800a26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a270:	f000 faae 	bl	800a7d0 <_malloc_usable_size_r>
 800a274:	4284      	cmp	r4, r0
 800a276:	4607      	mov	r7, r0
 800a278:	d802      	bhi.n	800a280 <_realloc_r+0x34>
 800a27a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a27e:	d812      	bhi.n	800a2a6 <_realloc_r+0x5a>
 800a280:	4621      	mov	r1, r4
 800a282:	4640      	mov	r0, r8
 800a284:	f7fe ff40 	bl	8009108 <_malloc_r>
 800a288:	4605      	mov	r5, r0
 800a28a:	2800      	cmp	r0, #0
 800a28c:	d0ed      	beq.n	800a26a <_realloc_r+0x1e>
 800a28e:	42bc      	cmp	r4, r7
 800a290:	4622      	mov	r2, r4
 800a292:	4631      	mov	r1, r6
 800a294:	bf28      	it	cs
 800a296:	463a      	movcs	r2, r7
 800a298:	f7fe fb22 	bl	80088e0 <memcpy>
 800a29c:	4631      	mov	r1, r6
 800a29e:	4640      	mov	r0, r8
 800a2a0:	f7fe fec6 	bl	8009030 <_free_r>
 800a2a4:	e7e1      	b.n	800a26a <_realloc_r+0x1e>
 800a2a6:	4635      	mov	r5, r6
 800a2a8:	e7df      	b.n	800a26a <_realloc_r+0x1e>

0800a2aa <__sfputc_r>:
 800a2aa:	6893      	ldr	r3, [r2, #8]
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	b410      	push	{r4}
 800a2b2:	6093      	str	r3, [r2, #8]
 800a2b4:	da08      	bge.n	800a2c8 <__sfputc_r+0x1e>
 800a2b6:	6994      	ldr	r4, [r2, #24]
 800a2b8:	42a3      	cmp	r3, r4
 800a2ba:	db01      	blt.n	800a2c0 <__sfputc_r+0x16>
 800a2bc:	290a      	cmp	r1, #10
 800a2be:	d103      	bne.n	800a2c8 <__sfputc_r+0x1e>
 800a2c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2c4:	f000 b94a 	b.w	800a55c <__swbuf_r>
 800a2c8:	6813      	ldr	r3, [r2, #0]
 800a2ca:	1c58      	adds	r0, r3, #1
 800a2cc:	6010      	str	r0, [r2, #0]
 800a2ce:	7019      	strb	r1, [r3, #0]
 800a2d0:	4608      	mov	r0, r1
 800a2d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <__sfputs_r>:
 800a2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2da:	4606      	mov	r6, r0
 800a2dc:	460f      	mov	r7, r1
 800a2de:	4614      	mov	r4, r2
 800a2e0:	18d5      	adds	r5, r2, r3
 800a2e2:	42ac      	cmp	r4, r5
 800a2e4:	d101      	bne.n	800a2ea <__sfputs_r+0x12>
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	e007      	b.n	800a2fa <__sfputs_r+0x22>
 800a2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ee:	463a      	mov	r2, r7
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	f7ff ffda 	bl	800a2aa <__sfputc_r>
 800a2f6:	1c43      	adds	r3, r0, #1
 800a2f8:	d1f3      	bne.n	800a2e2 <__sfputs_r+0xa>
 800a2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a2fc <_vfiprintf_r>:
 800a2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a300:	460d      	mov	r5, r1
 800a302:	b09d      	sub	sp, #116	; 0x74
 800a304:	4614      	mov	r4, r2
 800a306:	4698      	mov	r8, r3
 800a308:	4606      	mov	r6, r0
 800a30a:	b118      	cbz	r0, 800a314 <_vfiprintf_r+0x18>
 800a30c:	6983      	ldr	r3, [r0, #24]
 800a30e:	b90b      	cbnz	r3, 800a314 <_vfiprintf_r+0x18>
 800a310:	f7ff feb2 	bl	800a078 <__sinit>
 800a314:	4b89      	ldr	r3, [pc, #548]	; (800a53c <_vfiprintf_r+0x240>)
 800a316:	429d      	cmp	r5, r3
 800a318:	d11b      	bne.n	800a352 <_vfiprintf_r+0x56>
 800a31a:	6875      	ldr	r5, [r6, #4]
 800a31c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a31e:	07d9      	lsls	r1, r3, #31
 800a320:	d405      	bmi.n	800a32e <_vfiprintf_r+0x32>
 800a322:	89ab      	ldrh	r3, [r5, #12]
 800a324:	059a      	lsls	r2, r3, #22
 800a326:	d402      	bmi.n	800a32e <_vfiprintf_r+0x32>
 800a328:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a32a:	f7ff ff55 	bl	800a1d8 <__retarget_lock_acquire_recursive>
 800a32e:	89ab      	ldrh	r3, [r5, #12]
 800a330:	071b      	lsls	r3, r3, #28
 800a332:	d501      	bpl.n	800a338 <_vfiprintf_r+0x3c>
 800a334:	692b      	ldr	r3, [r5, #16]
 800a336:	b9eb      	cbnz	r3, 800a374 <_vfiprintf_r+0x78>
 800a338:	4629      	mov	r1, r5
 800a33a:	4630      	mov	r0, r6
 800a33c:	f000 f96e 	bl	800a61c <__swsetup_r>
 800a340:	b1c0      	cbz	r0, 800a374 <_vfiprintf_r+0x78>
 800a342:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a344:	07dc      	lsls	r4, r3, #31
 800a346:	d50e      	bpl.n	800a366 <_vfiprintf_r+0x6a>
 800a348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a34c:	b01d      	add	sp, #116	; 0x74
 800a34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a352:	4b7b      	ldr	r3, [pc, #492]	; (800a540 <_vfiprintf_r+0x244>)
 800a354:	429d      	cmp	r5, r3
 800a356:	d101      	bne.n	800a35c <_vfiprintf_r+0x60>
 800a358:	68b5      	ldr	r5, [r6, #8]
 800a35a:	e7df      	b.n	800a31c <_vfiprintf_r+0x20>
 800a35c:	4b79      	ldr	r3, [pc, #484]	; (800a544 <_vfiprintf_r+0x248>)
 800a35e:	429d      	cmp	r5, r3
 800a360:	bf08      	it	eq
 800a362:	68f5      	ldreq	r5, [r6, #12]
 800a364:	e7da      	b.n	800a31c <_vfiprintf_r+0x20>
 800a366:	89ab      	ldrh	r3, [r5, #12]
 800a368:	0598      	lsls	r0, r3, #22
 800a36a:	d4ed      	bmi.n	800a348 <_vfiprintf_r+0x4c>
 800a36c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a36e:	f7ff ff34 	bl	800a1da <__retarget_lock_release_recursive>
 800a372:	e7e9      	b.n	800a348 <_vfiprintf_r+0x4c>
 800a374:	2300      	movs	r3, #0
 800a376:	9309      	str	r3, [sp, #36]	; 0x24
 800a378:	2320      	movs	r3, #32
 800a37a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a37e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a382:	2330      	movs	r3, #48	; 0x30
 800a384:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a548 <_vfiprintf_r+0x24c>
 800a388:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a38c:	f04f 0901 	mov.w	r9, #1
 800a390:	4623      	mov	r3, r4
 800a392:	469a      	mov	sl, r3
 800a394:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a398:	b10a      	cbz	r2, 800a39e <_vfiprintf_r+0xa2>
 800a39a:	2a25      	cmp	r2, #37	; 0x25
 800a39c:	d1f9      	bne.n	800a392 <_vfiprintf_r+0x96>
 800a39e:	ebba 0b04 	subs.w	fp, sl, r4
 800a3a2:	d00b      	beq.n	800a3bc <_vfiprintf_r+0xc0>
 800a3a4:	465b      	mov	r3, fp
 800a3a6:	4622      	mov	r2, r4
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	f7ff ff94 	bl	800a2d8 <__sfputs_r>
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	f000 80aa 	beq.w	800a50a <_vfiprintf_r+0x20e>
 800a3b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3b8:	445a      	add	r2, fp
 800a3ba:	9209      	str	r2, [sp, #36]	; 0x24
 800a3bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f000 80a2 	beq.w	800a50a <_vfiprintf_r+0x20e>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3d0:	f10a 0a01 	add.w	sl, sl, #1
 800a3d4:	9304      	str	r3, [sp, #16]
 800a3d6:	9307      	str	r3, [sp, #28]
 800a3d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3dc:	931a      	str	r3, [sp, #104]	; 0x68
 800a3de:	4654      	mov	r4, sl
 800a3e0:	2205      	movs	r2, #5
 800a3e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3e6:	4858      	ldr	r0, [pc, #352]	; (800a548 <_vfiprintf_r+0x24c>)
 800a3e8:	f7f5 fefa 	bl	80001e0 <memchr>
 800a3ec:	9a04      	ldr	r2, [sp, #16]
 800a3ee:	b9d8      	cbnz	r0, 800a428 <_vfiprintf_r+0x12c>
 800a3f0:	06d1      	lsls	r1, r2, #27
 800a3f2:	bf44      	itt	mi
 800a3f4:	2320      	movmi	r3, #32
 800a3f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3fa:	0713      	lsls	r3, r2, #28
 800a3fc:	bf44      	itt	mi
 800a3fe:	232b      	movmi	r3, #43	; 0x2b
 800a400:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a404:	f89a 3000 	ldrb.w	r3, [sl]
 800a408:	2b2a      	cmp	r3, #42	; 0x2a
 800a40a:	d015      	beq.n	800a438 <_vfiprintf_r+0x13c>
 800a40c:	9a07      	ldr	r2, [sp, #28]
 800a40e:	4654      	mov	r4, sl
 800a410:	2000      	movs	r0, #0
 800a412:	f04f 0c0a 	mov.w	ip, #10
 800a416:	4621      	mov	r1, r4
 800a418:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a41c:	3b30      	subs	r3, #48	; 0x30
 800a41e:	2b09      	cmp	r3, #9
 800a420:	d94e      	bls.n	800a4c0 <_vfiprintf_r+0x1c4>
 800a422:	b1b0      	cbz	r0, 800a452 <_vfiprintf_r+0x156>
 800a424:	9207      	str	r2, [sp, #28]
 800a426:	e014      	b.n	800a452 <_vfiprintf_r+0x156>
 800a428:	eba0 0308 	sub.w	r3, r0, r8
 800a42c:	fa09 f303 	lsl.w	r3, r9, r3
 800a430:	4313      	orrs	r3, r2
 800a432:	9304      	str	r3, [sp, #16]
 800a434:	46a2      	mov	sl, r4
 800a436:	e7d2      	b.n	800a3de <_vfiprintf_r+0xe2>
 800a438:	9b03      	ldr	r3, [sp, #12]
 800a43a:	1d19      	adds	r1, r3, #4
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	9103      	str	r1, [sp, #12]
 800a440:	2b00      	cmp	r3, #0
 800a442:	bfbb      	ittet	lt
 800a444:	425b      	neglt	r3, r3
 800a446:	f042 0202 	orrlt.w	r2, r2, #2
 800a44a:	9307      	strge	r3, [sp, #28]
 800a44c:	9307      	strlt	r3, [sp, #28]
 800a44e:	bfb8      	it	lt
 800a450:	9204      	strlt	r2, [sp, #16]
 800a452:	7823      	ldrb	r3, [r4, #0]
 800a454:	2b2e      	cmp	r3, #46	; 0x2e
 800a456:	d10c      	bne.n	800a472 <_vfiprintf_r+0x176>
 800a458:	7863      	ldrb	r3, [r4, #1]
 800a45a:	2b2a      	cmp	r3, #42	; 0x2a
 800a45c:	d135      	bne.n	800a4ca <_vfiprintf_r+0x1ce>
 800a45e:	9b03      	ldr	r3, [sp, #12]
 800a460:	1d1a      	adds	r2, r3, #4
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	9203      	str	r2, [sp, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	bfb8      	it	lt
 800a46a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a46e:	3402      	adds	r4, #2
 800a470:	9305      	str	r3, [sp, #20]
 800a472:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a558 <_vfiprintf_r+0x25c>
 800a476:	7821      	ldrb	r1, [r4, #0]
 800a478:	2203      	movs	r2, #3
 800a47a:	4650      	mov	r0, sl
 800a47c:	f7f5 feb0 	bl	80001e0 <memchr>
 800a480:	b140      	cbz	r0, 800a494 <_vfiprintf_r+0x198>
 800a482:	2340      	movs	r3, #64	; 0x40
 800a484:	eba0 000a 	sub.w	r0, r0, sl
 800a488:	fa03 f000 	lsl.w	r0, r3, r0
 800a48c:	9b04      	ldr	r3, [sp, #16]
 800a48e:	4303      	orrs	r3, r0
 800a490:	3401      	adds	r4, #1
 800a492:	9304      	str	r3, [sp, #16]
 800a494:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a498:	482c      	ldr	r0, [pc, #176]	; (800a54c <_vfiprintf_r+0x250>)
 800a49a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a49e:	2206      	movs	r2, #6
 800a4a0:	f7f5 fe9e 	bl	80001e0 <memchr>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	d03f      	beq.n	800a528 <_vfiprintf_r+0x22c>
 800a4a8:	4b29      	ldr	r3, [pc, #164]	; (800a550 <_vfiprintf_r+0x254>)
 800a4aa:	bb1b      	cbnz	r3, 800a4f4 <_vfiprintf_r+0x1f8>
 800a4ac:	9b03      	ldr	r3, [sp, #12]
 800a4ae:	3307      	adds	r3, #7
 800a4b0:	f023 0307 	bic.w	r3, r3, #7
 800a4b4:	3308      	adds	r3, #8
 800a4b6:	9303      	str	r3, [sp, #12]
 800a4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ba:	443b      	add	r3, r7
 800a4bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a4be:	e767      	b.n	800a390 <_vfiprintf_r+0x94>
 800a4c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4c4:	460c      	mov	r4, r1
 800a4c6:	2001      	movs	r0, #1
 800a4c8:	e7a5      	b.n	800a416 <_vfiprintf_r+0x11a>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	3401      	adds	r4, #1
 800a4ce:	9305      	str	r3, [sp, #20]
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	f04f 0c0a 	mov.w	ip, #10
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4dc:	3a30      	subs	r2, #48	; 0x30
 800a4de:	2a09      	cmp	r2, #9
 800a4e0:	d903      	bls.n	800a4ea <_vfiprintf_r+0x1ee>
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d0c5      	beq.n	800a472 <_vfiprintf_r+0x176>
 800a4e6:	9105      	str	r1, [sp, #20]
 800a4e8:	e7c3      	b.n	800a472 <_vfiprintf_r+0x176>
 800a4ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e7f0      	b.n	800a4d6 <_vfiprintf_r+0x1da>
 800a4f4:	ab03      	add	r3, sp, #12
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	462a      	mov	r2, r5
 800a4fa:	4b16      	ldr	r3, [pc, #88]	; (800a554 <_vfiprintf_r+0x258>)
 800a4fc:	a904      	add	r1, sp, #16
 800a4fe:	4630      	mov	r0, r6
 800a500:	f7fc fec4 	bl	800728c <_printf_float>
 800a504:	4607      	mov	r7, r0
 800a506:	1c78      	adds	r0, r7, #1
 800a508:	d1d6      	bne.n	800a4b8 <_vfiprintf_r+0x1bc>
 800a50a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a50c:	07d9      	lsls	r1, r3, #31
 800a50e:	d405      	bmi.n	800a51c <_vfiprintf_r+0x220>
 800a510:	89ab      	ldrh	r3, [r5, #12]
 800a512:	059a      	lsls	r2, r3, #22
 800a514:	d402      	bmi.n	800a51c <_vfiprintf_r+0x220>
 800a516:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a518:	f7ff fe5f 	bl	800a1da <__retarget_lock_release_recursive>
 800a51c:	89ab      	ldrh	r3, [r5, #12]
 800a51e:	065b      	lsls	r3, r3, #25
 800a520:	f53f af12 	bmi.w	800a348 <_vfiprintf_r+0x4c>
 800a524:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a526:	e711      	b.n	800a34c <_vfiprintf_r+0x50>
 800a528:	ab03      	add	r3, sp, #12
 800a52a:	9300      	str	r3, [sp, #0]
 800a52c:	462a      	mov	r2, r5
 800a52e:	4b09      	ldr	r3, [pc, #36]	; (800a554 <_vfiprintf_r+0x258>)
 800a530:	a904      	add	r1, sp, #16
 800a532:	4630      	mov	r0, r6
 800a534:	f7fd f94e 	bl	80077d4 <_printf_i>
 800a538:	e7e4      	b.n	800a504 <_vfiprintf_r+0x208>
 800a53a:	bf00      	nop
 800a53c:	0800ad80 	.word	0x0800ad80
 800a540:	0800ada0 	.word	0x0800ada0
 800a544:	0800ad60 	.word	0x0800ad60
 800a548:	0800abf4 	.word	0x0800abf4
 800a54c:	0800abfe 	.word	0x0800abfe
 800a550:	0800728d 	.word	0x0800728d
 800a554:	0800a2d9 	.word	0x0800a2d9
 800a558:	0800abfa 	.word	0x0800abfa

0800a55c <__swbuf_r>:
 800a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55e:	460e      	mov	r6, r1
 800a560:	4614      	mov	r4, r2
 800a562:	4605      	mov	r5, r0
 800a564:	b118      	cbz	r0, 800a56e <__swbuf_r+0x12>
 800a566:	6983      	ldr	r3, [r0, #24]
 800a568:	b90b      	cbnz	r3, 800a56e <__swbuf_r+0x12>
 800a56a:	f7ff fd85 	bl	800a078 <__sinit>
 800a56e:	4b21      	ldr	r3, [pc, #132]	; (800a5f4 <__swbuf_r+0x98>)
 800a570:	429c      	cmp	r4, r3
 800a572:	d12b      	bne.n	800a5cc <__swbuf_r+0x70>
 800a574:	686c      	ldr	r4, [r5, #4]
 800a576:	69a3      	ldr	r3, [r4, #24]
 800a578:	60a3      	str	r3, [r4, #8]
 800a57a:	89a3      	ldrh	r3, [r4, #12]
 800a57c:	071a      	lsls	r2, r3, #28
 800a57e:	d52f      	bpl.n	800a5e0 <__swbuf_r+0x84>
 800a580:	6923      	ldr	r3, [r4, #16]
 800a582:	b36b      	cbz	r3, 800a5e0 <__swbuf_r+0x84>
 800a584:	6923      	ldr	r3, [r4, #16]
 800a586:	6820      	ldr	r0, [r4, #0]
 800a588:	1ac0      	subs	r0, r0, r3
 800a58a:	6963      	ldr	r3, [r4, #20]
 800a58c:	b2f6      	uxtb	r6, r6
 800a58e:	4283      	cmp	r3, r0
 800a590:	4637      	mov	r7, r6
 800a592:	dc04      	bgt.n	800a59e <__swbuf_r+0x42>
 800a594:	4621      	mov	r1, r4
 800a596:	4628      	mov	r0, r5
 800a598:	f7ff fcda 	bl	8009f50 <_fflush_r>
 800a59c:	bb30      	cbnz	r0, 800a5ec <__swbuf_r+0x90>
 800a59e:	68a3      	ldr	r3, [r4, #8]
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	60a3      	str	r3, [r4, #8]
 800a5a4:	6823      	ldr	r3, [r4, #0]
 800a5a6:	1c5a      	adds	r2, r3, #1
 800a5a8:	6022      	str	r2, [r4, #0]
 800a5aa:	701e      	strb	r6, [r3, #0]
 800a5ac:	6963      	ldr	r3, [r4, #20]
 800a5ae:	3001      	adds	r0, #1
 800a5b0:	4283      	cmp	r3, r0
 800a5b2:	d004      	beq.n	800a5be <__swbuf_r+0x62>
 800a5b4:	89a3      	ldrh	r3, [r4, #12]
 800a5b6:	07db      	lsls	r3, r3, #31
 800a5b8:	d506      	bpl.n	800a5c8 <__swbuf_r+0x6c>
 800a5ba:	2e0a      	cmp	r6, #10
 800a5bc:	d104      	bne.n	800a5c8 <__swbuf_r+0x6c>
 800a5be:	4621      	mov	r1, r4
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	f7ff fcc5 	bl	8009f50 <_fflush_r>
 800a5c6:	b988      	cbnz	r0, 800a5ec <__swbuf_r+0x90>
 800a5c8:	4638      	mov	r0, r7
 800a5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5cc:	4b0a      	ldr	r3, [pc, #40]	; (800a5f8 <__swbuf_r+0x9c>)
 800a5ce:	429c      	cmp	r4, r3
 800a5d0:	d101      	bne.n	800a5d6 <__swbuf_r+0x7a>
 800a5d2:	68ac      	ldr	r4, [r5, #8]
 800a5d4:	e7cf      	b.n	800a576 <__swbuf_r+0x1a>
 800a5d6:	4b09      	ldr	r3, [pc, #36]	; (800a5fc <__swbuf_r+0xa0>)
 800a5d8:	429c      	cmp	r4, r3
 800a5da:	bf08      	it	eq
 800a5dc:	68ec      	ldreq	r4, [r5, #12]
 800a5de:	e7ca      	b.n	800a576 <__swbuf_r+0x1a>
 800a5e0:	4621      	mov	r1, r4
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	f000 f81a 	bl	800a61c <__swsetup_r>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	d0cb      	beq.n	800a584 <__swbuf_r+0x28>
 800a5ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a5f0:	e7ea      	b.n	800a5c8 <__swbuf_r+0x6c>
 800a5f2:	bf00      	nop
 800a5f4:	0800ad80 	.word	0x0800ad80
 800a5f8:	0800ada0 	.word	0x0800ada0
 800a5fc:	0800ad60 	.word	0x0800ad60

0800a600 <__ascii_wctomb>:
 800a600:	b149      	cbz	r1, 800a616 <__ascii_wctomb+0x16>
 800a602:	2aff      	cmp	r2, #255	; 0xff
 800a604:	bf85      	ittet	hi
 800a606:	238a      	movhi	r3, #138	; 0x8a
 800a608:	6003      	strhi	r3, [r0, #0]
 800a60a:	700a      	strbls	r2, [r1, #0]
 800a60c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a610:	bf98      	it	ls
 800a612:	2001      	movls	r0, #1
 800a614:	4770      	bx	lr
 800a616:	4608      	mov	r0, r1
 800a618:	4770      	bx	lr
	...

0800a61c <__swsetup_r>:
 800a61c:	4b32      	ldr	r3, [pc, #200]	; (800a6e8 <__swsetup_r+0xcc>)
 800a61e:	b570      	push	{r4, r5, r6, lr}
 800a620:	681d      	ldr	r5, [r3, #0]
 800a622:	4606      	mov	r6, r0
 800a624:	460c      	mov	r4, r1
 800a626:	b125      	cbz	r5, 800a632 <__swsetup_r+0x16>
 800a628:	69ab      	ldr	r3, [r5, #24]
 800a62a:	b913      	cbnz	r3, 800a632 <__swsetup_r+0x16>
 800a62c:	4628      	mov	r0, r5
 800a62e:	f7ff fd23 	bl	800a078 <__sinit>
 800a632:	4b2e      	ldr	r3, [pc, #184]	; (800a6ec <__swsetup_r+0xd0>)
 800a634:	429c      	cmp	r4, r3
 800a636:	d10f      	bne.n	800a658 <__swsetup_r+0x3c>
 800a638:	686c      	ldr	r4, [r5, #4]
 800a63a:	89a3      	ldrh	r3, [r4, #12]
 800a63c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a640:	0719      	lsls	r1, r3, #28
 800a642:	d42c      	bmi.n	800a69e <__swsetup_r+0x82>
 800a644:	06dd      	lsls	r5, r3, #27
 800a646:	d411      	bmi.n	800a66c <__swsetup_r+0x50>
 800a648:	2309      	movs	r3, #9
 800a64a:	6033      	str	r3, [r6, #0]
 800a64c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a650:	81a3      	strh	r3, [r4, #12]
 800a652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a656:	e03e      	b.n	800a6d6 <__swsetup_r+0xba>
 800a658:	4b25      	ldr	r3, [pc, #148]	; (800a6f0 <__swsetup_r+0xd4>)
 800a65a:	429c      	cmp	r4, r3
 800a65c:	d101      	bne.n	800a662 <__swsetup_r+0x46>
 800a65e:	68ac      	ldr	r4, [r5, #8]
 800a660:	e7eb      	b.n	800a63a <__swsetup_r+0x1e>
 800a662:	4b24      	ldr	r3, [pc, #144]	; (800a6f4 <__swsetup_r+0xd8>)
 800a664:	429c      	cmp	r4, r3
 800a666:	bf08      	it	eq
 800a668:	68ec      	ldreq	r4, [r5, #12]
 800a66a:	e7e6      	b.n	800a63a <__swsetup_r+0x1e>
 800a66c:	0758      	lsls	r0, r3, #29
 800a66e:	d512      	bpl.n	800a696 <__swsetup_r+0x7a>
 800a670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a672:	b141      	cbz	r1, 800a686 <__swsetup_r+0x6a>
 800a674:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a678:	4299      	cmp	r1, r3
 800a67a:	d002      	beq.n	800a682 <__swsetup_r+0x66>
 800a67c:	4630      	mov	r0, r6
 800a67e:	f7fe fcd7 	bl	8009030 <_free_r>
 800a682:	2300      	movs	r3, #0
 800a684:	6363      	str	r3, [r4, #52]	; 0x34
 800a686:	89a3      	ldrh	r3, [r4, #12]
 800a688:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a68c:	81a3      	strh	r3, [r4, #12]
 800a68e:	2300      	movs	r3, #0
 800a690:	6063      	str	r3, [r4, #4]
 800a692:	6923      	ldr	r3, [r4, #16]
 800a694:	6023      	str	r3, [r4, #0]
 800a696:	89a3      	ldrh	r3, [r4, #12]
 800a698:	f043 0308 	orr.w	r3, r3, #8
 800a69c:	81a3      	strh	r3, [r4, #12]
 800a69e:	6923      	ldr	r3, [r4, #16]
 800a6a0:	b94b      	cbnz	r3, 800a6b6 <__swsetup_r+0x9a>
 800a6a2:	89a3      	ldrh	r3, [r4, #12]
 800a6a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6ac:	d003      	beq.n	800a6b6 <__swsetup_r+0x9a>
 800a6ae:	4621      	mov	r1, r4
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	f000 f84d 	bl	800a750 <__smakebuf_r>
 800a6b6:	89a0      	ldrh	r0, [r4, #12]
 800a6b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6bc:	f010 0301 	ands.w	r3, r0, #1
 800a6c0:	d00a      	beq.n	800a6d8 <__swsetup_r+0xbc>
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	60a3      	str	r3, [r4, #8]
 800a6c6:	6963      	ldr	r3, [r4, #20]
 800a6c8:	425b      	negs	r3, r3
 800a6ca:	61a3      	str	r3, [r4, #24]
 800a6cc:	6923      	ldr	r3, [r4, #16]
 800a6ce:	b943      	cbnz	r3, 800a6e2 <__swsetup_r+0xc6>
 800a6d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6d4:	d1ba      	bne.n	800a64c <__swsetup_r+0x30>
 800a6d6:	bd70      	pop	{r4, r5, r6, pc}
 800a6d8:	0781      	lsls	r1, r0, #30
 800a6da:	bf58      	it	pl
 800a6dc:	6963      	ldrpl	r3, [r4, #20]
 800a6de:	60a3      	str	r3, [r4, #8]
 800a6e0:	e7f4      	b.n	800a6cc <__swsetup_r+0xb0>
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	e7f7      	b.n	800a6d6 <__swsetup_r+0xba>
 800a6e6:	bf00      	nop
 800a6e8:	2000000c 	.word	0x2000000c
 800a6ec:	0800ad80 	.word	0x0800ad80
 800a6f0:	0800ada0 	.word	0x0800ada0
 800a6f4:	0800ad60 	.word	0x0800ad60

0800a6f8 <abort>:
 800a6f8:	b508      	push	{r3, lr}
 800a6fa:	2006      	movs	r0, #6
 800a6fc:	f000 f898 	bl	800a830 <raise>
 800a700:	2001      	movs	r0, #1
 800a702:	f7f7 fe27 	bl	8002354 <_exit>

0800a706 <__swhatbuf_r>:
 800a706:	b570      	push	{r4, r5, r6, lr}
 800a708:	460e      	mov	r6, r1
 800a70a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a70e:	2900      	cmp	r1, #0
 800a710:	b096      	sub	sp, #88	; 0x58
 800a712:	4614      	mov	r4, r2
 800a714:	461d      	mov	r5, r3
 800a716:	da08      	bge.n	800a72a <__swhatbuf_r+0x24>
 800a718:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	602a      	str	r2, [r5, #0]
 800a720:	061a      	lsls	r2, r3, #24
 800a722:	d410      	bmi.n	800a746 <__swhatbuf_r+0x40>
 800a724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a728:	e00e      	b.n	800a748 <__swhatbuf_r+0x42>
 800a72a:	466a      	mov	r2, sp
 800a72c:	f000 f89c 	bl	800a868 <_fstat_r>
 800a730:	2800      	cmp	r0, #0
 800a732:	dbf1      	blt.n	800a718 <__swhatbuf_r+0x12>
 800a734:	9a01      	ldr	r2, [sp, #4]
 800a736:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a73a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a73e:	425a      	negs	r2, r3
 800a740:	415a      	adcs	r2, r3
 800a742:	602a      	str	r2, [r5, #0]
 800a744:	e7ee      	b.n	800a724 <__swhatbuf_r+0x1e>
 800a746:	2340      	movs	r3, #64	; 0x40
 800a748:	2000      	movs	r0, #0
 800a74a:	6023      	str	r3, [r4, #0]
 800a74c:	b016      	add	sp, #88	; 0x58
 800a74e:	bd70      	pop	{r4, r5, r6, pc}

0800a750 <__smakebuf_r>:
 800a750:	898b      	ldrh	r3, [r1, #12]
 800a752:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a754:	079d      	lsls	r5, r3, #30
 800a756:	4606      	mov	r6, r0
 800a758:	460c      	mov	r4, r1
 800a75a:	d507      	bpl.n	800a76c <__smakebuf_r+0x1c>
 800a75c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	6123      	str	r3, [r4, #16]
 800a764:	2301      	movs	r3, #1
 800a766:	6163      	str	r3, [r4, #20]
 800a768:	b002      	add	sp, #8
 800a76a:	bd70      	pop	{r4, r5, r6, pc}
 800a76c:	ab01      	add	r3, sp, #4
 800a76e:	466a      	mov	r2, sp
 800a770:	f7ff ffc9 	bl	800a706 <__swhatbuf_r>
 800a774:	9900      	ldr	r1, [sp, #0]
 800a776:	4605      	mov	r5, r0
 800a778:	4630      	mov	r0, r6
 800a77a:	f7fe fcc5 	bl	8009108 <_malloc_r>
 800a77e:	b948      	cbnz	r0, 800a794 <__smakebuf_r+0x44>
 800a780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a784:	059a      	lsls	r2, r3, #22
 800a786:	d4ef      	bmi.n	800a768 <__smakebuf_r+0x18>
 800a788:	f023 0303 	bic.w	r3, r3, #3
 800a78c:	f043 0302 	orr.w	r3, r3, #2
 800a790:	81a3      	strh	r3, [r4, #12]
 800a792:	e7e3      	b.n	800a75c <__smakebuf_r+0xc>
 800a794:	4b0d      	ldr	r3, [pc, #52]	; (800a7cc <__smakebuf_r+0x7c>)
 800a796:	62b3      	str	r3, [r6, #40]	; 0x28
 800a798:	89a3      	ldrh	r3, [r4, #12]
 800a79a:	6020      	str	r0, [r4, #0]
 800a79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7a0:	81a3      	strh	r3, [r4, #12]
 800a7a2:	9b00      	ldr	r3, [sp, #0]
 800a7a4:	6163      	str	r3, [r4, #20]
 800a7a6:	9b01      	ldr	r3, [sp, #4]
 800a7a8:	6120      	str	r0, [r4, #16]
 800a7aa:	b15b      	cbz	r3, 800a7c4 <__smakebuf_r+0x74>
 800a7ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f000 f86b 	bl	800a88c <_isatty_r>
 800a7b6:	b128      	cbz	r0, 800a7c4 <__smakebuf_r+0x74>
 800a7b8:	89a3      	ldrh	r3, [r4, #12]
 800a7ba:	f023 0303 	bic.w	r3, r3, #3
 800a7be:	f043 0301 	orr.w	r3, r3, #1
 800a7c2:	81a3      	strh	r3, [r4, #12]
 800a7c4:	89a0      	ldrh	r0, [r4, #12]
 800a7c6:	4305      	orrs	r5, r0
 800a7c8:	81a5      	strh	r5, [r4, #12]
 800a7ca:	e7cd      	b.n	800a768 <__smakebuf_r+0x18>
 800a7cc:	0800a011 	.word	0x0800a011

0800a7d0 <_malloc_usable_size_r>:
 800a7d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7d4:	1f18      	subs	r0, r3, #4
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	bfbc      	itt	lt
 800a7da:	580b      	ldrlt	r3, [r1, r0]
 800a7dc:	18c0      	addlt	r0, r0, r3
 800a7de:	4770      	bx	lr

0800a7e0 <_raise_r>:
 800a7e0:	291f      	cmp	r1, #31
 800a7e2:	b538      	push	{r3, r4, r5, lr}
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	460d      	mov	r5, r1
 800a7e8:	d904      	bls.n	800a7f4 <_raise_r+0x14>
 800a7ea:	2316      	movs	r3, #22
 800a7ec:	6003      	str	r3, [r0, #0]
 800a7ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7f2:	bd38      	pop	{r3, r4, r5, pc}
 800a7f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a7f6:	b112      	cbz	r2, 800a7fe <_raise_r+0x1e>
 800a7f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7fc:	b94b      	cbnz	r3, 800a812 <_raise_r+0x32>
 800a7fe:	4620      	mov	r0, r4
 800a800:	f000 f830 	bl	800a864 <_getpid_r>
 800a804:	462a      	mov	r2, r5
 800a806:	4601      	mov	r1, r0
 800a808:	4620      	mov	r0, r4
 800a80a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a80e:	f000 b817 	b.w	800a840 <_kill_r>
 800a812:	2b01      	cmp	r3, #1
 800a814:	d00a      	beq.n	800a82c <_raise_r+0x4c>
 800a816:	1c59      	adds	r1, r3, #1
 800a818:	d103      	bne.n	800a822 <_raise_r+0x42>
 800a81a:	2316      	movs	r3, #22
 800a81c:	6003      	str	r3, [r0, #0]
 800a81e:	2001      	movs	r0, #1
 800a820:	e7e7      	b.n	800a7f2 <_raise_r+0x12>
 800a822:	2400      	movs	r4, #0
 800a824:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a828:	4628      	mov	r0, r5
 800a82a:	4798      	blx	r3
 800a82c:	2000      	movs	r0, #0
 800a82e:	e7e0      	b.n	800a7f2 <_raise_r+0x12>

0800a830 <raise>:
 800a830:	4b02      	ldr	r3, [pc, #8]	; (800a83c <raise+0xc>)
 800a832:	4601      	mov	r1, r0
 800a834:	6818      	ldr	r0, [r3, #0]
 800a836:	f7ff bfd3 	b.w	800a7e0 <_raise_r>
 800a83a:	bf00      	nop
 800a83c:	2000000c 	.word	0x2000000c

0800a840 <_kill_r>:
 800a840:	b538      	push	{r3, r4, r5, lr}
 800a842:	4d07      	ldr	r5, [pc, #28]	; (800a860 <_kill_r+0x20>)
 800a844:	2300      	movs	r3, #0
 800a846:	4604      	mov	r4, r0
 800a848:	4608      	mov	r0, r1
 800a84a:	4611      	mov	r1, r2
 800a84c:	602b      	str	r3, [r5, #0]
 800a84e:	f7f7 fd71 	bl	8002334 <_kill>
 800a852:	1c43      	adds	r3, r0, #1
 800a854:	d102      	bne.n	800a85c <_kill_r+0x1c>
 800a856:	682b      	ldr	r3, [r5, #0]
 800a858:	b103      	cbz	r3, 800a85c <_kill_r+0x1c>
 800a85a:	6023      	str	r3, [r4, #0]
 800a85c:	bd38      	pop	{r3, r4, r5, pc}
 800a85e:	bf00      	nop
 800a860:	20000590 	.word	0x20000590

0800a864 <_getpid_r>:
 800a864:	f7f7 bd5e 	b.w	8002324 <_getpid>

0800a868 <_fstat_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	4d07      	ldr	r5, [pc, #28]	; (800a888 <_fstat_r+0x20>)
 800a86c:	2300      	movs	r3, #0
 800a86e:	4604      	mov	r4, r0
 800a870:	4608      	mov	r0, r1
 800a872:	4611      	mov	r1, r2
 800a874:	602b      	str	r3, [r5, #0]
 800a876:	f7f7 fdbc 	bl	80023f2 <_fstat>
 800a87a:	1c43      	adds	r3, r0, #1
 800a87c:	d102      	bne.n	800a884 <_fstat_r+0x1c>
 800a87e:	682b      	ldr	r3, [r5, #0]
 800a880:	b103      	cbz	r3, 800a884 <_fstat_r+0x1c>
 800a882:	6023      	str	r3, [r4, #0]
 800a884:	bd38      	pop	{r3, r4, r5, pc}
 800a886:	bf00      	nop
 800a888:	20000590 	.word	0x20000590

0800a88c <_isatty_r>:
 800a88c:	b538      	push	{r3, r4, r5, lr}
 800a88e:	4d06      	ldr	r5, [pc, #24]	; (800a8a8 <_isatty_r+0x1c>)
 800a890:	2300      	movs	r3, #0
 800a892:	4604      	mov	r4, r0
 800a894:	4608      	mov	r0, r1
 800a896:	602b      	str	r3, [r5, #0]
 800a898:	f7f7 fdbb 	bl	8002412 <_isatty>
 800a89c:	1c43      	adds	r3, r0, #1
 800a89e:	d102      	bne.n	800a8a6 <_isatty_r+0x1a>
 800a8a0:	682b      	ldr	r3, [r5, #0]
 800a8a2:	b103      	cbz	r3, 800a8a6 <_isatty_r+0x1a>
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	bd38      	pop	{r3, r4, r5, pc}
 800a8a8:	20000590 	.word	0x20000590

0800a8ac <_init>:
 800a8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ae:	bf00      	nop
 800a8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8b2:	bc08      	pop	{r3}
 800a8b4:	469e      	mov	lr, r3
 800a8b6:	4770      	bx	lr

0800a8b8 <_fini>:
 800a8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ba:	bf00      	nop
 800a8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8be:	bc08      	pop	{r3}
 800a8c0:	469e      	mov	lr, r3
 800a8c2:	4770      	bx	lr
